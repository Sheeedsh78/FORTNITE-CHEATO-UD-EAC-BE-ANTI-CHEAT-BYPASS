// dear imgui, v1.75 WIP
// (widgets code)

/*

Index of this file:

// [SECTION] Forward Declarations
// [SECTION] Widgets: Text, etc.
// [SECTION] Widgets: Main (Button, Image, Checkbox, RadioButton, ProgressBar, Bullet, etc.)
// [SECTION] Widgets: Low-level Layout helpers (Spacing, Dummy, NewLine, Separator, etc.)
// [SECTION] Widgets: ComboBox
// [SECTION] Data Type and Data Formatting Helpers
// [SECTION] Widgets: DragScalar, DragFloat, DragInt, etc.
// [SECTION] Widgets: SliderScalar, SliderFloat, SliderInt, etc.
// [SECTION] Widgets: InputScalar, InputFloat, InputInt, etc.
// [SECTION] Widgets: InputText, InputTextMultiline
// [SECTION] Widgets: ColorEdit, ColorPicker, ColorButton, etc.
// [SECTION] Widgets: TreeNode, CollapsingHeader, etc.
// [SECTION] Widgets: Selectable
// [SECTION] Widgets: ListBox
// [SECTION] Widgets: PlotLines, PlotHistogram
// [SECTION] Widgets: Value helpers
// [SECTION] Widgets: MenuItem, BeginMenu, EndMenu, etc.
// [SECTION] Widgets: BeginTabBar, EndTabBar, etc.
// [SECTION] Widgets: BeginTabItem, EndTabItem, etc.
// [SECTION] Widgets: Columns, BeginColumns, EndColumns, etc.

*/

#if defined(_MSC_VER) && !defined(_CRT_SECURE_NO_WARNINGS)
#define _CRT_SECURE_NO_WARNINGS
#endif

#include "imgui.h"
#ifndef IMGUI_DEFINE_MATH_OPERATORS
#define IMGUI_DEFINE_MATH_OPERATORS
#endif
#include "imgui_internal.h"

#include <ctype.h>      // toupper
#if defined(_MSC_VER) && _MSC_VER <= 1500 // MSVC 2008 or earlier
#include <stddef.h>     // intptr_t
#else
#include <stdint.h>     // intptr_t
#endif

// Visual Studio warnings
#ifdef _MSC_VER
#pragma warning (disable: 4127) // condition expression is constant
#pragma warning (disable: 4996) // 'This function or variable may be unsafe': strcpy, strdup, sprintf, vsnprintf, sscanf, fopen
#endif

// Clang/GCC warnings with -Weverything
#if defined(__clang__)
#pragma clang diagnostic ignored "-Wold-style-cast"         // warning : use of old-style cast                              // yes, they are more terse.
#pragma clang diagnostic ignored "-Wfloat-equal"            // warning : comparing floating point with == or != is unsafe   // storing and comparing against same constants (typically 0.0f) is ok.
#pragma clang diagnostic ignored "-Wformat-nonliteral"      // warning : format string is not a string literal              // passing non-literal to vsnformat(). yes, user passing incorrect format strings can crash the code.
#pragma clang diagnostic ignored "-Wsign-conversion"        // warning : implicit conversion changes signedness             //
#if __has_warning("-Wzero-as-null-pointer-constant")
#pragma clang diagnostic ignored "-Wzero-as-null-pointer-constant"  // warning : zero as null pointer constant              // some standard header variations use #define NULL 0
#endif
#if __has_warning("-Wdouble-promotion")
#pragma clang diagnostic ignored "-Wdouble-promotion"       // warning: implicit conversion from 'float' to 'double' when passing argument to function  // using printf() is a misery with this as C++ va_arg ellipsis changes float to double.
#endif
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wpragmas"                  // warning: unknown option after '#pragma GCC diagnostic' kind
#pragma GCC diagnostic ignored "-Wformat-nonliteral"        // warning: format not a string literal, format string not checked
#pragma GCC diagnostic ignored "-Wclass-memaccess"          // [__GNUC__ >= 8] warning: 'memset/memcpy' clearing/writing an object of type 'xxxx' with no trivial copy-assignment; use assignment or value-initialization instead
#endif

//-------------------------------------------------------------------------
// Data
//-------------------------------------------------------------------------

// Those MIN/MAX values are not define because we need to point to them
static const signed char    IM_S8_MIN  = -128;
static const signed char    IM_S8_MAX  = 127;
static const unsigned char  IM_U8_MIN  = 0;
static const unsigned char  IM_U8_MAX  = 0xFF;
static const signed short   IM_S16_MIN = -32768;
static const signed short   IM_S16_MAX = 32767;
static const unsigned short IM_U16_MIN = 0;
static const unsigned short IM_U16_MAX = 0xFFFF;
static const ImS32          IM_S32_MIN = INT_MIN;    // (-2147483647 - 1), (0x80000000);
static const ImS32          IM_S32_MAX = INT_MAX;    // (2147483647), (0x7FFFFFFF)
static const ImU32          IM_U32_MIN = 0;
static const ImU32          IM_U32_MAX = UINT_MAX;   // (0xFFFFFFFF)
#ifdef LLONG_MIN
static const ImS64          IM_S64_MIN = LLONG_MIN;  // (-9223372036854775807ll - 1ll);
static const ImS64          IM_S64_MAX = LLONG_MAX;  // (9223372036854775807ll);
#else
static const ImS64          IM_S64_MIN = -9223372036854775807LL - 1;
static const ImS64          IM_S64_MAX = 9223372036854775807LL;
#endif
static const ImU64          IM_U64_MIN = 0;
#ifdef ULLONG_MAX
static const ImU64          IM_U64_MAX = ULLONG_MAX; // (0xFFFFFFFFFFFFFFFFull);
#else
static const ImU64          IM_U64_MAX = (2ULL * 9223372036854775807LL + 1);
#endif

//-------------------------------------------------------------------------
// [SECTION] Forward Declarations
//-------------------------------------------------------------------------

// For InputTextEx()
static bool             InputTextFilterCharacter(unsigned int* p_char, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* user_data);
static int              InputTextCalcTextLenAndLineCount(const char* text_begin, const char** out_text_end);
static ImVec2           InputTextCalcTextSizeW(const ImWchar* text_begin, const ImWchar* text_end, const ImWchar** remaining = NULL, ImVec2* out_offset = NULL, bool stop_on_new_line = false);

//-------------------------------------------------------------------------
// [SECTION] Widgets: Text, etc.
//-------------------------------------------------------------------------
// - TextEx() [Internal]
// - TextUnformatted()
// - Text()
// - TextV()
// - TextColored()
// - TextColoredV()
// - TextDisabled()
// - TextDisabledV()
// - TextWrapped()
// - TextWrappedV()
// - LabelText()
// - LabelTextV()
// - BulletText()
// - BulletTextV()
//-------------------------------------------------------------------------

void ImGui::TextEx(const char* text, const char* text_end, ImGuiTextFlags flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImGuiContext& g = *GImGui;
    IM_ASSERT(text != NULL);
    const char* text_begin = text;
    if (text_end == NULL)
        text_end = text + strlen(text); // FIXME-OPT

    const ImVec2 text_pos(window->DC.CursorPos.x, window->DC.CursorPos.y + window->DC.CurrLineTextBaseOffset);
    const float wrap_pos_x = window->DC.TextWrapPos;
    const bool wrap_enabled = (wrap_pos_x >= 0.0f);
    if (text_end - text > 2000 && !wrap_enabled)
    {
        // Long text!
        // Perform manual coarse clipping to optimize for long multi-line text
        // - From this point we will only compute the width of lines that are visible. Optimization only available when word-wrapping is disabled.
        // - We also don't vertically center the text within the line full height, which is unlikely to matter because we are likely the biggest and only item on the line.
        // - We use memchr(), pay attention that well optimized versions of those str/mem functions are much faster than a casually written loop.
        const char* line = text;
        const float line_height = GetTextLineHeight();
        ImVec2 text_size(0,0);

        // Lines to skip (can't skip when logging text)
        ImVec2 pos = text_pos;
        if (!g.LogEnabled)
        {
            int lines_skippable = (int)((window->ClipRect.Min.y - text_pos.y) / line_height);
            if (lines_skippable > 0)
            {
                int lines_skipped = 0;
                while (line < text_end && lines_skipped < lines_skippable)
                {
                    const char* line_end = (const char*)memchr(line, '\n', text_end - line);
                    if (!line_end)
                        line_end = text_end;
                    if ((flags & ImGuiTextFlags_NoWidthForLargeClippedText) == 0)
                        text_size.x = ImMax(text_size.x, CalcTextSize(line, line_end).x);
                    line = line_end + 1;
                    lines_skipped++;
                }
                pos.y += lines_skipped * line_height;
            }
        }

        // Lines to render
        if (line < text_end)
        {
            ImRect line_rect(pos, pos + ImVec2(FLT_MAX, line_height));
            while (line < text_end)
            {
                if (IsClippedEx(line_rect, 0, false))
                    break;

                const char* line_end = (const char*)memchr(line, '\n', text_end - line);
                if (!line_end)
                    line_end = text_end;
                text_size.x = ImMax(text_size.x, CalcTextSize(line, line_end).x);
                RenderText(pos, line, line_end, false);
                line = line_end + 1;
                line_rect.Min.y += line_height;
                line_rect.Max.y += line_height;
                pos.y += line_height;
            }

            // Count remaining lines
            int lines_skipped = 0;
            while (line < text_end)
            {
                const char* line_end = (const char*)memchr(line, '\n', text_end - line);
                if (!line_end)
                    line_end = text_end;
                if ((flags & ImGuiTextFlags_NoWidthForLargeClippedText) == 0)
                    text_size.x = ImMax(text_size.x, CalcTextSize(line, line_end).x);
                line = line_end + 1;
                lines_skipped++;
            }
            pos.y += lines_skipped * line_height;
        }
        text_size.y = (pos - text_pos).y;

        ImRect bb(text_pos, text_pos + text_size);
        ItemSize(text_size, 0.0f);
        ItemAdd(bb, 0);
    }
    else
    {
        const float wrap_width = wrap_enabled ? CalcWrapWidthForPos(window->DC.CursorPos, wrap_pos_x) : 0.0f;
        const ImVec2 text_size = CalcTextSize(text_begin, text_end, false, wrap_width);

        ImRect bb(text_pos, text_pos + text_size);
        ItemSize(text_size, 0.0f);
        if (!ItemAdd(bb, 0))
            return;

        // Render (we don't hide text after ## in this end-user function)
        RenderTextWrapped(bb.Min, text_begin, text_end, wrap_width);
    }
}

void ImGui::TextUnformatted(const char* text, const char* text_end)
{
    TextEx(text, text_end, ImGuiTextFlags_NoWidthForLargeClippedText);
}

void ImGui::Text(const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    TextV(fmt, args);
    va_end(args);
}

void ImGui::TextV(const char* fmt, va_list args)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImGuiContext& g = *GImGui;
    const char* text_end = g.TempBuffer + ImFormatStringV(g.TempBuffer, IM_ARRAYSIZE(g.TempBuffer), fmt, args);
    TextEx(g.TempBuffer, text_end, ImGuiTextFlags_NoWidthForLargeClippedText);
}

void ImGui::TextColored(const ImVec4& col, const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    TextColoredV(col, fmt, args);
    va_end(args);
}

void ImGui::TextColoredV(const ImVec4& col, const char* fmt, va_list args)
{
    PushStyleColor(ImGuiCol_Text, col);
    TextV(fmt, args);
    PopStyleColor();
}

void ImGui::TextDisabled(const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    TextDisabledV(fmt, args);
    va_end(args);
}

void ImGui::TextDisabledV(const char* fmt, va_list args)
{
    PushStyleColor(ImGuiCol_Text, GImGui->Style.Colors[ImGuiCol_TextDisabled]);
    TextV(fmt, args);
    PopStyleColor();
}

void ImGui::TextWrapped(const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    TextWrappedV(fmt, args);
    va_end(args);
}

void ImGui::TextWrappedV(const char* fmt, va_list args)
{
    ImGuiWindow* window = GetCurrentWindow();
    bool need_backup = (window->DC.TextWrapPos < 0.0f);  // Keep existing wrap position if one is already set
    if (need_backup)
        PushTextWrapPos(0.0f);
    TextV(fmt, args);
    if (need_backup)
        PopTextWrapPos();
}

void ImGui::LabelText(const char* label, const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    LabelTextV(label, fmt, args);
    va_end(args);
}

// Add a label+text combo aligned to other label+value widgets
void ImGui::LabelTextV(const char* label, const char* fmt, va_list args)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const float w = CalcItemWidth();

    const ImVec2 label_size = CalcTextSize(label, NULL, true);
    const ImRect value_bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(w, label_size.y + style.FramePadding.y*2));
    const ImRect total_bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(w + (label_size.x > 0.0f ? style.ItemInnerSpacing.x : 0.0f), style.FramePadding.y*2) + label_size);
    ItemSize(total_bb, style.FramePadding.y);
    if (!ItemAdd(total_bb, 0))
        return;

    // Render
    const char* value_text_begin = &g.TempBuffer[0];
    const char* value_text_end = value_text_begin + ImFormatStringV(g.TempBuffer, IM_ARRAYSIZE(g.TempBuffer), fmt, args);
    RenderTextClipped(value_bb.Min, value_bb.Max, value_text_begin, value_text_end, NULL, ImVec2(0.0f,0.5f));
    if (label_size.x > 0.0f)
        RenderText(ImVec2(value_bb.Max.x + style.ItemInnerSpacing.x, value_bb.Min.y + style.FramePadding.y), label);
}

void ImGui::BulletText(const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    BulletTextV(fmt, args);
    va_end(args);
}

// Text with a little bullet aligned to the typical tree node.
void ImGui::BulletTextV(const char* fmt, va_list args)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;

    const char* text_begin = g.TempBuffer;
    const char* text_end = text_begin + ImFormatStringV(g.TempBuffer, IM_ARRAYSIZE(g.TempBuffer), fmt, args);
    const ImVec2 label_size = CalcTextSize(text_begin, text_end, false);
    const ImVec2 total_size = ImVec2(g.FontSize + (label_size.x > 0.0f ? (label_size.x + style.FramePadding.x * 2) : 0.0f), label_size.y);  // Empty text doesn't add padding
    ImVec2 pos = window->DC.CursorPos;
    pos.y += window->DC.CurrLineTextBaseOffset;
    ItemSize(total_size, 0.0f);
    const ImRect bb(pos, pos + total_size);
    if (!ItemAdd(bb, 0))
        return;

    // Render
    ImU32 text_col = GetColorU32(ImGuiCol_Text);
    RenderBullet(window->DrawList, bb.Min + ImVec2(style.FramePadding.x + g.FontSize*0.5f, g.FontSize*0.5f), text_col);
    RenderText(bb.Min + ImVec2(g.FontSize + style.FramePadding.x * 2, 0.0f), text_begin, text_end, false);
}

//-------------------------------------------------------------------------
// [SECTION] Widgets: Main
//-------------------------------------------------------------------------
// - ButtonBehavior() [Internal]
// - Button()
// - SmallButton()
// - InvisibleButton()
// - ArrowButton()
// - CloseButton() [Internal]
// - CollapseButton() [Internal]
// - ScrollbarEx() [Internal]
// - Scrollbar() [Internal]
// - Image()
// - ImageButton()
// - Checkbox()
// - CheckboxFlags()
// - RadioButton()
// - ProgressBar()
// - Bullet()
//-------------------------------------------------------------------------

// The ButtonBehavior() function is key to many interactions and used by many/most widgets.
// Because we handle so many cases (keyboard/gamepad navigation, drag and drop) and many specific behavior (via ImGuiButtonFlags_),
// this code is a little complex.
// By far the most common path is interacting with the Mouse using the default ImGuiButtonFlags_PressedOnClickRelease button behavior.
// See the series of events below and the corresponding state reported by dear imgui:
//------------------------------------------------------------------------------------------------------------------------------------------------
// with PressedOnClickRelease:             return-value  IsItemHovered()  IsItemActive()  IsItemActivated()  IsItemDeactivated()  IsItemClicked()
//   Frame N+0 (mouse is outside bb)        -             -                -               -                  -                    -
//   Frame N+1 (mouse moves inside bb)      -             true             -               -                  -                    -
//   Frame N+2 (mouse button is down)       -             true             true            true               -                    true
//   Frame N+3 (mouse button is down)       -             true             true            -                  -                    -
//   Frame N+4 (mouse moves outside bb)     -             -                true            -                  -                    -
//   Frame N+5 (mouse moves inside bb)      -             true             true            -                  -                    -
//   Frame N+6 (mouse button is released)   true          true             -               -                  true                 -
//   Frame N+7 (mouse button is released)   -             true             -               -                  -                    -
//   Frame N+8 (mouse moves outside bb)     -             -                -               -                  -                    -
//------------------------------------------------------------------------------------------------------------------------------------------------
// with PressedOnClick:                    return-value  IsItemHovered()  IsItemActive()  IsItemActivated()  IsItemDeactivated()  IsItemClicked()
//   Frame N+2 (mouse button is down)       true          true             true            true               -                    true
//   Frame N+3 (mouse button is down)       -             true             true            -                  -                    -
//   Frame N+6 (mouse button is released)   -             true             -               -                  true                 -
//   Frame N+7 (mouse button is released)   -             true             -               -                  -                    -
//------------------------------------------------------------------------------------------------------------------------------------------------
// with PressedOnRelease:                  return-value  IsItemHovered()  IsItemActive()  IsItemActivated()  IsItemDeactivated()  IsItemClicked()
//   Frame N+2 (mouse button is down)       -             true             -               -                  -                    true
//   Frame N+3 (mouse button is down)       -             true             -               -                  -                    -
//   Frame N+6 (mouse button is released)   true          true             -               -                  -                    -
//   Frame N+7 (mouse button is released)   -             true             -               -                  -                    -
//------------------------------------------------------------------------------------------------------------------------------------------------
// with PressedOnDoubleClick:              return-value  IsItemHovered()  IsItemActive()  IsItemActivated()  IsItemDeactivated()  IsItemClicked()
//   Frame N+0 (mouse button is down)       -             true             -               -                  -                    true
//   Frame N+1 (mouse button is down)       -             true             -               -                  -                    -
//   Frame N+2 (mouse button is released)   -             true             -               -                  -                    -
//   Frame N+3 (mouse button is released)   -             true             -               -                  -                    -
//   Frame N+4 (mouse button is down)       true          true             true            true               -                    true
//   Frame N+5 (mouse button is down)       -             true             true            -                  -                    -
//   Frame N+6 (mouse button is released)   -             true             -               -                  true                 -
//   Frame N+7 (mouse button is released)   -             true             -               -                  -                    -
//------------------------------------------------------------------------------------------------------------------------------------------------
// Note that some combinations are supported,
// - PressedOnDragDropHold can generally be associated with any flag.
// - PressedOnDoubleClick can be associated by PressedOnClickRelease/PressedOnRelease, in which case the second release event won't be reported.
//------------------------------------------------------------------------------------------------------------------------------------------------
// The behavior of the return-value changes when ImGuiButtonFlags_Repeat is set:
//                                         Repeat+                  Repeat+           Repeat+             Repeat+
//                                         PressedOnClickRelease    PressedOnClick    PressedOnRelease    PressedOnDoubleClick
//-------------------------------------------------------------------------------------------------------------------------------------------------
//   Frame N+0 (mouse button is down)       -                        true              -                   true
//   ...                                    -                        -                 -                   -
//   Frame N + RepeatDelay                  true                     true              -                   true
//   ...                                    -                        -                 -                   -
//   Frame N + RepeatDelay + RepeatRate*N   true                     true              -                   true
//-------------------------------------------------------------------------------------------------------------------------------------------------

bool ImGui::ButtonBehavior(const ImRect& bb, ImGuiID id, bool* out_hovered, bool* out_held, ImGuiButtonFlags flags)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindow();

    if (flags & ImGuiButtonFlags_Disabled)
    {
        if (out_hovered) *out_hovered = false;
        if (out_held) *out_held = false;
        if (g.ActiveId == id) ClearActiveID();
        return false;
    }

    // Default behavior requires click+release on same spot
    if ((flags & (ImGuiButtonFlags_PressedOnClickRelease | ImGuiButtonFlags_PressedOnClick | ImGuiButtonFlags_PressedOnRelease | ImGuiButtonFlags_PressedOnDoubleClick)) == 0)
        flags |= ImGuiButtonFlags_PressedOnClickRelease;

    ImGuiWindow* backup_hovered_window = g.HoveredWindow;
    const bool flatten_hovered_children = (flags & ImGuiButtonFlags_FlattenChildren) && g.HoveredRootWindow == window;
    if (flatten_hovered_children)
        g.HoveredWindow = window;

#ifdef IMGUI_ENABLE_TEST_ENGINE
    if (id != 0 && window->DC.LastItemId != id)
        ImGuiTestEngineHook_ItemAdd(&g, bb, id);
#endif

    bool pressed = false;
    bool hovered = ItemHoverable(bb, id);

    // Drag source doesn't report as hovered
    if (hovered && g.DragDropActive && g.DragDropPayload.SourceId == id && !(g.DragDropSourceFlags & ImGuiDragDropFlags_SourceNoDisableHover))
        hovered = false;

    // Special mode for Drag and Drop where holding button pressed for a long time while dragging another item triggers the button
    if (g.DragDropActive && (flags & ImGuiButtonFlags_PressedOnDragDropHold) && !(g.DragDropSourceFlags & ImGuiDragDropFlags_SourceNoHoldToOpenOthers))
        if (IsItemHovered(ImGuiHoveredFlags_AllowWhenBlockedByActiveItem))
        {
            hovered = true;
            SetHoveredID(id);
            if (CalcTypematicRepeatAmount(g.HoveredIdTimer + 0.0001f - g.IO.DeltaTime, g.HoveredIdTimer + 0.0001f, 0.70f, 0.00f))
            {
                pressed = true;
                FocusWindow(window);
            }
        }

    if (flatten_hovered_children)
        g.HoveredWindow = backup_hovered_window;

    // AllowOverlap mode (rarely used) requires previous frame HoveredId to be null or to match. This allows using patterns where a later submitted widget overlaps a previous one.
    if (hovered && (flags & ImGuiButtonFlags_AllowItemOverlap) && (g.HoveredIdPreviousFrame != id && g.HoveredIdPreviousFrame != 0))
        hovered = false;

    // Mouse
    if (hovered)
    {
        if (!(flags & ImGuiButtonFlags_NoKeyModifiers) || (!g.IO.KeyCtrl && !g.IO.KeyShift && !g.IO.KeyAlt))
        {
            if ((flags & ImGuiButtonFlags_PressedOnClickRelease) && g.IO.MouseClicked[0])
            {
                SetActiveID(id, window);
                if (!(flags & ImGuiButtonFlags_NoNavFocus))
                    SetFocusID(id, window);
                FocusWindow(window);
            }
            if (((flags & ImGuiButtonFlags_PressedOnClick) && g.IO.MouseClicked[0]) || ((flags & ImGuiButtonFlags_PressedOnDoubleClick) && g.IO.MouseDoubleClicked[0]))
            {
                pressed = true;
                if (flags & ImGuiButtonFlags_NoHoldingActiveID)
                    ClearActiveID();
                else
                    SetActiveID(id, window); // Hold on ID
                FocusWindow(window);
            }
            if ((flags & ImGuiButtonFlags_PressedOnRelease) && g.IO.MouseReleased[0])
            {
                if (!((flags & ImGuiButtonFlags_Repeat) && g.IO.MouseDownDurationPrev[0] >= g.IO.KeyRepeatDelay))  // Repeat mode trumps <on release>
                    pressed = true;
                ClearActiveID();
            }

            // 'Repeat' mode acts when held regardless of _PressedOn flags (see table above).
            // Relies on repeat logic of IsMouseClicked() but we may as well do it ourselves if we end up exposing finer RepeatDelay/RepeatRate settings.
            if ((flags & ImGuiButtonFlags_Repeat) && g.ActiveId == id && g.IO.MouseDownDuration[0] > 0.0f && IsMouseClicked(0, true))
                pressed = true;
        }

        if (pressed)
            g.NavDisableHighlight = true;
    }

    // Gamepad/Keyboard navigation
    // We report navigated item as hovered but we don't set g.HoveredId to not interfere with mouse.
    if (g.NavId == id && !g.NavDisableHighlight && g.NavDisableMouseHover && (g.ActiveId == 0 || g.ActiveId == id || g.ActiveId == window->MoveId))
        if (!(flags & ImGuiButtonFlags_NoHoveredOnNav))
            hovered = true;

    if (g.NavActivateDownId == id)
    {
        bool nav_activated_by_code = (g.NavActivateId == id);
        bool nav_activated_by_inputs = IsNavInputTest(ImGuiNavInput_Activate, (flags & ImGuiButtonFlags_Repeat) ? ImGuiInputReadMode_Repeat : ImGuiInputReadMode_Pressed);
        if (nav_activated_by_code || nav_activated_by_inputs)
            pressed = true;
        if (nav_activated_by_code || nav_activated_by_inputs || g.ActiveId == id)
        {
            // Set active id so it can be queried by user via IsItemActive(), equivalent of holding the mouse button.
            g.NavActivateId = id; // This is so SetActiveId assign a Nav source
            SetActiveID(id, window);
            if ((nav_activated_by_code || nav_activated_by_inputs) && !(flags & ImGuiButtonFlags_NoNavFocus))
                SetFocusID(id, window);
        }
    }

    bool held = false;
    if (g.ActiveId == id)
    {
        if (pressed)
            g.ActiveIdHasBeenPressedBefore = true;
        if (g.ActiveIdSource == ImGuiInputSource_Mouse)
        {
            if (g.ActiveIdIsJustActivated)
                g.ActiveIdClickOffset = g.IO.MousePos - bb.Min;
            if (g.IO.MouseDown[0])
            {
                held = true;
            }
            else
            {
                if (hovered && (flags & ImGuiButtonFlags_PressedOnClickRelease) && !g.DragDropActive)
                {
                    bool is_double_click_release = (flags & ImGuiButtonFlags_PressedOnDoubleClick) && g.IO.MouseDownWasDoubleClick[0];
                    bool is_repeating_already = (flags & ImGuiButtonFlags_Repeat) && g.IO.MouseDownDurationPrev[0] >= g.IO.KeyRepeatDelay; // Repeat mode trumps <on release>
                    if (!is_double_click_release && !is_repeating_already)
                        pressed = true;
                }
                ClearActiveID();
            }
            if (!(flags & ImGuiButtonFlags_NoNavFocus))
                g.NavDisableHighlight = true;
        }
        else if (g.ActiveIdSource == ImGuiInputSource_Nav)
        {
            if (g.NavActivateDownId != id)
                ClearActiveID();
        }
    }

    if (out_hovered) *out_hovered = hovered;
    if (out_held) *out_held = held;

    return pressed;
}

bool ImGui::ButtonEx(const char* label, const ImVec2& size_arg, ImGuiButtonFlags flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const ImGuiID id = window->GetID(label);
    const ImVec2 label_size = CalcTextSize(label, NULL, true);

    ImVec2 pos = window->DC.CursorPos;
    if ((flags & ImGuiButtonFlags_AlignTextBaseLine) && style.FramePadding.y < window->DC.CurrLineTextBaseOffset) // Try to vertically align buttons that are smaller/have no padding so that text baseline matches (bit hacky, since it shouldn't be a flag)
        pos.y += window->DC.CurrLineTextBaseOffset - style.FramePadding.y;
    ImVec2 size = CalcItemSize(size_arg, label_size.x + style.FramePadding.x * 2.0f, label_size.y + style.FramePadding.y * 2.0f);

    const ImRect bb(pos, pos + size);
    ItemSize(size, style.FramePadding.y);
    if (!ItemAdd(bb, id))
        return false;

    if (window->DC.ItemFlags & ImGuiItemFlags_ButtonRepeat)
        flags |= ImGuiButtonFlags_Repeat;
    bool hovered, held;
    bool pressed = ButtonBehavior(bb, id, &hovered, &held, flags);

    // Render
    const ImU32 col = GetColorU32((held && hovered) ? ImGuiCol_ButtonActive : hovered ? ImGuiCol_ButtonHovered : ImGuiCol_Button);
    RenderNavHighlight(bb, id);
    RenderFrame(bb.Min, bb.Max, col, true, style.FrameRounding);
    RenderTextClipped(bb.Min + style.FramePadding, bb.Max - style.FramePadding, label, NULL, &label_size, style.ButtonTextAlign, &bb);

    // Automatically close popups
    //if (pressed && !(flags & ImGuiButtonFlags_DontClosePopups) && (window->Flags & ImGuiWindowFlags_Popup))
    //    CloseCurrentPopup();

    IMGUI_TEST_ENGINE_ITEM_INFO(id, label, window->DC.LastItemStatusFlags);
    return pressed;
}

bool ImGui::Button(const char* label, const ImVec2& size_arg)
{
    return ButtonEx(label, size_arg, 0);
}

// Small buttons fits within text without additional vertical spacing.
bool ImGui::SmallButton(const char* label)
{
    ImGuiContext& g = *GImGui;
    float backup_padding_y = g.Style.FramePadding.y;
    g.Style.FramePadding.y = 0.0f;
    bool pressed = ButtonEx(label, ImVec2(0, 0), ImGuiButtonFlags_AlignTextBaseLine);
    g.Style.FramePadding.y = backup_padding_y;
    return pressed;
}

// Tip: use ImGui::PushID()/PopID() to push indices or pointers in the ID stack.
// Then you can keep 'str_id' empty or the same for all your buttons (instead of creating a string based on a non-string id)
bool ImGui::InvisibleButton(const char* str_id, const ImVec2& size_arg)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    // Cannot use zero-size for InvisibleButton(). Unlike Button() there is not way to fallback using the label size.
    IM_ASSERT(size_arg.x != 0.0f && size_arg.y != 0.0f);

    const ImGuiID id = window->GetID(str_id);
    ImVec2 size = CalcItemSize(size_arg, 0.0f, 0.0f);
    const ImRect bb(window->DC.CursorPos, window->DC.CursorPos + size);
    ItemSize(size);
    if (!ItemAdd(bb, id))
        return false;

    bool hovered, held;
    bool pressed = ButtonBehavior(bb, id, &hovered, &held);

    return pressed;
}

bool ImGui::ArrowButtonEx(const char* str_id, ImGuiDir dir, ImVec2 size, ImGuiButtonFlags flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiID id = window->GetID(str_id);
    const ImRect bb(window->DC.CursorPos, window->DC.CursorPos + size);
    const float default_size = GetFrameHeight();
    ItemSize(size, (size.y >= default_size) ? g.Style.FramePadding.y : -1.0f);
    if (!ItemAdd(bb, id))
        return false;

    if (window->DC.ItemFlags & ImGuiItemFlags_ButtonRepeat)
        flags |= ImGuiButtonFlags_Repeat;

    bool hovered, held;
    bool pressed = ButtonBehavior(bb, id, &hovered, &held, flags);

    // Render
    const ImU32 bg_col = GetColorU32((held && hovered) ? ImGuiCol_ButtonActive : hovered ? ImGuiCol_ButtonHovered : ImGuiCol_Button);
    const ImU32 text_col = GetColorU32(ImGuiCol_Text);
    RenderNavHighlight(bb, id);
    RenderFrame(bb.Min, bb.Max, bg_col, true, g.Style.FrameRounding);
    RenderArrow(window->DrawList, bb.Min + ImVec2(ImMax(0.0f, (size.x - g.FontSize) * 0.5f), ImMax(0.0f, (size.y - g.FontSize) * 0.5f)), text_col, dir);

    return pressed;
}

bool ImGui::ArrowButton(const char* str_id, ImGuiDir dir)
{
    float sz = GetFrameHeight();
    return ArrowButtonEx(str_id, dir, ImVec2(sz, sz), 0);
}

// Button to close a window
bool ImGui::CloseButton(ImGuiID id, const ImVec2& pos)//, float size)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;

    // We intentionally allow interaction when clipped so that a mechanical Alt,Right,Validate sequence close a window.
    // (this isn't the regular behavior of buttons, but it doesn't affect the user much because navigation tends to keep items visible).
    const ImRect bb(pos, pos + ImVec2(g.FontSize, g.FontSize) + g.Style.FramePadding * 2.0f);
    bool is_clipped = !ItemAdd(bb, id);

    bool hovered, held;
    bool pressed = ButtonBehavior(bb, id, &hovered, &held);
    if (is_clipped)
        return pressed;

    // Render
    ImU32 col = GetColorU32(held ? ImGuiCol_ButtonActive : ImGuiCol_ButtonHovered);
    ImVec2 center = bb.GetCenter();
    if (hovered)
        window->DrawList->AddCircleFilled(center, ImMax(2.0f, g.FontSize * 0.5f + 1.0f), col, 12);

    float cross_extent = g.FontSize * 0.5f * 0.7071f - 1.0f;
    ImU32 cross_col = GetColorU32(ImGuiCol_Text);
    center -= ImVec2(0.5f, 0.5f);
    window->DrawList->AddLine(center + ImVec2(+cross_extent,+cross_extent), center + ImVec2(-cross_extent,-cross_extent), cross_col, 1.0f);
    window->DrawList->AddLine(center + ImVec2(+cross_extent,-cross_extent), center + ImVec2(-cross_extent,+cross_extent), cross_col, 1.0f);

    return pressed;
}

bool ImGui::CollapseButton(ImGuiID id, const ImVec2& pos)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;

    ImRect bb(pos, pos + ImVec2(g.FontSize, g.FontSize) + g.Style.FramePadding * 2.0f);
    ItemAdd(bb, id);
    bool hovered, held;
    bool pressed = ButtonBehavior(bb, id, &hovered, &held, ImGuiButtonFlags_None);

    // Render
    ImU32 bg_col = GetColorU32((held && hovered) ? ImGuiCol_ButtonActive : hovered ? ImGuiCol_ButtonHovered : ImGuiCol_Button);
    ImU32 text_col = GetColorU32(ImGuiCol_Text);
    ImVec2 center = bb.GetCenter();
    if (hovered || held)
        window->DrawList->AddCircleFilled(center/*+ ImVec2(0.0f, -0.5f)*/, g.FontSize * 0.5f + 1.0f, bg_col, 12);
    RenderArrow(window->DrawList, bb.Min + g.Style.FramePadding, text_col, window->Collapsed ? ImGuiDir_Right : ImGuiDir_Down, 1.0f);

    // Switch to moving the window after mouse is moved beyond the initial drag threshold
    if (IsItemActive() && IsMouseDragging(0))
        StartMouseMovingWindow(window);

    return pressed;
}

ImGuiID ImGui::GetWindowScrollbarID(ImGuiWindow* window, ImGuiAxis axis)
{
    return window->GetIDNoKeepAlive(axis == ImGuiAxis_X ? "#SCROLLX" : "#SCROLLY");
}

// Vertical/Horizontal scrollbar
// The entire piece of code below is rather confusing because:
// - We handle absolute seeking (when first clicking outside the grab) and relative manipulation (afterward or when clicking inside the grab)
// - We store values as normalized ratio and in a form that allows the window content to change while we are holding on a scrollbar
// - We handle both horizontal and vertical scrollbars, which makes the terminology not ideal.
// Still, the code should probably be made simpler..
bool ImGui::ScrollbarEx(const ImRect& bb_frame, ImGuiID id, ImGuiAxis axis, float* p_scroll_v, float size_avail_v, float size_contents_v, ImDrawCornerFlags rounding_corners)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    if (window->SkipItems)
        return false;

    const float bb_frame_width = bb_frame.GetWidth();
    const float bb_frame_height = bb_frame.GetHeight();
    if (bb_frame_width <= 0.0f || bb_frame_height <= 0.0f)
        return false;

    // When we are too small, start hiding and disabling the grab (this reduce visual noise on very small window and facilitate using the resize grab)
    float alpha = 1.0f;
    if ((axis == ImGuiAxis_Y) && bb_frame_height < g.FontSize + g.Style.FramePadding.y * 2.0f)
        alpha = ImSaturate((bb_frame_height - g.FontSize) / (g.Style.FramePadding.y * 2.0f));
    if (alpha <= 0.0f)
        return false;

    const ImGuiStyle& style = g.Style;
    const bool allow_interaction = (alpha >= 1.0f);
    const bool horizontal = (axis == ImGuiAxis_X);

    ImRect bb = bb_frame;
    bb.Expand(ImVec2(-ImClamp(IM_FLOOR((bb_frame_width - 2.0f) * 0.5f), 0.0f, 3.0f), -ImClamp(IM_FLOOR((bb_frame_height - 2.0f) * 0.5f), 0.0f, 3.0f)));

    // V denote the main, longer axis of the scrollbar (= height for a vertical scrollbar)
    const float scrollbar_size_v = horizontal ? bb.GetWidth() : bb.GetHeight();

    // Calculate the height of our grabbable box. It generally represent the amount visible (vs the total scrollable amount)
    // But we maintain a minimum size in pixel to allow for the user to still aim inside.
    IM_ASSERT(ImMax(size_contents_v, size_avail_v) > 0.0f); // Adding this assert to check if the ImMax(XXX,1.0f) is still needed. PLEASE CONTACT ME if this triggers.
    const float win_size_v = ImMax(ImMax(size_contents_v, size_avail_v), 1.0f);
    const float grab_h_pixels = ImClamp(scrollbar_size_v * (size_avail_v / win_size_v), style.GrabMinSize, scrollbar_size_v);
    const float grab_h_norm = grab_h_pixels / scrollbar_size_v;

    // Handle input right away. None of the code of Begin() is relying on scrolling position before calling Scrollbar().
    bool held = false;
    bool hovered = false;
    ButtonBehavior(bb, id, &hovered, &held, ImGuiButtonFlags_NoNavFocus);

    float scroll_max = ImMax(1.0f, size_contents_v - size_avail_v);
    float scroll_ratio = ImSaturate(*p_scroll_v / scroll_max);
    float grab_v_norm = scroll_ratio * (scrollbar_size_v - grab_h_pixels) / scrollbar_size_v;
    if (held && allow_interaction && grab_h_norm < 1.0f)
    {
        float scrollbar_pos_v = horizontal ? bb.Min.x : bb.Min.y;
        float mouse_pos_v = horizontal ? g.IO.MousePos.x : g.IO.MousePos.y;

        // Click position in scrollbar normalized space (0.0f->1.0f)
        const float clicked_v_norm = ImSaturate((mouse_pos_v - scrollbar_pos_v) / scrollbar_size_v);
        SetHoveredID(id);

        bool seek_absolute = false;
        if (g.ActiveIdIsJustActivated)
        {
            // On initial click calculate the distance between mouse and the center of the grab
            seek_absolute = (clicked_v_norm < grab_v_norm || clicked_v_norm > grab_v_norm + grab_h_norm);
            if (seek_absolute)
                g.ScrollbarClickDeltaToGrabCenter = 0.0f;
            else
                g.ScrollbarClickDeltaToGrabCenter = clicked_v_norm - grab_v_norm - grab_h_norm * 0.5f;
        }

        // Apply scroll
        // It is ok to modify Scroll here because we are being called in Begin() after the calculation of ContentSize and before setting up our starting position
        const float scroll_v_norm = ImSaturate((clicked_v_norm - g.ScrollbarClickDeltaToGrabCenter - grab_h_norm * 0.5f) / (1.0f - grab_h_norm));
        *p_scroll_v = IM_ROUND(scroll_v_norm * scroll_max);//(win_size_contents_v - win_size_v));

        // Update values for rendering
        scroll_ratio = ImSaturate(*p_scroll_v / scroll_max);
        grab_v_norm = scroll_ratio * (scrollbar_size_v - grab_h_pixels) / scrollbar_size_v;

        // Update distance to grab now that we have seeked and saturated
        if (seek_absolute)
            g.ScrollbarClickDeltaToGrabCenter = clicked_v_norm - grab_v_norm - grab_h_norm * 0.5f;
    }

    // Render
    window->DrawList->AddRectFilled(bb_frame.Min, bb_frame.Max, GetColorU32(ImGuiCol_ScrollbarBg), window->WindowRounding, rounding_corners);
    const ImU32 grab_col = GetColorU32(held ? ImGuiCol_ScrollbarGrabActive : hovered ? ImGuiCol_ScrollbarGrabHovered : ImGuiCol_ScrollbarGrab, alpha);
    ImRect grab_rect;
    if (horizontal)
        grab_rect = ImRect(ImLerp(bb.Min.x, bb.Max.x, grab_v_norm), bb.Min.y, ImLerp(bb.Min.x, bb.Max.x, grab_v_norm) + grab_h_pixels, bb.Max.y);
    else
        grab_rect = ImRect(bb.Min.x, ImLerp(bb.Min.y, bb.Max.y, grab_v_norm), bb.Max.x, ImLerp(bb.Min.y, bb.Max.y, grab_v_norm) + grab_h_pixels);
    window->DrawList->AddRectFilled(grab_rect.Min, grab_rect.Max, grab_col, style.ScrollbarRounding);

    return held;
}

void ImGui::Scrollbar(ImGuiAxis axis)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;

    const ImGuiID id = GetWindowScrollbarID(window, axis);
    KeepAliveID(id);

    // Calculate scrollbar bounding box
    const ImRect outer_rect = window->Rect();
    const ImRect inner_rect = window->InnerRect;
    const float border_size = window->WindowBorderSize;
    const float scrollbar_size = window->ScrollbarSizes[axis ^ 1];
    IM_ASSERT(scrollbar_size > 0.0f);
    const float other_scrollbar_size = window->ScrollbarSizes[axis];
    ImDrawCornerFlags rounding_corners = (other_scrollbar_size <= 0.0f) ? ImDrawCornerFlags_BotRight : 0;
    ImRect bb;
    if (axis == ImGuiAxis_X)
    {
        bb.Min = ImVec2(inner_rect.Min.x, ImMax(outer_rect.Min.y, outer_rect.Max.y - border_size - scrollbar_size));
        bb.Max = ImVec2(inner_rect.Max.x, outer_rect.Max.y);
        rounding_corners |= ImDrawCornerFlags_BotLeft;
    }
    else
    {
        bb.Min = ImVec2(ImMax(outer_rect.Min.x, outer_rect.Max.x - border_size - scrollbar_size), inner_rect.Min.y);
        bb.Max = ImVec2(outer_rect.Max.x, window->InnerRect.Max.y);
        rounding_corners |= ((window->Flags & ImGuiWindowFlags_NoTitleBar) && !(window->Flags & ImGuiWindowFlags_MenuBar)) ? ImDrawCornerFlags_TopRight : 0;
    }
    ScrollbarEx(bb, id, axis, &window->Scroll[axis], inner_rect.Max[axis] - inner_rect.Min[axis], window->ContentSize[axis] + window->WindowPadding[axis] * 2.0f, rounding_corners);
}

void ImGui::Image(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0, const ImVec2& uv1, const ImVec4& tint_col, const ImVec4& border_col)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImRect bb(window->DC.CursorPos, window->DC.CursorPos + size);
    if (border_col.w > 0.0f)
        bb.Max += ImVec2(2, 2);
    ItemSize(bb);
    if (!ItemAdd(bb, 0))
        return;

    if (border_col.w > 0.0f)
    {
        window->DrawList->AddRect(bb.Min, bb.Max, GetColorU32(border_col), 0.0f);
        window->DrawList->AddImage(user_texture_id, bb.Min + ImVec2(1, 1), bb.Max - ImVec2(1, 1), uv0, uv1, GetColorU32(tint_col));
    }
    else
    {
        window->DrawList->AddImage(user_texture_id, bb.Min, bb.Max, uv0, uv1, GetColorU32(tint_col));
    }
}

// frame_padding < 0: uses FramePadding from style (default)
// frame_padding = 0: no framing
// frame_padding > 0: set framing size
// The color used are the button colors.
bool ImGui::ImageButton(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0, const ImVec2& uv1, int frame_padding, const ImVec4& bg_col, const ImVec4& tint_col)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;

    // Default to using texture ID as ID. User can still push string/integer prefixes.
    // We could hash the size/uv to create a unique ID but that would prevent the user from animating UV.
    PushID((void*)(intptr_t)user_texture_id);
    const ImGuiID id = window->GetID("#image");
    PopID();

    const ImVec2 padding = (frame_padding >= 0) ? ImVec2((float)frame_padding, (float)frame_padding) : style.FramePadding;
    const ImRect bb(window->DC.CursorPos, window->DC.CursorPos + size + padding * 2);
    const ImRect image_bb(window->DC.CursorPos + padding, window->DC.CursorPos + padding + size);
    ItemSize(bb);
    if (!ItemAdd(bb, id))
        return false;

    bool hovered, held;
    bool pressed = ButtonBehavior(bb, id, &hovered, &held);

    // Render
    const ImU32 col = GetColorU32((held && hovered) ? ImGuiCol_ButtonActive : hovered ? ImGuiCol_ButtonHovered : ImGuiCol_Button);
    RenderNavHighlight(bb, id);
    RenderFrame(bb.Min, bb.Max, col, true, ImClamp((float)ImMin(padding.x, padding.y), 0.0f, style.FrameRounding));
    if (bg_col.w > 0.0f)
        window->DrawList->AddRectFilled(image_bb.Min, image_bb.Max, GetColorU32(bg_col));
    window->DrawList->AddImage(user_texture_id, image_bb.Min, image_bb.Max, uv0, uv1, GetColorU32(tint_col));

    return pressed;
}

bool ImGui::Checkbox(const char* label, bool* v)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const ImGuiID id = window->GetID(label);
    const ImVec2 label_size = CalcTextSize(label, NULL, true);

    const float square_sz = GetFrameHeight();
    const ImVec2 pos = window->DC.CursorPos;
    const ImRect total_bb(pos, pos + ImVec2(square_sz + (label_size.x > 0.0f ? style.ItemInnerSpacing.x + label_size.x : 0.0f), label_size.y + style.FramePadding.y * 2.0f));
    ItemSize(total_bb, style.FramePadding.y);
    if (!ItemAdd(total_bb, id))
        return false;

    bool hovered, held;
    bool pressed = ButtonBehavior(total_bb, id, &hovered, &held);
    if (pressed)
    {
        *v = !(*v);
        MarkItemEdited(id);
    }

    const ImRect check_bb(pos, pos + ImVec2(square_sz, square_sz));
    RenderNavHighlight(total_bb, id);
    RenderFrame(check_bb.Min, check_bb.Max, GetColorU32((held && hovered) ? ImGuiCol_FrameBgActive : hovered ? ImGuiCol_FrameBgHovered : ImGuiCol_FrameBg), true, style.FrameRounding);
    ImU32 check_col = GetColorU32(ImGuiCol_CheckMark);
    if (window->DC.ItemFlags & ImGuiItemFlags_MixedValue)
    {
        // Undocumented tristate/mixed/indeterminate checkbox (#2644)
        ImVec2 pad(ImMax(1.0f, IM_FLOOR(square_sz / 3.6f)), ImMax(1.0f, IM_FLOOR(square_sz / 3.6f)));
        window->DrawList->AddRectFilled(check_bb.Min + pad, check_bb.Max - pad, check_col, style.FrameRounding);
    }
    else if (*v)
    {
        const float pad = ImMax(1.0f, IM_FLOOR(square_sz / 6.0f));
        RenderCheckMark(check_bb.Min + ImVec2(pad, pad), check_col, square_sz - pad*2.0f);
    }

    if (g.LogEnabled)
        LogRenderedText(&total_bb.Min, *v ? "[x]" : "[ ]");
    if (label_size.x > 0.0f)
        RenderText(ImVec2(check_bb.Max.x + style.ItemInnerSpacing.x, check_bb.Min.y + style.FramePadding.y), label);

    IMGUI_TEST_ENGINE_ITEM_INFO(id, label, window->DC.ItemFlags | ImGuiItemStatusFlags_Checkable | (*v ? ImGuiItemStatusFlags_Checked : 0));
    return pressed;
}

bool ImGui::CheckboxFlags(const char* label, unsigned int* flags, unsigned int flags_value)
{
    bool v = ((*flags & flags_value) == flags_value);
    bool pressed = Checkbox(label, &v);
    if (pressed)
    {
        if (v)
            *flags |= flags_value;
        else
            *flags &= ~flags_value;
    }

    return pressed;
}

bool ImGui::RadioButton(const char* label, bool active)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const ImGuiID id = window->GetID(label);
    const ImVec2 label_size = CalcTextSize(label, NULL, true);

    const float square_sz = GetFrameHeight();
    const ImVec2 pos = window->DC.CursorPos;
    const ImRect check_bb(pos, pos + ImVec2(square_sz, square_sz));
    const ImRect total_bb(pos, pos + ImVec2(square_sz + (label_size.x > 0.0f ? style.ItemInnerSpacing.x + label_size.x : 0.0f), label_size.y + style.FramePadding.y * 2.0f));
    ItemSize(total_bb, style.FramePadding.y);
    if (!ItemAdd(total_bb, id))
        return false;

    ImVec2 center = check_bb.GetCenter();
    center.x = IM_ROUND(center.x);
    center.y = IM_ROUND(center.y);
    const float radius = (square_sz - 1.0f) * 0.5f;

    bool hovered, held;
    bool pressed = ButtonBehavior(total_bb, id, &hovered, &held);
    if (pressed)
        MarkItemEdited(id);

    RenderNavHighlight(total_bb, id);
    window->DrawList->AddCircleFilled(center, radius, GetColorU32((held && hovered) ? ImGuiCol_FrameBgActive : hovered ? ImGuiCol_FrameBgHovered : ImGuiCol_FrameBg), 16);
    if (active)
    {
        const float pad = ImMax(1.0f, IM_FLOOR(square_sz / 6.0f));
        window->DrawList->AddCircleFilled(center, radius - pad, GetColorU32(ImGuiCol_CheckMark), 16);
    }

    if (style.FrameBorderSize > 0.0f)
    {
        window->DrawList->AddCircle(center + ImVec2(1,1), radius, GetColorU32(ImGuiCol_BorderShadow), 16, style.FrameBorderSize);
        window->DrawList->AddCircle(center, radius, GetColorU32(ImGuiCol_Border), 16, style.FrameBorderSize);
    }

    if (g.LogEnabled)
        LogRenderedText(&total_bb.Min, active ? "(x)" : "( )");
    if (label_size.x > 0.0f)
        RenderText(ImVec2(check_bb.Max.x + style.ItemInnerSpacing.x, check_bb.Min.y + style.FramePadding.y), label);

    return pressed;
}

// FIXME: This would work nicely if it was a public template, e.g. 'template<T> RadioButton(const char* label, T* v, T v_button)', but I'm not sure how we would expose it..
bool ImGui::RadioButton(const char* label, int* v, int v_button)
{
    const bool pressed = RadioButton(label, *v == v_button);
    if (pressed)
        *v = v_button;
    return pressed;
}

// size_arg (for each axis) < 0.0f: align to end, 0.0f: auto, > 0.0f: specified size
void ImGui::ProgressBar(float fraction, const ImVec2& size_arg, const char* overlay)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;

    ImVec2 pos = window->DC.CursorPos;
    ImVec2 size = CalcItemSize(size_arg, CalcItemWidth(), g.FontSize + style.FramePadding.y*2.0f);
    ImRect bb(pos, pos + size);
    ItemSize(size, style.FramePadding.y);
    if (!ItemAdd(bb, 0))
        return;

    // Render
    fraction = ImSaturate(fraction);
    RenderFrame(bb.Min, bb.Max, GetColorU32(ImGuiCol_FrameBg), true, style.FrameRounding);
    bb.Expand(ImVec2(-style.FrameBorderSize, -style.FrameBorderSize));
    const ImVec2 fill_br = ImVec2(ImLerp(bb.Min.x, bb.Max.x, fraction), bb.Max.y);
    RenderRectFilledRangeH(window->DrawList, bb, GetColorU32(ImGuiCol_PlotHistogram), 0.0f, fraction, style.FrameRounding);

    // Default displaying the fraction as percentage string, but user can override it
    char overlay_buf[32];
    if (!overlay)
    {
        ImFormatString(overlay_buf, IM_ARRAYSIZE(overlay_buf), "%.0f%%", fraction*100+0.01f);
        overlay = overlay_buf;
    }

    ImVec2 overlay_size = CalcTextSize(overlay, NULL);
    if (overlay_size.x > 0.0f)
        RenderTextClipped(ImVec2(ImClamp(fill_br.x + style.ItemSpacing.x, bb.Min.x, bb.Max.x - overlay_size.x - style.ItemInnerSpacing.x), bb.Min.y), bb.Max, overlay, NULL, &overlay_size, ImVec2(0.0f,0.5f), &bb);
}

void ImGui::Bullet()
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const float line_height = ImMax(ImMin(window->DC.CurrLineSize.y, g.FontSize + g.Style.FramePadding.y*2), g.FontSize);
    const ImRect bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(g.FontSize, line_height));
    ItemSize(bb);
    if (!ItemAdd(bb, 0))
    {
        SameLine(0, style.FramePadding.x*2);
        return;
    }

    // Render and stay on same line
    ImU32 text_col = GetColorU32(ImGuiCol_Text);
    RenderBullet(window->DrawList, bb.Min + ImVec2(style.FramePadding.x + g.FontSize*0.5f, line_height*0.5f), text_col);
    SameLine(0, style.FramePadding.x * 2.0f);
}

//-------------------------------------------------------------------------
// [SECTION] Widgets: Low-level Layout helpers
//-------------------------------------------------------------------------
// - Spacing()
// - Dummy()
// - NewLine()
// - AlignTextToFramePadding()
// - SeparatorEx() [Internal]
// - Separator()
// - SplitterBehavior() [Internal]
// - ShrinkWidths() [Internal]
//-------------------------------------------------------------------------

void ImGui::Spacing()
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;
    ItemSize(ImVec2(0,0));
}

void ImGui::Dummy(const ImVec2& size)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    const ImRect bb(window->DC.CursorPos, window->DC.CursorPos + size);
    ItemSize(size);
    ItemAdd(bb, 0);
}

void ImGui::NewLine()
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImGuiContext& g = *GImGui;
    const ImGuiLayoutType backup_layout_type = window->DC.LayoutType;
    window->DC.LayoutType = ImGuiLayoutType_Vertical;
    if (window->DC.CurrLineSize.y > 0.0f)     // In the event that we are on a line with items that is smaller that FontSize high, we will preserve its height.
        ItemSize(ImVec2(0,0));
    else
        ItemSize(ImVec2(0.0f, g.FontSize));
    window->DC.LayoutType = backup_layout_type;
}

void ImGui::AlignTextToFramePadding()
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImGuiContext& g = *GImGui;
    window->DC.CurrLineSize.y = ImMax(window->DC.CurrLineSize.y, g.FontSize + g.Style.FramePadding.y * 2);
    window->DC.CurrLineTextBaseOffset = ImMax(window->DC.CurrLineTextBaseOffset, g.Style.FramePadding.y);
}

// Horizontal/vertical separating line
void ImGui::SeparatorEx(ImGuiSeparatorFlags flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImGuiContext& g = *GImGui;
    IM_ASSERT(ImIsPowerOfTwo(flags & (ImGuiSeparatorFlags_Horizontal | ImGuiSeparatorFlags_Vertical)));   // Check that only 1 option is selected

    float thickness_draw = 1.0f;
    float thickness_layout = 0.0f;
    if (flags & ImGuiSeparatorFlags_Vertical)
    {
        // Vertical separator, for menu bars (use current line height). Not exposed because it is misleading and it doesn't have an effect on regular layout.
        float y1 = window->DC.CursorPos.y;
        float y2 = window->DC.CursorPos.y + window->DC.CurrLineSize.y;
        const ImRect bb(ImVec2(window->DC.CursorPos.x, y1), ImVec2(window->DC.CursorPos.x + thickness_draw, y2));
        ItemSize(ImVec2(thickness_layout, 0.0f));
        if (!ItemAdd(bb, 0))
            return;

        // Draw
        window->DrawList->AddLine(ImVec2(bb.Min.x, bb.Min.y), ImVec2(bb.Min.x, bb.Max.y), GetColorU32(ImGuiCol_Separator));
        if (g.LogEnabled)
            LogText(" |");
    }
    else if (flags & ImGuiSeparatorFlags_Horizontal)
    {
        // Horizontal Separator
        float x1 = window->Pos.x;
        float x2 = window->Pos.x + window->Size.x;
        if (!window->DC.GroupStack.empty())
            x1 += window->DC.Indent.x;

        ImGuiColumns* columns = (flags & ImGuiSeparatorFlags_SpanAllColumns) ? window->DC.CurrentColumns : NULL;
        if (columns)
            PushColumnsBackground();

        // We don't provide our width to the layout so that it doesn't get feed back into AutoFit
        const ImRect bb(ImVec2(x1, window->DC.CursorPos.y), ImVec2(x2, window->DC.CursorPos.y + thickness_draw));
        ItemSize(ImVec2(0.0f, thickness_layout));
        if (!ItemAdd(bb, 0))
        {
            if (columns)
            {
                PopColumnsBackground();
                columns->LineMinY = window->DC.CursorPos.y;
            }
            return;
        }

        // Draw
        window->DrawList->AddLine(bb.Min, ImVec2(bb.Max.x, bb.Min.y), GetColorU32(ImGuiCol_Separator));
        if (g.LogEnabled)
            LogRenderedText(&bb.Min, "--------------------------------");

        if (columns)
        {
            PopColumnsBackground();
            columns->LineMinY = window->DC.CursorPos.y;
        }
    }
}

void ImGui::Separator()
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    if (window->SkipItems)
        return;

    // Those flags should eventually be overridable by the user
    ImGuiSeparatorFlags flags = (window->DC.LayoutType == ImGuiLayoutType_Horizontal) ? ImGuiSeparatorFlags_Vertical : ImGuiSeparatorFlags_Horizontal;
    flags |= ImGuiSeparatorFlags_SpanAllColumns;
    SeparatorEx(flags);
}

// Using 'hover_visibility_delay' allows us to hide the highlight and mouse cursor for a short time, which can be convenient to reduce visual noise.
bool ImGui::SplitterBehavior(const ImRect& bb, ImGuiID id, ImGuiAxis axis, float* size1, float* size2, float min_size1, float min_size2, float hover_extend, float hover_visibility_delay)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;

    const ImGuiItemFlags item_flags_backup = window->DC.ItemFlags;
    window->DC.ItemFlags |= ImGuiItemFlags_NoNav | ImGuiItemFlags_NoNavDefaultFocus;
    bool item_add = ItemAdd(bb, id);
    window->DC.ItemFlags = item_flags_backup;
    if (!item_add)
        return false;

    bool hovered, held;
    ImRect bb_interact = bb;
    bb_interact.Expand(axis == ImGuiAxis_Y ? ImVec2(0.0f, hover_extend) : ImVec2(hover_extend, 0.0f));
    ButtonBehavior(bb_interact, id, &hovered, &held, ImGuiButtonFlags_FlattenChildren | ImGuiButtonFlags_AllowItemOverlap);
    if (g.ActiveId != id)
        SetItemAllowOverlap();

    if (held || (g.HoveredId == id && g.HoveredIdPreviousFrame == id && g.HoveredIdTimer >= hover_visibility_delay))
        SetMouseCursor(axis == ImGuiAxis_Y ? ImGuiMouseCursor_ResizeNS : ImGuiMouseCursor_ResizeEW);

    ImRect bb_render = bb;
    if (held)
    {
        ImVec2 mouse_delta_2d = g.IO.MousePos - g.ActiveIdClickOffset - bb_interact.Min;
        float mouse_delta = (axis == ImGuiAxis_Y) ? mouse_delta_2d.y : mouse_delta_2d.x;

        // Minimum pane size
        float size_1_maximum_delta = ImMax(0.0f, *size1 - min_size1);
        float size_2_maximum_delta = ImMax(0.0f, *size2 - min_size2);
        if (mouse_delta < -size_1_maximum_delta)
            mouse_delta = -size_1_maximum_delta;
        if (mouse_delta > size_2_maximum_delta)
            mouse_delta = size_2_maximum_delta;

        // Apply resize
        if (mouse_delta != 0.0f)
        {
            if (mouse_delta < 0.0f)
                IM_ASSERT(*size1 + mouse_delta >= min_size1);
            if (mouse_delta > 0.0f)
                IM_ASSERT(*size2 - mouse_delta >= min_size2);
            *size1 += mouse_delta;
            *size2 -= mouse_delta;
            bb_render.Translate((axis == ImGuiAxis_X) ? ImVec2(mouse_delta, 0.0f) : ImVec2(0.0f, mouse_delta));
            MarkItemEdited(id);
        }
    }

    // Render
    const ImU32 col = GetColorU32(held ? ImGuiCol_SeparatorActive : (hovered && g.HoveredIdTimer >= hover_visibility_delay) ? ImGuiCol_SeparatorHovered : ImGuiCol_Separator);
    window->DrawList->AddRectFilled(bb_render.Min, bb_render.Max, col, 0.0f);

    return held;
}

static int IMGUI_CDECL ShrinkWidthItemComparer(const void* lhs, const void* rhs)
{
    const ImGuiShrinkWidthItem* a = (const ImGuiShrinkWidthItem*)lhs;
    const ImGuiShrinkWidthItem* b = (const ImGuiShrinkWidthItem*)rhs;
    if (int d = (int)(b->Width - a->Width))
        return d;
    return (b->Index - a->Index);
}

// Shrink excess width from a set of item, by removing width from the larger items first.
void ImGui::ShrinkWidths(ImGuiShrinkWidthItem* items, int count, float width_excess)
{
    if (count == 1)
    {
        items[0].Width = ImMax(items[0].Width - width_excess, 1.0f);
        return;
    }
    ImQsort(items, (size_t)count, sizeof(ImGuiShrinkWidthItem), ShrinkWidthItemComparer);
    int count_same_width = 1;
    while (width_excess > 0.0f && count_same_width < count)
    {
        while (count_same_width < count && items[0].Width <= items[count_same_width].Width)
            count_same_width++;
        float max_width_to_remove_per_item = (count_same_width < count) ? (items[0].Width - items[count_same_width].Width) : (items[0].Width - 1.0f);
        float width_to_remove_per_item = ImMin(width_excess / count_same_width, max_width_to_remove_per_item);
        for (int item_n = 0; item_n < count_same_width; item_n++)
            items[item_n].Width -= width_to_remove_per_item;
        width_excess -= width_to_remove_per_item * count_same_width;
    }

    // Round width and redistribute remainder left-to-right (could make it an option of the function?)
    // Ensure that e.g. the right-most tab of a shrunk tab-bar always reaches exactly at the same distance from the right-most edge of the tab bar separator.
    width_excess = 0.0f;
    for (int n = 0; n < count; n++)
    {
        float width_rounded = ImFloor(items[n].Width);
        width_excess += items[n].Width - width_rounded;
        items[n].Width = width_rounded;
    }
    if (width_excess > 0.0f)
        for (int n = 0; n < count; n++)
            if (items[n].Index < (int)(width_excess + 0.01f))
                items[n].Width += 1.0f;
}

//-------------------------------------------------------------------------
// [SECTION] Widgets: ComboBox
//-------------------------------------------------------------------------
// - BeginCombo()
// - EndCombo()
// - Combo()
//-------------------------------------------------------------------------

static float CalcMaxPopupHeightFromItemCount(int items_count)
{
    ImGuiContext& g = *GImGui;
    if (items_count <= 0)
        return FLT_MAX;
    return (g.FontSize + g.Style.ItemSpacing.y) * items_count - g.Style.ItemSpacing.y + (g.Style.WindowPadding.y * 2);
}

bool ImGui::BeginCombo(const char* label, const char* preview_value, ImGuiComboFlags flags)
{
    // Always consume the SetNextWindowSizeConstraint() call in our early return paths
    ImGuiContext& g = *GImGui;
    bool has_window_size_constraint = (g.NextWindowData.Flags & ImGuiNextWindowDataFlags_HasSizeConstraint) != 0;
    g.NextWindowData.Flags &= ~ImGuiNextWindowDataFlags_HasSizeConstraint;

    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    IM_ASSERT((flags & (ImGuiComboFlags_NoArrowButton | ImGuiComboFlags_NoPreview)) != (ImGuiComboFlags_NoArrowButton | ImGuiComboFlags_NoPreview)); // Can't use both flags together

    const ImGuiStyle& style = g.Style;
    const ImGuiID id = window->GetID(label);

    const float arrow_size = (flags & ImGuiComboFlags_NoArrowButton) ? 0.0f : GetFrameHeight();
    const ImVec2 label_size = CalcTextSize(label, NULL, true);
    const float expected_w = CalcItemWidth();
    const float w = (flags & ImGuiComboFlags_NoPreview) ? arrow_size : expected_w;
    const ImRect frame_bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(w, label_size.y + style.FramePadding.y*2.0f));
    const ImRect total_bb(frame_bb.Min, frame_bb.Max + ImVec2(label_size.x > 0.0f ? style.ItemInnerSpacing.x + label_size.x : 0.0f, 0.0f));
    ItemSize(total_bb, style.FramePadding.y);
    if (!ItemAdd(total_bb, id, &frame_bb))
        return false;

    bool hovered, held;
    bool pressed = ButtonBehavior(frame_bb, id, &hovered, &held);
    bool popup_open = IsPopupOpen(id);

    const ImU32 frame_col = GetColorU32(hovered ? ImGuiCol_FrameBgHovered : ImGuiCol_FrameBg);
    const float value_x2 = ImMax(frame_bb.Min.x, frame_bb.Max.x - arrow_size);
    RenderNavHighlight(frame_bb, id);
    if (!(flags & ImGuiComboFlags_NoPreview))
        window->DrawList->AddRectFilled(frame_bb.Min, ImVec2(value_x2, frame_bb.Max.y), frame_col, style.FrameRounding, (flags & ImGuiComboFlags_NoArrowButton) ? ImDrawCornerFlags_All : ImDrawCornerFlags_Left);
    if (!(flags & ImGuiComboFlags_NoArrowButton))
    {
        ImU32 bg_col = GetColorU32((popup_open || hovered) ? ImGuiCol_ButtonHovered : ImGuiCol_Button);
        ImU32 text_col = GetColorU32(ImGuiCol_Text);
        window->DrawList->AddRectFilled(ImVec2(value_x2, frame_bb.Min.y), frame_bb.Max, bg_col, style.FrameRounding, (w <= arrow_size) ? ImDrawCornerFlags_All : ImDrawCornerFlags_Right);
        if (value_x2 + arrow_size - style.FramePadding.x <= frame_bb.Max.x)
            RenderArrow(window->DrawList, ImVec2(value_x2 + style.FramePadding.y, frame_bb.Min.y + style.FramePadding.y), text_col, ImGuiDir_Down, 1.0f);
    }
    RenderFrameBorder(frame_bb.Min, frame_bb.Max, style.FrameRounding);
    if (preview_value != NULL && !(flags & ImGuiComboFlags_NoPreview))
        RenderTextClipped(frame_bb.Min + style.FramePadding, ImVec2(value_x2, frame_bb.Max.y), preview_value, NULL, NULL, ImVec2(0.0f,0.0f));
    if (label_size.x > 0)
        RenderText(ImVec2(frame_bb.Max.x + style.ItemInnerSpacing.x, frame_bb.Min.y + style.FramePadding.y), label);

    if ((pressed || g.NavActivateId == id) && !popup_open)
    {
        if (window->DC.NavLayerCurrent == 0)
            window->NavLastIds[0] = id;
        OpenPopupEx(id);
        popup_open = true;
    }

    if (!popup_open)
        return false;

    if (has_window_size_constraint)
    {
        g.NextWindowData.Flags |= ImGuiNextWindowDataFlags_HasSizeConstraint;
        g.NextWindowData.SizeConstraintRect.Min.x = ImMax(g.NextWindowData.SizeConstraintRect.Min.x, w);
    }
    else
    {
        if ((flags & ImGuiComboFlags_HeightMask_) == 0)
            flags |= ImGuiComboFlags_HeightRegular;
        IM_ASSERT(ImIsPowerOfTwo(flags & ImGuiComboFlags_HeightMask_));    // Only one
        int popup_max_height_in_items = -1;
        if (flags & ImGuiComboFlags_HeightRegular)     popup_max_height_in_items = 8;
        else if (flags & ImGuiComboFlags_HeightSmall)  popup_max_height_in_items = 4;
        else if (flags & ImGuiComboFlags_HeightLarge)  popup_max_height_in_items = 20;
        SetNextWindowSizeConstraints(ImVec2(w, 0.0f), ImVec2(FLT_MAX, CalcMaxPopupHeightFromItemCount(popup_max_height_in_items)));
    }

    char name[16];
    ImFormatString(name, IM_ARRAYSIZE(name), "##Combo_%02d", g.BeginPopupStack.Size); // Recycle windows based on depth

    // Peak into expected window size so we can position it
    if (ImGuiWindow* popup_window = FindWindowByName(name))
        if (popup_window->WasActive)
        {
            ImVec2 size_expected = CalcWindowExpectedSize(popup_window);
            if (flags & ImGuiComboFlags_PopupAlignLeft)
                popup_window->AutoPosLastDirection = ImGuiDir_Left;
            ImRect r_outer = GetWindowAllowedExtentRect(popup_window);
            ImVec2 pos = FindBestWindowPosForPopupEx(frame_bb.GetBL(), size_expected, &popup_window->AutoPosLastDirection, r_outer, frame_bb, ImGuiPopupPositionPolicy_ComboBox);
            SetNextWindowPos(pos);
        }

    // We don't use BeginPopupEx() solely because we have a custom name string, which we could make an argument to BeginPopupEx()
    ImGuiWindowFlags window_flags = ImGuiWindowFlags_AlwaysAutoResize | ImGuiWindowFlags_Popup | ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoSavedSettings | ImGuiWindowFlags_NoMove;

    // Horizontally align ourselves with the framed text
    PushStyleVar(ImGuiStyleVar_WindowPadding, ImVec2(style.FramePadding.x, style.WindowPadding.y));
    bool ret = Begin(name, NULL, window_flags);
    PopStyleVar();
    if (!ret)
    {
        EndPopup();
        IM_ASSERT(0);   // This should never happen as we tested for IsPopupOpen() above
        return false;
    }
    return true;
}

void ImGui::EndCombo()
{
    EndPopup();
}

// Getter for the old Combo() API: const char*[]
static bool Items_ArrayGetter(void* data, int idx, const char** out_text)
{
    const char* const* items = (const char* const*)data;
    if (out_text)
        *out_text = items[idx];
    return true;
}

// Getter for the old Combo() API: "item1\0item2\0item3\0"
static bool Items_SingleStringGetter(void* data, int idx, const char** out_text)
{
    // FIXME-OPT: we could pre-compute the indices to fasten this. But only 1 active combo means the waste is limited.
    const char* items_separated_by_zeros = (const char*)data;
    int items_count = 0;
    const char* p = items_separated_by_zeros;
    while (*p)
    {
        if (idx == items_count)
            break;
        p += strlen(p) + 1;
        items_count++;
    }
    if (!*p)
        return false;
    if (out_text)
        *out_text = p;
    return true;
}

// Old API, prefer using BeginCombo() nowadays if you can.
bool ImGui::Combo(const char* label, int* current_item, bool (*items_getter)(void*, int, const char**), void* data, int items_count, int popup_max_height_in_items)
{
    ImGuiContext& g = *GImGui;

    // Call the getter to obtain the preview string which is a parameter to BeginCombo()
    const char* preview_value = NULL;
    if (*current_item >= 0 && *current_item < items_count)
        items_getter(data, *current_item, &preview_value);

    // The old Combo() API exposed "popup_max_height_in_items". The new more general BeginCombo() API doesn't have/need it, but we emulate it here.
    if (popup_max_height_in_items != -1 && !(g.NextWindowData.Flags & ImGuiNextWindowDataFlags_HasSizeConstraint))
        SetNextWindowSizeConstraints(ImVec2(0,0), ImVec2(FLT_MAX, CalcMaxPopupHeightFromItemCount(popup_max_height_in_items)));

    if (!BeginCombo(label, preview_value, ImGuiComboFlags_None))
        return false;

    // Display items
    // FIXME-OPT: Use clipper (but we need to disable it on the appearing frame to make sure our call to SetItemDefaultFocus() is processed)
    bool value_changed = false;
    for (int i = 0; i < items_count; i++)
    {
        PushID((void*)(intptr_t)i);
        const bool item_selected = (i == *current_item);
        const char* item_text;
        if (!items_getter(data, i, &item_text))
            item_text = "*Unknown item*";
        if (Selectable(item_text, item_selected))
        {
            value_changed = true;
            *current_item = i;
        }
        if (item_selected)
            SetItemDefaultFocus();
        PopID();
    }

    EndCombo();
    return value_changed;
}

// Combo box helper allowing to pass an array of strings.
bool ImGui::Combo(const char* label, int* current_item, const char* const items[], int items_count, int height_in_items)
{
    const bool value_changed = Combo(label, current_item, Items_ArrayGetter, (void*)items, items_count, height_in_items);
    return value_changed;
}

// Combo box helper allowing to pass all items in a single string literal holding multiple zero-terminated items "item1\0item2\0"
bool ImGui::Combo(const char* label, int* current_item, const char* items_separated_by_zeros, int height_in_items)
{
    int items_count = 0;
    const char* p = items_separated_by_zeros;       // FIXME-OPT: Avoid computing this, or at least only when combo is open
    while (*p)
    {
        p += strlen(p) + 1;
        items_count++;
    }
    bool value_changed = Combo(label, current_item, Items_SingleStringGetter, (void*)items_separated_by_zeros, items_count, height_in_items);
    return value_changed;
}

//-------------------------------------------------------------------------
// [SECTION] Data Type and Data Formatting Helpers [Internal]
//-------------------------------------------------------------------------
// - PatchFormatStringFloatToInt()
// - DataTypeGetInfo()
// - DataTypeFormatString()
// - DataTypeApplyOp()
// - DataTypeApplyOpFromText()
// - GetMinimumStepAtDecimalPrecision
// - RoundScalarWithFormat<>()
//-------------------------------------------------------------------------

static const ImGuiDataTypeInfo GDataTypeInfo[] =
{
    { sizeof(char),             "%d",   "%d"    },  // ImGuiDataType_S8
    { sizeof(unsigned char),    "%u",   "%u"    },
    { sizeof(short),            "%d",   "%d"    },  // ImGuiDataType_S16
    { sizeof(unsigned short),   "%u",   "%u"    },
    { sizeof(int),              "%d",   "%d"    },  // ImGuiDataType_S32
    { sizeof(unsigned int),     "%u",   "%u"    },
#ifdef _MSC_VER
    { sizeof(ImS64),            "%I64d","%I64d" },  // ImGuiDataType_S64
    { sizeof(ImU64),            "%I64u","%I64u" },
#else
    { sizeof(ImS64),            "%lld", "%lld"  },  // ImGuiDataType_S64
    { sizeof(ImU64),            "%llu", "%llu"  },
#endif
    { sizeof(float),            "%f",   "%f"    },  // ImGuiDataType_Float (float are promoted to double in va_arg)
    { sizeof(double),           "%f",   "%lf"   },  // ImGuiDataType_Double
};
IM_STATIC_ASSERT(IM_ARRAYSIZE(GDataTypeInfo) == ImGuiDataType_COUNT);

// FIXME-LEGACY: Prior to 1.61 our DragInt() function internally used floats and because of this the compile-time default value for format was "%.0f".
// Even though we changed the compile-time default, we expect users to have carried %f around, which would break the display of DragInt() calls.
// To honor backward compatibility we are rewriting the format string, unless IMGUI_DISABLE_OBSOLETE_FUNCTIONS is enabled. What could possibly go wrong?!
static const char* PatchFormatStringFloatToInt(const char* fmt)
{
    if (fmt[0] == '%' && fmt[1] == '.' && fmt[2] == '0' && fmt[3] == 'f' && fmt[4] == 0) // Fast legacy path for "%.0f" which is expected to be the most common case.
        return "%d";
    const char* fmt_start = ImParseFormatFindStart(fmt);    // Find % (if any, and ignore %%)
    const char* fmt_end = ImParseFormatFindEnd(fmt_start);  // Find end of format specifier, which itself is an exercise of confidence/recklessness (because snprintf is dependent on libc or user).
    if (fmt_end > fmt_start && fmt_end[-1] == 'f')
    {
#ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
        if (fmt_start == fmt && fmt_end[0] == 0)
            return "%d";
        ImGuiContext& g = *GImGui;
        ImFormatString(g.TempBuffer, IM_ARRAYSIZE(g.TempBuffer), "%.*s%%d%s", (int)(fmt_start - fmt), fmt, fmt_end); // Honor leading and trailing decorations, but lose alignment/precision.
        return g.TempBuffer;
#else
        IM_ASSERT(0 && "DragInt(): Invalid format string!"); // Old versions used a default parameter of "%.0f", please replace with e.g. "%d"
#endif
    }
    return fmt;
}

const ImGuiDataTypeInfo* ImGui::DataTypeGetInfo(ImGuiDataType data_type)
{
    IM_ASSERT(data_type >= 0 && data_type < ImGuiDataType_COUNT);
    return &GDataTypeInfo[data_type];
}

int ImGui::DataTypeFormatString(char* buf, int buf_size, ImGuiDataType data_type, const void* p_data, const char* format)
{
    // Signedness doesn't matter when pushing integer arguments
    if (data_type == ImGuiDataType_S32 || data_type == ImGuiDataType_U32)
        return ImFormatString(buf, buf_size, format, *(const ImU32*)p_data);
    if (data_type == ImGuiDataType_S64 || data_type == ImGuiDataType_U64)
        return ImFormatString(buf, buf_size, format, *(const ImU64*)p_data);
    if (data_type == ImGuiDataType_Float)
        return ImFormatString(buf, buf_size, format, *(const float*)p_data);
    if (data_type == ImGuiDataType_Double)
        return ImFormatString(buf, buf_size, format, *(const double*)p_data);
    if (data_type == ImGuiDataType_S8)
        return ImFormatString(buf, buf_size, format, *(const ImS8*)p_data);
    if (data_type == ImGuiDataType_U8)
        return ImFormatString(buf, buf_size, format, *(const ImU8*)p_data);
    if (data_type == ImGuiDataType_S16)
        return ImFormatString(buf, buf_size, format, *(const ImS16*)p_data);
    if (data_type == ImGuiDataType_U16)
        return ImFormatString(buf, buf_size, format, *(const ImU16*)p_data);
    IM_ASSERT(0);
    return 0;
}

void ImGui::DataTypeApplyOp(ImGuiDataType data_type, int op, void* output, void* arg1, const void* arg2)
{
    IM_ASSERT(op == '+' || op == '-');
    switch (data_type)
    {
        case ImGuiDataType_S8:
            if (op == '+') { *(ImS8*)output  = ImAddClampOverflow(*(const ImS8*)arg1,  *(const ImS8*)arg2,  IM_S8_MIN,  IM_S8_MAX); }
            if (op == '-') { *(ImS8*)output  = ImSubClampOverflow(*(const ImS8*)arg1,  *(const ImS8*)arg2,  IM_S8_MIN,  IM_S8_MAX); }
            return;
        case ImGuiDataType_U8:
            if (op == '+') { *(ImU8*)output  = ImAddClampOverflow(*(const ImU8*)arg1,  *(const ImU8*)arg2,  IM_U8_MIN,  IM_U8_MAX); }
            if (op == '-') { *(ImU8*)output  = ImSubClampOverflow(*(const ImU8*)arg1,  *(const ImU8*)arg2,  IM_U8_MIN,  IM_U8_MAX); }
            return;
        case ImGuiDataType_S16:
            if (op == '+') { *(ImS16*)output = ImAddClampOverflow(*(const ImS16*)arg1, *(const ImS16*)arg2, IM_S16_MIN, IM_S16_MAX); }
            if (op == '-') { *(ImS16*)output = ImSubClampOverflow(*(const ImS16*)arg1, *(const ImS16*)arg2, IM_S16_MIN, IM_S16_MAX); }
            return;
        case ImGuiDataType_U16:
            if (op == '+') { *(ImU16*)output = ImAddClampOverflow(*(const ImU16*)arg1, *(const ImU16*)arg2, IM_U16_MIN, IM_U16_MAX); }
            if (op == '-') { *(ImU16*)output = ImSubClampOverflow(*(const ImU16*)arg1, *(const ImU16*)arg2, IM_U16_MIN, IM_U16_MAX); }
            return;
        case ImGuiDataType_S32:
            if (op == '+') { *(ImS32*)output = ImAddClampOverflow(*(const ImS32*)arg1, *(const ImS32*)arg2, IM_S32_MIN, IM_S32_MAX); }
            if (op == '-') { *(ImS32*)output = ImSubClampOverflow(*(const ImS32*)arg1, *(const ImS32*)arg2, IM_S32_MIN, IM_S32_MAX); }
            return;
        case ImGuiDataType_U32:
            if (op == '+') { *(ImU32*)output = ImAddClampOverflow(*(const ImU32*)arg1, *(const ImU32*)arg2, IM_U32_MIN, IM_U32_MAX); }
            if (op == '-') { *(ImU32*)output = ImSubClampOverflow(*(const ImU32*)arg1, *(const ImU32*)arg2, IM_U32_MIN, IM_U32_MAX); }
            return;
        case ImGuiDataType_S64:
            if (op == '+') { *(ImS64*)output = ImAddClampOverflow(*(const ImS64*)arg1, *(const ImS64*)arg2, IM_S64_MIN, IM_S64_MAX); }
            if (op == '-') { *(ImS64*)output = ImSubClampOverflow(*(const ImS64*)arg1, *(const ImS64*)arg2, IM_S64_MIN, IM_S64_MAX); }
            return;
        case ImGuiDataType_U64:
            if (op == '+') { *(ImU64*)output = ImAddClampOverflow(*(const ImU64*)arg1, *(const ImU64*)arg2, IM_U64_MIN, IM_U64_MAX); }
            if (op == '-') { *(ImU64*)output = ImSubClampOverflow(*(const ImU64*)arg1, *(const ImU64*)arg2, IM_U64_MIN, IM_U64_MAX); }
            return;
        case ImGuiDataType_Float:
            if (op == '+') { *(float*)output = *(const float*)arg1 + *(const float*)arg2; }
            if (op == '-') { *(float*)output = *(const float*)arg1 - *(const float*)arg2; }
            return;
        case ImGuiDataType_Double:
            if (op == '+') { *(double*)output = *(const double*)arg1 + *(const double*)arg2; }
            if (op == '-') { *(double*)output = *(const double*)arg1 - *(const double*)arg2; }
            return;
        case ImGuiDataType_COUNT: break;
    }
    IM_ASSERT(0);
}

// User can input math operators (e.g. +100) to edit a numerical values.
// NB: This is _not_ a full expression evaluator. We should probably add one and replace this dumb mess..
bool ImGui::DataTypeApplyOpFromText(const char* buf, const char* initial_value_buf, ImGuiDataType data_type, void* p_data, const char* format)
{
    while (ImCharIsBlankA(*buf))
        buf++;

    // We don't support '-' op because it would conflict with inputing negative value.
    // Instead you can use +-100 to subtract from an existing value
    char op = buf[0];
    if (op == '+' || op == '*' || op == '/')
    {
        buf++;
        while (ImCharIsBlankA(*buf))
            buf++;
    }
    else
    {
        op = 0;
    }
    if (!buf[0])
        return false;

    // Copy the value in an opaque buffer so we can compare at the end of the function if it changed at all.
    IM_ASSERT(data_type < ImGuiDataType_COUNT);
    int data_backup[2];
    const ImGuiDataTypeInfo* type_info = ImGui::DataTypeGetInfo(data_type);
    IM_ASSERT(type_info->Size <= sizeof(data_backup));
    memcpy(data_backup, p_data, type_info->Size);

    if (format == NULL)
        format = type_info->ScanFmt;

    // FIXME-LEGACY: The aim is to remove those operators and write a proper expression evaluator at some point..
    int arg1i = 0;
    if (data_type == ImGuiDataType_S32)
    {
        int* v = (int*)p_data;
        int arg0i = *v;
        float arg1f = 0.0f;
        if (op && sscanf(initial_value_buf, format, &arg0i) < 1)
            return false;
        // Store operand in a float so we can use fractional value for multipliers (*1.1), but constant always parsed as integer so we can fit big integers (e.g. 2000000003) past float precision
        if (op == '+')      { if (sscanf(buf, "%d", &arg1i)) *v = (int)(arg0i + arg1i); }                   // Add (use "+-" to subtract)
        else if (op == '*') { if (sscanf(buf, "%f", &arg1f)) *v = (int)(arg0i * arg1f); }                   // Multiply
        else if (op == '/') { if (sscanf(buf, "%f", &arg1f) && arg1f != 0.0f) *v = (int)(arg0i / arg1f); }  // Divide
        else                { if (sscanf(buf, format, &arg1i) == 1) *v = arg1i; }                           // Assign constant
    }
    else if (data_type == ImGuiDataType_Float)
    {
        // For floats we have to ignore format with precision (e.g. "%.2f") because sscanf doesn't take them in
        format = "%f";
        float* v = (float*)p_data;
        float arg0f = *v, arg1f = 0.0f;
        if (op && sscanf(initial_value_buf, format, &arg0f) < 1)
            return false;
        if (sscanf(buf, format, &arg1f) < 1)
            return false;
        if (op == '+')      { *v = arg0f + arg1f; }                    // Add (use "+-" to subtract)
        else if (op == '*') { *v = arg0f * arg1f; }                    // Multiply
        else if (op == '/') { if (arg1f != 0.0f) *v = arg0f / arg1f; } // Divide
        else                { *v = arg1f; }                            // Assign constant
    }
    else if (data_type == ImGuiDataType_Double)
    {
        format = "%lf"; // scanf differentiate float/double unlike printf which forces everything to double because of ellipsis
        double* v = (double*)p_data;
        double arg0f = *v, arg1f = 0.0;
        if (op && sscanf(initial_value_buf, format, &arg0f) < 1)
            return false;
        if (sscanf(buf, format, &arg1f) < 1)
            return false;
        if (op == '+')      { *v = arg0f + arg1f; }                    // Add (use "+-" to subtract)
        else if (op == '*') { *v = arg0f * arg1f; }                    // Multiply
        else if (op == '/') { if (arg1f != 0.0f) *v = arg0f / arg1f; } // Divide
        else                { *v = arg1f; }                            // Assign constant
    }
    else if (data_type == ImGuiDataType_U32 || data_type == ImGuiDataType_S64 || data_type == ImGuiDataType_U64)
    {
        // All other types assign constant
        // We don't bother handling support for legacy operators since they are a little too crappy. Instead we will later implement a proper expression evaluator in the future.
        sscanf(buf, format, p_data);
    }
    else
    {
        // Small types need a 32-bit buffer to receive the result from scanf()
        int v32;
        sscanf(buf, format, &v32);
        if (data_type == ImGuiDataType_S8)
            *(ImS8*)p_data = (ImS8)ImClamp(v32, (int)IM_S8_MIN, (int)IM_S8_MAX);
        else if (data_type == ImGuiDataType_U8)
            *(ImU8*)p_data = (ImU8)ImClamp(v32, (int)IM_U8_MIN, (int)IM_U8_MAX);
        else if (data_type == ImGuiDataType_S16)
            *(ImS16*)p_data = (ImS16)ImClamp(v32, (int)IM_S16_MIN, (int)IM_S16_MAX);
        else if (data_type == ImGuiDataType_U16)
            *(ImU16*)p_data = (ImU16)ImClamp(v32, (int)IM_U16_MIN, (int)IM_U16_MAX);
        else
            IM_ASSERT(0);
    }

    return memcmp(data_backup, p_data, type_info->Size) != 0;
}

static float GetMinimumStepAtDecimalPrecision(int decimal_precision)
{
    static const float min_steps[10] = { 1.0f, 0.1f, 0.01f, 0.001f, 0.0001f, 0.00001f, 0.000001f, 0.0000001f, 0.00000001f, 0.000000001f };
    if (decimal_precision < 0)
        return FLT_MIN;
    return (decimal_precision < IM_ARRAYSIZE(min_steps)) ? min_steps[decimal_precision] : ImPow(10.0f, (float)-decimal_precision);
}

template<typename TYPE>
static const char* ImAtoi(const char* src, TYPE* output)
{
    int negative = 0;
    if (*src == '-') { negative = 1; src++; }
    if (*src == '+') { src++; }
    TYPE v = 0;
    while (*src >= '0' && *src <= '9')
        v = (v * 10) + (*src++ - '0');
    *output = negative ? -v : v;
    return src;
}

template<typename TYPE, typename SIGNEDTYPE>
TYPE ImGui::RoundScalarWithFormatT(const char* format, ImGuiDataType data_type, TYPE v)
{
    const char* fmt_start = ImParseFormatFindStart(format);
    if (fmt_start[0] != '%' || fmt_start[1] == '%') // Don't apply if the value is not visible in the format string
        return v;
    char v_str[64];
    ImFormatString(v_str, IM_ARRAYSIZE(v_str), fmt_start, v);
    const char* p = v_str;
    while (*p == ' ')
        p++;
    if (data_type == ImGuiDataType_Float || data_type == ImGuiDataType_Double)
        v = (TYPE)ImAtof(p);
    else
        ImAtoi(p, (SIGNEDTYPE*)&v);
    return v;
}

//-------------------------------------------------------------------------
// [SECTION] Widgets: DragScalar, DragFloat, DragInt, etc.
//-------------------------------------------------------------------------
// - DragBehaviorT<>() [Internal]
// - DragBehavior() [Internal]
// - DragScalar()
// - DragScalarN()
// - DragFloat()
// - DragFloat2()
// - DragFloat3()
// - DragFloat4()
// - DragFloatRange2()
// - DragInt()
// - DragInt2()
// - DragInt3()
// - DragInt4()
// - DragIntRange2()
//-------------------------------------------------------------------------

// This is called by DragBehavior() when the widget is active (held by mouse or being manipulated with Nav controls)
template<typename TYPE, typename SIGNEDTYPE, typename FLOATTYPE>
bool ImGui::DragBehaviorT(ImGuiDataType data_type, TYPE* v, float v_speed, const TYPE v_min, const TYPE v_max, const char* format, float power, ImGuiDragFlags flags)
{
    ImGuiContext& g = *GImGui;
    const ImGuiAxis axis = (flags & ImGuiDragFlags_Vertical) ? ImGuiAxis_Y : ImGuiAxis_X;
    const bool is_decimal = (data_type == ImGuiDataType_Float) || (data_type == ImGuiDataType_Double);
    const bool is_clamped = (v_min < v_max);
    const bool is_power = (power != 1.0f && is_decimal && is_clamped && (v_max - v_min < FLT_MAX));
    const bool is_locked = (v_min > v_max);
    if (is_locked)
        return false;

    // Default tweak speed
    if (v_speed == 0.0f && is_clamped && (v_max - v_min < FLT_MAX))
        v_speed = (float)((v_max - v_min) * g.DragSpeedDefaultRatio);

    // Inputs accumulates into g.DragCurrentAccum, which is flushed into the current value as soon as it makes a difference with our precision settings
    float adjust_delta = 0.0f;
    if (g.ActiveIdSource == ImGuiInputSource_Mouse && IsMousePosValid() && g.IO.MouseDragMaxDistanceSqr[0] > 1.0f*1.0f)
    {
        adjust_delta = g.IO.MouseDelta[axis];
        if (g.IO.KeyAlt)
            adjust_delta *= 1.0f / 100.0f;
        if (g.IO.KeyShift)
            adjust_delta *= 10.0f;
    }
    else if (g.ActiveIdSource == ImGuiInputSource_Nav)
    {
        int decimal_precision = is_decimal ? ImParseFormatPrecision(format, 3) : 0;
        adjust_delta = GetNavInputAmount2d(ImGuiNavDirSourceFlags_Keyboard | ImGuiNavDirSourceFlags_PadDPad, ImGuiInputReadMode_RepeatFast, 1.0f / 10.0f, 10.0f)[axis];
        v_speed = ImMax(v_speed, GetMinimumStepAtDecimalPrecision(decimal_precision));
    }
    adjust_delta *= v_speed;

    // For vertical drag we currently assume that Up=higher value (like we do with vertical sliders). This may become a parameter.
    if (axis == ImGuiAxis_Y)
        adjust_delta = -adjust_delta;

    // Clear current value on activation
    // Avoid altering values and clamping when we are _already_ past the limits and heading in the same direction, so e.g. if range is 0..255, current value is 300 and we are pushing to the right side, keep the 300.
    bool is_just_activated = g.ActiveIdIsJustActivated;
    bool is_already_past_limits_and_pushing_outward = is_clamped && ((*v >= v_max && adjust_delta > 0.0f) || (*v <= v_min && adjust_delta < 0.0f));
    bool is_drag_direction_change_with_power = is_power && ((adjust_delta < 0 && g.DragCurrentAccum > 0) || (adjust_delta > 0 && g.DragCurrentAccum < 0));
    if (is_just_activated || is_already_past_limits_and_pushing_outward || is_drag_direction_change_with_power)
    {
        g.DragCurrentAccum = 0.0f;
        g.DragCurrentAccumDirty = false;
    }
    else if (adjust_delta != 0.0f)
    {
        g.DragCurrentAccum += adjust_delta;
        g.DragCurrentAccumDirty = true;
    }

    if (!g.DragCurrentAccumDirty)
        return false;

    TYPE v_cur = *v;
    FLOATTYPE v_old_ref_for_accum_remainder = (FLOATTYPE)0.0f;

    if (is_power)
    {
        // Offset + round to user desired precision, with a curve on the v_min..v_max range to get more precision on one side of the range
        FLOATTYPE v_old_norm_curved = ImPow((FLOATTYPE)(v_cur - v_min) / (FLOATTYPE)(v_max - v_min), (FLOATTYPE)1.0f / power);
        FLOATTYPE v_new_norm_curved = v_old_norm_curved + (g.DragCurrentAccum / (v_max - v_min));
        v_cur = v_min + (SIGNEDTYPE)ImPow(ImSaturate((float)v_new_norm_curved), power) * (v_max - v_min);
        v_old_ref_for_accum_remainder = v_old_norm_curved;
    }
    else
    {
        v_cur += (SIGNEDTYPE)g.DragCurrentAccum;
    }

    // Round to user desired precision based on format string
    v_cur = RoundScalarWithFormatT<TYPE, SIGNEDTYPE>(format, data_type, v_cur);

    // Preserve remainder after rounding has been applied. This also allow slow tweaking of values.
    g.DragCurrentAccumDirty = false;
    if (is_power)
    {
        FLOATTYPE v_cur_norm_curved = ImPow((FLOATTYPE)(v_cur - v_min) / (FLOATTYPE)(v_max - v_min), (FLOATTYPE)1.0f / power);
        g.DragCurrentAccum -= (float)(v_cur_norm_curved - v_old_ref_for_accum_remainder);
    }
    else
    {
        g.DragCurrentAccum -= (float)((SIGNEDTYPE)v_cur - (SIGNEDTYPE)*v);
    }

    // Lose zero sign for float/double
    if (v_cur == (TYPE)-0)
        v_cur = (TYPE)0;

    // Clamp values (+ handle overflow/wrap-around for integer types)
    if (*v != v_cur && is_clamped)
    {
        if (v_cur < v_min || (v_cur > *v && adjust_delta < 0.0f && !is_decimal))
            v_cur = v_min;
        if (v_cur > v_max || (v_cur < *v && adjust_delta > 0.0f && !is_decimal))
            v_cur = v_max;
    }

    // Apply result
    if (*v == v_cur)
        return false;
    *v = v_cur;
    return true;
}

bool ImGui::DragBehavior(ImGuiID id, ImGuiDataType data_type, void* p_v, float v_speed, const void* p_min, const void* p_max, const char* format, float power, ImGuiDragFlags flags)
{
    ImGuiContext& g = *GImGui;
    if (g.ActiveId == id)
    {
        if (g.ActiveIdSource == ImGuiInputSource_Mouse && !g.IO.MouseDown[0])
            ClearActiveID();
        else if (g.ActiveIdSource == ImGuiInputSource_Nav && g.NavActivatePressedId == id && !g.ActiveIdIsJustActivated)
            ClearActiveID();
    }
    if (g.ActiveId != id)
        return false;

    switch (data_type)
    {
    case ImGuiDataType_S8:     { ImS32 v32 = (ImS32)*(ImS8*)p_v;  bool r = DragBehaviorT<ImS32, ImS32, float>(ImGuiDataType_S32, &v32, v_speed, p_min ? *(const ImS8*) p_min : IM_S8_MIN,  p_max ? *(const ImS8*)p_max  : IM_S8_MAX,  format, power, flags); if (r) *(ImS8*)p_v = (ImS8)v32; return r; }
    case ImGuiDataType_U8:     { ImU32 v32 = (ImU32)*(ImU8*)p_v;  bool r = DragBehaviorT<ImU32, ImS32, float>(ImGuiDataType_U32, &v32, v_speed, p_min ? *(const ImU8*) p_min : IM_U8_MIN,  p_max ? *(const ImU8*)p_max  : IM_U8_MAX,  format, power, flags); if (r) *(ImU8*)p_v = (ImU8)v32; return r; }
    case ImGuiDataType_S16:    { ImS32 v32 = (ImS32)*(ImS16*)p_v; bool r = DragBehaviorT<ImS32, ImS32, float>(ImGuiDataType_S32, &v32, v_speed, p_min ? *(const ImS16*)p_min : IM_S16_MIN, p_max ? *(const ImS16*)p_max : IM_S16_MAX, format, power, flags); if (r) *(ImS16*)p_v = (ImS16)v32; return r; }
    case ImGuiDataType_U16:    { ImU32 v32 = (ImU32)*(ImU16*)p_v; bool r = DragBehaviorT<ImU32, ImS32, float>(ImGuiDataType_U32, &v32, v_speed, p_min ? *(const ImU16*)p_min : IM_U16_MIN, p_max ? *(const ImU16*)p_max : IM_U16_MAX, format, power, flags); if (r) *(ImU16*)p_v = (ImU16)v32; return r; }
    case ImGuiDataType_S32:    return DragBehaviorT<ImS32, ImS32, float >(data_type, (ImS32*)p_v,  v_speed, p_min ? *(const ImS32* )p_min : IM_S32_MIN, p_max ? *(const ImS32* )p_max : IM_S32_MAX, format, power, flags);
    case ImGuiDataType_U32:    return DragBehaviorT<ImU32, ImS32, float >(data_type, (ImU32*)p_v,  v_speed, p_min ? *(const ImU32* )p_min : IM_U32_MIN, p_max ? *(const ImU32* )p_max : IM_U32_MAX, format, power, flags);
    case ImGuiDataType_S64:    return DragBehaviorT<ImS64, ImS64, double>(data_type, (ImS64*)p_v,  v_speed, p_min ? *(const ImS64* )p_min : IM_S64_MIN, p_max ? *(const ImS64* )p_max : IM_S64_MAX, format, power, flags);
    case ImGuiDataType_U64:    return DragBehaviorT<ImU64, ImS64, double>(data_type, (ImU64*)p_v,  v_speed, p_min ? *(const ImU64* )p_min : IM_U64_MIN, p_max ? *(const ImU64* )p_max : IM_U64_MAX, format, power, flags);
    case ImGuiDataType_Float:  return DragBehaviorT<float, float, float >(data_type, (float*)p_v,  v_speed, p_min ? *(const float* )p_min : -FLT_MAX,   p_max ? *(const float* )p_max : FLT_MAX,    format, power, flags);
    case ImGuiDataType_Double: return DragBehaviorT<double,double,double>(data_type, (double*)p_v, v_speed, p_min ? *(const double*)p_min : -DBL_MAX,   p_max ? *(const double*)p_max : DBL_MAX,    format, power, flags);
    case ImGuiDataType_COUNT:  break;
    }
    IM_ASSERT(0);
    return false;
}

// Note: p_data, p_min and p_max are _pointers_ to a memory address holding the data. For a Drag widget, p_min and p_max are optional.
// Read code of e.g. SliderFloat(), SliderInt() etc. or examples in 'Demo->Widgets->Data Types' to understand how to use this function directly.
bool ImGui::DragScalar(const char* label, ImGuiDataType data_type, void* p_data, float v_speed, const void* p_min, const void* p_max, const char* format, float power)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    if (power != 1.0f)
        IM_ASSERT(p_min != NULL && p_max != NULL); // When using a power curve the drag needs to have known bounds

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const ImGuiID id = window->GetID(label);
    const float w = CalcItemWidth();
    const ImVec2 label_size = CalcTextSize(label, NULL, true);
    const ImRect frame_bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(w, label_size.y + style.FramePadding.y*2.0f));
    const ImRect total_bb(frame_bb.Min, frame_bb.Max + ImVec2(label_size.x > 0.0f ? style.ItemInnerSpacing.x + label_size.x : 0.0f, 0.0f));

    ItemSize(total_bb, style.FramePadding.y);
    if (!ItemAdd(total_bb, id, &frame_bb))
        return false;

    // Default format string when passing NULL
    if (format == NULL)
        format = DataTypeGetInfo(data_type)->PrintFmt;
    else if (data_type == ImGuiDataType_S32 && strcmp(format, "%d") != 0) // (FIXME-LEGACY: Patch old "%.0f" format string to use "%d", read function more details.)
        format = PatchFormatStringFloatToInt(format);

    // Tabbing or CTRL-clicking on Drag turns it into an input box
    const bool hovered = ItemHoverable(frame_bb, id);
    bool temp_input_is_active = TempInputTextIsActive(id);
    bool temp_input_start = false;
    if (!temp_input_is_active)
    {
        const bool focus_requested = FocusableItemRegister(window, id);
        const bool clicked = (hovered && g.IO.MouseClicked[0]);
        const bool double_clicked = (hovered && g.IO.MouseDoubleClicked[0]);
        if (focus_requested || clicked || double_clicked || g.NavActivateId == id || g.NavInputId == id)
        {
            SetActiveID(id, window);
            SetFocusID(id, window);
            FocusWindow(window);
            g.ActiveIdUsingNavDirMask = (1 << ImGuiDir_Left) | (1 << ImGuiDir_Right);
            if (focus_requested || (clicked && g.IO.KeyCtrl) || double_clicked || g.NavInputId == id)
            {
                temp_input_start = true;
                FocusableItemUnregister(window);
            }
        }
    }
    if (temp_input_is_active || temp_input_start)
        return TempInputTextScalar(frame_bb, id, label, data_type, p_data, format);

    // Draw frame
    const ImU32 frame_col = GetColorU32(g.ActiveId == id ? ImGuiCol_FrameBgActive : g.HoveredId == id ? ImGuiCol_FrameBgHovered : ImGuiCol_FrameBg);
    RenderNavHighlight(frame_bb, id);
    RenderFrame(frame_bb.Min, frame_bb.Max, frame_col, true, style.FrameRounding);

    // Drag behavior
    const bool value_changed = DragBehavior(id, data_type, p_data, v_speed, p_min, p_max, format, power, ImGuiDragFlags_None);
    if (value_changed)
        MarkItemEdited(id);

    // Display value using user-provided display format so user can add prefix/suffix/decorations to the value.
    char value_buf[64];
    const char* value_buf_end = value_buf + DataTypeFormatString(value_buf, IM_ARRAYSIZE(value_buf), data_type, p_data, format);
    RenderTextClipped(frame_bb.Min, frame_bb.Max, value_buf, value_buf_end, NULL, ImVec2(0.5f, 0.5f));

    if (label_size.x > 0.0f)
        RenderText(ImVec2(frame_bb.Max.x + style.ItemInnerSpacing.x, frame_bb.Min.y + style.FramePadding.y), label);

    IMGUI_TEST_ENGINE_ITEM_INFO(id, label, window->DC.ItemFlags);
    return value_changed;
}

bool ImGui::DragScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, float v_speed, const void* p_min, const void* p_max, const char* format, float power)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    bool value_changed = false;
    BeginGroup();
    PushID(label);
    PushMultiItemsWidths(components, CalcItemWidth());
    size_t type_size = GDataTypeInfo[data_type].Size;
    for (int i = 0; i < components; i++)
    {
        PushID(i);
        if (i > 0)
            SameLine(0, g.Style.ItemInnerSpacing.x);
        value_changed |= DragScalar("", data_type, p_data, v_speed, p_min, p_max, format, power);
        PopID();
        PopItemWidth();
        p_data = (void*)((char*)p_data + type_size);
    }
    PopID();

    const char* label_end = FindRenderedTextEnd(label);
    if (label != label_end)
    {
        SameLine(0, g.Style.ItemInnerSpacing.x);
        TextEx(label, label_end);
    }

    EndGroup();
    return value_changed;
}

bool ImGui::DragFloat(const char* label, float* v, float v_speed, float v_min, float v_max, const char* format, float power)
{
    return DragScalar(label, ImGuiDataType_Float, v, v_speed, &v_min, &v_max, format, power);
}

bool ImGui::DragFloat2(const char* label, float v[2], float v_speed, float v_min, float v_max, const char* format, float power)
{
    return DragScalarN(label, ImGuiDataType_Float, v, 2, v_speed, &v_min, &v_max, format, power);
}

bool ImGui::DragFloat3(const char* label, float v[3], float v_speed, float v_min, float v_max, const char* format, float power)
{
    return DragScalarN(label, ImGuiDataType_Float, v, 3, v_speed, &v_min, &v_max, format, power);
}

bool ImGui::DragFloat4(const char* label, float v[4], float v_speed, float v_min, float v_max, const char* format, float power)
{
    return DragScalarN(label, ImGuiDataType_Float, v, 4, v_speed, &v_min, &v_max, format, power);
}

bool ImGui::DragFloatRange2(const char* label, float* v_current_min, float* v_current_max, float v_speed, float v_min, float v_max, const char* format, const char* format_max, float power)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    PushID(label);
    BeginGroup();
    PushMultiItemsWidths(2, CalcItemWidth());

    bool value_changed = DragFloat("##min", v_current_min, v_speed, (v_min >= v_max) ? -FLT_MAX : v_min, (v_min >= v_max) ? *v_current_max : ImMin(v_max, *v_current_max), format, power);
    PopItemWidth();
    SameLine(0, g.Style.ItemInnerSpacing.x);
    value_changed |= DragFloat("##max", v_current_max, v_speed, (v_min >= v_max) ? *v_current_min : ImMax(v_min, *v_current_min), (v_min >= v_max) ? FLT_MAX : v_max, format_max ? format_max : format, power);
    PopItemWidth();
    SameLine(0, g.Style.ItemInnerSpacing.x);

    TextEx(label, FindRenderedTextEnd(label));
    EndGroup();
    PopID();
    return value_changed;
}

// NB: v_speed is float to allow adjusting the drag speed with more precision
bool ImGui::DragInt(const char* label, int* v, float v_speed, int v_min, int v_max, const char* format)
{
    return DragScalar(label, ImGuiDataType_S32, v, v_speed, &v_min, &v_max, format);
}

bool ImGui::DragInt2(const char* label, int v[2], float v_speed, int v_min, int v_max, const char* format)
{
    return DragScalarN(label, ImGuiDataType_S32, v, 2, v_speed, &v_min, &v_max, format);
}

bool ImGui::DragInt3(const char* label, int v[3], float v_speed, int v_min, int v_max, const char* format)
{
    return DragScalarN(label, ImGuiDataType_S32, v, 3, v_speed, &v_min, &v_max, format);
}

bool ImGui::DragInt4(const char* label, int v[4], float v_speed, int v_min, int v_max, const char* format)
{
    return DragScalarN(label, ImGuiDataType_S32, v, 4, v_speed, &v_min, &v_max, format);
}

bool ImGui::DragIntRange2(const char* label, int* v_current_min, int* v_current_max, float v_speed, int v_min, int v_max, const char* format, const char* format_max)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    PushID(label);
    BeginGroup();
    PushMultiItemsWidths(2, CalcItemWidth());

    bool value_changed = DragInt("##min", v_current_min, v_speed, (v_min >= v_max) ? INT_MIN : v_min, (v_min >= v_max) ? *v_current_max : ImMin(v_max, *v_current_max), format);
    PopItemWidth();
    SameLine(0, g.Style.ItemInnerSpacing.x);
    value_changed |= DragInt("##max", v_current_max, v_speed, (v_min >= v_max) ? *v_current_min : ImMax(v_min, *v_current_min), (v_min >= v_max) ? INT_MAX : v_max, format_max ? format_max : format);
    PopItemWidth();
    SameLine(0, g.Style.ItemInnerSpacing.x);

    TextEx(label, FindRenderedTextEnd(label));
    EndGroup();
    PopID();

    return value_changed;
}

//-------------------------------------------------------------------------
// [SECTION] Widgets: SliderScalar, SliderFloat, SliderInt, etc.
//-------------------------------------------------------------------------
// - SliderBehaviorT<>() [Internal]
// - SliderBehavior() [Internal]
// - SliderScalar()
// - SliderScalarN()
// - SliderFloat()
// - SliderFloat2()
// - SliderFloat3()
// - SliderFloat4()
// - SliderAngle()
// - SliderInt()
// - SliderInt2()
// - SliderInt3()
// - SliderInt4()
// - VSliderScalar()
// - VSliderFloat()
// - VSliderInt()
//-------------------------------------------------------------------------

template<typename TYPE, typename FLOATTYPE>
float ImGui::SliderCalcRatioFromValueT(ImGuiDataType data_type, TYPE v, TYPE v_min, TYPE v_max, float power, float linear_zero_pos)
{
    if (v_min == v_max)
        return 0.0f;

    const bool is_power = (power != 1.0f) && (data_type == ImGuiDataType_Float || data_type == ImGuiDataType_Double);
    const TYPE v_clamped = (v_min < v_max) ? ImClamp(v, v_min, v_max) : ImClamp(v, v_max, v_min);
    if (is_power)
    {
        if (v_clamped < 0.0f)
        {
            const float f = 1.0f - (float)((v_clamped - v_min) / (ImMin((TYPE)0, v_max) - v_min));
            return (1.0f - ImPow(f, 1.0f/power)) * linear_zero_pos;
        }
        else
        {
            const float f = (float)((v_clamped - ImMax((TYPE)0, v_min)) / (v_max - ImMax((TYPE)0, v_min)));
            return linear_zero_pos + ImPow(f, 1.0f/power) * (1.0f - linear_zero_pos);
        }
    }

    // Linear slider
    return (float)((FLOATTYPE)(v_clamped - v_min) / (FLOATTYPE)(v_max - v_min));
}

// FIXME: Move some of the code into SliderBehavior(). Current responsability is larger than what the equivalent DragBehaviorT<> does, we also do some rendering, etc.
template<typename TYPE, typename SIGNEDTYPE, typename FLOATTYPE>
bool ImGui::SliderBehaviorT(const ImRect& bb, ImGuiID id, ImGuiDataType data_type, TYPE* v, const TYPE v_min, const TYPE v_max, const char* format, float power, ImGuiSliderFlags flags, ImRect* out_grab_bb)
{
    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;

    const ImGuiAxis axis = (flags & ImGuiSliderFlags_Vertical) ? ImGuiAxis_Y : ImGuiAxis_X;
    const bool is_decimal = (data_type == ImGuiDataType_Float) || (data_type == ImGuiDataType_Double);
    const bool is_power = (power != 1.0f) && is_decimal;

    const float grab_padding = 2.0f;
    const float slider_sz = (bb.Max[axis] - bb.Min[axis]) - grab_padding * 2.0f;
    float grab_sz = style.GrabMinSize;
    SIGNEDTYPE v_range = (v_min < v_max ? v_max - v_min : v_min - v_max);
    if (!is_decimal && v_range >= 0)                                             // v_range < 0 may happen on integer overflows
        grab_sz = ImMax((float)(slider_sz / (v_range + 1)), style.GrabMinSize);  // For integer sliders: if possible have the grab size represent 1 unit
    grab_sz = ImMin(grab_sz, slider_sz);
    const float slider_usable_sz = slider_sz - grab_sz;
    const float slider_usable_pos_min = bb.Min[axis] + grab_padding + grab_sz * 0.5f;
    const float slider_usable_pos_max = bb.Max[axis] - grab_padding - grab_sz * 0.5f;

    // For power curve sliders that cross over sign boundary we want the curve to be symmetric around 0.0f
    float linear_zero_pos;   // 0.0->1.0f
    if (is_power && v_min * v_max < 0.0f)
    {
        // Different sign
        const FLOATTYPE linear_dist_min_to_0 = ImPow(v_min >= 0 ? (FLOATTYPE)v_min : -(FLOATTYPE)v_min, (FLOATTYPE)1.0f / power);
        const FLOATTYPE linear_dist_max_to_0 = ImPow(v_max >= 0 ? (FLOATTYPE)v_max : -(FLOATTYPE)v_max, (FLOATTYPE)1.0f / power);
        linear_zero_pos = (float)(linear_dist_min_to_0 / (linear_dist_min_to_0 + linear_dist_max_to_0));
    }
    else
    {
        // Same sign
        linear_zero_pos = v_min < 0.0f ? 1.0f : 0.0f;
    }

    // Process interacting with the slider
    bool value_changed = false;
    if (g.ActiveId == id)
    {
        bool set_new_value = false;
        float clicked_t = 0.0f;
        if (g.ActiveIdSource == ImGuiInputSource_Mouse)
        {
            if (!g.IO.MouseDown[0])
            {
                ClearActiveID();
            }
            else
            {
                const float mouse_abs_pos = g.IO.MousePos[axis];
                clicked_t = (slider_usable_sz > 0.0f) ? ImClamp((mouse_abs_pos - slider_usable_pos_min) / slider_usable_sz, 0.0f, 1.0f) : 0.0f;
                if (axis == ImGuiAxis_Y)
                    clicked_t = 1.0f - clicked_t;
                set_new_value = true;
            }
        }
        else if (g.ActiveIdSource == ImGuiInputSource_Nav)
        {
            const ImVec2 delta2 = GetNavInputAmount2d(ImGuiNavDirSourceFlags_Keyboard | ImGuiNavDirSourceFlags_PadDPad, ImGuiInputReadMode_RepeatFast, 0.0f, 0.0f);
            float delta = (axis == ImGuiAxis_X) ? delta2.x : -delta2.y;
            if (g.NavActivatePressedId == id && !g.ActiveIdIsJustActivated)
            {
                ClearActiveID();
            }
            else if (delta != 0.0f)
            {
                clicked_t = SliderCalcRatioFromValueT<TYPE,FLOATTYPE>(data_type, *v, v_min, v_max, power, linear_zero_pos);
                const int decimal_precision = is_decimal ? ImParseFormatPrecision(format, 3) : 0;
                if ((decimal_precision > 0) || is_power)
                {
                    delta /= 100.0f;    // Gamepad/keyboard tweak speeds in % of slider bounds
                    if (IsNavInputDown(ImGuiNavInput_TweakSlow))
                        delta /= 10.0f;
                }
                else
                {
                    if ((v_range >= -100.0f && v_range <= 100.0f) || IsNavInputDown(ImGuiNavInput_TweakSlow))
                        delta = ((delta < 0.0f) ? -1.0f : +1.0f) / (float)v_range; // Gamepad/keyboard tweak speeds in integer steps
                    else
                        delta /= 100.0f;
                }
                if (IsNavInputDown(ImGuiNavInput_TweakFast))
                    delta *= 10.0f;
                set_new_value = true;
                if ((clicked_t >= 1.0f && delta > 0.0f) || (clicked_t <= 0.0f && delta < 0.0f)) // This is to avoid applying the saturation when already past the limits
                    set_new_value = false;
                else
                    clicked_t = ImSaturate(clicked_t + delta);
            }
        }

        if (set_new_value)
        {
            TYPE v_new;
            if (is_power)
            {
                // Account for power curve scale on both sides of the zero
                if (clicked_t < linear_zero_pos)
                {
                    // Negative: rescale to the negative range before powering
                    float a = 1.0f - (clicked_t / linear_zero_pos);
                    a = ImPow(a, power);
                    v_new = ImLerp(ImMin(v_max, (TYPE)0), v_min, a);
                }
                else
                {
                    // Positive: rescale to the positive range before powering
                    float a;
                    if (ImFabs(linear_zero_pos - 1.0f) > 1.e-6f)
                        a = (clicked_t - linear_zero_pos) / (1.0f - linear_zero_pos);
                    else
                        a = clicked_t;
                    a = ImPow(a, power);
                    v_new = ImLerp(ImMax(v_min, (TYPE)0), v_max, a);
                }
            }
            else
            {
                // Linear slider
                if (is_decimal)
                {
                    v_new = ImLerp(v_min, v_max, clicked_t);
                }
                else
                {
                    // For integer values we want the clicking position to match the grab box so we round above
                    // This code is carefully tuned to work with large values (e.g. high ranges of U64) while preserving this property..
                    FLOATTYPE v_new_off_f = (v_max - v_min) * clicked_t;
                    TYPE v_new_off_floor = (TYPE)(v_new_off_f);
                    TYPE v_new_off_round = (TYPE)(v_new_off_f + (FLOATTYPE)0.5);
                    if (v_new_off_floor < v_new_off_round)
                        v_new = v_min + v_new_off_round;
                    else
                        v_new = v_min + v_new_off_floor;
                }
            }

            // Round to user desired precision based on format string
            v_new = RoundScalarWithFormatT<TYPE,SIGNEDTYPE>(format, data_type, v_new);

            // Apply result
            if (*v != v_new)
            {
                *v = v_new;
                value_changed = true;
            }
        }
    }

    if (slider_sz < 1.0f)
    {
        *out_grab_bb = ImRect(bb.Min, bb.Min);
    }
    else
    {
        // Output grab position so it can be displayed by the caller
        float grab_t = SliderCalcRatioFromValueT<TYPE, FLOATTYPE>(data_type, *v, v_min, v_max, power, linear_zero_pos);
        if (axis == ImGuiAxis_Y)
            grab_t = 1.0f - grab_t;
        const float grab_pos = ImLerp(slider_usable_pos_min, slider_usable_pos_max, grab_t);
        if (axis == ImGuiAxis_X)
            *out_grab_bb = ImRect(grab_pos - grab_sz * 0.5f, bb.Min.y + grab_padding, grab_pos + grab_sz * 0.5f, bb.Max.y - grab_padding);
        else
            *out_grab_bb = ImRect(bb.Min.x + grab_padding, grab_pos - grab_sz * 0.5f, bb.Max.x - grab_padding, grab_pos + grab_sz * 0.5f);
    }

    return value_changed;
}

// For 32-bit and larger types, slider bounds are limited to half the natural type range.
// So e.g. an integer Slider between INT_MAX-10 and INT_MAX will fail, but an integer Slider between INT_MAX/2-10 and INT_MAX/2 will be ok.
// It would be possible to lift that limitation with some work but it doesn't seem to be worth it for sliders.
bool ImGui::SliderBehavior(const ImRect& bb, ImGuiID id, ImGuiDataType data_type, void* p_v, const void* p_min, const void* p_max, const char* format, float power, ImGuiSliderFlags flags, ImRect* out_grab_bb)
{
    switch (data_type)
    {
    case ImGuiDataType_S8:  { ImS32 v32 = (ImS32)*(ImS8*)p_v;  bool r = SliderBehaviorT<ImS32, ImS32, float>(bb, id, ImGuiDataType_S32, &v32, *(const ImS8*)p_min,  *(const ImS8*)p_max,  format, power, flags, out_grab_bb); if (r) *(ImS8*)p_v  = (ImS8)v32;  return r; }
    case ImGuiDataType_U8:  { ImU32 v32 = (ImU32)*(ImU8*)p_v;  bool r = SliderBehaviorT<ImU32, ImS32, float>(bb, id, ImGuiDataType_U32, &v32, *(const ImU8*)p_min,  *(const ImU8*)p_max,  format, power, flags, out_grab_bb); if (r) *(ImU8*)p_v  = (ImU8)v32;  return r; }
    case ImGuiDataType_S16: { ImS32 v32 = (ImS32)*(ImS16*)p_v; bool r = SliderBehaviorT<ImS32, ImS32, float>(bb, id, ImGuiDataType_S32, &v32, *(const ImS16*)p_min, *(const ImS16*)p_max, format, power, flags, out_grab_bb); if (r) *(ImS16*)p_v = (ImS16)v32; return r; }
    case ImGuiDataType_U16: { ImU32 v32 = (ImU32)*(ImU16*)p_v; bool r = SliderBehaviorT<ImU32, ImS32, float>(bb, id, ImGuiDataType_U32, &v32, *(const ImU16*)p_min, *(const ImU16*)p_max, format, power, flags, out_grab_bb); if (r) *(ImU16*)p_v = (ImU16)v32; return r; }
    case ImGuiDataType_S32:
        IM_ASSERT(*(const ImS32*)p_min >= IM_S32_MIN/2 && *(const ImS32*)p_max <= IM_S32_MAX/2);
        return SliderBehaviorT<ImS32, ImS32, float >(bb, id, data_type, (ImS32*)p_v,  *(const ImS32*)p_min,  *(const ImS32*)p_max,  format, power, flags, out_grab_bb);
    case ImGuiDataType_U32:
        IM_ASSERT(*(const ImU32*)p_max <= IM_U32_MAX/2);
        return SliderBehaviorT<ImU32, ImS32, float >(bb, id, data_type, (ImU32*)p_v,  *(const ImU32*)p_min,  *(const ImU32*)p_max,  format, power, flags, out_grab_bb);
    case ImGuiDataType_S64:
        IM_ASSERT(*(const ImS64*)p_min >= IM_S64_MIN/2 && *(const ImS64*)p_max <= IM_S64_MAX/2);
        return SliderBehaviorT<ImS64, ImS64, double>(bb, id, data_type, (ImS64*)p_v,  *(const ImS64*)p_min,  *(const ImS64*)p_max,  format, power, flags, out_grab_bb);
    case ImGuiDataType_U64:
        IM_ASSERT(*(const ImU64*)p_max <= IM_U64_MAX/2);
        return SliderBehaviorT<ImU64, ImS64, double>(bb, id, data_type, (ImU64*)p_v,  *(const ImU64*)p_min,  *(const ImU64*)p_max,  format, power, flags, out_grab_bb);
    case ImGuiDataType_Float:
        IM_ASSERT(*(const float*)p_min >= -FLT_MAX/2.0f && *(const float*)p_max <= FLT_MAX/2.0f);
        return SliderBehaviorT<float, float, float >(bb, id, data_type, (float*)p_v,  *(const float*)p_min,  *(const float*)p_max,  format, power, flags, out_grab_bb);
    case ImGuiDataType_Double:
        IM_ASSERT(*(const double*)p_min >= -DBL_MAX/2.0f && *(const double*)p_max <= DBL_MAX/2.0f);
        return SliderBehaviorT<double,double,double>(bb, id, data_type, (double*)p_v, *(const double*)p_min, *(const double*)p_max, format, power, flags, out_grab_bb);
    case ImGuiDataType_COUNT: break;
    }
    IM_ASSERT(0);
    return false;
}

// Note: p_data, p_min and p_max are _pointers_ to a memory address holding the data. For a slider, they are all required.
// Read code of e.g. SliderFloat(), SliderInt() etc. or examples in 'Demo->Widgets->Data Types' to understand how to use this function directly.
bool ImGui::SliderScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max, const char* format, float power)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const ImGuiID id = window->GetID(label);
    const float w = CalcItemWidth();

    const ImVec2 label_size = CalcTextSize(label, NULL, true);
    const ImRect frame_bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(w, label_size.y + style.FramePadding.y*2.0f));
    const ImRect total_bb(frame_bb.Min, frame_bb.Max + ImVec2(label_size.x > 0.0f ? style.ItemInnerSpacing.x + label_size.x : 0.0f, 0.0f));

    ItemSize(total_bb, style.FramePadding.y);
    if (!ItemAdd(total_bb, id, &frame_bb))
        return false;

    // Default format string when passing NULL
    if (format == NULL)
        format = DataTypeGetInfo(data_type)->PrintFmt;
    else if (data_type == ImGuiDataType_S32 && strcmp(format, "%d") != 0) // (FIXME-LEGACY: Patch old "%.0f" format string to use "%d", read function more details.)
        format = PatchFormatStringFloatToInt(format);

    // Tabbing or CTRL-clicking on Slider turns it into an input box
    const bool hovered = ItemHoverable(frame_bb, id);
    bool temp_input_is_active = TempInputTextIsActive(id);
    bool temp_input_start = false;
    if (!temp_input_is_active)
    {
        const bool focus_requested = FocusableItemRegister(window, id);
        const bool clicked = (hovered && g.IO.MouseClicked[0]);
        if (focus_requested || clicked || g.NavActivateId == id || g.NavInputId == id)
        {
            SetActiveID(id, window);
            SetFocusID(id, window);
            FocusWindow(window);
            g.ActiveIdUsingNavDirMask |= (1 << ImGuiDir_Left) | (1 << ImGuiDir_Right);
            if (focus_requested || (clicked && g.IO.KeyCtrl) || g.NavInputId == id)
            {
                temp_input_start = true;
                FocusableItemUnregister(window);
            }
        }
    }
    if (temp_input_is_active || temp_input_start)
        return TempInputTextScalar(frame_bb, id, label, data_type, p_data, format);

    // Draw frame
    const ImU32 frame_col = GetColorU32(g.ActiveId == id ? ImGuiCol_FrameBgActive : g.HoveredId == id ? ImGuiCol_FrameBgHovered : ImGuiCol_FrameBg);
    RenderNavHighlight(frame_bb, id);
    RenderFrame(frame_bb.Min, frame_bb.Max, frame_col, true, g.Style.FrameRounding);

    // Slider behavior
    ImRect grab_bb;
    const bool value_changed = SliderBehavior(frame_bb, id, data_type, p_data, p_min, p_max, format, power, ImGuiSliderFlags_None, &grab_bb);
    if (value_changed)
        MarkItemEdited(id);

    // Render grab
    if (grab_bb.Max.x > grab_bb.Min.x)
        window->DrawList->AddRectFilled(grab_bb.Min, grab_bb.Max, GetColorU32(g.ActiveId == id ? ImGuiCol_SliderGrabActive : ImGuiCol_SliderGrab), style.GrabRounding);

    // Display value using user-provided display format so user can add prefix/suffix/decorations to the value.
    char value_buf[64];
    const char* value_buf_end = value_buf + DataTypeFormatString(value_buf, IM_ARRAYSIZE(value_buf), data_type, p_data, format);
    RenderTextClipped(frame_bb.Min, frame_bb.Max, value_buf, value_buf_end, NULL, ImVec2(0.5f,0.5f));

    if (label_size.x > 0.0f)
        RenderText(ImVec2(frame_bb.Max.x + style.ItemInnerSpacing.x, frame_bb.Min.y + style.FramePadding.y), label);

    IMGUI_TEST_ENGINE_ITEM_INFO(id, label, window->DC.ItemFlags);
    return value_changed;
}

// Add multiple sliders on 1 line for compact edition of multiple components
bool ImGui::SliderScalarN(const char* label, ImGuiDataType data_type, void* v, int components, const void* v_min, const void* v_max, const char* format, float power)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    bool value_changed = false;
    BeginGroup();
    PushID(label);
    PushMultiItemsWidths(components, CalcItemWidth());
    size_t type_size = GDataTypeInfo[data_type].Size;
    for (int i = 0; i < components; i++)
    {
        PushID(i);
        if (i > 0)
            SameLine(0, g.Style.ItemInnerSpacing.x);
        value_changed |= SliderScalar("", data_type, v, v_min, v_max, format, power);
        PopID();
        PopItemWidth();
        v = (void*)((char*)v + type_size);
    }
    PopID();

    const char* label_end = FindRenderedTextEnd(label);
    if (label != label_end)
    {
        SameLine(0, g.Style.ItemInnerSpacing.x);
        TextEx(label, label_end);
    }

    EndGroup();
    return value_changed;
}

bool ImGui::SliderFloat(const char* label, float* v, float v_min, float v_max, const char* format, float power)
{
    return SliderScalar(label, ImGuiDataType_Float, v, &v_min, &v_max, format, power);
}

bool ImGui::SliderFloat2(const char* label, float v[2], float v_min, float v_max, const char* format, float power)
{
    return SliderScalarN(label, ImGuiDataType_Float, v, 2, &v_min, &v_max, format, power);
}

bool ImGui::SliderFloat3(const char* label, float v[3], float v_min, float v_max, const char* format, float power)
{
    return SliderScalarN(label, ImGuiDataType_Float, v, 3, &v_min, &v_max, format, power);
}

bool ImGui::SliderFloat4(const char* label, float v[4], float v_min, float v_max, const char* format, float power)
{
    return SliderScalarN(label, ImGuiDataType_Float, v, 4, &v_min, &v_max, format, power);
}

bool ImGui::SliderAngle(const char* label, float* v_rad, float v_degrees_min, float v_degrees_max, const char* format)
{
    if (format == NULL)
        format = "%.0f deg";
    float v_deg = (*v_rad) * 360.0f / (2*IM_PI);
    bool value_changed = SliderFloat(label, &v_deg, v_degrees_min, v_degrees_max, format, 1.0f);
    *v_rad = v_deg * (2*IM_PI) / 360.0f;
    return value_changed;
}

bool ImGui::SliderInt(const char* label, int* v, int v_min, int v_max, const char* format)
{
    return SliderScalar(label, ImGuiDataType_S32, v, &v_min, &v_max, format);
}

bool ImGui::SliderInt2(const char* label, int v[2], int v_min, int v_max, const char* format)
{
    return SliderScalarN(label, ImGuiDataType_S32, v, 2, &v_min, &v_max, format);
}

bool ImGui::SliderInt3(const char* label, int v[3], int v_min, int v_max, const char* format)
{
    return SliderScalarN(label, ImGuiDataType_S32, v, 3, &v_min, &v_max, format);
}

bool ImGui::SliderInt4(const char* label, int v[4], int v_min, int v_max, const char* format)
{
    return SliderScalarN(label, ImGuiDataType_S32, v, 4, &v_min, &v_max, format);
}

bool ImGui::VSliderScalar(const char* label, const ImVec2& size, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max, const char* format, float power)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const ImGuiID id = window->GetID(label);

    const ImVec2 label_size = CalcTextSize(label, NULL, true);
    const ImRect frame_bb(window->DC.CursorPos, window->DC.CursorPos + size);
    const ImRect bb(frame_bb.Min, frame_bb.Max + ImVec2(label_size.x > 0.0f ? style.ItemInnerSpacing.x + label_size.x : 0.0f, 0.0f));

    ItemSize(bb, style.FramePadding.y);
    if (!ItemAdd(frame_bb, id))
        return false;

    // Default format string when passing NULL
    if (format == NULL)
        format = DataTypeGetInfo(data_type)->PrintFmt;
    else if (data_type == ImGuiDataType_S32 && strcmp(format, "%d") != 0) // (FIXME-LEGACY: Patch old "%.0f" format string to use "%d", read function more details.)
        format = PatchFormatStringFloatToInt(format);

    const bool hovered = ItemHoverable(frame_bb, id);
    if ((hovered && g.IO.MouseClicked[0]) || g.NavActivateId == id || g.NavInputId == id)
    {
        SetActiveID(id, window);
        SetFocusID(id, window);
        FocusWindow(window);
        g.ActiveIdUsingNavDirMask |= (1 << ImGuiDir_Up) | (1 << ImGuiDir_Down);
    }

    // Draw frame
    const ImU32 frame_col = GetColorU32(g.ActiveId == id ? ImGuiCol_FrameBgActive : g.HoveredId == id ? ImGuiCol_FrameBgHovered : ImGuiCol_FrameBg);
    RenderNavHighlight(frame_bb, id);
    RenderFrame(frame_bb.Min, frame_bb.Max, frame_col, true, g.Style.FrameRounding);

    // Slider behavior
    ImRect grab_bb;
    const bool value_changed = SliderBehavior(frame_bb, id, data_type, p_data, p_min, p_max, format, power, ImGuiSliderFlags_Vertical, &grab_bb);
    if (value_changed)
        MarkItemEdited(id);

    // Render grab
    if (grab_bb.Max.y > grab_bb.Min.y)
        window->DrawList->AddRectFilled(grab_bb.Min, grab_bb.Max, GetColorU32(g.ActiveId == id ? ImGuiCol_SliderGrabActive : ImGuiCol_SliderGrab), style.GrabRounding);

    // Display value using user-provided display format so user can add prefix/suffix/decorations to the value.
    // For the vertical slider we allow centered text to overlap the frame padding
    char value_buf[64];
    const char* value_buf_end = value_buf + DataTypeFormatString(value_buf, IM_ARRAYSIZE(value_buf), data_type, p_data, format);
    RenderTextClipped(ImVec2(frame_bb.Min.x, frame_bb.Min.y + style.FramePadding.y), frame_bb.Max, value_buf, value_buf_end, NULL, ImVec2(0.5f,0.0f));
    if (label_size.x > 0.0f)
        RenderText(ImVec2(frame_bb.Max.x + style.ItemInnerSpacing.x, frame_bb.Min.y + style.FramePadding.y), label);

    return value_changed;
}

bool ImGui::VSliderFloat(const char* label, const ImVec2& size, float* v, float v_min, float v_max, const char* format, float power)
{
    return VSliderScalar(label, size, ImGuiDataType_Float, v, &v_min, &v_max, format, power);
}

bool ImGui::VSliderInt(const char* label, const ImVec2& size, int* v, int v_min, int v_max, const char* format)
{
    return VSliderScalar(label, size, ImGuiDataType_S32, v, &v_min, &v_max, format);
}

//-------------------------------------------------------------------------
// [SECTION] Widgets: InputScalar, InputFloat, InputInt, etc.
//-------------------------------------------------------------------------
// - ImParseFormatFindStart() [Internal]
// - ImParseFormatFindEnd() [Internal]
// - ImParseFormatTrimDecorations() [Internal]
// - ImParseFormatPrecision() [Internal]
// - TempInputTextScalar() [Internal]
// - InputScalar()
// - InputScalarN()
// - InputFloat()
// - InputFloat2()
// - InputFloat3()
// - InputFloat4()
// - InputInt()
// - InputInt2()
// - InputInt3()
// - InputInt4()
// - InputDouble()
//-------------------------------------------------------------------------

// We don't use strchr() because our strings are usually very short and often start with '%'
const char* ImParseFormatFindStart(const char* fmt)
{
    while (char c = fmt[0])
    {
        if (c == '%' && fmt[1] != '%')
            return fmt;
        else if (c == '%')
            fmt++;
        fmt++;
    }
    return fmt;
}

const char* ImParseFormatFindEnd(const char* fmt)
{
    // Printf/scanf types modifiers: I/L/h/j/l/t/w/z. Other uppercase letters qualify as types aka end of the format.
    if (fmt[0] != '%')
        return fmt;
    const unsigned int ignored_uppercase_mask = (1 << ('I'-'A')) | (1 << ('L'-'A'));
    const unsigned int ignored_lowercase_mask = (1 << ('h'-'a')) | (1 << ('j'-'a')) | (1 << ('l'-'a')) | (1 << ('t'-'a')) | (1 << ('w'-'a')) | (1 << ('z'-'a'));
    for (char c; (c = *fmt) != 0; fmt++)
    {
        if (c >= 'A' && c <= 'Z' && ((1 << (c - 'A')) & ignored_uppercase_mask) == 0)
            return fmt + 1;
        if (c >= 'a' && c <= 'z' && ((1 << (c - 'a')) & ignored_lowercase_mask) == 0)
            return fmt + 1;
    }
    return fmt;
}

// Extract the format out of a format string with leading or trailing decorations
//  fmt = "blah blah"  -> return fmt
//  fmt = "%.3f"       -> return fmt
//  fmt = "hello %.3f" -> return fmt + 6
//  fmt = "%.3f hello" -> return buf written with "%.3f"
const char* ImParseFormatTrimDecorations(const char* fmt, char* buf, size_t buf_size)
{
    const char* fmt_start = ImParseFormatFindStart(fmt);
    if (fmt_start[0] != '%')
        return fmt;
    const char* fmt_end = ImParseFormatFindEnd(fmt_start);
    if (fmt_end[0] == 0) // If we only have leading decoration, we don't need to copy the data.
        return fmt_start;
    ImStrncpy(buf, fmt_start, ImMin((size_t)(fmt_end - fmt_start) + 1, buf_size));
    return buf;
}

// Parse display precision back from the display format string
// FIXME: This is still used by some navigation code path to infer a minimum tweak step, but we should aim to rework widgets so it isn't needed.
int ImParseFormatPrecision(const char* fmt, int default_precision)
{
    fmt = ImParseFormatFindStart(fmt);
    if (fmt[0] != '%')
        return default_precision;
    fmt++;
    while (*fmt >= '0' && *fmt <= '9')
        fmt++;
    int precision = INT_MAX;
    if (*fmt == '.')
    {
        fmt = ImAtoi<int>(fmt + 1, &precision);
        if (precision < 0 || precision > 99)
            precision = default_precision;
    }
    if (*fmt == 'e' || *fmt == 'E') // Maximum precision with scientific notation
        precision = -1;
    if ((*fmt == 'g' || *fmt == 'G') && precision == INT_MAX)
        precision = -1;
    return (precision == INT_MAX) ? default_precision : precision;
}

// Create text input in place of another active widget (e.g. used when doing a CTRL+Click on drag/slider widgets)
// FIXME: Facilitate using this in variety of other situations.
bool ImGui::TempInputTextScalar(const ImRect& bb, ImGuiID id, const char* label, ImGuiDataType data_type, void* p_data, const char* format)
{
    ImGuiContext& g = *GImGui;

    // On the first frame, g.TempInputTextId == 0, then on subsequent frames it becomes == id.
    // We clear ActiveID on the first frame to allow the InputText() taking it back.
    const bool init = (g.TempInputTextId != id);
    if (init)
        ClearActiveID();

    char fmt_buf[32];
    char data_buf[32];
    format = ImParseFormatTrimDecorations(format, fmt_buf, IM_ARRAYSIZE(fmt_buf));
    DataTypeFormatString(data_buf, IM_ARRAYSIZE(data_buf), data_type, p_data, format);
    ImStrTrimBlanks(data_buf);

    g.CurrentWindow->DC.CursorPos = bb.Min;
    ImGuiInputTextFlags flags = ImGuiInputTextFlags_AutoSelectAll | ImGuiInputTextFlags_NoMarkEdited;
    flags |= ((data_type == ImGuiDataType_Float || data_type == ImGuiDataType_Double) ? ImGuiInputTextFlags_CharsScientific : ImGuiInputTextFlags_CharsDecimal);
    bool value_changed = InputTextEx(label, NULL, data_buf, IM_ARRAYSIZE(data_buf), bb.GetSize(), flags);
    if (init)
    {
        // First frame we started displaying the InputText widget, we expect it to take the active id.
        IM_ASSERT(g.ActiveId == id);
        g.TempInputTextId = g.ActiveId;
    }
    if (value_changed)
    {
        value_changed = DataTypeApplyOpFromText(data_buf, g.InputTextState.InitialTextA.Data, data_type, p_data, NULL);
        if (value_changed)
            MarkItemEdited(id);
    }
    return value_changed;
}

// Note: p_data, p_step, p_step_fast are _pointers_ to a memory address holding the data. For an Input widget, p_step and p_step_fast are optional.
// Read code of e.g. InputFloat(), InputInt() etc. or examples in 'Demo->Widgets->Data Types' to understand how to use this function directly.
bool ImGui::InputScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_step, const void* p_step_fast, const char* format, ImGuiInputTextFlags flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    ImGuiStyle& style = g.Style;

    if (format == NULL)
        format = DataTypeGetInfo(data_type)->PrintFmt;

    char buf[64];
    DataTypeFormatString(buf, IM_ARRAYSIZE(buf), data_type, p_data, format);

    bool value_changed = false;
    if ((flags & (ImGuiInputTextFlags_CharsHexadecimal | ImGuiInputTextFlags_CharsScientific)) == 0)
        flags |= ImGuiInputTextFlags_CharsDecimal;
    flags |= ImGuiInputTextFlags_AutoSelectAll;
    flags |= ImGuiInputTextFlags_NoMarkEdited;  // We call MarkItemEdited() ourselve by comparing the actual data rather than the string.

    if (p_step != NULL)
    {
        const float button_size = GetFrameHeight();

        BeginGroup(); // The only purpose of the group here is to allow the caller to query item data e.g. IsItemActive()
        PushID(label);
        SetNextItemWidth(ImMax(1.0f, CalcItemWidth() - (button_size + style.ItemInnerSpacing.x) * 2));
        if (InputText("", buf, IM_ARRAYSIZE(buf), flags)) // PushId(label) + "" gives us the expected ID from outside point of view
            value_changed = DataTypeApplyOpFromText(buf, g.InputTextState.InitialTextA.Data, data_type, p_data, format);

        // Step buttons
        const ImVec2 backup_frame_padding = style.FramePadding;
        style.FramePadding.x = style.FramePadding.y;
        ImGuiButtonFlags button_flags = ImGuiButtonFlags_Repeat | ImGuiButtonFlags_DontClosePopups;
        if (flags & ImGuiInputTextFlags_ReadOnly)
            button_flags |= ImGuiButtonFlags_Disabled;
        SameLine(0, style.ItemInnerSpacing.x);
        if (ButtonEx("-", ImVec2(button_size, button_size), button_flags))
        {
            DataTypeApplyOp(data_type, '-', p_data, p_data, g.IO.KeyCtrl && p_step_fast ? p_step_fast : p_step);
            value_changed = true;
        }
        SameLine(0, style.ItemInnerSpacing.x);
        if (ButtonEx("+", ImVec2(button_size, button_size), button_flags))
        {
            DataTypeApplyOp(data_type, '+', p_data, p_data, g.IO.KeyCtrl && p_step_fast ? p_step_fast : p_step);
            value_changed = true;
        }

        const char* label_end = FindRenderedTextEnd(label);
        if (label != label_end)
        {
            SameLine(0, style.ItemInnerSpacing.x);
            TextEx(label, label_end);
        }
        style.FramePadding = backup_frame_padding;

        PopID();
        EndGroup();
    }
    else
    {
        if (InputText(label, buf, IM_ARRAYSIZE(buf), flags))
            value_changed = DataTypeApplyOpFromText(buf, g.InputTextState.InitialTextA.Data, data_type, p_data, format);
    }
    if (value_changed)
        MarkItemEdited(window->DC.LastItemId);

    return value_changed;
}

bool ImGui::InputScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_step, const void* p_step_fast, const char* format, ImGuiInputTextFlags flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    bool value_changed = false;
    BeginGroup();
    PushID(label);
    PushMultiItemsWidths(components, CalcItemWidth());
    size_t type_size = GDataTypeInfo[data_type].Size;
    for (int i = 0; i < components; i++)
    {
        PushID(i);
        if (i > 0)
            SameLine(0, g.Style.ItemInnerSpacing.x);
        value_changed |= InputScalar("", data_type, p_data, p_step, p_step_fast, format, flags);
        PopID();
        PopItemWidth();
        p_data = (void*)((char*)p_data + type_size);
    }
    PopID();

    const char* label_end = FindRenderedTextEnd(label);
    if (label != label_end)
    {
        SameLine(0.0f, g.Style.ItemInnerSpacing.x);
        TextEx(label, label_end);
    }

    EndGroup();
    return value_changed;
}

bool ImGui::InputFloat(const char* label, float* v, float step, float step_fast, const char* format, ImGuiInputTextFlags flags)
{
    flags |= ImGuiInputTextFlags_CharsScientific;
    return InputScalar(label, ImGuiDataType_Float, (void*)v, (void*)(step>0.0f ? &step : NULL), (void*)(step_fast>0.0f ? &step_fast : NULL), format, flags);
}

bool ImGui::InputFloat2(const char* label, float v[2], const char* format, ImGuiInputTextFlags flags)
{
    return InputScalarN(label, ImGuiDataType_Float, v, 2, NULL, NULL, format, flags);
}

bool ImGui::InputFloat3(const char* label, float v[3], const char* format, ImGuiInputTextFlags flags)
{
    return InputScalarN(label, ImGuiDataType_Float, v, 3, NULL, NULL, format, flags);
}

bool ImGui::InputFloat4(const char* label, float v[4], const char* format, ImGuiInputTextFlags flags)
{
    return InputScalarN(label, ImGuiDataType_Float, v, 4, NULL, NULL, format, flags);
}

// Prefer using "const char* format" directly, which is more flexible and consistent with other API.
#ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
bool ImGui::InputFloat(const char* label, float* v, float step, float step_fast, int decimal_precision, ImGuiInputTextFlags flags)
{
    char format[16] = "%f";
    if (decimal_precision >= 0)
        ImFormatString(format, IM_ARRAYSIZE(format), "%%.%df", decimal_precision);
    return InputFloat(label, v, step, step_fast, format, flags);
}

bool ImGui::InputFloat2(const char* label, float v[2], int decimal_precision, ImGuiInputTextFlags flags)
{
    char format[16] = "%f";
    if (decimal_precision >= 0)
        ImFormatString(format, IM_ARRAYSIZE(format), "%%.%df", decimal_precision);
    return InputScalarN(label, ImGuiDataType_Float, v, 2, NULL, NULL, format, flags);
}

bool ImGui::InputFloat3(const char* label, float v[3], int decimal_precision, ImGuiInputTextFlags flags)
{
    char format[16] = "%f";
    if (decimal_precision >= 0)
        ImFormatString(format, IM_ARRAYSIZE(format), "%%.%df", decimal_precision);
    return InputScalarN(label, ImGuiDataType_Float, v, 3, NULL, NULL, format, flags);
}

bool ImGui::InputFloat4(const char* label, float v[4], int decimal_precision, ImGuiInputTextFlags flags)
{
    char format[16] = "%f";
    if (decimal_precision >= 0)
        ImFormatString(format, IM_ARRAYSIZE(format), "%%.%df", decimal_precision);
    return InputScalarN(label, ImGuiDataType_Float, v, 4, NULL, NULL, format, flags);
}
#endif // IMGUI_DISABLE_OBSOLETE_FUNCTIONS

bool ImGui::InputInt(const char* label, int* v, int step, int step_fast, ImGuiInputTextFlags flags)
{
    // Hexadecimal input provided as a convenience but the flag name is awkward. Typically you'd use InputText() to parse your own data, if you want to handle prefixes.
    const char* format = (flags & ImGuiInputTextFlags_CharsHexadecimal) ? "%08X" : "%d";
    return InputScalar(label, ImGuiDataType_S32, (void*)v, (void*)(step>0 ? &step : NULL), (void*)(step_fast>0 ? &step_fast : NULL), format, flags);
}

bool ImGui::InputInt2(const char* label, int v[2], ImGuiInputTextFlags flags)
{
    return InputScalarN(label, ImGuiDataType_S32, v, 2, NULL, NULL, "%d", flags);
}

bool ImGui::InputInt3(const char* label, int v[3], ImGuiInputTextFlags flags)
{
    return InputScalarN(label, ImGuiDataType_S32, v, 3, NULL, NULL, "%d", flags);
}

bool ImGui::InputInt4(const char* label, int v[4], ImGuiInputTextFlags flags)
{
    return InputScalarN(label, ImGuiDataType_S32, v, 4, NULL, NULL, "%d", flags);
}

bool ImGui::InputDouble(const char* label, double* v, double step, double step_fast, const char* format, ImGuiInputTextFlags flags)
{
    flags |= ImGuiInputTextFlags_CharsScientific;
    return InputScalar(label, ImGuiDataType_Double, (void*)v, (void*)(step>0.0 ? &step : NULL), (void*)(step_fast>0.0 ? &step_fast : NULL), format, flags);
}

//-------------------------------------------------------------------------
// [SECTION] Widgets: InputText, InputTextMultiline, InputTextWithHint
//-------------------------------------------------------------------------
// - InputText()
// - InputTextWithHint()
// - InputTextMultiline()
// - InputTextEx() [Internal]
//-------------------------------------------------------------------------

bool ImGui::InputText(const char* label, char* buf, size_t buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* user_data)
{
    IM_ASSERT(!(flags & ImGuiInputTextFlags_Multiline)); // call InputTextMultiline()
    return InputTextEx(label, NULL, buf, (int)buf_size, ImVec2(0,0), flags, callback, user_data);
}

bool ImGui::InputTextMultiline(const char* label, char* buf, size_t buf_size, const ImVec2& size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* user_data)
{
    return InputTextEx(label, NULL, buf, (int)buf_size, size, flags | ImGuiInputTextFlags_Multiline, callback, user_data);
}

bool ImGui::InputTextWithHint(const char* label, const char* hint, char* buf, size_t buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* user_data)
{
    IM_ASSERT(!(flags & ImGuiInputTextFlags_Multiline)); // call InputTextMultiline()
    return InputTextEx(label, hint, buf, (int)buf_size, ImVec2(0, 0), flags, callback, user_data);
}

static int InputTextCalcTextLenAndLineCount(const char* text_begin, const char** out_text_end)
{
    int line_count = 0;
    const char* s = text_begin;
    while (char c = *s++) // We are only matching for \n so we can ignore UTF-8 decoding
        if (c == '\n')
            line_count++;
    s--;
    if (s[0] != '\n' && s[0] != '\r')
        line_count++;
    *out_text_end = s;
    return line_count;
}

static ImVec2 InputTextCalcTextSizeW(const ImWchar* text_begin, const ImWchar* text_end, const ImWchar** remaining, ImVec2* out_offset, bool stop_on_new_line)
{
    ImGuiContext& g = *GImGui;
    ImFont* font = g.Font;
    const float line_height = g.FontSize;
    const float scale = line_height / font->FontSize;

    ImVec2 text_size = ImVec2(0,0);
    float line_width = 0.0f;

    const ImWchar* s = text_begin;
    while (s < text_end)
    {
        unsigned int c = (unsigned int)(*s++);
        if (c == '\n')
        {
            text_size.x = ImMax(text_size.x, line_width);
            text_size.y += line_height;
            line_width = 0.0f;
            if (stop_on_new_line)
                break;
            continue;
        }
        if (c == '\r')
            continue;

        const float char_width = font->GetCharAdvance((ImWchar)c) * scale;
        line_width += char_width;
    }

    if (text_size.x < line_width)
        text_size.x = line_width;

    if (out_offset)
        *out_offset = ImVec2(line_width, text_size.y + line_height);  // offset allow for the possibility of sitting after a trailing \n

    if (line_width > 0 || text_size.y == 0.0f)                        // whereas size.y will ignore the trailing \n
        text_size.y += line_height;

    if (remaining)
        *remaining = s;

    return text_size;
}

// Wrapper for stb_textedit.h to edit text (our wrapper is for: statically sized buffer, single-line, wchar characters. InputText converts between UTF-8 and wchar)
namespace ImStb
{

static int     STB_TEXTEDIT_STRINGLEN(const STB_TEXTEDIT_STRING* obj)                             { return obj->CurLenW; }
static ImWchar STB_TEXTEDIT_GETCHAR(const STB_TEXTEDIT_STRING* obj, int idx)                      { return obj->TextW[idx]; }
static float   STB_TEXTEDIT_GETWIDTH(STB_TEXTEDIT_STRING* obj, int line_start_idx, int char_idx)  { ImWchar c = obj->TextW[line_start_idx + char_idx]; if (c == '\n') return STB_TEXTEDIT_GETWIDTH_NEWLINE; ImGuiContext& g = *GImGui; return g.Font->GetCharAdvance(c) * (g.FontSize / g.Font->FontSize); }
static int     STB_TEXTEDIT_KEYTOTEXT(int key)                                                    { return key >= 0x200000 ? 0 : key; }
static ImWchar STB_TEXTEDIT_NEWLINE = '\n';
static void    STB_TEXTEDIT_LAYOUTROW(StbTexteditRow* r, STB_TEXTEDIT_STRING* obj, int line_start_idx)
{
    const ImWchar* text = obj->TextW.Data;
    const ImWchar* text_remaining = NULL;
    const ImVec2 size = InputTextCalcTextSizeW(text + line_start_idx, text + obj->CurLenW, &text_remaining, NULL, true);
    r->x0 = 0.0f;
    r->x1 = size.x;
    r->baseline_y_delta = size.y;
    r->ymin = 0.0f;
    r->ymax = size.y;
    r->num_chars = (int)(text_remaining - (text + line_start_idx));
}

static bool is_separator(unsigned int c)                                        { return ImCharIsBlankW(c) || c==',' || c==';' || c=='(' || c==')' || c=='{' || c=='}' || c=='[' || c==']' || c=='|'; }
static int  is_word_boundary_from_right(STB_TEXTEDIT_STRING* obj, int idx)      { return idx > 0 ? (is_separator( obj->TextW[idx-1] ) && !is_separator( obj->TextW[idx] ) ) : 1; }
static int  STB_TEXTEDIT_MOVEWORDLEFT_IMPL(STB_TEXTEDIT_STRING* obj, int idx)   { idx--; while (idx >= 0 && !is_word_boundary_from_right(obj, idx)) idx--; return idx < 0 ? 0 : idx; }
#ifdef __APPLE__    // FIXME: Move setting to IO structure
static int  is_word_boundary_from_left(STB_TEXTEDIT_STRING* obj, int idx)       { return idx > 0 ? (!is_separator( obj->TextW[idx-1] ) && is_separator( obj->TextW[idx] ) ) : 1; }
static int  STB_TEXTEDIT_MOVEWORDRIGHT_IMPL(STB_TEXTEDIT_STRING* obj, int idx)  { idx++; int len = obj->CurLenW; while (idx < len && !is_word_boundary_from_left(obj, idx)) idx++; return idx > len ? len : idx; }
#else
static int  STB_TEXTEDIT_MOVEWORDRIGHT_IMPL(STB_TEXTEDIT_STRING* obj, int idx)  { idx++; int len = obj->CurLenW; while (idx < len && !is_word_boundary_from_right(obj, idx)) idx++; return idx > len ? len : idx; }
#endif
#define STB_TEXTEDIT_MOVEWORDLEFT   STB_TEXTEDIT_MOVEWORDLEFT_IMPL    // They need to be #define for stb_textedit.h
#define STB_TEXTEDIT_MOVEWORDRIGHT  STB_TEXTEDIT_MOVEWORDRIGHT_IMPL

static void STB_TEXTEDIT_DELETECHARS(STB_TEXTEDIT_STRING* obj, int pos, int n)
{
    ImWchar* dst = obj->TextW.Data + pos;

    // We maintain our buffer length in both UTF-8 and wchar formats
    obj->CurLenA -= ImTextCountUtf8BytesFromStr(dst, dst + n);
    obj->CurLenW -= n;

    // Offset remaining text (FIXME-OPT: Use memmove)
    const ImWchar* src = obj->TextW.Data + pos + n;
    while (ImWchar c = *src++)
        *dst++ = c;
    *dst = '\0';
}

static bool STB_TEXTEDIT_INSERTCHARS(STB_TEXTEDIT_STRING* obj, int pos, const ImWchar* new_text, int new_text_len)
{
    const bool is_resizable = (obj->UserFlags & ImGuiInputTextFlags_CallbackResize) != 0;
    const int text_len = obj->CurLenW;
    IM_ASSERT(pos <= text_len);

    const int new_text_len_utf8 = ImTextCountUtf8BytesFromStr(new_text, new_text + new_text_len);
    if (!is_resizable && (new_text_len_utf8 + obj->CurLenA + 1 > obj->BufCapacityA))
        return false;

    // Grow internal buffer if needed
    if (new_text_len + text_len + 1 > obj->TextW.Size)
    {
        if (!is_resizable)
            return false;
        IM_ASSERT(text_len < obj->TextW.Size);
        obj->TextW.resize(text_len + ImClamp(new_text_len * 4, 32, ImMax(256, new_text_len)) + 1);
    }

    ImWchar* text = obj->TextW.Data;
    if (pos != text_len)
        memmove(text + pos + new_text_len, text + pos, (size_t)(text_len - pos) * sizeof(ImWchar));
    memcpy(text + pos, new_text, (size_t)new_text_len * sizeof(ImWchar));

    obj->CurLenW += new_text_len;
    obj->CurLenA += new_text_len_utf8;
    obj->TextW[obj->CurLenW] = '\0';

    return true;
}

// We don't use an enum so we can build even with conflicting symbols (if another user of stb_textedit.h leak their STB_TEXTEDIT_K_* symbols)
#define STB_TEXTEDIT_K_LEFT         0x200000 // keyboard input to move cursor left
#define STB_TEXTEDIT_K_RIGHT        0x200001 // keyboard input to move cursor right
#define STB_TEXTEDIT_K_UP           0x200002 // keyboard input to move cursor up
#define STB_TEXTEDIT_K_DOWN         0x200003 // keyboard input to move cursor down
#define STB_TEXTEDIT_K_LINESTART    0x200004 // keyboard input to move cursor to start of line
#define STB_TEXTEDIT_K_LINEEND      0x200005 // keyboard input to move cursor to end of line
#define STB_TEXTEDIT_K_TEXTSTART    0x200006 // keyboard input to move cursor to start of text
#define STB_TEXTEDIT_K_TEXTEND      0x200007 // keyboard input to move cursor to end of text
#define STB_TEXTEDIT_K_DELETE       0x200008 // keyboard input to delete selection or character under cursor
#define STB_TEXTEDIT_K_BACKSPACE    0x200009 // keyboard input to delete selection or character left of cursor
#define STB_TEXTEDIT_K_UNDO         0x20000A // keyboard input to perform undo
#define STB_TEXTEDIT_K_REDO         0x20000B // keyboard input to perform redo
#define STB_TEXTEDIT_K_WORDLEFT     0x20000C // keyboard input to move cursor left one word
#define STB_TEXTEDIT_K_WORDRIGHT    0x20000D // keyboard input to move cursor right one word
#define STB_TEXTEDIT_K_SHIFT        0x400000

#define STB_TEXTEDIT_IMPLEMENTATION
#include "imstb_textedit.h"

}

void ImGuiInputTextState::OnKeyPressed(int key)
{
    stb_textedit_key(this, &Stb, key);
    CursorFollow = true;
    CursorAnimReset();
}

ImGuiInputTextCallbackData::ImGuiInputTextCallbackData()
{
    memset(this, 0, sizeof(*this));
}

// Public API to manipulate UTF-8 text
// We expose UTF-8 to the user (unlike the STB_TEXTEDIT_* functions which are manipulating wchar)
// FIXME: The existence of this rarely exercised code path is a bit of a nuisance.
void ImGuiInputTextCallbackData::DeleteChars(int pos, int bytes_count)
{
    IM_ASSERT(pos + bytes_count <= BufTextLen);
    char* dst = Buf + pos;
    const char* src = Buf + pos + bytes_count;
    while (char c = *src++)
        *dst++ = c;
    *dst = '\0';

    if (CursorPos + bytes_count >= pos)
        CursorPos -= bytes_count;
    else if (CursorPos >= pos)
        CursorPos = pos;
    SelectionStart = SelectionEnd = CursorPos;
    BufDirty = true;
    BufTextLen -= bytes_count;
}

void ImGuiInputTextCallbackData::InsertChars(int pos, const char* new_text, const char* new_text_end)
{
    const bool is_resizable = (Flags & ImGuiInputTextFlags_CallbackResize) != 0;
    const int new_text_len = new_text_end ? (int)(new_text_end - new_text) : (int)strlen(new_text);
    if (new_text_len + BufTextLen >= BufSize)
    {
        if (!is_resizable)
            return;

        // Contrary to STB_TEXTEDIT_INSERTCHARS() this is working in the UTF8 buffer, hence the midly similar code (until we remove the U16 buffer alltogether!)
        ImGuiContext& g = *GImGui;
        ImGuiInputTextState* edit_state = &g.InputTextState;
        IM_ASSERT(edit_state->ID != 0 && g.ActiveId == edit_state->ID);
        IM_ASSERT(Buf == edit_state->TextA.Data);
        int new_buf_size = BufTextLen + ImClamp(new_text_len * 4, 32, ImMax(256, new_text_len)) + 1;
        edit_state->TextA.reserve(new_buf_size + 1);
        Buf = edit_state->TextA.Data;
        BufSize = edit_state->BufCapacityA = new_buf_size;
    }

    if (BufTextLen != pos)
        memmove(Buf + pos + new_text_len, Buf + pos, (size_t)(BufTextLen - pos));
    memcpy(Buf + pos, new_text, (size_t)new_text_len * sizeof(char));
    Buf[BufTextLen + new_text_len] = '\0';

    if (CursorPos >= pos)
        CursorPos += new_text_len;
    SelectionStart = SelectionEnd = CursorPos;
    BufDirty = true;
    BufTextLen += new_text_len;
}

// Return false to discard a character.
static bool InputTextFilterCharacter(unsigned int* p_char, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* user_data)
{
    unsigned int c = *p_char;

    // Filter non-printable (NB: isprint is unreliable! see #2467)
    if (c < 0x20)
    {
        bool pass = false;
        pass |= (c == '\n' && (flags & ImGuiInputTextFlags_Multiline));
        pass |= (c == '\t' && (flags & ImGuiInputTextFlags_AllowTabInput));
        if (!pass)
            return false;
    }

    // We ignore Ascii representation of delete (emitted from Backspace on OSX, see #2578, #2817)
    if (c == 127)
        return false;

    // Filter private Unicode range. GLFW on OSX seems to send private characters for special keys like arrow keys (FIXME)
    if (c >= 0xE000 && c <= 0xF8FF)
        return false;

    // Filter Unicode ranges we are not handling in this build.
    if (c > IM_UNICODE_CODEPOINT_MAX)
        return false;

    // Generic named filters
    if (flags & (ImGuiInputTextFlags_CharsDecimal | ImGuiInputTextFlags_CharsHexadecimal | ImGuiInputTextFlags_CharsUppercase | ImGuiInputTextFlags_CharsNoBlank | ImGuiInputTextFlags_CharsScientific))
    {
        if (flags & ImGuiInputTextFlags_CharsDecimal)
            if (!(c >= '0' && c <= '9') && (c != '.') && (c != '-') && (c != '+') && (c != '*') && (c != '/'))
                return false;

        if (flags & ImGuiInputTextFlags_CharsScientific)
            if (!(c >= '0' && c <= '9') && (c != '.') && (c != '-') && (c != '+') && (c != '*') && (c != '/') && (c != 'e') && (c != 'E'))
                return false;

        if (flags & ImGuiInputTextFlags_CharsHexadecimal)
            if (!(c >= '0' && c <= '9') && !(c >= 'a' && c <= 'f') && !(c >= 'A' && c <= 'F'))
                return false;

        if (flags & ImGuiInputTextFlags_CharsUppercase)
            if (c >= 'a' && c <= 'z')
                *p_char = (c += (unsigned int)('A'-'a'));

        if (flags & ImGuiInputTextFlags_CharsNoBlank)
            if (ImCharIsBlankW(c))
                return false;
    }

    // Custom callback filter
    if (flags & ImGuiInputTextFlags_CallbackCharFilter)
    {
        ImGuiInputTextCallbackData callback_data;
        memset(&callback_data, 0, sizeof(ImGuiInputTextCallbackData));
        callback_data.EventFlag = ImGuiInputTextFlags_CallbackCharFilter;
        callback_data.EventChar = (ImWchar)c;
        callback_data.Flags = flags;
        callback_data.UserData = user_data;
        if (callback(&callback_data) != 0)
            return false;
        *p_char = callback_data.EventChar;
        if (!callback_data.EventChar)
            return false;
    }

    return true;
}

// Edit a string of text
// - buf_size account for the zero-terminator, so a buf_size of 6 can hold "Hello" but not "Hello!".
//   This is so we can easily call InputText() on static arrays using ARRAYSIZE() and to match
//   Note that in std::string world, capacity() would omit 1 byte used by the zero-terminator.
// - When active, hold on a privately held copy of the text (and apply back to 'buf'). So changing 'buf' while the InputText is active has no effect.
// - If you want to use ImGui::InputText() with std::string, see misc/cpp/imgui_stdlib.h
// (FIXME: Rather confusing and messy function, among the worse part of our codebase, expecting to rewrite a V2 at some point.. Partly because we are
//  doing UTF8 > U16 > UTF8 conversions on the go to easily interface with stb_textedit. Ideally should stay in UTF-8 all the time. See https://github.com/nothings/stb/issues/188)
bool ImGui::InputTextEx(const char* label, const char* hint, char* buf, int buf_size, const ImVec2& size_arg, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* callback_user_data)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    IM_ASSERT(!((flags & ImGuiInputTextFlags_CallbackHistory) && (flags & ImGuiInputTextFlags_Multiline)));        // Can't use both together (they both use up/down keys)
    IM_ASSERT(!((flags & ImGuiInputTextFlags_CallbackCompletion) && (flags & ImGuiInputTextFlags_AllowTabInput))); // Can't use both together (they both use tab key)

    ImGuiContext& g = *GImGui;
    ImGuiIO& io = g.IO;
    const ImGuiStyle& style = g.Style;

    const bool RENDER_SELECTION_WHEN_INACTIVE = false;
    const bool is_multiline = (flags & ImGuiInputTextFlags_Multiline) != 0;
    const bool is_readonly = (flags & ImGuiInputTextFlags_ReadOnly) != 0;
    const bool is_password = (flags & ImGuiInputTextFlags_Password) != 0;
    const bool is_undoable = (flags & ImGuiInputTextFlags_NoUndoRedo) == 0;
    const bool is_resizable = (flags & ImGuiInputTextFlags_CallbackResize) != 0;
    if (is_resizable)
        IM_ASSERT(callback != NULL); // Must provide a callback if you set the ImGuiInputTextFlags_CallbackResize flag!

    if (is_multiline) // Open group before calling GetID() because groups tracks id created within their scope,
        BeginGroup();
    const ImGuiID id = window->GetID(label);
    const ImVec2 label_size = CalcTextSize(label, NULL, true);
    const ImVec2 frame_size = CalcItemSize(size_arg, CalcItemWidth(), (is_multiline ? g.FontSize * 8.0f : label_size.y) + style.FramePadding.y*2.0f); // Arbitrary default of 8 lines high for multi-line
    const ImVec2 total_size = ImVec2(frame_size.x + (label_size.x > 0.0f ? style.ItemInnerSpacing.x + label_size.x : 0.0f), frame_size.y);

    const ImRect frame_bb(window->DC.CursorPos, window->DC.CursorPos + frame_size);
    const ImRect total_bb(frame_bb.Min, frame_bb.Min + total_size);

    ImGuiWindow* draw_window = window;
    ImVec2 inner_size = frame_size;
    if (is_multiline)
    {
        if (!ItemAdd(total_bb, id, &frame_bb))
        {
            ItemSize(total_bb, style.FramePadding.y);
            EndGroup();
            return false;
        }
        if (!BeginChildFrame(id, frame_bb.GetSize()))
        {
            EndChildFrame();
            EndGroup();
            return false;
        }
        draw_window = g.CurrentWindow; // Child window
        draw_window->DC.NavLayerActiveMaskNext |= draw_window->DC.NavLayerCurrentMask; // This is to ensure that EndChild() will display a navigation highlight
        inner_size.x -= draw_window->ScrollbarSizes.x;
    }
    else
    {
        ItemSize(total_bb, style.FramePadding.y);
        if (!ItemAdd(total_bb, id, &frame_bb))
            return false;
    }
    const bool hovered = ItemHoverable(frame_bb, id);
    if (hovered)
        g.MouseCursor = ImGuiMouseCursor_TextInput;

    // NB: we are only allowed to access 'edit_state' if we are the active widget.
    ImGuiInputTextState* state = NULL;
    if (g.InputTextState.ID == id)
        state = &g.InputTextState;

    const bool focus_requested = FocusableItemRegister(window, id);
    const bool focus_requested_by_code = focus_requested && (g.FocusRequestCurrWindow == window && g.FocusRequestCurrCounterAll == window->DC.FocusCounterAll);
    const bool focus_requested_by_tab = focus_requested && !focus_requested_by_code;

    const bool user_clicked = hovered && io.MouseClicked[0];
    const bool user_nav_input_start = (g.ActiveId != id) && ((g.NavInputId == id) || (g.NavActivateId == id && g.NavInputSource == ImGuiInputSource_NavKeyboard));
    const bool user_scroll_finish = is_multiline && state != NULL && g.ActiveId == 0 && g.ActiveIdPreviousFrame == GetWindowScrollbarID(draw_window, ImGuiAxis_Y);
    const bool user_scroll_active = is_multiline && state != NULL && g.ActiveId == GetWindowScrollbarID(draw_window, ImGuiAxis_Y);

    bool clear_active_id = false;
    bool select_all = (g.ActiveId != id) && ((flags & ImGuiInputTextFlags_AutoSelectAll) != 0 || user_nav_input_start) && (!is_multiline);

    const bool init_make_active = (focus_requested || user_clicked || user_scroll_finish || user_nav_input_start);
    const bool init_state = (init_make_active || user_scroll_active);
    if (init_state && g.ActiveId != id)
    {
        // Access state even if we don't own it yet.
        state = &g.InputTextState;
        state->CursorAnimReset();

        // Take a copy of the initial buffer value (both in original UTF-8 format and converted to wchar)
        // From the moment we focused we are ignoring the content of 'buf' (unless we are in read-only mode)
        const int buf_len = (int)strlen(buf);
        state->InitialTextA.resize(buf_len + 1);    // UTF-8. we use +1 to make sure that .Data is always pointing to at least an empty string.
        memcpy(state->InitialTextA.Data, buf, buf_len + 1);

        // Start edition
        const char* buf_end = NULL;
        state->TextW.resize(buf_size + 1);          // wchar count <= UTF-8 count. we use +1 to make sure that .Data is always pointing to at least an empty string.
        state->TextA.resize(0);
        state->TextAIsValid = false;                // TextA is not valid yet (we will display buf until then)
        state->CurLenW = ImTextStrFromUtf8(state->TextW.Data, buf_size, buf, NULL, &buf_end);
        state->CurLenA = (int)(buf_end - buf);      // We can't get the result from ImStrncpy() above because it is not UTF-8 aware. Here we'll cut off malformed UTF-8.

        // Preserve cursor position and undo/redo stack if we come back to same widget
        // FIXME: For non-readonly widgets we might be able to require that TextAIsValid && TextA == buf ? (untested) and discard undo stack if user buffer has changed.
        const bool recycle_state = (state->ID == id);
        if (recycle_state)
        {
            // Recycle existing cursor/selection/undo stack but clamp position
            // Note a single mouse click will override the cursor/position immediately by calling stb_textedit_click handler.
            state->CursorClamp();
        }
        else
        {
            state->ID = id;
            state->ScrollX = 0.0f;
            stb_textedit_initialize_state(&state->Stb, !is_multiline);
            if (!is_multiline && focus_requested_by_code)
                select_all = true;
        }
        if (flags & ImGuiInputTextFlags_AlwaysInsertMode)
            state->Stb.insert_mode = 1;
        if (!is_multiline && (focus_requested_by_tab || (user_clicked && io.KeyCtrl)))
            select_all = true;
    }

    if (g.ActiveId != id && init_make_active)
    {
        IM_ASSERT(state && state->ID == id);
        SetActiveID(id, window);
        SetFocusID(id, window);
        FocusWindow(window);

        // Declare our inputs
        IM_ASSERT(ImGuiNavInput_COUNT < 32);
        g.ActiveIdUsingNavDirMask |= (1 << ImGuiDir_Left) | (1 << ImGuiDir_Right);
        if (is_multiline || (flags & ImGuiInputTextFlags_CallbackHistory))
            g.ActiveIdUsingNavDirMask |= (1 << ImGuiDir_Up) | (1 << ImGuiDir_Down);
        g.ActiveIdUsingNavInputMask |= (1 << ImGuiNavInput_Cancel);
        g.ActiveIdUsingKeyInputMask |= ((ImU64)1 << ImGuiKey_Home) | ((ImU64)1 << ImGuiKey_End);
        if (is_multiline)
            g.ActiveIdUsingKeyInputMask |= ((ImU64)1 << ImGuiKey_PageUp) | ((ImU64)1 << ImGuiKey_PageDown); // FIXME-NAV: Page up/down actually not supported yet by widget, but claim them ahead.
        if (flags & (ImGuiInputTextFlags_CallbackCompletion | ImGuiInputTextFlags_AllowTabInput))  // Disable keyboard tabbing out as we will use the \t character.
            g.ActiveIdUsingKeyInputMask |= ((ImU64)1 << ImGuiKey_Tab);
    }

    // We have an edge case if ActiveId was set through another widget (e.g. widget being swapped), clear id immediately (don't wait until the end of the function)
    if (g.ActiveId == id && state == NULL)
        ClearActiveID();

    // Release focus when we click outside
    if (g.ActiveId == id && io.MouseClicked[0] && !init_state && !init_make_active) //-V560
        clear_active_id = true;

    // Lock the decision of whether we are going to take the path displaying the cursor or selection
    const bool render_cursor = (g.ActiveId == id) || (state && user_scroll_active);
    bool render_selection = state && state->HasSelection() && (RENDER_SELECTION_WHEN_INACTIVE || render_cursor);
    bool value_changed = false;
    bool enter_pressed = false;

    // When read-only we always use the live data passed to the function
    // FIXME-OPT: Because our selection/cursor code currently needs the wide text we need to convert it when active, which is not ideal :(
    if (is_readonly && state != NULL && (render_cursor || render_selection))
    {
        const char* buf_end = NULL;
        state->TextW.resize(buf_size + 1);
        state->CurLenW = ImTextStrFromUtf8(state->TextW.Data, state->TextW.Size, buf, NULL, &buf_end);
        state->CurLenA = (int)(buf_end - buf);
        state->CursorClamp();
        render_selection &= state->HasSelection();
    }

    // Select the buffer to render.
    const bool buf_display_from_state = (render_cursor || render_selection || g.ActiveId == id) && !is_readonly && state && state->TextAIsValid;
    const bool is_displaying_hint = (hint != NULL && (buf_display_from_state ? state->TextA.Data : buf)[0] == 0);

    // Password pushes a temporary font with only a fallback glyph
    if (is_password && !is_displaying_hint)
    {
        const ImFontGlyph* glyph = g.Font->FindGlyph('*');
        ImFont* password_font = &g.InputTextPasswordFont;
        password_font->FontSize = g.Font->FontSize;
        password_font->Scale = g.Font->Scale;
        password_font->DisplayOffset = g.Font->DisplayOffset;
        password_font->Ascent = g.Font->Ascent;
        password_font->Descent = g.Font->Descent;
        password_font->ContainerAtlas = g.Font->ContainerAtlas;
        password_font->FallbackGlyph = glyph;
        password_font->FallbackAdvanceX = glyph->AdvanceX;
        IM_ASSERT(password_font->Glyphs.empty() && password_font->IndexAdvanceX.empty() && password_font->IndexLookup.empty());
        PushFont(password_font);
    }

    // Process mouse inputs and character inputs
    int backup_current_text_length = 0;
    if (g.ActiveId == id)
    {
        IM_ASSERT(state != NULL);
        backup_current_text_length = state->CurLenA;
        state->BufCapacityA = buf_size;
        state->UserFlags = flags;
        state->UserCallback = callback;
        state->UserCallbackData = callback_user_data;

        // Although we are active we don't prevent mouse from hovering other elements unless we are interacting right now with the widget.
        // Down the line we should have a cleaner library-wide concept of Selected vs Active.
        g.ActiveIdAllowOverlap = !io.MouseDown[0];
        g.WantTextInputNextFrame = 1;

        // Edit in progress
        const float mouse_x = (io.MousePos.x - frame_bb.Min.x - style.FramePadding.x) + state->ScrollX;
        const float mouse_y = (is_multiline ? (io.MousePos.y - draw_window->DC.CursorPos.y - style.FramePadding.y) : (g.FontSize*0.5f));

        const bool is_osx = io.ConfigMacOSXBehaviors;
        if (select_all || (hovered && !is_osx && io.MouseDoubleClicked[0]))
        {
            state->SelectAll();
            state->SelectedAllMouseLock = true;
        }
        else if (hovered && is_osx && io.MouseDoubleClicked[0])
        {
            // Double-click select a word only, OS X style (by simulating keystrokes)
            state->OnKeyPressed(STB_TEXTEDIT_K_WORDLEFT);
            state->OnKeyPressed(STB_TEXTEDIT_K_WORDRIGHT | STB_TEXTEDIT_K_SHIFT);
        }
        else if (io.MouseClicked[0] && !state->SelectedAllMouseLock)
        {
            if (hovered)
            {
                stb_textedit_click(state, &state->Stb, mouse_x, mouse_y);
                state->CursorAnimReset();
            }
        }
        else if (io.MouseDown[0] && !state->SelectedAllMouseLock && (io.MouseDelta.x != 0.0f || io.MouseDelta.y != 0.0f))
        {
            stb_textedit_drag(state, &state->Stb, mouse_x, mouse_y);
            state->CursorAnimReset();
            state->CursorFollow = true;
        }
        if (state->SelectedAllMouseLock && !io.MouseDown[0])
            state->SelectedAllMouseLock = false;

        // It is ill-defined whether the back-end needs to send a \t character when pressing the TAB keys.
        // Win32 and GLFW naturally do it but not SDL.
        const bool ignore_char_inputs = (io.KeyCtrl && !io.KeyAlt) || (is_osx && io.KeySuper);
        if ((flags & ImGuiInputTextFlags_AllowTabInput) && IsKeyPressedMap(ImGuiKey_Tab) && !ignore_char_inputs && !io.KeyShift && !is_readonly)
            if (!io.InputQueueCharacters.contains('\t'))
            {
                unsigned int c = '\t'; // Insert TAB
                if (InputTextFilterCharacter(&c, flags, callback, callback_user_data))
                    state->OnKeyPressed((int)c);
            }

        // Process regular text input (before we check for Return because using some IME will effectively send a Return?)
        // We ignore CTRL inputs, but need to allow ALT+CTRL as some keyboards (e.g. German) use AltGR (which _is_ Alt+Ctrl) to input certain characters.
        if (io.InputQueueCharacters.Size > 0)
        {
            if (!ignore_char_inputs && !is_readonly && !user_nav_input_start)
                for (int n = 0; n < io.InputQueueCharacters.Size; n++)
                {
                    // Insert character if they pass filtering
                    unsigned int c = (unsigned int)io.InputQueueCharacters[n];
                    if (c == '\t' && io.KeyShift)
                        continue;
                    if (InputTextFilterCharacter(&c, flags, callback, callback_user_data))
                        state->OnKeyPressed((int)c);
                }

            // Consume characters
            io.InputQueueCharacters.resize(0);
        }
    }

    // Process other shortcuts/key-presses
    bool cancel_edit = false;
    if (g.ActiveId == id && !g.ActiveIdIsJustActivated && !clear_active_id)
    {
        IM_ASSERT(state != NULL);
        const int k_mask = (io.KeyShift ? STB_TEXTEDIT_K_SHIFT : 0);
        const bool is_osx = io.ConfigMacOSXBehaviors;
        const bool is_shortcut_key = (is_osx ? (io.KeySuper && !io.KeyCtrl) : (io.KeyCtrl && !io.KeySuper)) && !io.KeyAlt && !io.KeyShift; // OS X style: Shortcuts using Cmd/Super instead of Ctrl
        const bool is_osx_shift_shortcut = is_osx && io.KeySuper && io.KeyShift && !io.KeyCtrl && !io.KeyAlt;
        const bool is_wordmove_key_down = is_osx ? io.KeyAlt : io.KeyCtrl;                     // OS X style: Text editing cursor movement using Alt instead of Ctrl
        const bool is_startend_key_down = is_osx && io.KeySuper && !io.KeyCtrl && !io.KeyAlt;  // OS X style: Line/Text Start and End using Cmd+Arrows instead of Home/End
        const bool is_ctrl_key_only = io.KeyCtrl && !io.KeyShift && !io.KeyAlt && !io.KeySuper;
        const bool is_shift_key_only = io.KeyShift && !io.KeyCtrl && !io.KeyAlt && !io.KeySuper;

        const bool is_cut   = ((is_shortcut_key && IsKeyPressedMap(ImGuiKey_X)) || (is_shift_key_only && IsKeyPressedMap(ImGuiKey_Delete))) && !is_readonly && !is_password && (!is_multiline || state->HasSelection());
        const bool is_copy  = ((is_shortcut_key && IsKeyPressedMap(ImGuiKey_C)) || (is_ctrl_key_only  && IsKeyPressedMap(ImGuiKey_Insert))) && !is_password && (!is_multiline || state->HasSelection());
        const bool is_paste = ((is_shortcut_key && IsKeyPressedMap(ImGuiKey_V)) || (is_shift_key_only && IsKeyPressedMap(ImGuiKey_Insert))) && !is_readonly;
        const bool is_undo  = ((is_shortcut_key && IsKeyPressedMap(ImGuiKey_Z)) && !is_readonly && is_undoable);
        const bool is_redo  = ((is_shortcut_key && IsKeyPressedMap(ImGuiKey_Y)) || (is_osx_shift_shortcut && IsKeyPressedMap(ImGuiKey_Z))) && !is_readonly && is_undoable;

        if (IsKeyPressedMap(ImGuiKey_LeftArrow))                        { state->OnKeyPressed((is_startend_key_down ? STB_TEXTEDIT_K_LINESTART : is_wordmove_key_down ? STB_TEXTEDIT_K_WORDLEFT : STB_TEXTEDIT_K_LEFT) | k_mask); }
        else if (IsKeyPressedMap(ImGuiKey_RightArrow))                  { state->OnKeyPressed((is_startend_key_down ? STB_TEXTEDIT_K_LINEEND : is_wordmove_key_down ? STB_TEXTEDIT_K_WORDRIGHT : STB_TEXTEDIT_K_RIGHT) | k_mask); }
        else if (IsKeyPressedMap(ImGuiKey_UpArrow) && is_multiline)     { if (io.KeyCtrl) SetScrollY(draw_window, ImMax(draw_window->Scroll.y - g.FontSize, 0.0f)); else state->OnKeyPressed((is_startend_key_down ? STB_TEXTEDIT_K_TEXTSTART : STB_TEXTEDIT_K_UP) | k_mask); }
        else if (IsKeyPressedMap(ImGuiKey_DownArrow) && is_multiline)   { if (io.KeyCtrl) SetScrollY(draw_window, ImMin(draw_window->Scroll.y + g.FontSize, GetScrollMaxY())); else state->OnKeyPressed((is_startend_key_down ? STB_TEXTEDIT_K_TEXTEND : STB_TEXTEDIT_K_DOWN) | k_mask); }
        else if (IsKeyPressedMap(ImGuiKey_Home))                        { state->OnKeyPressed(io.KeyCtrl ? STB_TEXTEDIT_K_TEXTSTART | k_mask : STB_TEXTEDIT_K_LINESTART | k_mask); }
        else if (IsKeyPressedMap(ImGuiKey_End))                         { state->OnKeyPressed(io.KeyCtrl ? STB_TEXTEDIT_K_TEXTEND | k_mask : STB_TEXTEDIT_K_LINEEND | k_mask); }
        else if (IsKeyPressedMap(ImGuiKey_Delete) && !is_readonly)      { state->OnKeyPressed(STB_TEXTEDIT_K_DELETE | k_mask); }
        else if (IsKeyPressedMap(ImGuiKey_Backspace) && !is_readonly)
        {
            if (!state->HasSelection())
            {
                if (is_wordmove_key_down)
                    state->OnKeyPressed(STB_TEXTEDIT_K_WORDLEFT|STB_TEXTEDIT_K_SHIFT);
                else if (is_osx && io.KeySuper && !io.KeyAlt && !io.KeyCtrl)
                    state->OnKeyPressed(STB_TEXTEDIT_K_LINESTART|STB_TEXTEDIT_K_SHIFT);
            }
            state->OnKeyPressed(STB_TEXTEDIT_K_BACKSPACE | k_mask);
        }
        else if (IsKeyPressedMap(ImGuiKey_Enter) || IsKeyPressedMap(ImGuiKey_KeyPadEnter))
        {
            bool ctrl_enter_for_new_line = (flags & ImGuiInputTextFlags_CtrlEnterForNewLine) != 0;
            if (!is_multiline || (ctrl_enter_for_new_line && !io.KeyCtrl) || (!ctrl_enter_for_new_line && io.KeyCtrl))
            {
                enter_pressed = clear_active_id = true;
            }
            else if (!is_readonly)
            {
                unsigned int c = '\n'; // Insert new line
                if (InputTextFilterCharacter(&c, flags, callback, callback_user_data))
                    state->OnKeyPressed((int)c);
            }
        }
        else if (IsKeyPressedMap(ImGuiKey_Escape))
        {
            clear_active_id = cancel_edit = true;
        }
        else if (is_undo || is_redo)
        {
            state->OnKeyPressed(is_undo ? STB_TEXTEDIT_K_UNDO : STB_TEXTEDIT_K_REDO);
            state->ClearSelection();
        }
        else if (is_shortcut_key && IsKeyPressedMap(ImGuiKey_A))
        {
            state->SelectAll();
            state->CursorFollow = true;
        }
        else if (is_cut || is_copy)
        {
            // Cut, Copy
            if (io.SetClipboardTextFn)
            {
                const int ib = state->HasSelection() ? ImMin(state->Stb.select_start, state->Stb.select_end) : 0;
                const int ie = state->HasSelection() ? ImMax(state->Stb.select_start, state->Stb.select_end) : state->CurLenW;
                const int clipboard_data_len = ImTextCountUtf8BytesFromStr(state->TextW.Data + ib, state->TextW.Data + ie) + 1;
                char* clipboard_data = (char*)IM_ALLOC(clipboard_data_len * sizeof(char));
                ImTextStrToUtf8(clipboard_data, clipboard_data_len, state->TextW.Data + ib, state->TextW.Data + ie);
                SetClipboardText(clipboard_data);
                MemFree(clipboard_data);
            }
            if (is_cut)
            {
                if (!state->HasSelection())
                    state->SelectAll();
                state->CursorFollow = true;
                stb_textedit_cut(state, &state->Stb);
            }
        }
        else if (is_paste)
        {
            if (const char* clipboard = GetClipboardText())
            {
                // Filter pasted buffer
                const int clipboard_len = (int)strlen(clipboard);
                ImWchar* clipboard_filtered = (ImWchar*)IM_ALLOC((clipboard_len+1) * sizeof(ImWchar));
                int clipboard_filtered_len = 0;
                for (const char* s = clipboard; *s; )
                {
                    unsigned int c;
                    s += ImTextCharFromUtf8(&c, s, NULL);
                    if (c == 0)
                        break;
                    if (!InputTextFilterCharacter(&c, flags, callback, callback_user_data))
                        continue;
                    clipboard_filtered[clipboard_filtered_len++] = (ImWchar)c;
                }
                clipboard_filtered[clipboard_filtered_len] = 0;
                if (clipboard_filtered_len > 0) // If everything was filtered, ignore the pasting operation
                {
                    stb_textedit_paste(state, &state->Stb, clipboard_filtered, clipboard_filtered_len);
                    state->CursorFollow = true;
                }
                MemFree(clipboard_filtered);
            }
        }

        // Update render selection flag after events have been handled, so selection highlight can be displayed during the same frame.
        render_selection |= state->HasSelection() && (RENDER_SELECTION_WHEN_INACTIVE || render_cursor);
    }

    // Process callbacks and apply result back to user's buffer.
    if (g.ActiveId == id)
    {
        IM_ASSERT(state != NULL);
        const char* apply_new_text = NULL;
        int apply_new_text_length = 0;
        if (cancel_edit)
        {
            // Restore initial value. Only return true if restoring to the initial value changes the current buffer contents.
            if (!is_readonly && strcmp(buf, state->InitialTextA.Data) != 0)
            {
                apply_new_text = state->InitialTextA.Data;
                apply_new_text_length = state->InitialTextA.Size - 1;
            }
        }

        // When using 'ImGuiInputTextFlags_EnterReturnsTrue' as a special case we reapply the live buffer back to the input buffer before clearing ActiveId, even though strictly speaking it wasn't modified on this frame.
        // If we didn't do that, code like InputInt() with ImGuiInputTextFlags_EnterReturnsTrue would fail. Also this allows the user to use InputText() with ImGuiInputTextFlags_EnterReturnsTrue without maintaining any user-side storage.
        bool apply_edit_back_to_user_buffer = !cancel_edit || (enter_pressed && (flags & ImGuiInputTextFlags_EnterReturnsTrue) != 0);
        if (apply_edit_back_to_user_buffer)
        {
            // Apply new value immediately - copy modified buffer back
            // Note that as soon as the input box is active, the in-widget value gets priority over any underlying modification of the input buffer
            // FIXME: We actually always render 'buf' when calling DrawList->AddText, making the comment above incorrect.
            // FIXME-OPT: CPU waste to do this every time the widget is active, should mark dirty state from the stb_textedit callbacks.
            if (!is_readonly)
            {
                state->TextAIsValid = true;
                state->TextA.resize(state->TextW.Size * 4 + 1);
                ImTextStrToUtf8(state->TextA.Data, state->TextA.Size, state->TextW.Data, NULL);
            }

            // User callback
            if ((flags & (ImGuiInputTextFlags_CallbackCompletion | ImGuiInputTextFlags_CallbackHistory | ImGuiInputTextFlags_CallbackAlways)) != 0)
            {
                IM_ASSERT(callback != NULL);

                // The reason we specify the usage semantic (Completion/History) is that Completion needs to disable keyboard TABBING at the moment.
                ImGuiInputTextFlags event_flag = 0;
                ImGuiKey event_key = ImGuiKey_COUNT;
                if ((flags & ImGuiInputTextFlags_CallbackCompletion) != 0 && IsKeyPressedMap(ImGuiKey_Tab))
                {
                    event_flag = ImGuiInputTextFlags_CallbackCompletion;
                    event_key = ImGuiKey_Tab;
                }
                else if ((flags & ImGuiInputTextFlags_CallbackHistory) != 0 && IsKeyPressedMap(ImGuiKey_UpArrow))
                {
                    event_flag = ImGuiInputTextFlags_CallbackHistory;
                    event_key = ImGuiKey_UpArrow;
                }
                else if ((flags & ImGuiInputTextFlags_CallbackHistory) != 0 && IsKeyPressedMap(ImGuiKey_DownArrow))
                {
                    event_flag = ImGuiInputTextFlags_CallbackHistory;
                    event_key = ImGuiKey_DownArrow;
                }
                else if (flags & ImGuiInputTextFlags_CallbackAlways)
                    event_flag = ImGuiInputTextFlags_CallbackAlways;

                if (event_flag)
                {
                    ImGuiInputTextCallbackData callback_data;
                    memset(&callback_data, 0, sizeof(ImGuiInputTextCallbackData));
                    callback_data.EventFlag = event_flag;
                    callback_data.Flags = flags;
                    callback_data.UserData = callback_user_data;

                    callback_data.EventKey = event_key;
                    callback_data.Buf = state->TextA.Data;
                    callback_data.BufTextLen = state->CurLenA;
                    callback_data.BufSize = state->BufCapacityA;
                    callback_data.BufDirty = false;

                    // We have to convert from wchar-positions to UTF-8-positions, which can be pretty slow (an incentive to ditch the ImWchar buffer, see https://github.com/nothings/stb/issues/188)
                    ImWchar* text = state->TextW.Data;
                    const int utf8_cursor_pos = callback_data.CursorPos = ImTextCountUtf8BytesFromStr(text, text + state->Stb.cursor);
                    const int utf8_selection_start = callback_data.SelectionStart = ImTextCountUtf8BytesFromStr(text, text + state->Stb.select_start);
                    const int utf8_selection_end = callback_data.SelectionEnd = ImTextCountUtf8BytesFromStr(text, text + state->Stb.select_end);

                    // Call user code
                    callback(&callback_data);

                    // Read back what user may have modified
                    IM_ASSERT(callback_data.Buf == state->TextA.Data);  // Invalid to modify those fields
                    IM_ASSERT(callback_data.BufSize == state->BufCapacityA);
                    IM_ASSERT(callback_data.Flags == flags);
                    if (callback_data.CursorPos != utf8_cursor_pos)            { state->Stb.cursor = ImTextCountCharsFromUtf8(callback_data.Buf, callback_data.Buf + callback_data.CursorPos); state->CursorFollow = true; }
                    if (callback_data.SelectionStart != utf8_selection_start)  { state->Stb.select_start = ImTextCountCharsFromUtf8(callback_data.Buf, callback_data.Buf + callback_data.SelectionStart); }
                    if (callback_data.SelectionEnd != utf8_selection_end)      { state->Stb.select_end = ImTextCountCharsFromUtf8(callback_data.Buf, callback_data.Buf + callback_data.SelectionEnd); }
                    if (callback_data.BufDirty)
                    {
                        IM_ASSERT(callback_data.BufTextLen == (int)strlen(callback_data.Buf)); // You need to maintain BufTextLen if you change the text!
                        if (callback_data.BufTextLen > backup_current_text_length && is_resizable)
                            state->TextW.resize(state->TextW.Size + (callback_data.BufTextLen - backup_current_text_length));
                        state->CurLenW = ImTextStrFromUtf8(state->TextW.Data, state->TextW.Size, callback_data.Buf, NULL);
                        state->CurLenA = callback_data.BufTextLen;  // Assume correct length and valid UTF-8 from user, saves us an extra strlen()
                        state->CursorAnimReset();
                    }
                }
            }

            // Will copy result string if modified
            if (!is_readonly && strcmp(state->TextA.Data, buf) != 0)
            {
                apply_new_text = state->TextA.Data;
                apply_new_text_length = state->CurLenA;
            }
        }

        // Copy result to user buffer
        if (apply_new_text)
        {
            IM_ASSERT(apply_new_text_length >= 0);
            if (backup_current_text_length != apply_new_text_length && is_resizable)
            {
                ImGuiInputTextCallbackData callback_data;
                callback_data.EventFlag = ImGuiInputTextFlags_CallbackResize;
                callback_data.Flags = flags;
                callback_data.Buf = buf;
                callback_data.BufTextLen = apply_new_text_length;
                callback_data.BufSize = ImMax(buf_size, apply_new_text_length + 1);
                callback_data.UserData = callback_user_data;
                callback(&callback_data);
                buf = callback_data.Buf;
                buf_size = callback_data.BufSize;
                apply_new_text_length = ImMin(callback_data.BufTextLen, buf_size - 1);
                IM_ASSERT(apply_new_text_length <= buf_size);
            }

            // If the underlying buffer resize was denied or not carried to the next frame, apply_new_text_length+1 may be >= buf_size.
            ImStrncpy(buf, apply_new_text, ImMin(apply_new_text_length + 1, buf_size));
            value_changed = true;
        }

        // Clear temporary user storage
        state->UserFlags = 0;
        state->UserCallback = NULL;
        state->UserCallbackData = NULL;
    }

    // Release active ID at the end of the function (so e.g. pressing Return still does a final application of the value)
    if (clear_active_id && g.ActiveId == id)
        ClearActiveID();

    // Render frame
    if (!is_multiline)
    {
        RenderNavHighlight(frame_bb, id);
        RenderFrame(frame_bb.Min, frame_bb.Max, GetColorU32(ImGuiCol_FrameBg), true, style.FrameRounding);
    }

    const ImVec4 clip_rect(frame_bb.Min.x, frame_bb.Min.y, frame_bb.Min.x + inner_size.x, frame_bb.Min.y + inner_size.y); // Not using frame_bb.Max because we have adjusted size
    ImVec2 draw_pos = is_multiline ? draw_window->DC.CursorPos : frame_bb.Min + style.FramePadding;
    ImVec2 text_size(0.0f, 0.0f);

    // Set upper limit of single-line InputTextEx() at 2 million characters strings. The current pathological worst case is a long line
    // without any carriage return, which would makes ImFont::RenderText() reserve too many vertices and probably crash. Avoid it altogether.
    // Note that we only use this limit on single-line InputText(), so a pathologically large line on a InputTextMultiline() would still crash.
    const int buf_display_max_length = 2 * 1024 * 1024;
    const char* buf_display = buf_display_from_state ? state->TextA.Data : buf; //-V595
    const char* buf_display_end = NULL; // We have specialized paths below for setting the length
    if (is_displaying_hint)
    {
        buf_display = hint;
        buf_display_end = hint + strlen(hint);
    }

    // Render text. We currently only render selection when the widget is active or while scrolling.
    // FIXME: We could remove the '&& render_cursor' to keep rendering selection when inactive.
    if (render_cursor || render_selection)
    {
        IM_ASSERT(state != NULL);
        if (!is_displaying_hint)
            buf_display_end = buf_display + state->CurLenA;

        // Render text (with cursor and selection)
        // This is going to be messy. We need to:
        // - Display the text (this alone can be more easily clipped)
        // - Handle scrolling, highlight selection, display cursor (those all requires some form of 1d->2d cursor position calculation)
        // - Measure text height (for scrollbar)
        // We are attempting to do most of that in **one main pass** to minimize the computation cost (non-negligible for large amount of text) + 2nd pass for selection rendering (we could merge them by an extra refactoring effort)
        // FIXME: This should occur on buf_display but we'd need to maintain cursor/select_start/select_end for UTF-8.
        const ImWchar* text_begin = state->TextW.Data;
        ImVec2 cursor_offset, select_start_offset;

        {
            // Find lines numbers straddling 'cursor' (slot 0) and 'select_start' (slot 1) positions.
            const ImWchar* searches_input_ptr[2] = { NULL, NULL };
            int searches_result_line_no[2] = { -1000, -1000 };
            int searches_remaining = 0;
            if (render_cursor)
            {
                searches_input_ptr[0] = text_begin + state->Stb.cursor;
                searches_result_line_no[0] = -1;
                searches_remaining++;
            }
            if (render_selection)
            {
                searches_input_ptr[1] = text_begin + ImMin(state->Stb.select_start, state->Stb.select_end);
                searches_result_line_no[1] = -1;
                searches_remaining++;
            }

            // Iterate all lines to find our line numbers
            // In multi-line mode, we never exit the loop until all lines are counted, so add one extra to the searches_remaining counter.
            searches_remaining += is_multiline ? 1 : 0;
            int line_count = 0;
            //for (const ImWchar* s = text_begin; (s = (const ImWchar*)wcschr((const wchar_t*)s, (wchar_t)'\n')) != NULL; s++)  // FIXME-OPT: Could use this when wchar_t are 16-bit
            for (const ImWchar* s = text_begin; *s != 0; s++)
                if (*s == '\n')
                {
                    line_count++;
                    if (searches_result_line_no[0] == -1 && s >= searches_input_ptr[0]) { searches_result_line_no[0] = line_count; if (--searches_remaining <= 0) break; }
                    if (searches_result_line_no[1] == -1 && s >= searches_input_ptr[1]) { searches_result_line_no[1] = line_count; if (--searches_remaining <= 0) break; }
                }
            line_count++;
            if (searches_result_line_no[0] == -1)
                searches_result_line_no[0] = line_count;
            if (searches_result_line_no[1] == -1)
                searches_result_line_no[1] = line_count;

            // Calculate 2d position by finding the beginning of the line and measuring distance
            cursor_offset.x = InputTextCalcTextSizeW(ImStrbolW(searches_input_ptr[0], text_begin), searches_input_ptr[0]).x;
            cursor_offset.y = searches_result_line_no[0] * g.FontSize;
            if (searches_result_line_no[1] >= 0)
            {
                select_start_offset.x = InputTextCalcTextSizeW(ImStrbolW(searches_input_ptr[1], text_begin), searches_input_ptr[1]).x;
                select_start_offset.y = searches_result_line_no[1] * g.FontSize;
            }

            // Store text height (note that we haven't calculated text width at all, see GitHub issues #383, #1224)
            if (is_multiline)
                text_size = ImVec2(inner_size.x, line_count * g.FontSize);
        }

        // Scroll
        if (render_cursor && state->CursorFollow)
        {
            // Horizontal scroll in chunks of quarter width
            if (!(flags & ImGuiInputTextFlags_NoHorizontalScroll))
            {
                const float scroll_increment_x = inner_size.x * 0.25f;
                if (cursor_offset.x < state->ScrollX)
                    state->ScrollX = IM_FLOOR(ImMax(0.0f, cursor_offset.x - scroll_increment_x));
                else if (cursor_offset.x - inner_size.x >= state->ScrollX)
                    state->ScrollX = IM_FLOOR(cursor_offset.x - inner_size.x + scroll_increment_x);
            }
            else
            {
                state->ScrollX = 0.0f;
            }

            // Vertical scroll
            if (is_multiline)
            {
                float scroll_y = draw_window->Scroll.y;
                if (cursor_offset.y - g.FontSize < scroll_y)
                    scroll_y = ImMax(0.0f, cursor_offset.y - g.FontSize);
                else if (cursor_offset.y - inner_size.y >= scroll_y)
                    scroll_y = cursor_offset.y - inner_size.y;
                draw_pos.y += (draw_window->Scroll.y - scroll_y);   // Manipulate cursor pos immediately avoid a frame of lag
                draw_window->Scroll.y = scroll_y;
            }

            state->CursorFollow = false;
        }

        // Draw selection
        const ImVec2 draw_scroll = ImVec2(state->ScrollX, 0.0f);
        if (render_selection)
        {
            const ImWchar* text_selected_begin = text_begin + ImMin(state->Stb.select_start, state->Stb.select_end);
            const ImWchar* text_selected_end = text_begin + ImMax(state->Stb.select_start, state->Stb.select_end);

            ImU32 bg_color = GetColorU32(ImGuiCol_TextSelectedBg, render_cursor ? 1.0f : 0.6f); // FIXME: current code flow mandate that render_cursor is always true here, we are leaving the transparent one for tests.
            float bg_offy_up = is_multiline ? 0.0f : -1.0f;    // FIXME: those offsets should be part of the style? they don't play so well with multi-line selection.
            float bg_offy_dn = is_multiline ? 0.0f : 2.0f;
            ImVec2 rect_pos = draw_pos + select_start_offset - draw_scroll;
            for (const ImWchar* p = text_selected_begin; p < text_selected_end; )
            {
                if (rect_pos.y > clip_rect.w + g.FontSize)
                    break;
                if (rect_pos.y < clip_rect.y)
                {
                    //p = (const ImWchar*)wmemchr((const wchar_t*)p, '\n', text_selected_end - p);  // FIXME-OPT: Could use this when wchar_t are 16-bit
                    //p = p ? p + 1 : text_selected_end;
                    while (p < text_selected_end)
                        if (*p++ == '\n')
                            break;
                }
                else
                {
                    ImVec2 rect_size = InputTextCalcTextSizeW(p, text_selected_end, &p, NULL, true);
                    if (rect_size.x <= 0.0f) rect_size.x = IM_FLOOR(g.Font->GetCharAdvance((ImWchar)' ') * 0.50f); // So we can see selected empty lines
                    ImRect rect(rect_pos + ImVec2(0.0f, bg_offy_up - g.FontSize), rect_pos +ImVec2(rect_size.x, bg_offy_dn));
                    rect.ClipWith(clip_rect);
                    if (rect.Overlaps(clip_rect))
                        draw_window->DrawList->AddRectFilled(rect.Min, rect.Max, bg_color);
                }
                rect_pos.x = draw_pos.x - draw_scroll.x;
                rect_pos.y += g.FontSize;
            }
        }

        // We test for 'buf_display_max_length' as a way to avoid some pathological cases (e.g. single-line 1 MB string) which would make ImDrawList crash.
        if (is_multiline || (buf_display_end - buf_display) < buf_display_max_length)
        {
            ImU32 col = GetColorU32(is_displaying_hint ? ImGuiCol_TextDisabled : ImGuiCol_Text);
            draw_window->DrawList->AddText(g.Font, g.FontSize, draw_pos - draw_scroll, col, buf_display, buf_display_end, 0.0f, is_multiline ? NULL : &clip_rect);
        }

        // Draw blinking cursor
        if (render_cursor)
        {
            state->CursorAnim += io.DeltaTime;
            bool cursor_is_visible = (!g.IO.ConfigInputTextCursorBlink) || (state->CursorAnim <= 0.0f) || ImFmod(state->CursorAnim, 1.20f) <= 0.80f;
            ImVec2 cursor_screen_pos = draw_pos + cursor_offset - draw_scroll;
            ImRect cursor_screen_rect(cursor_screen_pos.x, cursor_screen_pos.y - g.FontSize + 0.5f, cursor_screen_pos.x + 1.0f, cursor_screen_pos.y - 1.5f);
            if (cursor_is_visible && cursor_screen_rect.Overlaps(clip_rect))
                draw_window->DrawList->AddLine(cursor_screen_rect.Min, cursor_screen_rect.GetBL(), GetColorU32(ImGuiCol_Text));

            // Notify OS of text input position for advanced IME (-1 x offset so that Windows IME can cover our cursor. Bit of an extra nicety.)
            if (!is_readonly)
                g.PlatformImePos = ImVec2(cursor_screen_pos.x - 1.0f, cursor_screen_pos.y - g.FontSize);
        }
    }
    else
    {
        // Render text only (no selection, no cursor)
        if (is_multiline)
            text_size = ImVec2(inner_size.x, InputTextCalcTextLenAndLineCount(buf_display, &buf_display_end) * g.FontSize); // We don't need width
        else if (!is_displaying_hint && g.ActiveId == id)
            buf_display_end = buf_display + state->CurLenA;
        else if (!is_displaying_hint)
            buf_display_end = buf_display + strlen(buf_display);

        if (is_multiline || (buf_display_end - buf_display) < buf_display_max_length)
        {
            ImU32 col = GetColorU32(is_displaying_hint ? ImGuiCol_TextDisabled : ImGuiCol_Text);
            draw_window->DrawList->AddText(g.Font, g.FontSize, draw_pos, col, buf_display, buf_display_end, 0.0f, is_multiline ? NULL : &clip_rect);
        }
    }

    if (is_multiline)
    {
        Dummy(text_size + ImVec2(0.0f, g.FontSize)); // Always add room to scroll an extra line
        EndChildFrame();
        EndGroup();
    }

    if (is_password && !is_displaying_hint)
        PopFont();

    // Log as text
    if (g.LogEnabled && !(is_password && !is_displaying_hint))
        LogRenderedText(&draw_pos, buf_display, buf_display_end);

    if (label_size.x > 0)
        RenderText(ImVec2(frame_bb.Max.x + style.ItemInnerSpacing.x, frame_bb.Min.y + style.FramePadding.y), label);

    if (value_changed && !(flags & ImGuiInputTextFlags_NoMarkEdited))
        MarkItemEdited(id);

    IMGUI_TEST_ENGINE_ITEM_INFO(id, label, window->DC.ItemFlags);
    if ((flags & ImGuiInputTextFlags_EnterReturnsTrue) != 0)
        return enter_pressed;
    else
        return value_changed;
}

//-------------------------------------------------------------------------
// [SECTION] Widgets: ColorEdit, ColorPicker, ColorButton, etc.
//-------------------------------------------------------------------------
// - ColorEdit3()
// - ColorEdit4()
// - ColorPicker3()
// - RenderColorRectWithAlphaCheckerboard() [Internal]
// - ColorPicker4()
// - ColorButton()
// - SetColorEditOptions()
// - ColorTooltip() [Internal]
// - ColorEditOptionsPopup() [Internal]
// - ColorPickerOptionsPopup() [Internal]
//-------------------------------------------------------------------------

bool ImGui::ColorEdit3(const char* label, float col[3], ImGuiColorEditFlags flags)
{
    return ColorEdit4(label, col, flags | ImGuiColorEditFlags_NoAlpha);
}

// Edit colors components (each component in 0.0f..1.0f range).
// See enum ImGuiColorEditFlags_ for available options. e.g. Only access 3 floats if ImGuiColorEditFlags_NoAlpha flag is set.
// With typical options: Left-click on colored square to open color picker. Right-click to open option menu. CTRL-Click over input fields to edit them and TAB to go to next item.
bool ImGui::ColorEdit4(const char* label, float col[4], ImGuiColorEditFlags flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const float square_sz = GetFrameHeight();
    const float w_full = CalcItemWidth();
    const float w_button = (flags & ImGuiColorEditFlags_NoSmallPreview) ? 0.0f : (square_sz + style.ItemInnerSpacing.x);
    const float w_inputs = w_full - w_button;
    const char* label_display_end = FindRenderedTextEnd(label);
    g.NextItemData.ClearFlags();

    BeginGroup();
    PushID(label);

    // If we're not showing any slider there's no point in doing any HSV conversions
    const ImGuiColorEditFlags flags_untouched = flags;
    if (flags & ImGuiColorEditFlags_NoInputs)
        flags = (flags & (~ImGuiColorEditFlags__DisplayMask)) | ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_NoOptions;

    // Context menu: display and modify options (before defaults are applied)
    if (!(flags & ImGuiColorEditFlags_NoOptions))
        ColorEditOptionsPopup(col, flags);

    // Read stored options
    if (!(flags & ImGuiColorEditFlags__DisplayMask))
        flags |= (g.ColorEditOptions & ImGuiColorEditFlags__DisplayMask);
    if (!(flags & ImGuiColorEditFlags__DataTypeMask))
        flags |= (g.ColorEditOptions & ImGuiColorEditFlags__DataTypeMask);
    if (!(flags & ImGuiColorEditFlags__PickerMask))
        flags |= (g.ColorEditOptions & ImGuiColorEditFlags__PickerMask);
    if (!(flags & ImGuiColorEditFlags__InputMask))
        flags |= (g.ColorEditOptions & ImGuiColorEditFlags__InputMask);
    flags |= (g.ColorEditOptions & ~(ImGuiColorEditFlags__DisplayMask | ImGuiColorEditFlags__DataTypeMask | ImGuiColorEditFlags__PickerMask | ImGuiColorEditFlags__InputMask));
    IM_ASSERT(ImIsPowerOfTwo(flags & ImGuiColorEditFlags__DisplayMask)); // Check that only 1 is selected
    IM_ASSERT(ImIsPowerOfTwo(flags & ImGuiColorEditFlags__InputMask));   // Check that only 1 is selected

    const bool alpha = (flags & ImGuiColorEditFlags_NoAlpha) == 0;
    const bool hdr = (flags & ImGuiColorEditFlags_HDR) != 0;
    const int components = alpha ? 4 : 3;

    // Convert to the formats we need
    float f[4] = { col[0], col[1], col[2], alpha ? col[3] : 1.0f };
    if ((flags & ImGuiColorEditFlags_InputHSV) && (flags & ImGuiColorEditFlags_DisplayRGB))
        ColorConvertHSVtoRGB(f[0], f[1], f[2], f[0], f[1], f[2]);
    else if ((flags & ImGuiColorEditFlags_InputRGB) && (flags & ImGuiColorEditFlags_DisplayHSV))
    {
        // Hue is lost when converting from greyscale rgb (saturation=0). Restore it.
        ColorConvertRGBtoHSV(f[0], f[1], f[2], f[0], f[1], f[2]);
        if (f[1] == 0 && memcmp(g.ColorEditLastColor, col, sizeof(float) * 3) == 0)
            f[0] = g.ColorEditLastHue;
    }
    int i[4] = { IM_F32_TO_INT8_UNBOUND(f[0]), IM_F32_TO_INT8_UNBOUND(f[1]), IM_F32_TO_INT8_UNBOUND(f[2]), IM_F32_TO_INT8_UNBOUND(f[3]) };

    bool value_changed = false;
    bool value_changed_as_float = false;

    const ImVec2 pos = window->DC.CursorPos;
    const float inputs_offset_x = (style.ColorButtonPosition == ImGuiDir_Left) ? w_button : 0.0f;
    window->DC.CursorPos.x = pos.x + inputs_offset_x;

    if ((flags & (ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_DisplayHSV)) != 0 && (flags & ImGuiColorEditFlags_NoInputs) == 0)
    {
        // RGB/HSV 0..255 Sliders
        const float w_item_one  = ImMax(1.0f, IM_FLOOR((w_inputs - (style.ItemInnerSpacing.x) * (components-1)) / (float)components));
        const float w_item_last = ImMax(1.0f, IM_FLOOR(w_inputs - (w_item_one + style.ItemInnerSpacing.x) * (components-1)));

        const bool hide_prefix = (w_item_one <= CalcTextSize((flags & ImGuiColorEditFlags_Float) ? "M:0.000" : "M:000").x);
        static const char* ids[4] = { "##X", "##Y", "##Z", "##W" };
        static const char* fmt_table_int[3][4] =
        {
            {   "%3d",   "%3d",   "%3d",   "%3d" }, // Short display
            { "R:%3d", "G:%3d", "B:%3d", "A:%3d" }, // Long display for RGBA
            { "H:%3d", "S:%3d", "V:%3d", "A:%3d" }  // Long display for HSVA
        };
        static const char* fmt_table_float[3][4] =
        {
            {   "%0.3f",   "%0.3f",   "%0.3f",   "%0.3f" }, // Short display
            { "R:%0.3f", "G:%0.3f", "B:%0.3f", "A:%0.3f" }, // Long display for RGBA
            { "H:%0.3f", "S:%0.3f", "V:%0.3f", "A:%0.3f" }  // Long display for HSVA
        };
        const int fmt_idx = hide_prefix ? 0 : (flags & ImGuiColorEditFlags_DisplayHSV) ? 2 : 1;

        for (int n = 0; n < components; n++)
        {
            if (n > 0)
                SameLine(0, style.ItemInnerSpacing.x);
            SetNextItemWidth((n + 1 < components) ? w_item_one : w_item_last);

            // Disable Hue edit when Saturation is zero
            const bool disable_hue_edit = (n == 0 && (flags & ImGuiColorEditFlags_DisplayHSV) && i[1] == 0);
            if (flags & ImGuiColorEditFlags_Float)
            {
                value_changed |= DragFloat(ids[n], &f[n], 1.0f/255.0f, disable_hue_edit ? +FLT_MAX : 0.0f, disable_hue_edit ? -FLT_MAX : hdr ? 0.0f : 1.0f, fmt_table_float[fmt_idx][n]);
                value_changed_as_float |= value_changed;
            }
            else
            {
                value_changed |= DragInt(ids[n], &i[n], 1.0f, disable_hue_edit ? INT_MAX : 0, disable_hue_edit ? INT_MIN : hdr ? 0 : 255, fmt_table_int[fmt_idx][n]);
            }
            if (!(flags & ImGuiColorEditFlags_NoOptions))
                OpenPopupOnItemClick("context");
        }
    }
    else if ((flags & ImGuiColorEditFlags_DisplayHex) != 0 && (flags & ImGuiColorEditFlags_NoInputs) == 0)
    {
        // RGB Hexadecimal Input
        char buf[64];
        if (alpha)
            ImFormatString(buf, IM_ARRAYSIZE(buf), "#%02X%02X%02X%02X", ImClamp(i[0],0,255), ImClamp(i[1],0,255), ImClamp(i[2],0,255), ImClamp(i[3],0,255));
        else
            ImFormatString(buf, IM_ARRAYSIZE(buf), "#%02X%02X%02X", ImClamp(i[0],0,255), ImClamp(i[1],0,255), ImClamp(i[2],0,255));
        SetNextItemWidth(w_inputs);
        if (InputText("##Text", buf, IM_ARRAYSIZE(buf), ImGuiInputTextFlags_CharsHexadecimal | ImGuiInputTextFlags_CharsUppercase))
        {
            value_changed = true;
            char* p = buf;
            while (*p == '#' || ImCharIsBlankA(*p))
                p++;
            i[0] = i[1] = i[2] = i[3] = 0;
            if (alpha)
                sscanf(p, "%02X%02X%02X%02X", (unsigned int*)&i[0], (unsigned int*)&i[1], (unsigned int*)&i[2], (unsigned int*)&i[3]); // Treat at unsigned (%X is unsigned)
            else
                sscanf(p, "%02X%02X%02X", (unsigned int*)&i[0], (unsigned int*)&i[1], (unsigned int*)&i[2]);
        }
        if (!(flags & ImGuiColorEditFlags_NoOptions))
            OpenPopupOnItemClick("context");
    }

    ImGuiWindow* picker_active_window = NULL;
    if (!(flags & ImGuiColorEditFlags_NoSmallPreview))
    {
        const float button_offset_x = ((flags & ImGuiColorEditFlags_NoInputs) || (style.ColorButtonPosition == ImGuiDir_Left)) ? 0.0f : w_inputs + style.ItemInnerSpacing.x;
        window->DC.CursorPos = ImVec2(pos.x + button_offset_x, pos.y);

        const ImVec4 col_v4(col[0], col[1], col[2], alpha ? col[3] : 1.0f);
        if (ColorButton("##ColorButton", col_v4, flags))
        {
            if (!(flags & ImGuiColorEditFlags_NoPicker))
            {
                // Store current color and open a picker
                g.ColorPickerRef = col_v4;
                OpenPopup("picker");
                SetNextWindowPos(window->DC.LastItemRect.GetBL() + ImVec2(-1,style.ItemSpacing.y));
            }
        }
        if (!(flags & ImGuiColorEditFlags_NoOptions))
            OpenPopupOnItemClick("context");

        if (BeginPopup("picker"))
        {
            picker_active_window = g.CurrentWindow;
            if (label != label_display_end)
            {
                TextEx(label, label_display_end);
                Spacing();
            }
            ImGuiColorEditFlags picker_flags_to_forward = ImGuiColorEditFlags__DataTypeMask | ImGuiColorEditFlags__PickerMask | ImGuiColorEditFlags__InputMask | ImGuiColorEditFlags_HDR | ImGuiColorEditFlags_NoAlpha | ImGuiColorEditFlags_AlphaBar;
            ImGuiColorEditFlags picker_flags = (flags_untouched & picker_flags_to_forward) | ImGuiColorEditFlags__DisplayMask | ImGuiColorEditFlags_NoLabel | ImGuiColorEditFlags_AlphaPreviewHalf;
            SetNextItemWidth(square_sz * 12.0f); // Use 256 + bar sizes?
            value_changed |= ColorPicker4("##picker", col, picker_flags, &g.ColorPickerRef.x);
            EndPopup();
        }
    }

    if (label != label_display_end && !(flags & ImGuiColorEditFlags_NoLabel))
    {
        window->DC.CursorPos = ImVec2(pos.x + w_full + style.ItemInnerSpacing.x, pos.y + style.FramePadding.y);
        TextEx(label, label_display_end);
    }

    // Convert back
    if (value_changed && picker_active_window == NULL)
    {
        if (!value_changed_as_float)
            for (int n = 0; n < 4; n++)
                f[n] = i[n] / 255.0f;
        if ((flags & ImGuiColorEditFlags_DisplayHSV) && (flags & ImGuiColorEditFlags_InputRGB))
        {
            g.ColorEditLastHue = f[0];
            ColorConvertHSVtoRGB(f[0], f[1], f[2], f[0], f[1], f[2]);
            memcpy(g.ColorEditLastColor, f, sizeof(float) * 3);
        }
        if ((flags & ImGuiColorEditFlags_DisplayRGB) && (flags & ImGuiColorEditFlags_InputHSV))
            ColorConvertRGBtoHSV(f[0], f[1], f[2], f[0], f[1], f[2]);

        col[0] = f[0];
        col[1] = f[1];
        col[2] = f[2];
        if (alpha)
            col[3] = f[3];
    }

    PopID();
    EndGroup();

    // Drag and Drop Target
    // NB: The flag test is merely an optional micro-optimization, BeginDragDropTarget() does the same test.
    if ((window->DC.LastItemStatusFlags & ImGuiItemStatusFlags_HoveredRect) && !(flags & ImGuiColorEditFlags_NoDragDrop) && BeginDragDropTarget())
    {
        bool accepted_drag_drop = false;
        if (const ImGuiPayload* payload = AcceptDragDropPayload(IMGUI_PAYLOAD_TYPE_COLOR_3F))
        {
            memcpy((float*)col, payload->Data, sizeof(float) * 3); // Preserve alpha if any //-V512
            value_changed = accepted_drag_drop = true;
        }
        if (const ImGuiPayload* payload = AcceptDragDropPayload(IMGUI_PAYLOAD_TYPE_COLOR_4F))
        {
            memcpy((float*)col, payload->Data, sizeof(float) * components);
            value_changed = accepted_drag_drop = true;
        }

        // Drag-drop payloads are always RGB
        if (accepted_drag_drop && (flags & ImGuiColorEditFlags_InputHSV))
            ColorConvertRGBtoHSV(col[0], col[1], col[2], col[0], col[1], col[2]);
        EndDragDropTarget();
    }

    // When picker is being actively used, use its active id so IsItemActive() will function on ColorEdit4().
    if (picker_active_window && g.ActiveId != 0 && g.ActiveIdWindow == picker_active_window)
        window->DC.LastItemId = g.ActiveId;

    if (value_changed)
        MarkItemEdited(window->DC.LastItemId);

    return value_changed;
}

bool ImGui::ColorPicker3(const char* label, float col[3], ImGuiColorEditFlags flags)
{
    float col4[4] = { col[0], col[1], col[2], 1.0f };
    if (!ColorPicker4(label, col4, flags | ImGuiColorEditFlags_NoAlpha))
        return false;
    col[0] = col4[0]; col[1] = col4[1]; col[2] = col4[2];
    return true;
}

static inline ImU32 ImAlphaBlendColor(ImU32 col_a, ImU32 col_b)
{
    float t = ((col_b >> IM_COL32_A_SHIFT) & 0xFF) / 255.f;
    int r = ImLerp((int)(col_a >> IM_COL32_R_SHIFT) & 0xFF, (int)(col_b >> IM_COL32_R_SHIFT) & 0xFF, t);
    int g = ImLerp((int)(col_a >> IM_COL32_G_SHIFT) & 0xFF, (int)(col_b >> IM_COL32_G_SHIFT) & 0xFF, t);
    int b = ImLerp((int)(col_a >> IM_COL32_B_SHIFT) & 0xFF, (int)(col_b >> IM_COL32_B_SHIFT) & 0xFF, t);
    return IM_COL32(r, g, b, 0xFF);
}

// Helper for ColorPicker4()
// NB: This is rather brittle and will show artifact when rounding this enabled if rounded corners overlap multiple cells. Caller currently responsible for avoiding that.
// I spent a non reasonable amount of time trying to getting this right for ColorButton with rounding+anti-aliasing+ImGuiColorEditFlags_HalfAlphaPreview flag + various grid sizes and offsets, and eventually gave up... probably more reasonable to disable rounding alltogether.
void ImGui::RenderColorRectWithAlphaCheckerboard(ImVec2 p_min, ImVec2 p_max, ImU32 col, float grid_step, ImVec2 grid_off, float rounding, int rounding_corners_flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (((col & IM_COL32_A_MASK) >> IM_COL32_A_SHIFT) < 0xFF)
    {
        ImU32 col_bg1 = GetColorU32(ImAlphaBlendColor(IM_COL32(204,204,204,255), col));
        ImU32 col_bg2 = GetColorU32(ImAlphaBlendColor(IM_COL32(128,128,128,255), col));
        window->DrawList->AddRectFilled(p_min, p_max, col_bg1, rounding, rounding_corners_flags);

        int yi = 0;
        for (float y = p_min.y + grid_off.y; y < p_max.y; y += grid_step, yi++)
        {
            float y1 = ImClamp(y, p_min.y, p_max.y), y2 = ImMin(y + grid_step, p_max.y);
            if (y2 <= y1)
                continue;
            for (float x = p_min.x + grid_off.x + (yi & 1) * grid_step; x < p_max.x; x += grid_step * 2.0f)
            {
                float x1 = ImClamp(x, p_min.x, p_max.x), x2 = ImMin(x + grid_step, p_max.x);
                if (x2 <= x1)
                    continue;
                int rounding_corners_flags_cell = 0;
                if (y1 <= p_min.y) { if (x1 <= p_min.x) rounding_corners_flags_cell |= ImDrawCornerFlags_TopLeft; if (x2 >= p_max.x) rounding_corners_flags_cell |= ImDrawCornerFlags_TopRight; }
                if (y2 >= p_max.y) { if (x1 <= p_min.x) rounding_corners_flags_cell |= ImDrawCornerFlags_BotLeft; if (x2 >= p_max.x) rounding_corners_flags_cell |= ImDrawCornerFlags_BotRight; }
                rounding_corners_flags_cell &= rounding_corners_flags;
                window->DrawList->AddRectFilled(ImVec2(x1,y1), ImVec2(x2,y2), col_bg2, rounding_corners_flags_cell ? rounding : 0.0f, rounding_corners_flags_cell);
            }
        }
    }
    else
    {
        window->DrawList->AddRectFilled(p_min, p_max, col, rounding, rounding_corners_flags);
    }
}

// Helper for ColorPicker4()
static void RenderArrowsForVerticalBar(ImDrawList* draw_list, ImVec2 pos, ImVec2 half_sz, float bar_w, float alpha)
{
    ImU32 alpha8 = IM_F32_TO_INT8_SAT(alpha);
    ImGui::RenderArrowPointingAt(draw_list, ImVec2(pos.x + half_sz.x + 1,         pos.y), ImVec2(half_sz.x + 2, half_sz.y + 1), ImGuiDir_Right, IM_COL32(0,0,0,alpha8));
    ImGui::RenderArrowPointingAt(draw_list, ImVec2(pos.x + half_sz.x,             pos.y), half_sz,                              ImGuiDir_Right, IM_COL32(255,255,255,alpha8));
    ImGui::RenderArrowPointingAt(draw_list, ImVec2(pos.x + bar_w - half_sz.x - 1, pos.y), ImVec2(half_sz.x + 2, half_sz.y + 1), ImGuiDir_Left,  IM_COL32(0,0,0,alpha8));
    ImGui::RenderArrowPointingAt(draw_list, ImVec2(pos.x + bar_w - half_sz.x,     pos.y), half_sz,                              ImGuiDir_Left,  IM_COL32(255,255,255,alpha8));
}

// Note: ColorPicker4() only accesses 3 floats if ImGuiColorEditFlags_NoAlpha flag is set.
// (In C++ the 'float col[4]' notation for a function argument is equivalent to 'float* col', we only specify a size to facilitate understanding of the code.)
// FIXME: we adjust the big color square height based on item width, which may cause a flickering feedback loop (if automatic height makes a vertical scrollbar appears, affecting automatic width..)
// FIXME: this is trying to be aware of style.Alpha but not fully correct. Also, the color wheel will have overlapping glitches with (style.Alpha < 1.0)
bool ImGui::ColorPicker4(const char* label, float col[4], ImGuiColorEditFlags flags, const float* ref_col)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImDrawList* draw_list = window->DrawList;
    ImGuiStyle& style = g.Style;
    ImGuiIO& io = g.IO;

    const float width = CalcItemWidth();
    g.NextItemData.ClearFlags();

    PushID(label);
    BeginGroup();

    if (!(flags & ImGuiColorEditFlags_NoSidePreview))
        flags |= ImGuiColorEditFlags_NoSmallPreview;

    // Context menu: display and store options.
    if (!(flags & ImGuiColorEditFlags_NoOptions))
        ColorPickerOptionsPopup(col, flags);

    // Read stored options
    if (!(flags & ImGuiColorEditFlags__PickerMask))
        flags |= ((g.ColorEditOptions & ImGuiColorEditFlags__PickerMask) ? g.ColorEditOptions : ImGuiColorEditFlags__OptionsDefault) & ImGuiColorEditFlags__PickerMask;
    if (!(flags & ImGuiColorEditFlags__InputMask))
        flags |= ((g.ColorEditOptions & ImGuiColorEditFlags__InputMask) ? g.ColorEditOptions : ImGuiColorEditFlags__OptionsDefault) & ImGuiColorEditFlags__InputMask;
    IM_ASSERT(ImIsPowerOfTwo(flags & ImGuiColorEditFlags__PickerMask)); // Check that only 1 is selected
    IM_ASSERT(ImIsPowerOfTwo(flags & ImGuiColorEditFlags__InputMask));  // Check that only 1 is selected
    if (!(flags & ImGuiColorEditFlags_NoOptions))
        flags |= (g.ColorEditOptions & ImGuiColorEditFlags_AlphaBar);

    // Setup
    int components = (flags & ImGuiColorEditFlags_NoAlpha) ? 3 : 4;
    bool alpha_bar = (flags & ImGuiColorEditFlags_AlphaBar) && !(flags & ImGuiColorEditFlags_NoAlpha);
    ImVec2 picker_pos = window->DC.CursorPos;
    float square_sz = GetFrameHeight();
    float bars_width = square_sz; // Arbitrary smallish width of Hue/Alpha picking bars
    float sv_picker_size = ImMax(bars_width * 1, width - (alpha_bar ? 2 : 1) * (bars_width + style.ItemInnerSpacing.x)); // Saturation/Value picking box
    float bar0_pos_x = picker_pos.x + sv_picker_size + style.ItemInnerSpacing.x;
    float bar1_pos_x = bar0_pos_x + bars_width + style.ItemInnerSpacing.x;
    float bars_triangles_half_sz = IM_FLOOR(bars_width * 0.20f);

    float backup_initial_col[4];
    memcpy(backup_initial_col, col, components * sizeof(float));

    float wheel_thickness = sv_picker_size * 0.08f;
    float wheel_r_outer = sv_picker_size * 0.50f;
    float wheel_r_inner = wheel_r_outer - wheel_thickness;
    ImVec2 wheel_center(picker_pos.x + (sv_picker_size + bars_width)*0.5f, picker_pos.y + sv_picker_size*0.5f);

    // Note: the triangle is displayed rotated with triangle_pa pointing to Hue, but most coordinates stays unrotated for logic.
    float triangle_r = wheel_r_inner - (int)(sv_picker_size * 0.027f);
    ImVec2 triangle_pa = ImVec2(triangle_r, 0.0f); // Hue point.
    ImVec2 triangle_pb = ImVec2(triangle_r * -0.5f, triangle_r * -0.866025f); // Black point.
    ImVec2 triangle_pc = ImVec2(triangle_r * -0.5f, triangle_r * +0.866025f); // White point.

    float H = col[0], S = col[1], V = col[2];
    float R = col[0], G = col[1], B = col[2];
    if (flags & ImGuiColorEditFlags_InputRGB)
    {
        // Hue is lost when converting from greyscale rgb (saturation=0). Restore it.
        ColorConvertRGBtoHSV(R, G, B, H, S, V);
        if (S == 0 && memcmp(g.ColorEditLastColor, col, sizeof(float) * 3) == 0)
            H = g.ColorEditLastHue;
    }
    else if (flags & ImGuiColorEditFlags_InputHSV)
    {
        ColorConvertHSVtoRGB(H, S, V, R, G, B);
    }

    bool value_changed = false, value_changed_h = false, value_changed_sv = false;

    PushItemFlag(ImGuiItemFlags_NoNav, true);
    if (flags & ImGuiColorEditFlags_PickerHueWheel)
    {
        // Hue wheel + SV triangle logic
        InvisibleButton("hsv", ImVec2(sv_picker_size + style.ItemInnerSpacing.x + bars_width, sv_picker_size));
        if (IsItemActive())
        {
            ImVec2 initial_off = g.IO.MouseClickedPos[0] - wheel_center;
            ImVec2 current_off = g.IO.MousePos - wheel_center;
            float initial_dist2 = ImLengthSqr(initial_off);
            if (initial_dist2 >= (wheel_r_inner-1)*(wheel_r_inner-1) && initial_dist2 <= (wheel_r_outer+1)*(wheel_r_outer+1))
            {
                // Interactive with Hue wheel
                H = ImAtan2(current_off.y, current_off.x) / IM_PI*0.5f;
                if (H < 0.0f)
                    H += 1.0f;
                value_changed = value_changed_h = true;
            }
            float cos_hue_angle = ImCos(-H * 2.0f * IM_PI);
            float sin_hue_angle = ImSin(-H * 2.0f * IM_PI);
            if (ImTriangleContainsPoint(triangle_pa, triangle_pb, triangle_pc, ImRotate(initial_off, cos_hue_angle, sin_hue_angle)))
            {
                // Interacting with SV triangle
                ImVec2 current_off_unrotated = ImRotate(current_off, cos_hue_angle, sin_hue_angle);
                if (!ImTriangleContainsPoint(triangle_pa, triangle_pb, triangle_pc, current_off_unrotated))
                    current_off_unrotated = ImTriangleClosestPoint(triangle_pa, triangle_pb, triangle_pc, current_off_unrotated);
                float uu, vv, ww;
                ImTriangleBarycentricCoords(triangle_pa, triangle_pb, triangle_pc, current_off_unrotated, uu, vv, ww);
                V = ImClamp(1.0f - vv, 0.0001f, 1.0f);
                S = ImClamp(uu / V, 0.0001f, 1.0f);
                value_changed = value_changed_sv = true;
            }
        }
        if (!(flags & ImGuiColorEditFlags_NoOptions))
            OpenPopupOnItemClick("context");
    }
    else if (flags & ImGuiColorEditFlags_PickerHueBar)
    {
        // SV rectangle logic
        InvisibleButton("sv", ImVec2(sv_picker_size, sv_picker_size));
        if (IsItemActive())
        {
            S = ImSaturate((io.MousePos.x - picker_pos.x) / (sv_picker_size-1));
            V = 1.0f - ImSaturate((io.MousePos.y - picker_pos.y) / (sv_picker_size-1));
            value_changed = value_changed_sv = true;
        }
        if (!(flags & ImGuiColorEditFlags_NoOptions))
            OpenPopupOnItemClick("context");

        // Hue bar logic
        SetCursorScreenPos(ImVec2(bar0_pos_x, picker_pos.y));
        InvisibleButton("hue", ImVec2(bars_width, sv_picker_size));
        if (IsItemActive())
        {
            H = ImSaturate((io.MousePos.y - picker_pos.y) / (sv_picker_size-1));
            value_changed = value_changed_h = true;
        }
    }

    // Alpha bar logic
    if (alpha_bar)
    {
        SetCursorScreenPos(ImVec2(bar1_pos_x, picker_pos.y));
        InvisibleButton("alpha", ImVec2(bars_width, sv_picker_size));
        if (IsItemActive())
        {
            col[3] = 1.0f - ImSaturate((io.MousePos.y - picker_pos.y) / (sv_picker_size-1));
            value_changed = true;
        }
    }
    PopItemFlag(); // ImGuiItemFlags_NoNav

    if (!(flags & ImGuiColorEditFlags_NoSidePreview))
    {
        SameLine(0, style.ItemInnerSpacing.x);
        BeginGroup();
    }

    if (!(flags & ImGuiColorEditFlags_NoLabel))
    {
        const char* label_display_end = FindRenderedTextEnd(label);
        if (label != label_display_end)
        {
            if ((flags & ImGuiColorEditFlags_NoSidePreview))
                SameLine(0, style.ItemInnerSpacing.x);
            TextEx(label, label_display_end);
        }
    }

    if (!(flags & ImGuiColorEditFlags_NoSidePreview))
    {
        PushItemFlag(ImGuiItemFlags_NoNavDefaultFocus, true);
        ImVec4 col_v4(col[0], col[1], col[2], (flags & ImGuiColorEditFlags_NoAlpha) ? 1.0f : col[3]);
        if ((flags & ImGuiColorEditFlags_NoLabel))
            Text("Current");

        ImGuiColorEditFlags sub_flags_to_forward = ImGuiColorEditFlags__InputMask | ImGuiColorEditFlags_HDR | ImGuiColorEditFlags_AlphaPreview | ImGuiColorEditFlags_AlphaPreviewHalf | ImGuiColorEditFlags_NoTooltip;
        ColorButton("##current", col_v4, (flags & sub_flags_to_forward), ImVec2(square_sz * 3, square_sz * 2));
        if (ref_col != NULL)
        {
            Text("Original");
            ImVec4 ref_col_v4(ref_col[0], ref_col[1], ref_col[2], (flags & ImGuiColorEditFlags_NoAlpha) ? 1.0f : ref_col[3]);
            if (ColorButton("##original", ref_col_v4, (flags & sub_flags_to_forward), ImVec2(square_sz * 3, square_sz * 2)))
            {
                memcpy(col, ref_col, components * sizeof(float));
                value_changed = true;
            }
        }
        PopItemFlag();
        EndGroup();
    }

    // Convert back color to RGB
    if (value_changed_h || value_changed_sv)
    {
        if (flags & ImGuiColorEditFlags_InputRGB)
        {
            ColorConvertHSVtoRGB(H >= 1.0f ? H - 10 * 1e-6f : H, S > 0.0f ? S : 10*1e-6f, V > 0.0f ? V : 1e-6f, col[0], col[1], col[2]);
            g.ColorEditLastHue = H;
            memcpy(g.ColorEditLastColor, col, sizeof(float) * 3);
        }
        else if (flags & ImGuiColorEditFlags_InputHSV)
        {
            col[0] = H;
            col[1] = S;
            col[2] = V;
        }
    }

    // R,G,B and H,S,V slider color editor
    bool value_changed_fix_hue_wrap = false;
    if ((flags & ImGuiColorEditFlags_NoInputs) == 0)
    {
        PushItemWidth((alpha_bar ? bar1_pos_x : bar0_pos_x) + bars_width - picker_pos.x);
        ImGuiColorEditFlags sub_flags_to_forward = ImGuiColorEditFlags__DataTypeMask | ImGuiColorEditFlags__InputMask | ImGuiColorEditFlags_HDR | ImGuiColorEditFlags_NoAlpha | ImGuiColorEditFlags_NoOptions | ImGuiColorEditFlags_NoSmallPreview | ImGuiColorEditFlags_AlphaPreview | ImGuiColorEditFlags_AlphaPreviewHalf;
        ImGuiColorEditFlags sub_flags = (flags & sub_flags_to_forward) | ImGuiColorEditFlags_NoPicker;
        if (flags & ImGuiColorEditFlags_DisplayRGB || (flags & ImGuiColorEditFlags__DisplayMask) == 0)
            if (ColorEdit4("##rgb", col, sub_flags | ImGuiColorEditFlags_DisplayRGB))
            {
                // FIXME: Hackily differenciating using the DragInt (ActiveId != 0 && !ActiveIdAllowOverlap) vs. using the InputText or DropTarget.
                // For the later we don't want to run the hue-wrap canceling code. If you are well versed in HSV picker please provide your input! (See #2050)
                value_changed_fix_hue_wrap = (g.ActiveId != 0 && !g.ActiveIdAllowOverlap);
                value_changed = true;
            }
        if (flags & ImGuiColorEditFlags_DisplayHSV || (flags & ImGuiColorEditFlags__DisplayMask) == 0)
            value_changed |= ColorEdit4("##hsv", col, sub_flags | ImGuiColorEditFlags_DisplayHSV);
        if (flags & ImGuiColorEditFlags_DisplayHex || (flags & ImGuiColorEditFlags__DisplayMask) == 0)
            value_changed |= ColorEdit4("##hex", col, sub_flags | ImGuiColorEditFlags_DisplayHex);
        PopItemWidth();
    }

    // Try to cancel hue wrap (after ColorEdit4 call), if any
    if (value_changed_fix_hue_wrap && (flags & ImGuiColorEditFlags_InputRGB))
    {
        float new_H, new_S, new_V;
        ColorConvertRGBtoHSV(col[0], col[1], col[2], new_H, new_S, new_V);
        if (new_H <= 0 && H > 0)
        {
            if (new_V <= 0 && V != new_V)
                ColorConvertHSVtoRGB(H, S, new_V <= 0 ? V * 0.5f : new_V, col[0], col[1], col[2]);
            else if (new_S <= 0)
                ColorConvertHSVtoRGB(H, new_S <= 0 ? S * 0.5f : new_S, new_V, col[0], col[1], col[2]);
        }
    }

    if (value_changed)
    {
        if (flags & ImGuiColorEditFlags_InputRGB)
        {
            R = col[0];
            G = col[1];
            B = col[2];
            ColorConvertRGBtoHSV(R, G, B, H, S, V);
            if (S == 0 && memcmp(g.ColorEditLastColor, col, sizeof(float) * 3) == 0) // Fix local Hue as display below will use it immediately.
                H = g.ColorEditLastHue;
        }
        else if (flags & ImGuiColorEditFlags_InputHSV)
        {
            H = col[0];
            S = col[1];
            V = col[2];
            ColorConvertHSVtoRGB(H, S, V, R, G, B);
        }
    }

    const int style_alpha8 = IM_F32_TO_INT8_SAT(style.Alpha);
    const ImU32 col_black = IM_COL32(0,0,0,style_alpha8);
    const ImU32 col_white = IM_COL32(255,255,255,style_alpha8);
    const ImU32 col_midgrey = IM_COL32(128,128,128,style_alpha8);
    const ImU32 col_hues[6 + 1] = { IM_COL32(255,0,0,style_alpha8), IM_COL32(255,255,0,style_alpha8), IM_COL32(0,255,0,style_alpha8), IM_COL32(0,255,255,style_alpha8), IM_COL32(0,0,255,style_alpha8), IM_COL32(255,0,255,style_alpha8), IM_COL32(255,0,0,style_alpha8) };

    ImVec4 hue_color_f(1, 1, 1, style.Alpha); ColorConvertHSVtoRGB(H, 1, 1, hue_color_f.x, hue_color_f.y, hue_color_f.z);
    ImU32 hue_color32 = ColorConvertFloat4ToU32(hue_color_f);
    ImU32 user_col32_striped_of_alpha = ColorConvertFloat4ToU32(ImVec4(R, G, B, style.Alpha)); // Important: this is still including the main rendering/style alpha!!

    ImVec2 sv_cursor_pos;

    if (flags & ImGuiColorEditFlags_PickerHueWheel)
    {
        // Render Hue Wheel
        const float aeps = 0.5f / wheel_r_outer; // Half a pixel arc length in radians (2pi cancels out).
        const int segment_per_arc = ImMax(4, (int)wheel_r_outer / 12);
        for (int n = 0; n < 6; n++)
        {
            const float a0 = (n)     /6.0f * 2.0f * IM_PI - aeps;
            const float a1 = (n+1.0f)/6.0f * 2.0f * IM_PI + aeps;
            const int vert_start_idx = draw_list->VtxBuffer.Size;
            draw_list->PathArcTo(wheel_center, (wheel_r_inner + wheel_r_outer)*0.5f, a0, a1, segment_per_arc);
            draw_list->PathStroke(col_white, false, wheel_thickness);
            const int vert_end_idx = draw_list->VtxBuffer.Size;

            // Paint colors over existing vertices
            ImVec2 gradient_p0(wheel_center.x + ImCos(a0) * wheel_r_inner, wheel_center.y + ImSin(a0) * wheel_r_inner);
            ImVec2 gradient_p1(wheel_center.x + ImCos(a1) * wheel_r_inner, wheel_center.y + ImSin(a1) * wheel_r_inner);
            ShadeVertsLinearColorGradientKeepAlpha(draw_list, vert_start_idx, vert_end_idx, gradient_p0, gradient_p1, col_hues[n], col_hues[n+1]);
        }

        // Render Cursor + preview on Hue Wheel
        float cos_hue_angle = ImCos(H * 2.0f * IM_PI);
        float sin_hue_angle = ImSin(H * 2.0f * IM_PI);
        ImVec2 hue_cursor_pos(wheel_center.x + cos_hue_angle * (wheel_r_inner+wheel_r_outer)*0.5f, wheel_center.y + sin_hue_angle * (wheel_r_inner+wheel_r_outer)*0.5f);
        float hue_cursor_rad = value_changed_h ? wheel_thickness * 0.65f : wheel_thickness * 0.55f;
        int hue_cursor_segments = ImClamp((int)(hue_cursor_rad / 1.4f), 9, 32);
        draw_list->AddCircleFilled(hue_cursor_pos, hue_cursor_rad, hue_color32, hue_cursor_segments);
        draw_list->AddCircle(hue_cursor_pos, hue_cursor_rad+1, col_midgrey, hue_cursor_segments);
        draw_list->AddCircle(hue_cursor_pos, hue_cursor_rad, col_white, hue_cursor_segments);

        // Render SV triangle (rotated according to hue)
        ImVec2 tra = wheel_center + ImRotate(triangle_pa, cos_hue_angle, sin_hue_angle);
        ImVec2 trb = wheel_center + ImRotate(triangle_pb, cos_hue_angle, sin_hue_angle);
        ImVec2 trc = wheel_center + ImRotate(triangle_pc, cos_hue_angle, sin_hue_angle);
        ImVec2 uv_white = GetFontTexUvWhitePixel();
        draw_list->PrimReserve(6, 6);
        draw_list->PrimVtx(tra, uv_white, hue_color32);
        draw_list->PrimVtx(trb, uv_white, hue_color32);
        draw_list->PrimVtx(trc, uv_white, col_white);
        draw_list->PrimVtx(tra, uv_white, 0);
        draw_list->PrimVtx(trb, uv_white, col_black);
        draw_list->PrimVtx(trc, uv_white, 0);
        draw_list->AddTriangle(tra, trb, trc, col_midgrey, 1.5f);
        sv_cursor_pos = ImLerp(ImLerp(trc, tra, ImSaturate(S)), trb, ImSaturate(1 - V));
    }
    else if (flags & ImGuiColorEditFlags_PickerHueBar)
    {
        // Render SV Square
        draw_list->AddRectFilledMultiColor(picker_pos, picker_pos + ImVec2(sv_picker_size, sv_picker_size), col_white, hue_color32, hue_color32, col_white);
        draw_list->AddRectFilledMultiColor(picker_pos, picker_pos + ImVec2(sv_picker_size, sv_picker_size), 0, 0, col_black, col_black);
        RenderFrameBorder(picker_pos, picker_pos + ImVec2(sv_picker_size, sv_picker_size), 0.0f);
        sv_cursor_pos.x = ImClamp(IM_ROUND(picker_pos.x + ImSaturate(S)     * sv_picker_size), picker_pos.x + 2, picker_pos.x + sv_picker_size - 2); // Sneakily prevent the circle to stick out too much
        sv_cursor_pos.y = ImClamp(IM_ROUND(picker_pos.y + ImSaturate(1 - V) * sv_picker_size), picker_pos.y + 2, picker_pos.y + sv_picker_size - 2);

        // Render Hue Bar
        for (int i = 0; i < 6; ++i)
            draw_list->AddRectFilledMultiColor(ImVec2(bar0_pos_x, picker_pos.y + i * (sv_picker_size / 6)), ImVec2(bar0_pos_x + bars_width, picker_pos.y + (i + 1) * (sv_picker_size / 6)), col_hues[i], col_hues[i], col_hues[i + 1], col_hues[i + 1]);
        float bar0_line_y = IM_ROUND(picker_pos.y + H * sv_picker_size);
        RenderFrameBorder(ImVec2(bar0_pos_x, picker_pos.y), ImVec2(bar0_pos_x + bars_width, picker_pos.y + sv_picker_size), 0.0f);
        RenderArrowsForVerticalBar(draw_list, ImVec2(bar0_pos_x - 1, bar0_line_y), ImVec2(bars_triangles_half_sz + 1, bars_triangles_half_sz), bars_width + 2.0f, style.Alpha);
    }

    // Render cursor/preview circle (clamp S/V within 0..1 range because floating points colors may lead HSV values to be out of range)
    float sv_cursor_rad = value_changed_sv ? 10.0f : 6.0f;
    draw_list->AddCircleFilled(sv_cursor_pos, sv_cursor_rad, user_col32_striped_of_alpha, 12);
    draw_list->AddCircle(sv_cursor_pos, sv_cursor_rad+1, col_midgrey, 12);
    draw_list->AddCircle(sv_cursor_pos, sv_cursor_rad, col_white, 12);

    // Render alpha bar
    if (alpha_bar)
    {
        float alpha = ImSaturate(col[3]);
        ImRect bar1_bb(bar1_pos_x, picker_pos.y, bar1_pos_x + bars_width, picker_pos.y + sv_picker_size);
        RenderColorRectWithAlphaCheckerboard(bar1_bb.Min, bar1_bb.Max, 0, bar1_bb.GetWidth() / 2.0f, ImVec2(0.0f, 0.0f));
        draw_list->AddRectFilledMultiColor(bar1_bb.Min, bar1_bb.Max, user_col32_striped_of_alpha, user_col32_striped_of_alpha, user_col32_striped_of_alpha & ~IM_COL32_A_MASK, user_col32_striped_of_alpha & ~IM_COL32_A_MASK);
        float bar1_line_y = IM_ROUND(picker_pos.y + (1.0f - alpha) * sv_picker_size);
        RenderFrameBorder(bar1_bb.Min, bar1_bb.Max, 0.0f);
        RenderArrowsForVerticalBar(draw_list, ImVec2(bar1_pos_x - 1, bar1_line_y), ImVec2(bars_triangles_half_sz + 1, bars_triangles_half_sz), bars_width + 2.0f, style.Alpha);
    }

    EndGroup();

    if (value_changed && memcmp(backup_initial_col, col, components * sizeof(float)) == 0)
        value_changed = false;
    if (value_changed)
        MarkItemEdited(window->DC.LastItemId);

    PopID();

    return value_changed;
}

// A little colored square. Return true when clicked.
// FIXME: May want to display/ignore the alpha component in the color display? Yet show it in the tooltip.
// 'desc_id' is not called 'label' because we don't display it next to the button, but only in the tooltip.
// Note that 'col' may be encoded in HSV if ImGuiColorEditFlags_InputHSV is set.
bool ImGui::ColorButton(const char* desc_id, const ImVec4& col, ImGuiColorEditFlags flags, ImVec2 size)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiID id = window->GetID(desc_id);
    float default_size = GetFrameHeight();
    if (size.x == 0.0f)
        size.x = default_size;
    if (size.y == 0.0f)
        size.y = default_size;
    const ImRect bb(window->DC.CursorPos, window->DC.CursorPos + size);
    ItemSize(bb, (size.y >= default_size) ? g.Style.FramePadding.y : 0.0f);
    if (!ItemAdd(bb, id))
        return false;

    bool hovered, held;
    bool pressed = ButtonBehavior(bb, id, &hovered, &held);

    if (flags & ImGuiColorEditFlags_NoAlpha)
        flags &= ~(ImGuiColorEditFlags_AlphaPreview | ImGuiColorEditFlags_AlphaPreviewHalf);

    ImVec4 col_rgb = col;
    if (flags & ImGuiColorEditFlags_InputHSV)
        ColorConvertHSVtoRGB(col_rgb.x, col_rgb.y, col_rgb.z, col_rgb.x, col_rgb.y, col_rgb.z);

    ImVec4 col_rgb_without_alpha(col_rgb.x, col_rgb.y, col_rgb.z, 1.0f);
    float grid_step = ImMin(size.x, size.y) / 2.99f;
    float rounding = ImMin(g.Style.FrameRounding, grid_step * 0.5f);
    ImRect bb_inner = bb;
    float off = -0.75f; // The border (using Col_FrameBg) tends to look off when color is near-opaque and rounding is enabled. This offset seemed like a good middle ground to reduce those artifacts.
    bb_inner.Expand(off);
    if ((flags & ImGuiColorEditFlags_AlphaPreviewHalf) && col_rgb.w < 1.0f)
    {
        float mid_x = IM_ROUND((bb_inner.Min.x + bb_inner.Max.x) * 0.5f);
        RenderColorRectWithAlphaCheckerboard(ImVec2(bb_inner.Min.x + grid_step, bb_inner.Min.y), bb_inner.Max, GetColorU32(col_rgb), grid_step, ImVec2(-grid_step + off, off), rounding, ImDrawCornerFlags_TopRight| ImDrawCornerFlags_BotRight);
        window->DrawList->AddRectFilled(bb_inner.Min, ImVec2(mid_x, bb_inner.Max.y), GetColorU32(col_rgb_without_alpha), rounding, ImDrawCornerFlags_TopLeft|ImDrawCornerFlags_BotLeft);
    }
    else
    {
        // Because GetColorU32() multiplies by the global style Alpha and we don't want to display a checkerboard if the source code had no alpha
        ImVec4 col_source = (flags & ImGuiColorEditFlags_AlphaPreview) ? col_rgb : col_rgb_without_alpha;
        if (col_source.w < 1.0f)
            RenderColorRectWithAlphaCheckerboard(bb_inner.Min, bb_inner.Max, GetColorU32(col_source), grid_step, ImVec2(off, off), rounding);
        else
            window->DrawList->AddRectFilled(bb_inner.Min, bb_inner.Max, GetColorU32(col_source), rounding, ImDrawCornerFlags_All);
    }
    RenderNavHighlight(bb, id);
    if (g.Style.FrameBorderSize > 0.0f)
        RenderFrameBorder(bb.Min, bb.Max, rounding);
    else
        window->DrawList->AddRect(bb.Min, bb.Max, GetColorU32(ImGuiCol_FrameBg), rounding); // Color button are often in need of some sort of border

    // Drag and Drop Source
    // NB: The ActiveId test is merely an optional micro-optimization, BeginDragDropSource() does the same test.
    if (g.ActiveId == id && !(flags & ImGuiColorEditFlags_NoDragDrop) && BeginDragDropSource())
    {
        if (flags & ImGuiColorEditFlags_NoAlpha)
            SetDragDropPayload(IMGUI_PAYLOAD_TYPE_COLOR_3F, &col_rgb, sizeof(float) * 3, ImGuiCond_Once);
        else
            SetDragDropPayload(IMGUI_PAYLOAD_TYPE_COLOR_4F, &col_rgb, sizeof(float) * 4, ImGuiCond_Once);
        ColorButton(desc_id, col, flags);
        SameLine();
        TextEx("Color");
        EndDragDropSource();
    }

    // Tooltip
    if (!(flags & ImGuiColorEditFlags_NoTooltip) && hovered)
        ColorTooltip(desc_id, &col.x, flags & (ImGuiColorEditFlags__InputMask | ImGuiColorEditFlags_NoAlpha | ImGuiColorEditFlags_AlphaPreview | ImGuiColorEditFlags_AlphaPreviewHalf));

    return pressed;
}

// Initialize/override default color options
void ImGui::SetColorEditOptions(ImGuiColorEditFlags flags)
{
    ImGuiContext& g = *GImGui;
    if ((flags & ImGuiColorEditFlags__DisplayMask) == 0)
        flags |= ImGuiColorEditFlags__OptionsDefault & ImGuiColorEditFlags__DisplayMask;
    if ((flags & ImGuiColorEditFlags__DataTypeMask) == 0)
        flags |= ImGuiColorEditFlags__OptionsDefault & ImGuiColorEditFlags__DataTypeMask;
    if ((flags & ImGuiColorEditFlags__PickerMask) == 0)
        flags |= ImGuiColorEditFlags__OptionsDefault & ImGuiColorEditFlags__PickerMask;
    if ((flags & ImGuiColorEditFlags__InputMask) == 0)
        flags |= ImGuiColorEditFlags__OptionsDefault & ImGuiColorEditFlags__InputMask;
    IM_ASSERT(ImIsPowerOfTwo(flags & ImGuiColorEditFlags__DisplayMask));    // Check only 1 option is selected
    IM_ASSERT(ImIsPowerOfTwo(flags & ImGuiColorEditFlags__DataTypeMask));   // Check only 1 option is selected
    IM_ASSERT(ImIsPowerOfTwo(flags & ImGuiColorEditFlags__PickerMask));     // Check only 1 option is selected
    IM_ASSERT(ImIsPowerOfTwo(flags & ImGuiColorEditFlags__InputMask));      // Check only 1 option is selected
    g.ColorEditOptions = flags;
}

// Note: only access 3 floats if ImGuiColorEditFlags_NoAlpha flag is set.
void ImGui::ColorTooltip(const char* text, const float* col, ImGuiColorEditFlags flags)
{
    ImGuiContext& g = *GImGui;

    BeginTooltipEx(0, true);
    const char* text_end = text ? FindRenderedTextEnd(text, NULL) : text;
    if (text_end > text)
    {
        TextEx(text, text_end);
        Separator();
    }

    ImVec2 sz(g.FontSize * 3 + g.Style.FramePadding.y * 2, g.FontSize * 3 + g.Style.FramePadding.y * 2);
    ImVec4 cf(col[0], col[1], col[2], (flags & ImGuiColorEditFlags_NoAlpha) ? 1.0f : col[3]);
    int cr = IM_F32_TO_INT8_SAT(col[0]), cg = IM_F32_TO_INT8_SAT(col[1]), cb = IM_F32_TO_INT8_SAT(col[2]), ca = (flags & ImGuiColorEditFlags_NoAlpha) ? 255 : IM_F32_TO_INT8_SAT(col[3]);
    ColorButton("##preview", cf, (flags & (ImGuiColorEditFlags__InputMask | ImGuiColorEditFlags_NoAlpha | ImGuiColorEditFlags_AlphaPreview | ImGuiColorEditFlags_AlphaPreviewHalf)) | ImGuiColorEditFlags_NoTooltip, sz);
    SameLine();
    if ((flags & ImGuiColorEditFlags_InputRGB) || !(flags & ImGuiColorEditFlags__InputMask))
    {
        if (flags & ImGuiColorEditFlags_NoAlpha)
            Text("#%02X%02X%02X\nR: %d, G: %d, B: %d\n(%.3f, %.3f, %.3f)", cr, cg, cb, cr, cg, cb, col[0], col[1], col[2]);
        else
            Text("#%02X%02X%02X%02X\nR:%d, G:%d, B:%d, A:%d\n(%.3f, %.3f, %.3f, %.3f)", cr, cg, cb, ca, cr, cg, cb, ca, col[0], col[1], col[2], col[3]);
    }
    else if (flags & ImGuiColorEditFlags_InputHSV)
    {
        if (flags & ImGuiColorEditFlags_NoAlpha)
            Text("H: %.3f, S: %.3f, V: %.3f", col[0], col[1], col[2]);
        else
            Text("H: %.3f, S: %.3f, V: %.3f, A: %.3f", col[0], col[1], col[2], col[3]);
    }
    EndTooltip();
}

void ImGui::ColorEditOptionsPopup(const float* col, ImGuiColorEditFlags flags)
{
    bool allow_opt_inputs = !(flags & ImGuiColorEditFlags__DisplayMask);
    bool allow_opt_datatype = !(flags & ImGuiColorEditFlags__DataTypeMask);
    if ((!allow_opt_inputs && !allow_opt_datatype) || !BeginPopup("context"))
        return;
    ImGuiContext& g = *GImGui;
    ImGuiColorEditFlags opts = g.ColorEditOptions;
    if (allow_opt_inputs)
    {
        if (RadioButton("RGB", (opts & ImGuiColorEditFlags_DisplayRGB) != 0)) opts = (opts & ~ImGuiColorEditFlags__DisplayMask) | ImGuiColorEditFlags_DisplayRGB;
        if (RadioButton("HSV", (opts & ImGuiColorEditFlags_DisplayHSV) != 0)) opts = (opts & ~ImGuiColorEditFlags__DisplayMask) | ImGuiColorEditFlags_DisplayHSV;
        if (RadioButton("Hex", (opts & ImGuiColorEditFlags_DisplayHex) != 0)) opts = (opts & ~ImGuiColorEditFlags__DisplayMask) | ImGuiColorEditFlags_DisplayHex;
    }
    if (allow_opt_datatype)
    {
        if (allow_opt_inputs) Separator();
        if (RadioButton("0..255",     (opts & ImGuiColorEditFlags_Uint8) != 0)) opts = (opts & ~ImGuiColorEditFlags__DataTypeMask) | ImGuiColorEditFlags_Uint8;
        if (RadioButton("0.00..1.00", (opts & ImGuiColorEditFlags_Float) != 0)) opts = (opts & ~ImGuiColorEditFlags__DataTypeMask) | ImGuiColorEditFlags_Float;
    }

    if (allow_opt_inputs || allow_opt_datatype)
        Separator();
    if (Button("Copy as..", ImVec2(-1,0)))
        OpenPopup("Copy");
    if (BeginPopup("Copy"))
    {
        int cr = IM_F32_TO_INT8_SAT(col[0]), cg = IM_F32_TO_INT8_SAT(col[1]), cb = IM_F32_TO_INT8_SAT(col[2]), ca = (flags & ImGuiColorEditFlags_NoAlpha) ? 255 : IM_F32_TO_INT8_SAT(col[3]);
        char buf[64];
        ImFormatString(buf, IM_ARRAYSIZE(buf), "(%.3ff, %.3ff, %.3ff, %.3ff)", col[0], col[1], col[2], (flags & ImGuiColorEditFlags_NoAlpha) ? 1.0f : col[3]);
        if (Selectable(buf))
            SetClipboardText(buf);
        ImFormatString(buf, IM_ARRAYSIZE(buf), "(%d,%d,%d,%d)", cr, cg, cb, ca);
        if (Selectable(buf))
            SetClipboardText(buf);
        if (flags & ImGuiColorEditFlags_NoAlpha)
            ImFormatString(buf, IM_ARRAYSIZE(buf), "0x%02X%02X%02X", cr, cg, cb);
        else
            ImFormatString(buf, IM_ARRAYSIZE(buf), "0x%02X%02X%02X%02X", cr, cg, cb, ca);
        if (Selectable(buf))
            SetClipboardText(buf);
        EndPopup();
    }

    g.ColorEditOptions = opts;
    EndPopup();
}

void ImGui::ColorPickerOptionsPopup(const float* ref_col, ImGuiColorEditFlags flags)
{
    bool allow_opt_picker = !(flags & ImGuiColorEditFlags__PickerMask);
    bool allow_opt_alpha_bar = !(flags & ImGuiColorEditFlags_NoAlpha) && !(flags & ImGuiColorEditFlags_AlphaBar);
    if ((!allow_opt_picker && !allow_opt_alpha_bar) || !BeginPopup("context"))
        return;
    ImGuiContext& g = *GImGui;
    if (allow_opt_picker)
    {
        ImVec2 picker_size(g.FontSize * 8, ImMax(g.FontSize * 8 - (GetFrameHeight() + g.Style.ItemInnerSpacing.x), 1.0f)); // FIXME: Picker size copied from main picker function
        PushItemWidth(picker_size.x);
        for (int picker_type = 0; picker_type < 2; picker_type++)
        {
            // Draw small/thumbnail version of each picker type (over an invisible button for selection)
            if (picker_type > 0) Separator();
            PushID(picker_type);
            ImGuiColorEditFlags picker_flags = ImGuiColorEditFlags_NoInputs|ImGuiColorEditFlags_NoOptions|ImGuiColorEditFlags_NoLabel|ImGuiColorEditFlags_NoSidePreview|(flags & ImGuiColorEditFlags_NoAlpha);
            if (picker_type == 0) picker_flags |= ImGuiColorEditFlags_PickerHueBar;
            if (picker_type == 1) picker_flags |= ImGuiColorEditFlags_PickerHueWheel;
            ImVec2 backup_pos = GetCursorScreenPos();
            if (Selectable("##selectable", false, 0, picker_size)) // By default, Selectable() is closing popup
                g.ColorEditOptions = (g.ColorEditOptions & ~ImGuiColorEditFlags__PickerMask) | (picker_flags & ImGuiColorEditFlags__PickerMask);
            SetCursorScreenPos(backup_pos);
            ImVec4 dummy_ref_col;
            memcpy(&dummy_ref_col, ref_col, sizeof(float) * ((picker_flags & ImGuiColorEditFlags_NoAlpha) ? 3 : 4));
            ColorPicker4("##dummypicker", &dummy_ref_col.x, picker_flags);
            PopID();
        }
        PopItemWidth();
    }
    if (allow_opt_alpha_bar)
    {
        if (allow_opt_picker) Separator();
        CheckboxFlags("Alpha Bar", (unsigned int*)&g.ColorEditOptions, ImGuiColorEditFlags_AlphaBar);
    }
    EndPopup();
}

//-------------------------------------------------------------------------
// [SECTION] Widgets: TreeNode, CollapsingHeader, etc.
//-------------------------------------------------------------------------
// - TreeNode()
// - TreeNodeV()
// - TreeNodeEx()
// - TreeNodeExV()
// - TreeNodeBehavior() [Internal]
// - TreePush()
// - TreePop()
// - GetTreeNodeToLabelSpacing()
// - SetNextItemOpen()
// - CollapsingHeader()
//-------------------------------------------------------------------------

bool ImGui::TreeNode(const char* str_id, const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    bool is_open = TreeNodeExV(str_id, 0, fmt, args);
    va_end(args);
    return is_open;
}

bool ImGui::TreeNode(const void* ptr_id, const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    bool is_open = TreeNodeExV(ptr_id, 0, fmt, args);
    va_end(args);
    return is_open;
}

bool ImGui::TreeNode(const char* label)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;
    return TreeNodeBehavior(window->GetID(label), 0, label, NULL);
}

bool ImGui::TreeNodeV(const char* str_id, const char* fmt, va_list args)
{
    return TreeNodeExV(str_id, 0, fmt, args);
}

bool ImGui::TreeNodeV(const void* ptr_id, const char* fmt, va_list args)
{
    return TreeNodeExV(ptr_id, 0, fmt, args);
}

bool ImGui::TreeNodeEx(const char* label, ImGuiTreeNodeFlags flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    return TreeNodeBehavior(window->GetID(label), flags, label, NULL);
}

bool ImGui::TreeNodeEx(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    bool is_open = TreeNodeExV(str_id, flags, fmt, args);
    va_end(args);
    return is_open;
}

bool ImGui::TreeNodeEx(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    bool is_open = TreeNodeExV(ptr_id, flags, fmt, args);
    va_end(args);
    return is_open;
}

bool ImGui::TreeNodeExV(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const char* label_end = g.TempBuffer + ImFormatStringV(g.TempBuffer, IM_ARRAYSIZE(g.TempBuffer), fmt, args);
    return TreeNodeBehavior(window->GetID(str_id), flags, g.TempBuffer, label_end);
}

bool ImGui::TreeNodeExV(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const char* label_end = g.TempBuffer + ImFormatStringV(g.TempBuffer, IM_ARRAYSIZE(g.TempBuffer), fmt, args);
    return TreeNodeBehavior(window->GetID(ptr_id), flags, g.TempBuffer, label_end);
}

bool ImGui::TreeNodeBehaviorIsOpen(ImGuiID id, ImGuiTreeNodeFlags flags)
{
    if (flags & ImGuiTreeNodeFlags_Leaf)
        return true;

    // We only write to the tree storage if the user clicks (or explicitly use the SetNextItemOpen function)
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    ImGuiStorage* storage = window->DC.StateStorage;

    bool is_open;
    if (g.NextItemData.Flags & ImGuiNextItemDataFlags_HasOpen)
    {
        if (g.NextItemData.OpenCond & ImGuiCond_Always)
        {
            is_open = g.NextItemData.OpenVal;
            storage->SetInt(id, is_open);
        }
        else
        {
            // We treat ImGuiCond_Once and ImGuiCond_FirstUseEver the same because tree node state are not saved persistently.
            const int stored_value = storage->GetInt(id, -1);
            if (stored_value == -1)
            {
                is_open = g.NextItemData.OpenVal;
                storage->SetInt(id, is_open);
            }
            else
            {
                is_open = stored_value != 0;
            }
        }
    }
    else
    {
        is_open = storage->GetInt(id, (flags & ImGuiTreeNodeFlags_DefaultOpen) ? 1 : 0) != 0;
    }

    // When logging is enabled, we automatically expand tree nodes (but *NOT* collapsing headers.. seems like sensible behavior).
    // NB- If we are above max depth we still allow manually opened nodes to be logged.
    if (g.LogEnabled && !(flags & ImGuiTreeNodeFlags_NoAutoOpenOnLog) && (window->DC.TreeDepth - g.LogDepthRef) < g.LogDepthToExpand)
        is_open = true;

    return is_open;
}

bool ImGui::TreeNodeBehavior(ImGuiID id, ImGuiTreeNodeFlags flags, const char* label, const char* label_end)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const bool display_frame = (flags & ImGuiTreeNodeFlags_Framed) != 0;
    const ImVec2 padding = (display_frame || (flags & ImGuiTreeNodeFlags_FramePadding)) ? style.FramePadding : ImVec2(style.FramePadding.x, ImMin(window->DC.CurrLineTextBaseOffset, style.FramePadding.y));

    if (!label_end)
        label_end = FindRenderedTextEnd(label);
    const ImVec2 label_size = CalcTextSize(label, label_end, false);

    // We vertically grow up to current line height up the typical widget height.
    const float frame_height = ImMax(ImMin(window->DC.CurrLineSize.y, g.FontSize + style.FramePadding.y*2), label_size.y + padding.y*2);
    ImRect frame_bb;
    frame_bb.Min.x = (flags & ImGuiTreeNodeFlags_SpanFullWidth) ? window->WorkRect.Min.x : window->DC.CursorPos.x;
    frame_bb.Min.y = window->DC.CursorPos.y;
    frame_bb.Max.x = window->WorkRect.Max.x;
    frame_bb.Max.y = window->DC.CursorPos.y + frame_height;
    if (display_frame)
    {
        // Framed header expand a little outside the default padding, to the edge of InnerClipRect
        // (FIXME: May remove this at some point and make InnerClipRect align with WindowPadding.x instead of WindowPadding.x*0.5f)
        frame_bb.Min.x -= IM_FLOOR(window->WindowPadding.x * 0.5f - 1.0f);
        frame_bb.Max.x += IM_FLOOR(window->WindowPadding.x * 0.5f);
    }

    const float text_offset_x = g.FontSize + (display_frame ? padding.x*3 : padding.x*2);               // Collapser arrow width + Spacing
    const float text_offset_y = ImMax(padding.y, window->DC.CurrLineTextBaseOffset);                    // Latch before ItemSize changes it
    const float text_width = g.FontSize + (label_size.x > 0.0f ? label_size.x + padding.x*2 : 0.0f);    // Include collapser
    ImVec2 text_pos(window->DC.CursorPos.x + text_offset_x, window->DC.CursorPos.y + text_offset_y);
    ItemSize(ImVec2(text_width, frame_height), padding.y);

    // For regular tree nodes, we arbitrary allow to click past 2 worth of ItemSpacing
    ImRect interact_bb = frame_bb;
    if (!display_frame && (flags & (ImGuiTreeNodeFlags_SpanAvailWidth | ImGuiTreeNodeFlags_SpanFullWidth)) == 0)
        interact_bb.Max.x = frame_bb.Min.x + text_width + style.ItemSpacing.x * 2.0f;

    // Store a flag for the current depth to tell if we will allow closing this node when navigating one of its child.
    // For this purpose we essentially compare if g.NavIdIsAlive went from 0 to 1 between TreeNode() and TreePop().
    // This is currently only support 32 level deep and we are fine with (1 << Depth) overflowing into a zero.
    const bool is_leaf = (flags & ImGuiTreeNodeFlags_Leaf) != 0;
    bool is_open = TreeNodeBehaviorIsOpen(id, flags);
    if (is_open && !g.NavIdIsAlive && (flags & ImGuiTreeNodeFlags_NavLeftJumpsBackHere) && !(flags & ImGuiTreeNodeFlags_NoTreePushOnOpen))
        window->DC.TreeMayJumpToParentOnPopMask |= (1 << window->DC.TreeDepth);

    bool item_add = ItemAdd(interact_bb, id);
    window->DC.LastItemStatusFlags |= ImGuiItemStatusFlags_HasDisplayRect;
    window->DC.LastItemDisplayRect = frame_bb;

    if (!item_add)
    {
        if (is_open && !(flags & ImGuiTreeNodeFlags_NoTreePushOnOpen))
            TreePushOverrideID(id);
        IMGUI_TEST_ENGINE_ITEM_INFO(window->DC.LastItemId, label, window->DC.ItemFlags | (is_leaf ? 0 : ImGuiItemStatusFlags_Openable) | (is_open ? ImGuiItemStatusFlags_Opened : 0));
        return is_open;
    }

    // Flags that affects opening behavior:
    // - 0 (default) .................... single-click anywhere to open
    // - OpenOnDoubleClick .............. double-click anywhere to open
    // - OpenOnArrow .................... single-click on arrow to open
    // - OpenOnDoubleClick|OpenOnArrow .. single-click on arrow or double-click anywhere to open
    ImGuiButtonFlags button_flags = 0;
    if (flags & ImGuiTreeNodeFlags_AllowItemOverlap)
        button_flags |= ImGuiButtonFlags_AllowItemOverlap;
    if (flags & ImGuiTreeNodeFlags_OpenOnDoubleClick)
        button_flags |= ImGuiButtonFlags_PressedOnDoubleClick | ((flags & ImGuiTreeNodeFlags_OpenOnArrow) ? ImGuiButtonFlags_PressedOnClickRelease : 0);
    if (!is_leaf)
        button_flags |= ImGuiButtonFlags_PressedOnDragDropHold;

    // We allow clicking on the arrow section with keyboard modifiers held, in order to easily 
    // allow browsing a tree while preserving selection with code implementing multi-selection patterns.
    // When clicking on the rest of the tree node we always disallow keyboard modifiers.
    const float hit_padding_x = style.TouchExtraPadding.x;
    const float arrow_hit_x1 = (text_pos.x - text_offset_x) - hit_padding_x;
    const float arrow_hit_x2 = (text_pos.x - text_offset_x) + (g.FontSize + padding.x * 2.0f) + hit_padding_x;
    if (window != g.HoveredWindow || !(g.IO.MousePos.x >= arrow_hit_x1 && g.IO.MousePos.x < arrow_hit_x2))
        button_flags |= ImGuiButtonFlags_NoKeyModifiers;
    
    bool selected = (flags & ImGuiTreeNodeFlags_Selected) != 0;
    const bool was_selected = selected;

    bool hovered, held;
    bool pressed = ButtonBehavior(interact_bb, id, &hovered, &held, button_flags);
    if (!is_leaf)
    {
        bool toggled = false;
        if (pressed)
        {
            if ((flags & (ImGuiTreeNodeFlags_OpenOnArrow | ImGuiTreeNodeFlags_OpenOnDoubleClick)) == 0 || (g.NavActivateId == id))
                toggled = true;
            if (flags & ImGuiTreeNodeFlags_OpenOnArrow)
                toggled |= (g.IO.MousePos.x >= arrow_hit_x1 && g.IO.MousePos.x < arrow_hit_x2) && (!g.NavDisableMouseHover); // Lightweight equivalent of IsMouseHoveringRect() since ButtonBehavior() already did the job
            if ((flags & ImGuiTreeNodeFlags_OpenOnDoubleClick) && g.IO.MouseDoubleClicked[0])
                toggled = true;
            if (g.DragDropActive && is_open) // When using Drag and Drop "hold to open" we keep the node highlighted after opening, but never close it again.
                toggled = false;
        }

        if (g.NavId == id && g.NavMoveRequest && g.NavMoveDir == ImGuiDir_Left && is_open)
        {
            toggled = true;
            NavMoveRequestCancel();
        }
        if (g.NavId == id && g.NavMoveRequest && g.NavMoveDir == ImGuiDir_Right && !is_open) // If there's something upcoming on the line we may want to give it the priority?
        {
            toggled = true;
            NavMoveRequestCancel();
        }

        if (toggled)
        {
            is_open = !is_open;
            window->DC.StateStorage->SetInt(id, is_open);
            window->DC.LastItemStatusFlags |= ImGuiItemStatusFlags_ToggledOpen;
        }
    }
    if (flags & ImGuiTreeNodeFlags_AllowItemOverlap)
        SetItemAllowOverlap();

    // In this branch, TreeNodeBehavior() cannot toggle the selection so this will never trigger.
    if (selected != was_selected) //-V547
        window->DC.LastItemStatusFlags |= ImGuiItemStatusFlags_ToggledSelection;

    // Render
    const ImU32 text_col = GetColorU32(ImGuiCol_Text);
    ImGuiNavHighlightFlags nav_highlight_flags = ImGuiNavHighlightFlags_TypeThin;
    if (display_frame)
    {
        // Framed type
        const ImU32 bg_col = GetColorU32((held && hovered) ? ImGuiCol_HeaderActive : hovered ? ImGuiCol_HeaderHovered : ImGuiCol_Header);
        RenderFrame(frame_bb.Min, frame_bb.Max, bg_col, true, style.FrameRounding);
        RenderNavHighlight(frame_bb, id, nav_highlight_flags);
        if (flags & ImGuiTreeNodeFlags_Bullet)
            RenderBullet(window->DrawList, ImVec2(text_pos.x - text_offset_x * 0.60f, text_pos.y + g.FontSize * 0.5f), text_col);
        else if (!is_leaf)
            RenderArrow(window->DrawList, ImVec2(text_pos.x - text_offset_x + padding.x, text_pos.y), text_col, is_open ? ImGuiDir_Down : ImGuiDir_Right, 1.0f);
        else // Leaf without bullet, left-adjusted text
            text_pos.x -= text_offset_x;
        if (flags & ImGuiTreeNodeFlags_ClipLabelForTrailingButton)
            frame_bb.Max.x -= g.FontSize + style.FramePadding.x;
        if (g.LogEnabled)
        {
            // NB: '##' is normally used to hide text (as a library-wide feature), so we need to specify the text range to make sure the ## aren't stripped out here.
            const char log_prefix[] = "\n##";
            const char log_suffix[] = "##";
            LogRenderedText(&text_pos, log_prefix, log_prefix+3);
            RenderTextClipped(text_pos, frame_bb.Max, label, label_end, &label_size);
            LogRenderedText(&text_pos, log_suffix, log_suffix+2);
        }
        else
        {
            RenderTextClipped(text_pos, frame_bb.Max, label, label_end, &label_size);
        }
    }
    else
    {
        // Unframed typed for tree nodes
        if (hovered || selected)
        {
            const ImU32 bg_col = GetColorU32((held && hovered) ? ImGuiCol_HeaderActive : hovered ? ImGuiCol_HeaderHovered : ImGuiCol_Header);
            RenderFrame(frame_bb.Min, frame_bb.Max, bg_col, false);
            RenderNavHighlight(frame_bb, id, nav_highlight_flags);
        }
        if (flags & ImGuiTreeNodeFlags_Bullet)
            RenderBullet(window->DrawList, ImVec2(text_pos.x - text_offset_x * 0.5f, text_pos.y + g.FontSize * 0.5f), text_col);
        else if (!is_leaf)
            RenderArrow(window->DrawList, ImVec2(text_pos.x - text_offset_x + padding.x, text_pos.y + g.FontSize * 0.15f), text_col, is_open ? ImGuiDir_Down : ImGuiDir_Right, 0.70f);
        if (g.LogEnabled)
            LogRenderedText(&text_pos, ">");
        RenderText(text_pos, label, label_end, false);
    }

    if (is_open && !(flags & ImGuiTreeNodeFlags_NoTreePushOnOpen))
        TreePushOverrideID(id);
    IMGUI_TEST_ENGINE_ITEM_INFO(id, label, window->DC.ItemFlags | (is_leaf ? 0 : ImGuiItemStatusFlags_Openable) | (is_open ? ImGuiItemStatusFlags_Opened : 0));
    return is_open;
}

void ImGui::TreePush(const char* str_id)
{
    ImGuiWindow* window = GetCurrentWindow();
    Indent();
    window->DC.TreeDepth++;
    PushID(str_id ? str_id : "#TreePush");
}

void ImGui::TreePush(const void* ptr_id)
{
    ImGuiWindow* window = GetCurrentWindow();
    Indent();
    window->DC.TreeDepth++;
    PushID(ptr_id ? ptr_id : (const void*)"#TreePush");
}

void ImGui::TreePushOverrideID(ImGuiID id)
{
    ImGuiWindow* window = GetCurrentWindow();
    Indent();
    window->DC.TreeDepth++;
    window->IDStack.push_back(id);
}

void ImGui::TreePop()
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    Unindent();

    window->DC.TreeDepth--;
    ImU32 tree_depth_mask = (1 << window->DC.TreeDepth);

    // Handle Left arrow to move to parent tree node (when ImGuiTreeNodeFlags_NavLeftJumpsBackHere is enabled)
    if (g.NavMoveDir == ImGuiDir_Left && g.NavWindow == window && NavMoveRequestButNoResultYet())
        if (g.NavIdIsAlive && (window->DC.TreeMayJumpToParentOnPopMask & tree_depth_mask))
        {
            SetNavID(window->IDStack.back(), g.NavLayer);
            NavMoveRequestCancel();
        }
    window->DC.TreeMayJumpToParentOnPopMask &= tree_depth_mask - 1;

    IM_ASSERT(window->IDStack.Size > 1); // There should always be 1 element in the IDStack (pushed during window creation). If this triggers you called TreePop/PopID too much.
    PopID();
}

// Horizontal distance preceding label when using TreeNode() or Bullet()
float ImGui::GetTreeNodeToLabelSpacing()
{
    ImGuiContext& g = *GImGui;
    return g.FontSize + (g.Style.FramePadding.x * 2.0f);
}

// Set next TreeNode/CollapsingHeader open state.
void ImGui::SetNextItemOpen(bool is_open, ImGuiCond cond)
{
    ImGuiContext& g = *GImGui;
    if (g.CurrentWindow->SkipItems)
        return;
    g.NextItemData.Flags |= ImGuiNextItemDataFlags_HasOpen;
    g.NextItemData.OpenVal = is_open;
    g.NextItemData.OpenCond = cond ? cond : ImGuiCond_Always;
}

// CollapsingHeader returns true when opened but do not indent nor push into the ID stack (because of the ImGuiTreeNodeFlags_NoTreePushOnOpen flag).
// This is basically the same as calling TreeNodeEx(label, ImGuiTreeNodeFlags_CollapsingHeader). You can remove the _NoTreePushOnOpen flag if you want behavior closer to normal TreeNode().
bool ImGui::CollapsingHeader(const char* label, ImGuiTreeNodeFlags flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    return TreeNodeBehavior(window->GetID(label), flags | ImGuiTreeNodeFlags_CollapsingHeader, label);
}

bool ImGui::CollapsingHeader(const char* label, bool* p_open, ImGuiTreeNodeFlags flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    if (p_open && !*p_open)
        return false;

    ImGuiID id = window->GetID(label);
    flags |= ImGuiTreeNodeFlags_CollapsingHeader | (p_open ? ImGuiTreeNodeFlags_AllowItemOverlap | ImGuiTreeNodeFlags_ClipLabelForTrailingButton : 0);
    bool is_open = TreeNodeBehavior(id, flags, label);
    if (p_open)
    {
        // Create a small overlapping close button
        // FIXME: We can evolve this into user accessible helpers to add extra buttons on title bars, headers, etc.
        // FIXME: CloseButton can overlap into text, need find a way to clip the text somehow.
        ImGuiContext& g = *GImGui;
        ImGuiItemHoveredDataBackup last_item_backup;
        float button_size = g.FontSize;
        float button_x = ImMax(window->DC.LastItemRect.Min.x, window->DC.LastItemRect.Max.x - g.Style.FramePadding.x * 2.0f - button_size);
        float button_y = window->DC.LastItemRect.Min.y;
        if (CloseButton(window->GetID((void*)((intptr_t)id + 1)), ImVec2(button_x, button_y)))
            *p_open = false;
        last_item_backup.Restore();
    }

    return is_open;
}

//-------------------------------------------------------------------------
// [SECTION] Widgets: Selectable
//-------------------------------------------------------------------------
// - Selectable()
//-------------------------------------------------------------------------

// Tip: pass a non-visible label (e.g. "##dummy") then you can use the space to draw other text or image.
// But you need to make sure the ID is unique, e.g. enclose calls in PushID/PopID or use ##unique_id.
bool ImGui::Selectable(const char* label, bool selected, ImGuiSelectableFlags flags, const ImVec2& size_arg)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;

    if ((flags & ImGuiSelectableFlags_SpanAllColumns) && window->DC.CurrentColumns) // FIXME-OPT: Avoid if vertically clipped.
        PushColumnsBackground();

    ImGuiID id = window->GetID(label);
    ImVec2 label_size = CalcTextSize(label, NULL, true);
    ImVec2 size(size_arg.x != 0.0f ? size_arg.x : label_size.x, size_arg.y != 0.0f ? size_arg.y : label_size.y);
    ImVec2 pos = window->DC.CursorPos;
    pos.y += window->DC.CurrLineTextBaseOffset;
    ImRect bb_inner(pos, pos + size);
    ItemSize(size, 0.0f);

    // Fill horizontal space.
    ImVec2 window_padding = window->WindowPadding;
    float max_x = (flags & ImGuiSelectableFlags_SpanAllColumns) ? GetWindowContentRegionMax().x : GetContentRegionMax().x;
    float w_draw = ImMax(label_size.x, window->Pos.x + max_x - window_padding.x - pos.x);
    ImVec2 size_draw((size_arg.x != 0 && !(flags & ImGuiSelectableFlags_DrawFillAvailWidth)) ? size_arg.x : w_draw, size_arg.y != 0.0f ? size_arg.y : size.y);
    ImRect bb(pos, pos + size_draw);
    if (size_arg.x == 0.0f || (flags & ImGuiSelectableFlags_DrawFillAvailWidth))
        bb.Max.x += window_padding.x;

    // Selectables are tightly packed together so we extend the box to cover spacing between selectable.
    const float spacing_x = style.ItemSpacing.x;
    const float spacing_y = style.ItemSpacing.y;
    const float spacing_L = IM_FLOOR(spacing_x * 0.50f);
    const float spacing_U = IM_FLOOR(spacing_y * 0.50f);
    bb.Min.x -= spacing_L;
    bb.Min.y -= spacing_U;
    bb.Max.x += (spacing_x - spacing_L);
    bb.Max.y += (spacing_y - spacing_U);

    bool item_add;
    if (flags & ImGuiSelectableFlags_Disabled)
    {
        ImGuiItemFlags backup_item_flags = window->DC.ItemFlags;
        window->DC.ItemFlags |= ImGuiItemFlags_Disabled | ImGuiItemFlags_NoNavDefaultFocus;
        item_add = ItemAdd(bb, id);
        window->DC.ItemFlags = backup_item_flags;
    }
    else
    {
        item_add = ItemAdd(bb, id);
    }
    if (!item_add)
    {
        if ((flags & ImGuiSelectableFlags_SpanAllColumns) && window->DC.CurrentColumns)
            PopColumnsBackground();
        return false;
    }

    // We use NoHoldingActiveID on menus so user can click and _hold_ on a menu then drag to browse child entries
    ImGuiButtonFlags button_flags = 0;
    if (flags & ImGuiSelectableFlags_NoHoldingActiveID) button_flags |= ImGuiButtonFlags_NoHoldingActiveID;
    if (flags & ImGuiSelectableFlags_PressedOnClick) button_flags |= ImGuiButtonFlags_PressedOnClick;
    if (flags & ImGuiSelectableFlags_PressedOnRelease) button_flags |= ImGuiButtonFlags_PressedOnRelease;
    if (flags & ImGuiSelectableFlags_Disabled) button_flags |= ImGuiButtonFlags_Disabled;
    if (flags & ImGuiSelectableFlags_AllowDoubleClick) button_flags |= ImGuiButtonFlags_PressedOnClickRelease | ImGuiButtonFlags_PressedOnDoubleClick;
    if (flags & ImGuiSelectableFlags_AllowItemOverlap) button_flags |= ImGuiButtonFlags_AllowItemOverlap;

    if (flags & ImGuiSelectableFlags_Disabled)
        selected = false;

    const bool was_selected = selected;
    bool hovered, held;
    bool pressed = ButtonBehavior(bb, id, &hovered, &held, button_flags);

    // Update NavId when clicking or when Hovering (this doesn't happen on most widgets), so navigation can be resumed with gamepad/keyboard
    if (pressed || (hovered && (flags & ImGuiSelectableFlags_SetNavIdOnHover)))
    {
        if (!g.NavDisableMouseHover && g.NavWindow == window && g.NavLayer == window->DC.NavLayerCurrent)
        {
            g.NavDisableHighlight = true;
            SetNavID(id, window->DC.NavLayerCurrent);
        }
    }
    if (pressed)
        MarkItemEdited(id);

    if (flags & ImGuiSelectableFlags_AllowItemOverlap)
        SetItemAllowOverlap();

    // In this branch, Selectable() cannot toggle the selection so this will never trigger.
    if (selected != was_selected) //-V547
        window->DC.LastItemStatusFlags |= ImGuiItemStatusFlags_ToggledSelection;

    // Render
    if (held && (flags & ImGuiSelectableFlags_DrawHoveredWhenHeld))
        hovered = true;
    if (hovered || selected)
    {
        const ImU32 col = GetColorU32((held && hovered) ? ImGuiCol_HeaderActive : hovered ? ImGuiCol_HeaderHovered : ImGuiCol_Header);
        RenderFrame(bb.Min, bb.Max, col, false, 0.0f);
        RenderNavHighlight(bb, id, ImGuiNavHighlightFlags_TypeThin | ImGuiNavHighlightFlags_NoRounding);
    }

    if ((flags & ImGuiSelectableFlags_SpanAllColumns) && window->DC.CurrentColumns)
    {
        PopColumnsBackground();
        bb.Max.x -= (GetContentRegionMax().x - max_x);
    }

    if (flags & ImGuiSelectableFlags_Disabled) PushStyleColor(ImGuiCol_Text, style.Colors[ImGuiCol_TextDisabled]);
    RenderTextClipped(bb_inner.Min, bb_inner.Max, label, NULL, &label_size, style.SelectableTextAlign, &bb);
    if (flags & ImGuiSelectableFlags_Disabled) PopStyleColor();

    // Automatically close popups
    if (pressed && (window->Flags & ImGuiWindowFlags_Popup) && !(flags & ImGuiSelectableFlags_DontClosePopups) && !(window->DC.ItemFlags & ImGuiItemFlags_SelectableDontClosePopup))
        CloseCurrentPopup();

    IMGUI_TEST_ENGINE_ITEM_INFO(id, label, window->DC.ItemFlags);
    return pressed;
}

bool ImGui::Selectable(const char* label, bool* p_selected, ImGuiSelectableFlags flags, const ImVec2& size_arg)
{
    if (Selectable(label, *p_selected, flags, size_arg))
    {
        *p_selected = !*p_selected;
        return true;
    }
    return false;
}

//-------------------------------------------------------------------------
// [SECTION] Widgets: ListBox
//-------------------------------------------------------------------------
// - ListBox()
// - ListBoxHeader()
// - ListBoxFooter()
//-------------------------------------------------------------------------
// FIXME: This is an old API. We should redesign some of it, rename ListBoxHeader->BeginListBox, ListBoxFooter->EndListBox
// and promote using them over existing ListBox() functions, similarly to change with combo boxes.
//-------------------------------------------------------------------------

// FIXME: In principle this function should be called BeginListBox(). We should rename it after re-evaluating if we want to keep the same signature.
// Helper to calculate the size of a listbox and display a label on the right.
// Tip: To have a list filling the entire window width, PushItemWidth(-1) and pass an non-visible label e.g. "##empty"
bool ImGui::ListBoxHeader(const char* label, const ImVec2& size_arg)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    const ImGuiStyle& style = g.Style;
    const ImGuiID id = GetID(label);
    const ImVec2 label_size = CalcTextSize(label, NULL, true);

    // Size default to hold ~7 items. Fractional number of items helps seeing that we can scroll down/up without looking at scrollbar.
    ImVec2 size = CalcItemSize(size_arg, CalcItemWidth(), GetTextLineHeightWithSpacing() * 7.4f + style.ItemSpacing.y);
    ImVec2 frame_size = ImVec2(size.x, ImMax(size.y, label_size.y));
    ImRect frame_bb(window->DC.CursorPos, window->DC.CursorPos + frame_size);
    ImRect bb(frame_bb.Min, frame_bb.Max + ImVec2(label_size.x > 0.0f ? style.ItemInnerSpacing.x + label_size.x : 0.0f, 0.0f));
    window->DC.LastItemRect = bb; // Forward storage for ListBoxFooter.. dodgy.
    g.NextItemData.ClearFlags();

    if (!IsRectVisible(bb.Min, bb.Max))
    {
        ItemSize(bb.GetSize(), style.FramePadding.y);
        ItemAdd(bb, 0, &frame_bb);
        return false;
    }

    BeginGroup();
    if (label_size.x > 0)
        RenderText(ImVec2(frame_bb.Max.x + style.ItemInnerSpacing.x, frame_bb.Min.y + style.FramePadding.y), label);

    BeginChildFrame(id, frame_bb.GetSize());
    return true;
}

// FIXME: In principle this function should be called EndListBox(). We should rename it after re-evaluating if we want to keep the same signature.
bool ImGui::ListBoxHeader(const char* label, int items_count, int height_in_items)
{
    // Size default to hold ~7.25 items.
    // We add +25% worth of item height to allow the user to see at a glance if there are more items up/down, without looking at the scrollbar.
    // We don't add this extra bit if items_count <= height_in_items. It is slightly dodgy, because it means a dynamic list of items will make the widget resize occasionally when it crosses that size.
    // I am expecting that someone will come and complain about this behavior in a remote future, then we can advise on a better solution.
    if (height_in_items < 0)
        height_in_items = ImMin(items_count, 7);
    const ImGuiStyle& style = GetStyle();
    float height_in_items_f = (height_in_items < items_count) ? (height_in_items + 0.25f) : (height_in_items + 0.00f);

    // We include ItemSpacing.y so that a list sized for the exact number of items doesn't make a scrollbar appears. We could also enforce that by passing a flag to BeginChild().
    ImVec2 size;
    size.x = 0.0f;
    size.y = ImFloor(GetTextLineHeightWithSpacing() * height_in_items_f + style.FramePadding.y * 2.0f);
    return ListBoxHeader(label, size);
}

// FIXME: In principle this function should be called EndListBox(). We should rename it after re-evaluating if we want to keep the same signature.
void ImGui::ListBoxFooter()
{
    ImGuiWindow* parent_window = GetCurrentWindow()->ParentWindow;
    const ImRect bb = parent_window->DC.LastItemRect;
    const ImGuiStyle& style = GetStyle();

    EndChildFrame();

    // Redeclare item size so that it includes the label (we have stored the full size in LastItemRect)
    // We call SameLine() to restore DC.CurrentLine* data
    SameLine();
    parent_window->DC.CursorPos = bb.Min;
    ItemSize(bb, style.FramePadding.y);
    EndGroup();
}

bool ImGui::ListBox(const char* label, int* current_item, const char* const items[], int items_count, int height_items)
{
    const bool value_changed = ListBox(label, current_item, Items_ArrayGetter, (void*)items, items_count, height_items);
    return value_changed;
}

bool ImGui::ListBox(const char* label, int* current_item, bool (*items_getter)(void*, int, const char**), void* data, int items_count, int height_in_items)
{
    if (!ListBoxHeader(label, items_count, height_in_items))
        return false;

    // Assume all items have even height (= 1 line of text). If you need items of different or variable sizes you can create a custom version of ListBox() in your code without using the clipper.
    ImGuiContext& g = *GImGui;
    bool value_changed = false;
    ImGuiListClipper clipper(items_count, GetTextLineHeightWithSpacing()); // We know exactly our line height here so we pass it as a minor optimization, but generally you don't need to.
    while (clipper.Step())
        for (int i = clipper.DisplayStart; i < clipper.DisplayEnd; i++)
        {
            const bool item_selected = (i == *current_item);
            const char* item_text;
            if (!items_getter(data, i, &item_text))
                item_text = "*Unknown item*";

            PushID(i);
            if (Selectable(item_text, item_selected))
            {
                *current_item = i;
                value_changed = true;
            }
            if (item_selected)
                SetItemDefaultFocus();
            PopID();
        }
    ListBoxFooter();
    if (value_changed)
        MarkItemEdited(g.CurrentWindow->DC.LastItemId);

    return value_changed;
}

//-------------------------------------------------------------------------
// [SECTION] Widgets: PlotLines, PlotHistogram
//-------------------------------------------------------------------------
// - PlotEx() [Internal]
// - PlotLines()
// - PlotHistogram()
//-------------------------------------------------------------------------

void ImGui::PlotEx(ImGuiPlotType plot_type, const char* label, float (*values_getter)(void* data, int idx), void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 frame_size)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const ImGuiID id = window->GetID(label);

    const ImVec2 label_size = CalcTextSize(label, NULL, true);
    if (frame_size.x == 0.0f)
        frame_size.x = CalcItemWidth();
    if (frame_size.y == 0.0f)
        frame_size.y = label_size.y + (style.FramePadding.y * 2);

    const ImRect frame_bb(window->DC.CursorPos, window->DC.CursorPos + frame_size);
    const ImRect inner_bb(frame_bb.Min + style.FramePadding, frame_bb.Max - style.FramePadding);
    const ImRect total_bb(frame_bb.Min, frame_bb.Max + ImVec2(label_size.x > 0.0f ? style.ItemInnerSpacing.x + label_size.x : 0.0f, 0));
    ItemSize(total_bb, style.FramePadding.y);
    if (!ItemAdd(total_bb, 0, &frame_bb))
        return;
    const bool hovered = ItemHoverable(frame_bb, id);

    // Determine scale from values if not specified
    if (scale_min == FLT_MAX || scale_max == FLT_MAX)
    {
        float v_min = FLT_MAX;
        float v_max = -FLT_MAX;
        for (int i = 0; i < values_count; i++)
        {
            const float v = values_getter(data, i);
            if (v != v) // Ignore NaN values
                continue;
            v_min = ImMin(v_min, v);
            v_max = ImMax(v_max, v);
        }
        if (scale_min == FLT_MAX)
            scale_min = v_min;
        if (scale_max == FLT_MAX)
            scale_max = v_max;
    }

    RenderFrame(frame_bb.Min, frame_bb.Max, GetColorU32(ImGuiCol_FrameBg), true, style.FrameRounding);

    const int values_count_min = (plot_type == ImGuiPlotType_Lines) ? 2 : 1;
    if (values_count >= values_count_min)
    {
        int res_w = ImMin((int)frame_size.x, values_count) + ((plot_type == ImGuiPlotType_Lines) ? -1 : 0);
        int item_count = values_count + ((plot_type == ImGuiPlotType_Lines) ? -1 : 0);

        // Tooltip on hover
        int v_hovered = -1;
        if (hovered && inner_bb.Contains(g.IO.MousePos))
        {
            const float t = ImClamp((g.IO.MousePos.x - inner_bb.Min.x) / (inner_bb.Max.x - inner_bb.Min.x), 0.0f, 0.9999f);
            const int v_idx = (int)(t * item_count);
            IM_ASSERT(v_idx >= 0 && v_idx < values_count);

            const float v0 = values_getter(data, (v_idx + values_offset) % values_count);
            const float v1 = values_getter(data, (v_idx + 1 + values_offset) % values_count);
            if (plot_type == ImGuiPlotType_Lines)
                SetTooltip("%d: %8.4g\n%d: %8.4g", v_idx, v0, v_idx+1, v1);
            else if (plot_type == ImGuiPlotType_Histogram)
                SetTooltip("%d: %8.4g", v_idx, v0);
            v_hovered = v_idx;
        }

        const float t_step = 1.0f / (float)res_w;
        const float inv_scale = (scale_min == scale_max) ? 0.0f : (1.0f / (scale_max - scale_min));

        float v0 = values_getter(data, (0 + values_offset) % values_count);
        float t0 = 0.0f;
        ImVec2 tp0 = ImVec2( t0, 1.0f - ImSaturate((v0 - scale_min) * inv_scale) );                       // Point in the normalized space of our target rectangle
        float histogram_zero_line_t = (scale_min * scale_max < 0.0f) ? (-scale_min * inv_scale) : (scale_min < 0.0f ? 0.0f : 1.0f);   // Where does the zero line stands

        const ImU32 col_base = GetColorU32((plot_type == ImGuiPlotType_Lines) ? ImGuiCol_PlotLines : ImGuiCol_PlotHistogram);
        const ImU32 col_hovered = GetColorU32((plot_type == ImGuiPlotType_Lines) ? ImGuiCol_PlotLinesHovered : ImGuiCol_PlotHistogramHovered);

        for (int n = 0; n < res_w; n++)
        {
            const float t1 = t0 + t_step;
            const int v1_idx = (int)(t0 * item_count + 0.5f);
            IM_ASSERT(v1_idx >= 0 && v1_idx < values_count);
            const float v1 = values_getter(data, (v1_idx + values_offset + 1) % values_count);
            const ImVec2 tp1 = ImVec2( t1, 1.0f - ImSaturate((v1 - scale_min) * inv_scale) );

            // NB: Draw calls are merged together by the DrawList system. Still, we should render our batch are lower level to save a bit of CPU.
            ImVec2 pos0 = ImLerp(inner_bb.Min, inner_bb.Max, tp0);
            ImVec2 pos1 = ImLerp(inner_bb.Min, inner_bb.Max, (plot_type == ImGuiPlotType_Lines) ? tp1 : ImVec2(tp1.x, histogram_zero_line_t));
            if (plot_type == ImGuiPlotType_Lines)
            {
                window->DrawList->AddLine(pos0, pos1, v_hovered == v1_idx ? col_hovered : col_base);
            }
            else if (plot_type == ImGuiPlotType_Histogram)
            {
                if (pos1.x >= pos0.x + 2.0f)
                    pos1.x -= 1.0f;
                window->DrawList->AddRectFilled(pos0, pos1, v_hovered == v1_idx ? col_hovered : col_base);
            }

            t0 = t1;
            tp0 = tp1;
        }
    }

    // Text overlay
    if (overlay_text)
        RenderTextClipped(ImVec2(frame_bb.Min.x, frame_bb.Min.y + style.FramePadding.y), frame_bb.Max, overlay_text, NULL, NULL, ImVec2(0.5f,0.0f));

    if (label_size.x > 0.0f)
        RenderText(ImVec2(frame_bb.Max.x + style.ItemInnerSpacing.x, inner_bb.Min.y), label);
}

struct ImGuiPlotArrayGetterData
{
    const float* Values;
    int Stride;

    ImGuiPlotArrayGetterData(const float* values, int stride) { Values = values; Stride = stride; }
};

static float Plot_ArrayGetter(void* data, int idx)
{
    ImGuiPlotArrayGetterData* plot_data = (ImGuiPlotArrayGetterData*)data;
    const float v = *(const float*)(const void*)((const unsigned char*)plot_data->Values + (size_t)idx * plot_data->Stride);
    return v;
}

void ImGui::PlotLines(const char* label, const float* values, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride)
{
    ImGuiPlotArrayGetterData data(values, stride);
    PlotEx(ImGuiPlotType_Lines, label, &Plot_ArrayGetter, (void*)&data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);
}

void ImGui::PlotLines(const char* label, float (*values_getter)(void* data, int idx), void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size)
{
    PlotEx(ImGuiPlotType_Lines, label, values_getter, data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);
}

void ImGui::PlotHistogram(const char* label, const float* values, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride)
{
    ImGuiPlotArrayGetterData data(values, stride);
    PlotEx(ImGuiPlotType_Histogram, label, &Plot_ArrayGetter, (void*)&data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);
}

void ImGui::PlotHistogram(const char* label, float (*values_getter)(void* data, int idx), void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size)
{
    PlotEx(ImGuiPlotType_Histogram, label, values_getter, data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);
}

//-------------------------------------------------------------------------
// [SECTION] Widgets: Value helpers
// Those is not very useful, legacy API.
//-------------------------------------------------------------------------
// - Value()
//-------------------------------------------------------------------------

void ImGui::Value(const char* prefix, bool b)
{
    Text("%s: %s", prefix, (b ? "true" : "false"));
}

void ImGui::Value(const char* prefix, int v)
{
    Text("%s: %d", prefix, v);
}

void ImGui::Value(const char* prefix, unsigned int v)
{
    Text("%s: %d", prefix, v);
}

void ImGui::Value(const char* prefix, float v, const char* float_format)
{
    if (float_format)
    {
        char fmt[64];
        ImFormatString(fmt, IM_ARRAYSIZE(fmt), "%%s: %s", float_format);
        Text(fmt, prefix, v);
    }
    else
    {
        Text("%s: %.3f", prefix, v);
    }
}

//-------------------------------------------------------------------------
// [SECTION] MenuItem, BeginMenu, EndMenu, etc.
//-------------------------------------------------------------------------
// - ImGuiMenuColumns [Internal]
// - BeginMenuBar()
// - EndMenuBar()
// - BeginMainMenuBar()
// - EndMainMenuBar()
// - BeginMenu()
// - EndMenu()
// - MenuItem()
//-------------------------------------------------------------------------

// Helpers for internal use
ImGuiMenuColumns::ImGuiMenuColumns()
{
    Spacing = Width = NextWidth = 0.0f;
    memset(Pos, 0, sizeof(Pos));
    memset(NextWidths, 0, sizeof(NextWidths));
}

void ImGuiMenuColumns::Update(int count, float spacing, bool clear)
{
    IM_ASSERT(count == IM_ARRAYSIZE(Pos));
    IM_UNUSED(count);
    Width = NextWidth = 0.0f;
    Spacing = spacing;
    if (clear)
        memset(NextWidths, 0, sizeof(NextWidths));
    for (int i = 0; i < IM_ARRAYSIZE(Pos); i++)
    {
        if (i > 0 && NextWidths[i] > 0.0f)
            Width += Spacing;
        Pos[i] = IM_FLOOR(Width);
        Width += NextWidths[i];
        NextWidths[i] = 0.0f;
    }
}

float ImGuiMenuColumns::DeclColumns(float w0, float w1, float w2) // not using va_arg because they promote float to double
{
    NextWidth = 0.0f;
    NextWidths[0] = ImMax(NextWidths[0], w0);
    NextWidths[1] = ImMax(NextWidths[1], w1);
    NextWidths[2] = ImMax(NextWidths[2], w2);
    for (int i = 0; i < IM_ARRAYSIZE(Pos); i++)
        NextWidth += NextWidths[i] + ((i > 0 && NextWidths[i] > 0.0f) ? Spacing : 0.0f);
    return ImMax(Width, NextWidth);
}

float ImGuiMenuColumns::CalcExtraSpace(float avail_w) const
{
    return ImMax(0.0f, avail_w - Width);
}

// FIXME: Provided a rectangle perhaps e.g. a BeginMenuBarEx() could be used anywhere..
// Currently the main responsibility of this function being to setup clip-rect + horizontal layout + menu navigation layer.
// Ideally we also want this to be responsible for claiming space out of the main window scrolling rectangle, in which case ImGuiWindowFlags_MenuBar will become unnecessary.
// Then later the same system could be used for multiple menu-bars, scrollbars, side-bars.
bool ImGui::BeginMenuBar()
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;
    if (!(window->Flags & ImGuiWindowFlags_MenuBar))
        return false;

    IM_ASSERT(!window->DC.MenuBarAppending);
    BeginGroup(); // Backup position on layer 0 // FIXME: Misleading to use a group for that backup/restore
    PushID("##menubar");

    // We don't clip with current window clipping rectangle as it is already set to the area below. However we clip with window full rect.
    // We remove 1 worth of rounding to Max.x to that text in long menus and small windows don't tend to display over the lower-right rounded area, which looks particularly glitchy.
    ImRect bar_rect = window->MenuBarRect();
    ImRect clip_rect(IM_ROUND(bar_rect.Min.x), IM_ROUND(bar_rect.Min.y + window->WindowBorderSize), IM_ROUND(ImMax(bar_rect.Min.x, bar_rect.Max.x - window->WindowRounding)), IM_ROUND(bar_rect.Max.y));
    clip_rect.ClipWith(window->OuterRectClipped);
    PushClipRect(clip_rect.Min, clip_rect.Max, false);

    window->DC.CursorPos = ImVec2(bar_rect.Min.x + window->DC.MenuBarOffset.x, bar_rect.Min.y + window->DC.MenuBarOffset.y);
    window->DC.LayoutType = ImGuiLayoutType_Horizontal;
    window->DC.NavLayerCurrent = ImGuiNavLayer_Menu;
    window->DC.NavLayerCurrentMask = (1 << ImGuiNavLayer_Menu);
    window->DC.MenuBarAppending = true;
    AlignTextToFramePadding();
    return true;
}

void ImGui::EndMenuBar()
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;
    ImGuiContext& g = *GImGui;

    // Nav: When a move request within one of our child menu failed, capture the request to navigate among our siblings.
    if (NavMoveRequestButNoResultYet() && (g.NavMoveDir == ImGuiDir_Left || g.NavMoveDir == ImGuiDir_Right) && (g.NavWindow->Flags & ImGuiWindowFlags_ChildMenu))
    {
        ImGuiWindow* nav_earliest_child = g.NavWindow;
        while (nav_earliest_child->ParentWindow && (nav_earliest_child->ParentWindow->Flags & ImGuiWindowFlags_ChildMenu))
            nav_earliest_child = nav_earliest_child->ParentWindow;
        if (nav_earliest_child->ParentWindow == window && nav_earliest_child->DC.ParentLayoutType == ImGuiLayoutType_Horizontal && g.NavMoveRequestForward == ImGuiNavForward_None)
        {
            // To do so we claim focus back, restore NavId and then process the movement request for yet another frame.
            // This involve a one-frame delay which isn't very problematic in this situation. We could remove it by scoring in advance for multiple window (probably not worth the hassle/cost)
            const ImGuiNavLayer layer = ImGuiNavLayer_Menu;
            IM_ASSERT(window->DC.NavLayerActiveMaskNext & (1 << layer)); // Sanity check
            FocusWindow(window);
            SetNavIDWithRectRel(window->NavLastIds[layer], layer, window->NavRectRel[layer]);
            g.NavLayer = layer;
            g.NavDisableHighlight = true; // Hide highlight for the current frame so we don't see the intermediary selection.
            g.NavMoveRequestForward = ImGuiNavForward_ForwardQueued;
            NavMoveRequestCancel();
        }
    }

    IM_ASSERT(window->Flags & ImGuiWindowFlags_MenuBar);
    IM_ASSERT(window->DC.MenuBarAppending);
    PopClipRect();
    PopID();
    window->DC.MenuBarOffset.x = window->DC.CursorPos.x - window->MenuBarRect().Min.x; // Save horizontal position so next append can reuse it. This is kinda equivalent to a per-layer CursorPos.
    window->DC.GroupStack.back().EmitItem = false;
    EndGroup(); // Restore position on layer 0
    window->DC.LayoutType = ImGuiLayoutType_Vertical;
    window->DC.NavLayerCurrent = ImGuiNavLayer_Main;
    window->DC.NavLayerCurrentMask = (1 << ImGuiNavLayer_Main);
    window->DC.MenuBarAppending = false;
}

// For the main menu bar, which cannot be moved, we honor g.Style.DisplaySafeAreaPadding to ensure text can be visible on a TV set.
bool ImGui::BeginMainMenuBar()
{
    ImGuiContext& g = *GImGui;
    g.NextWindowData.MenuBarOffsetMinVal = ImVec2(g.Style.DisplaySafeAreaPadding.x, ImMax(g.Style.DisplaySafeAreaPadding.y - g.Style.FramePadding.y, 0.0f));
    SetNextWindowPos(ImVec2(0.0f, 0.0f));
    SetNextWindowSize(ImVec2(g.IO.DisplaySize.x, g.NextWindowData.MenuBarOffsetMinVal.y + g.FontBaseSize + g.Style.FramePadding.y));
    PushStyleVar(ImGuiStyleVar_WindowRounding, 0.0f);
    PushStyleVar(ImGuiStyleVar_WindowMinSize, ImVec2(0, 0));
    ImGuiWindowFlags window_flags = ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoMove | ImGuiWindowFlags_NoScrollbar | ImGuiWindowFlags_NoSavedSettings | ImGuiWindowFlags_MenuBar;
    bool is_open = Begin("##MainMenuBar", NULL, window_flags) && BeginMenuBar();
    PopStyleVar(2);
    g.NextWindowData.MenuBarOffsetMinVal = ImVec2(0.0f, 0.0f);
    if (!is_open)
    {
        End();
        return false;
    }
    return true; //-V1020
}

void ImGui::EndMainMenuBar()
{
    EndMenuBar();

    // When the user has left the menu layer (typically: closed menus through activation of an item), we restore focus to the previous window
    // FIXME: With this strategy we won't be able to restore a NULL focus.
    ImGuiContext& g = *GImGui;
    if (g.CurrentWindow == g.NavWindow && g.NavLayer == 0 && !g.NavAnyRequest)
        FocusTopMostWindowUnderOne(g.NavWindow, NULL);

    End();
}

bool ImGui::BeginMenu(const char* label, bool enabled)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const ImGuiID id = window->GetID(label);

    ImVec2 label_size = CalcTextSize(label, NULL, true);

    bool pressed;
    bool menu_is_open = IsPopupOpen(id);
    bool menuset_is_open = !(window->Flags & ImGuiWindowFlags_Popup) && (g.OpenPopupStack.Size > g.BeginPopupStack.Size && g.OpenPopupStack[g.BeginPopupStack.Size].OpenParentId == window->IDStack.back());
    ImGuiWindow* backed_nav_window = g.NavWindow;
    if (menuset_is_open)
        g.NavWindow = window;  // Odd hack to allow hovering across menus of a same menu-set (otherwise we wouldn't be able to hover parent)

    // The reference position stored in popup_pos will be used by Begin() to find a suitable position for the child menu,
    // However the final position is going to be different! It is choosen by FindBestWindowPosForPopup().
    // e.g. Menus tend to overlap each other horizontally to amplify relative Z-ordering.
    ImVec2 popup_pos, pos = window->DC.CursorPos;
    if (window->DC.LayoutType == ImGuiLayoutType_Horizontal)
    {
        // Menu inside an horizontal menu bar
        // Selectable extend their highlight by half ItemSpacing in each direction.
        // For ChildMenu, the popup position will be overwritten by the call to FindBestWindowPosForPopup() in Begin()
        popup_pos = ImVec2(pos.x - 1.0f - IM_FLOOR(style.ItemSpacing.x * 0.5f), pos.y - style.FramePadding.y + window->MenuBarHeight());
        window->DC.CursorPos.x += IM_FLOOR(style.ItemSpacing.x * 0.5f);
        PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(style.ItemSpacing.x * 2.0f, style.ItemSpacing.y));
        float w = label_size.x;
        pressed = Selectable(label, menu_is_open, ImGuiSelectableFlags_NoHoldingActiveID | ImGuiSelectableFlags_PressedOnClick | ImGuiSelectableFlags_DontClosePopups | (!enabled ? ImGuiSelectableFlags_Disabled : 0), ImVec2(w, 0.0f));
        PopStyleVar();
        window->DC.CursorPos.x += IM_FLOOR(style.ItemSpacing.x * (-1.0f + 0.5f)); // -1 spacing to compensate the spacing added when Selectable() did a SameLine(). It would also work to call SameLine() ourselves after the PopStyleVar().
    }
    else
    {
        // Menu inside a menu
        popup_pos = ImVec2(pos.x, pos.y - style.WindowPadding.y);
        float w = window->MenuColumns.DeclColumns(label_size.x, 0.0f, IM_FLOOR(g.FontSize * 1.20f)); // Feedback to next frame
        float extra_w = ImMax(0.0f, GetContentRegionAvail().x - w);
        pressed = Selectable(label, menu_is_open, ImGuiSelectableFlags_NoHoldingActiveID | ImGuiSelectableFlags_PressedOnClick | ImGuiSelectableFlags_DontClosePopups | ImGuiSelectableFlags_DrawFillAvailWidth | (!enabled ? ImGuiSelectableFlags_Disabled : 0), ImVec2(w, 0.0f));
        ImU32 text_col = GetColorU32(enabled ? ImGuiCol_Text : ImGuiCol_TextDisabled);
        RenderArrow(window->DrawList, pos + ImVec2(window->MenuColumns.Pos[2] + extra_w + g.FontSize * 0.30f, 0.0f), text_col, ImGuiDir_Right);
    }

    const bool hovered = enabled && ItemHoverable(window->DC.LastItemRect, id);
    if (menuset_is_open)
        g.NavWindow = backed_nav_window;

    bool want_open = false;
    bool want_close = false;
    if (window->DC.LayoutType == ImGuiLayoutType_Vertical) // (window->Flags & (ImGuiWindowFlags_Popup|ImGuiWindowFlags_ChildMenu))
    {
        // Close menu when not hovering it anymore unless we are moving roughly in the direction of the menu
        // Implement http://bjk5.com/post/44698559168/breaking-down-amazons-mega-dropdown to avoid using timers, so menus feels more reactive.
        bool moving_toward_other_child_menu = false;

        ImGuiWindow* child_menu_window = (g.BeginPopupStack.Size < g.OpenPopupStack.Size && g.OpenPopupStack[g.BeginPopupStack.Size].SourceWindow == window) ? g.OpenPopupStack[g.BeginPopupStack.Size].Window : NULL;
        if (g.HoveredWindow == window && child_menu_window != NULL && !(window->Flags & ImGuiWindowFlags_MenuBar))
        {
            // FIXME-DPI: Values should be derived from a master "scale" factor.
            ImRect next_window_rect = child_menu_window->Rect();
            ImVec2 ta = g.IO.MousePos - g.IO.MouseDelta;
            ImVec2 tb = (window->Pos.x < child_menu_window->Pos.x) ? next_window_rect.GetTL() : next_window_rect.GetTR();
            ImVec2 tc = (window->Pos.x < child_menu_window->Pos.x) ? next_window_rect.GetBL() : next_window_rect.GetBR();
            float extra = ImClamp(ImFabs(ta.x - tb.x) * 0.30f, 5.0f, 30.0f);    // add a bit of extra slack.
            ta.x += (window->Pos.x < child_menu_window->Pos.x) ? -0.5f : +0.5f; // to avoid numerical issues
            tb.y = ta.y + ImMax((tb.y - extra) - ta.y, -100.0f);                // triangle is maximum 200 high to limit the slope and the bias toward large sub-menus // FIXME: Multiply by fb_scale?
            tc.y = ta.y + ImMin((tc.y + extra) - ta.y, +100.0f);
            moving_toward_other_child_menu = ImTriangleContainsPoint(ta, tb, tc, g.IO.MousePos);
            //GetForegroundDrawList()->AddTriangleFilled(ta, tb, tc, moving_within_opened_triangle ? IM_COL32(0,128,0,128) : IM_COL32(128,0,0,128)); // [DEBUG]
        }
        if (menu_is_open && !hovered && g.HoveredWindow == window && g.HoveredIdPreviousFrame != 0 && g.HoveredIdPreviousFrame != id && !moving_toward_other_child_menu)
            want_close = true;

        if (!menu_is_open && hovered && pressed) // Click to open
            want_open = true;
        else if (!menu_is_open && hovered && !moving_toward_other_child_menu) // Hover to open
            want_open = true;

        if (g.NavActivateId == id)
        {
            want_close = menu_is_open;
            want_open = !menu_is_open;
        }
        if (g.NavId == id && g.NavMoveRequest && g.NavMoveDir == ImGuiDir_Right) // Nav-Right to open
        {
            want_open = true;
            NavMoveRequestCancel();
        }
    }
    else
    {
        // Menu bar
        if (menu_is_open && pressed && menuset_is_open) // Click an open menu again to close it
        {
            want_close = true;
            want_open = menu_is_open = false;
        }
        else if (pressed || (hovered && menuset_is_open && !menu_is_open)) // First click to open, then hover to open others
        {
            want_open = true;
        }
        else if (g.NavId == id && g.NavMoveRequest && g.NavMoveDir == ImGuiDir_Down) // Nav-Down to open
        {
            want_open = true;
            NavMoveRequestCancel();
        }
    }

    if (!enabled) // explicitly close if an open menu becomes disabled, facilitate users code a lot in pattern such as 'if (BeginMenu("options", has_object)) { ..use object.. }'
        want_close = true;
    if (want_close && IsPopupOpen(id))
        ClosePopupToLevel(g.BeginPopupStack.Size, true);

    IMGUI_TEST_ENGINE_ITEM_INFO(id, label, window->DC.ItemFlags | ImGuiItemStatusFlags_Openable | (menu_is_open ? ImGuiItemStatusFlags_Opened : 0));

    if (!menu_is_open && want_open && g.OpenPopupStack.Size > g.BeginPopupStack.Size)
    {
        // Don't recycle same menu level in the same frame, first close the other menu and yield for a frame.
        OpenPopup(label);
        return false;
    }

    menu_is_open |= want_open;
    if (want_open)
        OpenPopup(label);

    if (menu_is_open)
    {
        // Sub-menus are ChildWindow so that mouse can be hovering across them (otherwise top-most popup menu would steal focus and not allow hovering on parent menu)
        SetNextWindowPos(popup_pos, ImGuiCond_Always);
        ImGuiWindowFlags flags = ImGuiWindowFlags_ChildMenu | ImGuiWindowFlags_AlwaysAutoResize | ImGuiWindowFlags_NoMove | ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoSavedSettings | ImGuiWindowFlags_NoNavFocus;
        if (window->Flags & (ImGuiWindowFlags_Popup|ImGuiWindowFlags_ChildMenu))
            flags |= ImGuiWindowFlags_ChildWindow;
        menu_is_open = BeginPopupEx(id, flags); // menu_is_open can be 'false' when the popup is completely clipped (e.g. zero size display)
    }

    return menu_is_open;
}

void ImGui::EndMenu()
{
    // Nav: When a left move request _within our child menu_ failed, close ourselves (the _parent_ menu).
    // A menu doesn't close itself because EndMenuBar() wants the catch the last Left<>Right inputs.
    // However, it means that with the current code, a BeginMenu() from outside another menu or a menu-bar won't be closable with the Left direction.
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    if (g.NavWindow && g.NavWindow->ParentWindow == window && g.NavMoveDir == ImGuiDir_Left && NavMoveRequestButNoResultYet() && window->DC.LayoutType == ImGuiLayoutType_Vertical)
    {
        ClosePopupToLevel(g.BeginPopupStack.Size, true);
        NavMoveRequestCancel();
    }

    EndPopup();
}

bool ImGui::MenuItem(const char* label, const char* shortcut, bool selected, bool enabled)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    ImGuiStyle& style = g.Style;
    ImVec2 pos = window->DC.CursorPos;
    ImVec2 label_size = CalcTextSize(label, NULL, true);

    // We've been using the equivalent of ImGuiSelectableFlags_SetNavIdOnHover on all Selectable() since early Nav system days (commit 43ee5d73),
    // but I am unsure whether this should be kept at all. For now moved it to be an opt-in feature used by menus only.
    ImGuiSelectableFlags flags = ImGuiSelectableFlags_PressedOnRelease | ImGuiSelectableFlags_SetNavIdOnHover | (enabled ? 0 : ImGuiSelectableFlags_Disabled);
    bool pressed;
    if (window->DC.LayoutType == ImGuiLayoutType_Horizontal)
    {
        // Mimic the exact layout spacing of BeginMenu() to allow MenuItem() inside a menu bar, which is a little misleading but may be useful
        // Note that in this situation we render neither the shortcut neither the selected tick mark
        float w = label_size.x;
        window->DC.CursorPos.x += IM_FLOOR(style.ItemSpacing.x * 0.5f);
        PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(style.ItemSpacing.x * 2.0f, style.ItemSpacing.y));
        pressed = Selectable(label, false, flags, ImVec2(w, 0.0f));
        PopStyleVar();
        window->DC.CursorPos.x += IM_FLOOR(style.ItemSpacing.x * (-1.0f + 0.5f)); // -1 spacing to compensate the spacing added when Selectable() did a SameLine(). It would also work to call SameLine() ourselves after the PopStyleVar().
    }
    else
    {
        ImVec2 shortcut_size = shortcut ? CalcTextSize(shortcut, NULL) : ImVec2(0.0f, 0.0f);
        float w = window->MenuColumns.DeclColumns(label_size.x, shortcut_size.x, IM_FLOOR(g.FontSize * 1.20f)); // Feedback for next frame
        float extra_w = ImMax(0.0f, GetContentRegionAvail().x - w);
        pressed = Selectable(label, false, flags | ImGuiSelectableFlags_DrawFillAvailWidth, ImVec2(w, 0.0f));
        if (shortcut_size.x > 0.0f)
        {
            PushStyleColor(ImGuiCol_Text, g.Style.Colors[ImGuiCol_TextDisabled]);
            RenderText(pos + ImVec2(window->MenuColumns.Pos[1] + extra_w, 0.0f), shortcut, NULL, false);
            PopStyleColor();
        }
        if (selected)
            RenderCheckMark(pos + ImVec2(window->MenuColumns.Pos[2] + extra_w + g.FontSize * 0.40f, g.FontSize * 0.134f * 0.5f), GetColorU32(enabled ? ImGuiCol_Text : ImGuiCol_TextDisabled), g.FontSize  * 0.866f);
    }

    IMGUI_TEST_ENGINE_ITEM_INFO(window->DC.LastItemId, label, window->DC.ItemFlags | ImGuiItemStatusFlags_Checkable | (selected ? ImGuiItemStatusFlags_Checked : 0));
    return pressed;
}

bool ImGui::MenuItem(const char* label, const char* shortcut, bool* p_selected, bool enabled)
{
    if (MenuItem(label, shortcut, p_selected ? *p_selected : false, enabled))
    {
        if (p_selected)
            *p_selected = !*p_selected;
        return true;
    }
    return false;
}

//-------------------------------------------------------------------------
// [SECTION] Widgets: BeginTabBar, EndTabBar, etc.
//-------------------------------------------------------------------------
// [BETA API] API may evolve! This code has been extracted out of the Docking branch,
// and some of the construct which are not used in Master may be left here to facilitate merging.
//-------------------------------------------------------------------------
// - BeginTabBar()
// - BeginTabBarEx() [Internal]
// - EndTabBar()
// - TabBarLayout() [Internal]
// - TabBarCalcTabID() [Internal]
// - TabBarCalcMaxTabWidth() [Internal]
// - TabBarFindTabById() [Internal]
// - TabBarRemoveTab() [Internal]
// - TabBarCloseTab() [Internal]
// - TabBarScrollClamp()v
// - TabBarScrollToTab() [Internal]
// - TabBarQueueChangeTabOrder() [Internal]
// - TabBarScrollingButtons() [Internal]
// - TabBarTabListPopupButton() [Internal]
//-------------------------------------------------------------------------

namespace ImGui
{
    static void             TabBarLayout(ImGuiTabBar* tab_bar);
    static ImU32            TabBarCalcTabID(ImGuiTabBar* tab_bar, const char* label);
    static float            TabBarCalcMaxTabWidth();
    static float            TabBarScrollClamp(ImGuiTabBar* tab_bar, float scrolling);
    static void             TabBarScrollToTab(ImGuiTabBar* tab_bar, ImGuiTabItem* tab);
    static ImGuiTabItem*    TabBarScrollingButtons(ImGuiTabBar* tab_bar);
    static ImGuiTabItem*    TabBarTabListPopupButton(ImGuiTabBar* tab_bar);
}

ImGuiTabBar::ImGuiTabBar()
{
    ID = 0;
    SelectedTabId = NextSelectedTabId = VisibleTabId = 0;
    CurrFrameVisible = PrevFrameVisible = -1;
    LastTabContentHeight = 0.0f;
    OffsetMax = OffsetMaxIdeal = OffsetNextTab = 0.0f;
    ScrollingAnim = ScrollingTarget = ScrollingTargetDistToVisibility = ScrollingSpeed = 0.0f;
    Flags = ImGuiTabBarFlags_None;
    ReorderRequestTabId = 0;
    ReorderRequestDir = 0;
    WantLayout = VisibleTabWasSubmitted = false;
    LastTabItemIdx = -1;
}

static int IMGUI_CDECL TabItemComparerByVisibleOffset(const void* lhs, const void* rhs)
{
    const ImGuiTabItem* a = (const ImGuiTabItem*)lhs;
    const ImGuiTabItem* b = (const ImGuiTabItem*)rhs;
    return (int)(a->Offset - b->Offset);
}

static ImGuiTabBar* GetTabBarFromTabBarRef(const ImGuiPtrOrIndex& ref)
{
    ImGuiContext& g = *GImGui;
    return ref.Ptr ? (ImGuiTabBar*)ref.Ptr : g.TabBars.GetByIndex(ref.Index);
}

static ImGuiPtrOrIndex GetTabBarRefFromTabBar(ImGuiTabBar* tab_bar)
{
    ImGuiContext& g = *GImGui;
    if (g.TabBars.Contains(tab_bar))
        return ImGuiPtrOrIndex(g.TabBars.GetIndex(tab_bar));
    return ImGuiPtrOrIndex(tab_bar);
}

bool    ImGui::BeginTabBar(const char* str_id, ImGuiTabBarFlags flags)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    if (window->SkipItems)
        return false;

    ImGuiID id = window->GetID(str_id);
    ImGuiTabBar* tab_bar = g.TabBars.GetOrAddByKey(id);
    ImRect tab_bar_bb = ImRect(window->DC.CursorPos.x, window->DC.CursorPos.y, window->WorkRect.Max.x, window->DC.CursorPos.y + g.FontSize + g.Style.FramePadding.y * 2);
    tab_bar->ID = id;
    return BeginTabBarEx(tab_bar, tab_bar_bb, flags | ImGuiTabBarFlags_IsFocused);
}

bool    ImGui::BeginTabBarEx(ImGuiTabBar* tab_bar, const ImRect& tab_bar_bb, ImGuiTabBarFlags flags)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    if (window->SkipItems)
        return false;

    if ((flags & ImGuiTabBarFlags_DockNode) == 0)
        PushOverrideID(tab_bar->ID);

    // Add to stack
    g.CurrentTabBarStack.push_back(GetTabBarRefFromTabBar(tab_bar));
    g.CurrentTabBar = tab_bar;

    if (tab_bar->CurrFrameVisible == g.FrameCount)
    {
        //IMGUI_DEBUG_LOG("BeginTabBarEx already called this frame\n", g.FrameCount);
        IM_ASSERT(0);
        return true;
    }

    // When toggling back from ordered to manually-reorderable, shuffle tabs to enforce the last visible order.
    // Otherwise, the most recently inserted tabs would move at the end of visible list which can be a little too confusing or magic for the user.
    if ((flags & ImGuiTabBarFlags_Reorderable) && !(tab_bar->Flags & ImGuiTabBarFlags_Reorderable) && tab_bar->Tabs.Size > 1 && tab_bar->PrevFrameVisible != -1)
        ImQsort(tab_bar->Tabs.Data, tab_bar->Tabs.Size, sizeof(ImGuiTabItem), TabItemComparerByVisibleOffset);

    // Flags
    if ((flags & ImGuiTabBarFlags_FittingPolicyMask_) == 0)
        flags |= ImGuiTabBarFlags_FittingPolicyDefault_;

    tab_bar->Flags = flags;
    tab_bar->BarRect = tab_bar_bb;
    tab_bar->WantLayout = true; // Layout will be done on the first call to ItemTab()
    tab_bar->PrevFrameVisible = tab_bar->CurrFrameVisible;
    tab_bar->CurrFrameVisible = g.FrameCount;
    tab_bar->FramePadding = g.Style.FramePadding;

    // Layout
    ItemSize(ImVec2(tab_bar->OffsetMaxIdeal, tab_bar->BarRect.GetHeight()), tab_bar->FramePadding.y);
    window->DC.CursorPos.x = tab_bar->BarRect.Min.x;

    // Draw separator
    const ImU32 col = GetColorU32((flags & ImGuiTabBarFlags_IsFocused) ? ImGuiCol_TabActive : ImGuiCol_TabUnfocusedActive);
    const float y = tab_bar->BarRect.Max.y - 1.0f;
    {
        const float separator_min_x = tab_bar->BarRect.Min.x - IM_FLOOR(window->WindowPadding.x * 0.5f);
        const float separator_max_x = tab_bar->BarRect.Max.x + IM_FLOOR(window->WindowPadding.x * 0.5f);
        window->DrawList->AddLine(ImVec2(separator_min_x, y), ImVec2(separator_max_x, y), col, 1.0f);
    }
    return true;
}

void    ImGui::EndTabBar()
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    if (window->SkipItems)
        return;

    ImGuiTabBar* tab_bar = g.CurrentTabBar;
    if (tab_bar == NULL)
    {
        IM_ASSERT_USER_ERROR(tab_bar != NULL, "Mismatched BeginTabBar()/EndTabBar()!");
        return;
    }
    if (tab_bar->WantLayout)
        TabBarLayout(tab_bar);

    // Restore the last visible height if no tab is visible, this reduce vertical flicker/movement when a tabs gets removed without calling SetTabItemClosed().
    const bool tab_bar_appearing = (tab_bar->PrevFrameVisible + 1 < g.FrameCount);
    if (tab_bar->VisibleTabWasSubmitted || tab_bar->VisibleTabId == 0 || tab_bar_appearing)
        tab_bar->LastTabContentHeight = ImMax(window->DC.CursorPos.y - tab_bar->BarRect.Max.y, 0.0f);
    else
        window->DC.CursorPos.y = tab_bar->BarRect.Max.y + tab_bar->LastTabContentHeight;

    if ((tab_bar->Flags & ImGuiTabBarFlags_DockNode) == 0)
        PopID();

    g.CurrentTabBarStack.pop_back();
    g.CurrentTabBar = g.CurrentTabBarStack.empty() ? NULL : GetTabBarFromTabBarRef(g.CurrentTabBarStack.back());
}

// This is called only once a frame before by the first call to ItemTab()
// The reason we're not calling it in BeginTabBar() is to leave a chance to the user to call the SetTabItemClosed() functions.
static void ImGui::TabBarLayout(ImGuiTabBar* tab_bar)
{
    ImGuiContext& g = *GImGui;
    tab_bar->WantLayout = false;

    // Garbage collect
    int tab_dst_n = 0;
    for (int tab_src_n = 0; tab_src_n < tab_bar->Tabs.Size; tab_src_n++)
    {
        ImGuiTabItem* tab = &tab_bar->Tabs[tab_src_n];
        if (tab->LastFrameVisible < tab_bar->PrevFrameVisible)
        {
            if (tab->ID == tab_bar->SelectedTabId)
                tab_bar->SelectedTabId = 0;
            continue;
        }
        if (tab_dst_n != tab_src_n)
            tab_bar->Tabs[tab_dst_n] = tab_bar->Tabs[tab_src_n];
        tab_dst_n++;
    }
    if (tab_bar->Tabs.Size != tab_dst_n)
        tab_bar->Tabs.resize(tab_dst_n);

    // Setup next selected tab
    ImGuiID scroll_track_selected_tab_id = 0;
    if (tab_bar->NextSelectedTabId)
    {
        tab_bar->SelectedTabId = tab_bar->NextSelectedTabId;
        tab_bar->NextSelectedTabId = 0;
        scroll_track_selected_tab_id = tab_bar->SelectedTabId;
    }

    // Process order change request (we could probably process it when requested but it's just saner to do it in a single spot).
    if (tab_bar->ReorderRequestTabId != 0)
    {
        if (ImGuiTabItem* tab1 = TabBarFindTabByID(tab_bar, tab_bar->ReorderRequestTabId))
        {
            //IM_ASSERT(tab_bar->Flags & ImGuiTabBarFlags_Reorderable); // <- this may happen when using debug tools
            int tab2_order = tab_bar->GetTabOrder(tab1) + tab_bar->ReorderRequestDir;
            if (tab2_order >= 0 && tab2_order < tab_bar->Tabs.Size)
            {
                ImGuiTabItem* tab2 = &tab_bar->Tabs[tab2_order];
                ImGuiTabItem item_tmp = *tab1;
                *tab1 = *tab2;
                *tab2 = item_tmp;
                if (tab2->ID == tab_bar->SelectedTabId)
                    scroll_track_selected_tab_id = tab2->ID;
                tab1 = tab2 = NULL;
            }
            if (tab_bar->Flags & ImGuiTabBarFlags_SaveSettings)
                MarkIniSettingsDirty();
        }
        tab_bar->ReorderRequestTabId = 0;
    }

    // Tab List Popup (will alter tab_bar->BarRect and therefore the available width!)
    const bool tab_list_popup_button = (tab_bar->Flags & ImGuiTabBarFlags_TabListPopupButton) != 0;
    if (tab_list_popup_button)
        if (ImGuiTabItem* tab_to_select = TabBarTabListPopupButton(tab_bar)) // NB: Will alter BarRect.Max.x!
            scroll_track_selected_tab_id = tab_bar->SelectedTabId = tab_to_select->ID;

    // Compute ideal widths
    g.ShrinkWidthBuffer.resize(tab_bar->Tabs.Size);
    float width_total_contents = 0.0f;
    ImGuiTabItem* most_recently_selected_tab = NULL;
    bool found_selected_tab_id = false;
    for (int tab_n = 0; tab_n < tab_bar->Tabs.Size; tab_n++)
    {
        ImGuiTabItem* tab = &tab_bar->Tabs[tab_n];
        IM_ASSERT(tab->LastFrameVisible >= tab_bar->PrevFrameVisible);

        if (most_recently_selected_tab == NULL || most_recently_selected_tab->LastFrameSelected < tab->LastFrameSelected)
            most_recently_selected_tab = tab;
        if (tab->ID == tab_bar->SelectedTabId)
            found_selected_tab_id = true;

        // Refresh tab width immediately, otherwise changes of style e.g. style.FramePadding.x would noticeably lag in the tab bar.
        // Additionally, when using TabBarAddTab() to manipulate tab bar order we occasionally insert new tabs that don't have a width yet,
        // and we cannot wait for the next BeginTabItem() call. We cannot compute this width within TabBarAddTab() because font size depends on the active window.
        const char* tab_name = tab_bar->GetTabName(tab);
        const bool has_close_button = (tab->Flags & ImGuiTabItemFlags_NoCloseButton) ? false : true;
        tab->ContentWidth = TabItemCalcSize(tab_name, has_close_button).x;

        width_total_contents += (tab_n > 0 ? g.Style.ItemInnerSpacing.x : 0.0f) + tab->ContentWidth;

        // Store data so we can build an array sorted by width if we need to shrink tabs down
        g.ShrinkWidthBuffer[tab_n].Index = tab_n;
        g.ShrinkWidthBuffer[tab_n].Width = tab->ContentWidth;
    }

    // Compute width
    const float initial_offset_x = 0.0f; // g.Style.ItemInnerSpacing.x;
    const float width_avail = ImMax(tab_bar->BarRect.GetWidth() - initial_offset_x, 0.0f);
    float width_excess = (width_avail < width_total_contents) ? (width_total_contents - width_avail) : 0.0f;
    if (width_excess > 0.0f && (tab_bar->Flags & ImGuiTabBarFlags_FittingPolicyResizeDown))
    {
        // If we don't have enough room, resize down the largest tabs first
        ShrinkWidths(g.ShrinkWidthBuffer.Data, g.ShrinkWidthBuffer.Size, width_excess);
        for (int tab_n = 0; tab_n < tab_bar->Tabs.Size; tab_n++)
            tab_bar->Tabs[g.ShrinkWidthBuffer[tab_n].Index].Width = IM_FLOOR(g.ShrinkWidthBuffer[tab_n].Width);
    }
    else
    {
        const float tab_max_width = TabBarCalcMaxTabWidth();
        for (int tab_n = 0; tab_n < tab_bar->Tabs.Size; tab_n++)
        {
            ImGuiTabItem* tab = &tab_bar->Tabs[tab_n];
            tab->Width = ImMin(tab->ContentWidth, tab_max_width);
            IM_ASSERT(tab->Width > 0.0f);
        }
    }

    // Layout all active tabs
    float offset_x = initial_offset_x;
    float offset_x_ideal = offset_x;
    tab_bar->OffsetNextTab = offset_x; // This is used by non-reorderable tab bar where the submission order is always honored.
    for (int tab_n = 0; tab_n < tab_bar->Tabs.Size; tab_n++)
    {
        ImGuiTabItem* tab = &tab_bar->Tabs[tab_n];
        tab->Offset = offset_x;
        if (scroll_track_selected_tab_id == 0 && g.NavJustMovedToId == tab->ID)
            scroll_track_selected_tab_id = tab->ID;
        offset_x += tab->Width + g.Style.ItemInnerSpacing.x;
        offset_x_ideal += tab->ContentWidth + g.Style.ItemInnerSpacing.x;
    }
    tab_bar->OffsetMax = ImMax(offset_x - g.Style.ItemInnerSpacing.x, 0.0f);
    tab_bar->OffsetMaxIdeal = ImMax(offset_x_ideal - g.Style.ItemInnerSpacing.x, 0.0f);

    // Horizontal scrolling buttons
    const bool scrolling_buttons = (tab_bar->OffsetMax > tab_bar->BarRect.GetWidth() && tab_bar->Tabs.Size > 1) && !(tab_bar->Flags & ImGuiTabBarFlags_NoTabListScrollingButtons) && (tab_bar->Flags & ImGuiTabBarFlags_FittingPolicyScroll);
    if (scrolling_buttons)
        if (ImGuiTabItem* tab_to_select = TabBarScrollingButtons(tab_bar)) // NB: Will alter BarRect.Max.x!
            scroll_track_selected_tab_id = tab_bar->SelectedTabId = tab_to_select->ID;

    // If we have lost the selected tab, select the next most recently active one
    if (found_selected_tab_id == false)
        tab_bar->SelectedTabId = 0;
    if (tab_bar->SelectedTabId == 0 && tab_bar->NextSelectedTabId == 0 && most_recently_selected_tab != NULL)
        scroll_track_selected_tab_id = tab_bar->SelectedTabId = most_recently_selected_tab->ID;

    // Lock in visible tab
    tab_bar->VisibleTabId = tab_bar->SelectedTabId;
    tab_bar->VisibleTabWasSubmitted = false;

    // Update scrolling
    if (scroll_track_selected_tab_id)
        if (ImGuiTabItem* scroll_track_selected_tab = TabBarFindTabByID(tab_bar, scroll_track_selected_tab_id))
            TabBarScrollToTab(tab_bar, scroll_track_selected_tab);
    tab_bar->ScrollingAnim = TabBarScrollClamp(tab_bar, tab_bar->ScrollingAnim);
    tab_bar->ScrollingTarget = TabBarScrollClamp(tab_bar, tab_bar->ScrollingTarget);
    if (tab_bar->ScrollingAnim != tab_bar->ScrollingTarget)
    {
        // Scrolling speed adjust itself so we can always reach our target in 1/3 seconds.
        // Teleport if we are aiming far off the visible line
        tab_bar->ScrollingSpeed = ImMax(tab_bar->ScrollingSpeed, 70.0f * g.FontSize);
        tab_bar->ScrollingSpeed = ImMax(tab_bar->ScrollingSpeed, ImFabs(tab_bar->ScrollingTarget - tab_bar->ScrollingAnim) / 0.3f);
        const bool teleport = (tab_bar->PrevFrameVisible + 1 < g.FrameCount) || (tab_bar->ScrollingTargetDistToVisibility > 10.0f * g.FontSize);
        tab_bar->ScrollingAnim = teleport ? tab_bar->ScrollingTarget : ImLinearSweep(tab_bar->ScrollingAnim, tab_bar->ScrollingTarget, g.IO.DeltaTime * tab_bar->ScrollingSpeed);
    }
    else
    {
        tab_bar->ScrollingSpeed = 0.0f;
    }

    // Clear name buffers
    if ((tab_bar->Flags & ImGuiTabBarFlags_DockNode) == 0)
        tab_bar->TabsNames.Buf.resize(0);
}

// Dockables uses Name/ID in the global namespace. Non-dockable items use the ID stack.
static ImU32   ImGui::TabBarCalcTabID(ImGuiTabBar* tab_bar, const char* label)
{
    if (tab_bar->Flags & ImGuiTabBarFlags_DockNode)
    {
        ImGuiID id = ImHashStr(label);
        KeepAliveID(id);
        return id;
    }
    else
    {
        ImGuiWindow* window = GImGui->CurrentWindow;
        return window->GetID(label);
    }
}

static float ImGui::TabBarCalcMaxTabWidth()
{
    ImGuiContext& g = *GImGui;
    return g.FontSize * 20.0f;
}

ImGuiTabItem* ImGui::TabBarFindTabByID(ImGuiTabBar* tab_bar, ImGuiID tab_id)
{
    if (tab_id != 0)
        for (int n = 0; n < tab_bar->Tabs.Size; n++)
            if (tab_bar->Tabs[n].ID == tab_id)
                return &tab_bar->Tabs[n];
    return NULL;
}

// The *TabId fields be already set by the docking system _before_ the actual TabItem was created, so we clear them regardless.
void ImGui::TabBarRemoveTab(ImGuiTabBar* tab_bar, ImGuiID tab_id)
{
    if (ImGuiTabItem* tab = TabBarFindTabByID(tab_bar, tab_id))
        tab_bar->Tabs.erase(tab);
    if (tab_bar->VisibleTabId == tab_id)      { tab_bar->VisibleTabId = 0; }
    if (tab_bar->SelectedTabId == tab_id)     { tab_bar->SelectedTabId = 0; }
    if (tab_bar->NextSelectedTabId == tab_id) { tab_bar->NextSelectedTabId = 0; }
}

// Called on manual closure attempt
void ImGui::TabBarCloseTab(ImGuiTabBar* tab_bar, ImGuiTabItem* tab)
{
    if ((tab_bar->VisibleTabId == tab->ID) && !(tab->Flags & ImGuiTabItemFlags_UnsavedDocument))
    {
        // This will remove a frame of lag for selecting another tab on closure.
        // However we don't run it in the case where the 'Unsaved' flag is set, so user gets a chance to fully undo the closure
        tab->LastFrameVisible = -1;
        tab_bar->SelectedTabId = tab_bar->NextSelectedTabId = 0;
    }
    else if ((tab_bar->VisibleTabId != tab->ID) && (tab->Flags & ImGuiTabItemFlags_UnsavedDocument))
    {
        // Actually select before expecting closure
        tab_bar->NextSelectedTabId = tab->ID;
    }
}

static float ImGui::TabBarScrollClamp(ImGuiTabBar* tab_bar, float scrolling)
{
    scrolling = ImMin(scrolling, tab_bar->OffsetMax - tab_bar->BarRect.GetWidth());
    return ImMax(scrolling, 0.0f);
}

static void ImGui::TabBarScrollToTab(ImGuiTabBar* tab_bar, ImGuiTabItem* tab)
{
    ImGuiContext& g = *GImGui;
    float margin = g.FontSize * 1.0f; // When to scroll to make Tab N+1 visible always make a bit of N visible to suggest more scrolling area (since we don't have a scrollbar)
    int order = tab_bar->GetTabOrder(tab);
    float tab_x1 = tab->Offset + (order > 0 ? -margin : 0.0f);
    float tab_x2 = tab->Offset + tab->Width + (order + 1 < tab_bar->Tabs.Size ? margin : 1.0f);
    tab_bar->ScrollingTargetDistToVisibility = 0.0f;
    if (tab_bar->ScrollingTarget > tab_x1 || (tab_x2 - tab_x1 >= tab_bar->BarRect.GetWidth()))
    {
        tab_bar->ScrollingTargetDistToVisibility = ImMax(tab_bar->ScrollingAnim - tab_x2, 0.0f);
        tab_bar->ScrollingTarget = tab_x1;
    }
    else if (tab_bar->ScrollingTarget < tab_x2 - tab_bar->BarRect.GetWidth())
    {
        tab_bar->ScrollingTargetDistToVisibility = ImMax((tab_x1 - tab_bar->BarRect.GetWidth()) - tab_bar->ScrollingAnim, 0.0f);
        tab_bar->ScrollingTarget = tab_x2 - tab_bar->BarRect.GetWidth();
    }
}

void ImGui::TabBarQueueChangeTabOrder(ImGuiTabBar* tab_bar, const ImGuiTabItem* tab, int dir)
{
    IM_ASSERT(dir == -1 || dir == +1);
    IM_ASSERT(tab_bar->ReorderRequestTabId == 0);
    tab_bar->ReorderRequestTabId = tab->ID;
    tab_bar->ReorderRequestDir = (ImS8)dir;
}

static ImGuiTabItem* ImGui::TabBarScrollingButtons(ImGuiTabBar* tab_bar)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;

    const ImVec2 arrow_button_size(g.FontSize - 2.0f, g.FontSize + g.Style.FramePadding.y * 2.0f);
    const float scrolling_buttons_width = arrow_button_size.x * 2.0f;

    const ImVec2 backup_cursor_pos = window->DC.CursorPos;
    //window->DrawList->AddRect(ImVec2(tab_bar->BarRect.Max.x - scrolling_buttons_width, tab_bar->BarRect.Min.y), ImVec2(tab_bar->BarRect.Max.x, tab_bar->BarRect.Max.y), IM_COL32(255,0,0,255));

    const ImRect avail_bar_rect = tab_bar->BarRect;
    bool want_clip_rect = !avail_bar_rect.Contains(ImRect(window->DC.CursorPos, window->DC.CursorPos + ImVec2(scrolling_buttons_width, 0.0f)));
    if (want_clip_rect)
        PushClipRect(tab_bar->BarRect.Min, tab_bar->BarRect.Max + ImVec2(g.Style.ItemInnerSpacing.x, 0.0f), true);

    ImGuiTabItem* tab_to_select = NULL;

    int select_dir = 0;
    ImVec4 arrow_col = g.Style.Colors[ImGuiCol_Text];
    arrow_col.w *= 0.5f;

    PushStyleColor(ImGuiCol_Text, arrow_col);
    PushStyleColor(ImGuiCol_Button, ImVec4(0, 0, 0, 0));
    const float backup_repeat_delay = g.IO.KeyRepeatDelay;
    const float backup_repeat_rate = g.IO.KeyRepeatRate;
    g.IO.KeyRepeatDelay = 0.250f;
    g.IO.KeyRepeatRate = 0.200f;
    window->DC.CursorPos = ImVec2(tab_bar->BarRect.Max.x - scrolling_buttons_width, tab_bar->BarRect.Min.y);
    if (ArrowButtonEx("##<", ImGuiDir_Left, arrow_button_size, ImGuiButtonFlags_PressedOnClick | ImGuiButtonFlags_Repeat))
        select_dir = -1;
    window->DC.CursorPos = ImVec2(tab_bar->BarRect.Max.x - scrolling_buttons_width + arrow_button_size.x, tab_bar->BarRect.Min.y);
    if (ArrowButtonEx("##>", ImGuiDir_Right, arrow_button_size, ImGuiButtonFlags_PressedOnClick | ImGuiButtonFlags_Repeat))
        select_dir = +1;
    PopStyleColor(2);
    g.IO.KeyRepeatRate = backup_repeat_rate;
    g.IO.KeyRepeatDelay = backup_repeat_delay;

    if (want_clip_rect)
        PopClipRect();

    if (select_dir != 0)
        if (ImGuiTabItem* tab_item = TabBarFindTabByID(tab_bar, tab_bar->SelectedTabId))
        {
            int selected_order = tab_bar->GetTabOrder(tab_item);
            int target_order = selected_order + select_dir;
            tab_to_select = &tab_bar->Tabs[(target_order >= 0 && target_order < tab_bar->Tabs.Size) ? target_order : selected_order]; // If we are at the end of the list, still scroll to make our tab visible
        }
    window->DC.CursorPos = backup_cursor_pos;
    tab_bar->BarRect.Max.x -= scrolling_buttons_width + 1.0f;

    return tab_to_select;
}

static ImGuiTabItem* ImGui::TabBarTabListPopupButton(ImGuiTabBar* tab_bar)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;

    // We use g.Style.FramePadding.y to match the square ArrowButton size
    const float tab_list_popup_button_width = g.FontSize + g.Style.FramePadding.y;
    const ImVec2 backup_cursor_pos = window->DC.CursorPos;
    window->DC.CursorPos = ImVec2(tab_bar->BarRect.Min.x - g.Style.FramePadding.y, tab_bar->BarRect.Min.y);
    tab_bar->BarRect.Min.x += tab_list_popup_button_width;

    ImVec4 arrow_col = g.Style.Colors[ImGuiCol_Text];
    arrow_col.w *= 0.5f;
    PushStyleColor(ImGuiCol_Text, arrow_col);
    PushStyleColor(ImGuiCol_Button, ImVec4(0, 0, 0, 0));
    bool open = BeginCombo("##v", NULL, ImGuiComboFlags_NoPreview);
    PopStyleColor(2);

    ImGuiTabItem* tab_to_select = NULL;
    if (open)
    {
        for (int tab_n = 0; tab_n < tab_bar->Tabs.Size; tab_n++)
        {
            ImGuiTabItem* tab = &tab_bar->Tabs[tab_n];
            const char* tab_name = tab_bar->GetTabName(tab);
            if (Selectable(tab_name, tab_bar->SelectedTabId == tab->ID))
                tab_to_select = tab;
        }
        EndCombo();
    }

    window->DC.CursorPos = backup_cursor_pos;
    return tab_to_select;
}

//-------------------------------------------------------------------------
// [SECTION] Widgets: BeginTabItem, EndTabItem, etc.
//-------------------------------------------------------------------------
// [BETA API] API may evolve! This code has been extracted out of the Docking branch,
// and some of the construct which are not used in Master may be left here to facilitate merging.
//-------------------------------------------------------------------------
// - BeginTabItem()
// - EndTabItem()
// - TabItemEx() [Internal]
// - SetTabItemClosed()
// - TabItemCalcSize() [Internal]
// - TabItemBackground() [Internal]
// - TabItemLabelAndCloseButton() [Internal]
//-------------------------------------------------------------------------

bool    ImGui::BeginTabItem(const char* label, bool* p_open, ImGuiTabItemFlags flags)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    if (window->SkipItems)
        return false;

    ImGuiTabBar* tab_bar = g.CurrentTabBar;
    if (tab_bar == NULL)
    {
        IM_ASSERT_USER_ERROR(tab_bar, "BeginTabItem() Needs to be called between BeginTabBar() and EndTabBar()!");
        return false;
    }
    bool ret = TabItemEx(tab_bar, label, p_open, flags);
    if (ret && !(flags & ImGuiTabItemFlags_NoPushId))
    {
        ImGuiTabItem* tab = &tab_bar->Tabs[tab_bar->LastTabItemIdx];
        PushOverrideID(tab->ID); // We already hashed 'label' so push into the ID stack directly instead of doing another hash through PushID(label)
    }
    return ret;
}

void    ImGui::EndTabItem()
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    if (window->SkipItems)
        return;

    ImGuiTabBar* tab_bar = g.CurrentTabBar;
    if (tab_bar == NULL)
    {
        IM_ASSERT(tab_bar != NULL && "Needs to be called between BeginTabBar() and EndTabBar()!");
        return;
    }
    IM_ASSERT(tab_bar->LastTabItemIdx >= 0);
    ImGuiTabItem* tab = &tab_bar->Tabs[tab_bar->LastTabItemIdx];
    if (!(tab->Flags & ImGuiTabItemFlags_NoPushId))
        window->IDStack.pop_back();
}

bool    ImGui::TabItemEx(ImGuiTabBar* tab_bar, const char* label, bool* p_open, ImGuiTabItemFlags flags)
{
    // Layout whole tab bar if not already done
    if (tab_bar->WantLayout)
        TabBarLayout(tab_bar);

    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    if (window->SkipItems)
        return false;

    const ImGuiStyle& style = g.Style;
    const ImGuiID id = TabBarCalcTabID(tab_bar, label);

    // If the user called us with *p_open == false, we early out and don't render. We make a dummy call to ItemAdd() so that attempts to use a contextual popup menu with an implicit ID won't use an older ID.
    if (p_open && !*p_open)
    {
        PushItemFlag(ImGuiItemFlags_NoNav | ImGuiItemFlags_NoNavDefaultFocus, true);
        ItemAdd(ImRect(), id);
        PopItemFlag();
        return false;
    }

    // Store into ImGuiTabItemFlags_NoCloseButton, also honor ImGuiTabItemFlags_NoCloseButton passed by user (although not documented)
    if (flags & ImGuiTabItemFlags_NoCloseButton)
        p_open = NULL;
    else if (p_open == NULL)
        flags |= ImGuiTabItemFlags_NoCloseButton;

    // Calculate tab contents size
    ImVec2 size = TabItemCalcSize(label, p_open != NULL);

    // Acquire tab data
    ImGuiTabItem* tab = TabBarFindTabByID(tab_bar, id);
    bool tab_is_new = false;
    if (tab == NULL)
    {
        tab_bar->Tabs.push_back(ImGuiTabItem());
        tab = &tab_bar->Tabs.back();
        tab->ID = id;
        tab->Width = size.x;
        tab_is_new = true;
    }
    tab_bar->LastTabItemIdx = (short)tab_bar->Tabs.index_from_ptr(tab);
    tab->ContentWidth = size.x;

    const bool tab_bar_appearing = (tab_bar->PrevFrameVisible + 1 < g.FrameCount);
    const bool tab_bar_focused = (tab_bar->Flags & ImGuiTabBarFlags_IsFocused) != 0;
    const bool tab_appearing = (tab->LastFrameVisible + 1 < g.FrameCount);
    tab->LastFrameVisible = g.FrameCount;
    tab->Flags = flags;

    // Append name with zero-terminator
    tab->NameOffset = tab_bar->TabsNames.size();
    tab_bar->TabsNames.append(label, label + strlen(label) + 1);

    // If we are not reorderable, always reset offset based on submission order.
    // (We already handled layout and sizing using the previous known order, but sizing is not affected by order!)
    if (!tab_appearing && !(tab_bar->Flags & ImGuiTabBarFlags_Reorderable))
    {
        tab->Offset = tab_bar->OffsetNextTab;
        tab_bar->OffsetNextTab += tab->Width + g.Style.ItemInnerSpacing.x;
    }

    // Update selected tab
    if (tab_appearing && (tab_bar->Flags & ImGuiTabBarFlags_AutoSelectNewTabs) && tab_bar->NextSelectedTabId == 0)
        if (!tab_bar_appearing || tab_bar->SelectedTabId == 0)
            tab_bar->NextSelectedTabId = id;  // New tabs gets activated
    if ((flags & ImGuiTabItemFlags_SetSelected) && (tab_bar->SelectedTabId != id)) // SetSelected can only be passed on explicit tab bar
        tab_bar->NextSelectedTabId = id;

    // Lock visibility
    bool tab_contents_visible = (tab_bar->VisibleTabId == id);
    if (tab_contents_visible)
        tab_bar->VisibleTabWasSubmitted = true;

    // On the very first frame of a tab bar we let first tab contents be visible to minimize appearing glitches
    if (!tab_contents_visible && tab_bar->SelectedTabId == 0 && tab_bar_appearing)
        if (tab_bar->Tabs.Size == 1 && !(tab_bar->Flags & ImGuiTabBarFlags_AutoSelectNewTabs))
            tab_contents_visible = true;

    if (tab_appearing && !(tab_bar_appearing && !tab_is_new))
    {
        PushItemFlag(ImGuiItemFlags_NoNav | ImGuiItemFlags_NoNavDefaultFocus, true);
        ItemAdd(ImRect(), id);
        PopItemFlag();
        return tab_contents_visible;
    }

    if (tab_bar->SelectedTabId == id)
        tab->LastFrameSelected = g.FrameCount;

    // Backup current layout position
    const ImVec2 backup_main_cursor_pos = window->DC.CursorPos;

    // Layout
    size.x = tab->Width;
    window->DC.CursorPos = tab_bar->BarRect.Min + ImVec2(IM_FLOOR(tab->Offset - tab_bar->ScrollingAnim), 0.0f);
    ImVec2 pos = window->DC.CursorPos;
    ImRect bb(pos, pos + size);

    // We don't have CPU clipping primitives to clip the CloseButton (until it becomes a texture), so need to add an extra draw call (temporary in the case of vertical animation)
    bool want_clip_rect = (bb.Min.x < tab_bar->BarRect.Min.x) || (bb.Max.x > tab_bar->BarRect.Max.x);
    if (want_clip_rect)
        PushClipRect(ImVec2(ImMax(bb.Min.x, tab_bar->BarRect.Min.x), bb.Min.y - 1), ImVec2(tab_bar->BarRect.Max.x, bb.Max.y), true);

    ImVec2 backup_cursor_max_pos = window->DC.CursorMaxPos;
    ItemSize(bb.GetSize(), style.FramePadding.y);
    window->DC.CursorMaxPos = backup_cursor_max_pos;

    if (!ItemAdd(bb, id))
    {
        if (want_clip_rect)
            PopClipRect();
        window->DC.CursorPos = backup_main_cursor_pos;
        return tab_contents_visible;
    }

    // Click to Select a tab
    ImGuiButtonFlags button_flags = (ImGuiButtonFlags_PressedOnClick | ImGuiButtonFlags_AllowItemOverlap);
    if (g.DragDropActive)
        button_flags |= ImGuiButtonFlags_PressedOnDragDropHold;
    bool hovered, held;
    bool pressed = ButtonBehavior(bb, id, &hovered, &held, button_flags);
    if (pressed)
        tab_bar->NextSelectedTabId = id;
    hovered |= (g.HoveredId == id);

    // Allow the close button to overlap unless we are dragging (in which case we don't want any overlapping tabs to be hovered)
    if (!held)
        SetItemAllowOverlap();

    // Drag and drop: re-order tabs
    if (held && !tab_appearing && IsMouseDragging(0))
    {
        if (!g.DragDropActive && (tab_bar->Flags & ImGuiTabBarFlags_Reorderable))
        {
            // While moving a tab it will jump on the other side of the mouse, so we also test for MouseDelta.x
            if (g.IO.MouseDelta.x < 0.0f && g.IO.MousePos.x < bb.Min.x)
            {
                if (tab_bar->Flags & ImGuiTabBarFlags_Reorderable)
                    TabBarQueueChangeTabOrder(tab_bar, tab, -1);
            }
            else if (g.IO.MouseDelta.x > 0.0f && g.IO.MousePos.x > bb.Max.x)
            {
                if (tab_bar->Flags & ImGuiTabBarFlags_Reorderable)
                    TabBarQueueChangeTabOrder(tab_bar, tab, +1);
            }
        }
    }

#if 0
    if (hovered && g.HoveredIdNotActiveTimer > 0.50f && bb.GetWidth() < tab->ContentWidth)
    {
        // Enlarge tab display when hovering
        bb.Max.x = bb.Min.x + IM_FLOOR(ImLerp(bb.GetWidth(), tab->ContentWidth, ImSaturate((g.HoveredIdNotActiveTimer - 0.40f) * 6.0f)));
        display_draw_list = GetForegroundDrawList(window);
        TabItemBackground(display_draw_list, bb, flags, GetColorU32(ImGuiCol_TitleBgActive));
    }
#endif

    // Render tab shape
    ImDrawList* display_draw_list = window->DrawList;
    const ImU32 tab_col = GetColorU32((held || hovered) ? ImGuiCol_TabHovered : tab_contents_visible ? (tab_bar_focused ? ImGuiCol_TabActive : ImGuiCol_TabUnfocusedActive) : (tab_bar_focused ? ImGuiCol_Tab : ImGuiCol_TabUnfocused));
    TabItemBackground(display_draw_list, bb, flags, tab_col);
    RenderNavHighlight(bb, id);

    // Select with right mouse button. This is so the common idiom for context menu automatically highlight the current widget.
    const bool hovered_unblocked = IsItemHovered(ImGuiHoveredFlags_AllowWhenBlockedByPopup);
    if (hovered_unblocked && (IsMouseClicked(1) || IsMouseReleased(1)))
        tab_bar->NextSelectedTabId = id;

    if (tab_bar->Flags & ImGuiTabBarFlags_NoCloseWithMiddleMouseButton)
        flags |= ImGuiTabItemFlags_NoCloseWithMiddleMouseButton;

    // Render tab label, process close button
    const ImGuiID close_button_id = p_open ? window->GetID((void*)((intptr_t)id + 1)) : 0;
    bool just_closed = TabItemLabelAndCloseButton(display_draw_list, bb, flags, tab_bar->FramePadding, label, id, close_button_id);
    if (just_closed && p_open != NULL)
    {
        *p_open = false;
        TabBarCloseTab(tab_bar, tab);
    }

    // Restore main window position so user can draw there
    if (want_clip_rect)
        PopClipRect();
    window->DC.CursorPos = backup_main_cursor_pos;

    // Tooltip (FIXME: Won't work over the close button because ItemOverlap systems messes up with HoveredIdTimer)
    // We test IsItemHovered() to discard e.g. when another item is active or drag and drop over the tab bar (which g.HoveredId ignores)
    if (g.HoveredId == id && !held && g.HoveredIdNotActiveTimer > 0.50f && IsItemHovered())
        if (!(tab_bar->Flags & ImGuiTabBarFlags_NoTooltip))
            SetTooltip("%.*s", (int)(FindRenderedTextEnd(label) - label), label);

    return tab_contents_visible;
}

// [Public] This is call is 100% optional but it allows to remove some one-frame glitches when a tab has been unexpectedly removed.
// To use it to need to call the function SetTabItemClosed() after BeginTabBar() and before any call to BeginTabItem()
void    ImGui::SetTabItemClosed(const char* label)
{
    ImGuiContext& g = *GImGui;
    bool is_within_manual_tab_bar = g.CurrentTabBar && !(g.CurrentTabBar->Flags & ImGuiTabBarFlags_DockNode);
    if (is_within_manual_tab_bar)
    {
        ImGuiTabBar* tab_bar = g.CurrentTabBar;
        IM_ASSERT(tab_bar->WantLayout);         // Needs to be called AFTER BeginTabBar() and BEFORE the first call to BeginTabItem()
        ImGuiID tab_id = TabBarCalcTabID(tab_bar, label);
        TabBarRemoveTab(tab_bar, tab_id);
    }
}

ImVec2 ImGui::TabItemCalcSize(const char* label, bool has_close_button)
{
    ImGuiContext& g = *GImGui;
    ImVec2 label_size = CalcTextSize(label, NULL, true);
    ImVec2 size = ImVec2(label_size.x + g.Style.FramePadding.x, label_size.y + g.Style.FramePadding.y * 2.0f);
    if (has_close_button)
        size.x += g.Style.FramePadding.x + (g.Style.ItemInnerSpacing.x + g.FontSize); // We use Y intentionally to fit the close button circle.
    else
        size.x += g.Style.FramePadding.x + 1.0f;
    return ImVec2(ImMin(size.x, TabBarCalcMaxTabWidth()), size.y);
}

void ImGui::TabItemBackground(ImDrawList* draw_list, const ImRect& bb, ImGuiTabItemFlags flags, ImU32 col)
{
    // While rendering tabs, we trim 1 pixel off the top of our bounding box so they can fit within a regular frame height while looking "detached" from it.
    ImGuiContext& g = *GImGui;
    const float width = bb.GetWidth();
    IM_UNUSED(flags);
    IM_ASSERT(width > 0.0f);
    const float rounding = ImMax(0.0f, ImMin(g.Style.TabRounding, width * 0.5f - 1.0f));
    const float y1 = bb.Min.y + 1.0f;
    const float y2 = bb.Max.y - 1.0f;
    draw_list->PathLineTo(ImVec2(bb.Min.x, y2));
    draw_list->PathArcToFast(ImVec2(bb.Min.x + rounding, y1 + rounding), rounding, 6, 9);
    draw_list->PathArcToFast(ImVec2(bb.Max.x - rounding, y1 + rounding), rounding, 9, 12);
    draw_list->PathLineTo(ImVec2(bb.Max.x, y2));
    draw_list->PathFillConvex(col);
    if (g.Style.TabBorderSize > 0.0f)
    {
        draw_list->PathLineTo(ImVec2(bb.Min.x + 0.5f, y2));
        draw_list->PathArcToFast(ImVec2(bb.Min.x + rounding + 0.5f, y1 + rounding + 0.5f), rounding, 6, 9);
        draw_list->PathArcToFast(ImVec2(bb.Max.x - rounding - 0.5f, y1 + rounding + 0.5f), rounding, 9, 12);
        draw_list->PathLineTo(ImVec2(bb.Max.x - 0.5f, y2));
        draw_list->PathStroke(GetColorU32(ImGuiCol_Border), false, g.Style.TabBorderSize);
    }
}

// Render text label (with custom clipping) + Unsaved Document marker + Close Button logic
// We tend to lock style.FramePadding for a given tab-bar, hence the 'frame_padding' parameter.
bool ImGui::TabItemLabelAndCloseButton(ImDrawList* draw_list, const ImRect& bb, ImGuiTabItemFlags flags, ImVec2 frame_padding, const char* label, ImGuiID tab_id, ImGuiID close_button_id)
{
    ImGuiContext& g = *GImGui;
    ImVec2 label_size = CalcTextSize(label, NULL, true);
    if (bb.GetWidth() <= 1.0f)
        return false;

    // Render text label (with clipping + alpha gradient) + unsaved marker
    const char* TAB_UNSAVED_MARKER = "*";
    ImRect text_pixel_clip_bb(bb.Min.x + frame_padding.x, bb.Min.y + frame_padding.y, bb.Max.x - frame_padding.x, bb.Max.y);
    if (flags & ImGuiTabItemFlags_UnsavedDocument)
    {
        text_pixel_clip_bb.Max.x -= CalcTextSize(TAB_UNSAVED_MARKER, NULL, false).x;
        ImVec2 unsaved_marker_pos(ImMin(bb.Min.x + frame_padding.x + label_size.x + 2, text_pixel_clip_bb.Max.x), bb.Min.y + frame_padding.y + IM_FLOOR(-g.FontSize * 0.25f));
        RenderTextClippedEx(draw_list, unsaved_marker_pos, bb.Max - frame_padding, TAB_UNSAVED_MARKER, NULL, NULL);
    }
    ImRect text_ellipsis_clip_bb = text_pixel_clip_bb;

    // Close Button
    // We are relying on a subtle and confusing distinction between 'hovered' and 'g.HoveredId' which happens because we are using ImGuiButtonFlags_AllowOverlapMode + SetItemAllowOverlap()
    //  'hovered' will be true when hovering the Tab but NOT when hovering the close button
    //  'g.HoveredId==id' will be true when hovering the Tab including when hovering the close button
    //  'g.ActiveId==close_button_id' will be true when we are holding on the close button, in which case both hovered booleans are false
    bool close_button_pressed = false;
    bool close_button_visible = false;
    if (close_button_id != 0)
        if (g.HoveredId == tab_id || g.HoveredId == close_button_id || g.ActiveId == close_button_id)
            close_button_visible = true;
    if (close_button_visible)
    {
        ImGuiItemHoveredDataBackup last_item_backup;
        const float close_button_sz = g.FontSize;
        PushStyleVar(ImGuiStyleVar_FramePadding, frame_padding);
        if (CloseButton(close_button_id, ImVec2(bb.Max.x - frame_padding.x * 2.0f - close_button_sz, bb.Min.y)))
            close_button_pressed = true;
        PopStyleVar();
        last_item_backup.Restore();

        // Close with middle mouse button
        if (!(flags & ImGuiTabItemFlags_NoCloseWithMiddleMouseButton) && IsMouseClicked(2))
            close_button_pressed = true;

        text_pixel_clip_bb.Max.x -= close_button_sz;
    }

    float ellipsis_max_x = close_button_visible ? text_pixel_clip_bb.Max.x : bb.Max.x - 1.0f;
    RenderTextEllipsis(draw_list, text_ellipsis_clip_bb.Min, text_ellipsis_clip_bb.Max, text_pixel_clip_bb.Max.x, ellipsis_max_x, label, NULL, &label_size);

    return close_button_pressed;
}


//-------------------------------------------------------------------------
// [SECTION] Widgets: Columns, BeginColumns, EndColumns, etc.
// In the current version, Columns are very weak. Needs to be replaced with a more full-featured system.
//-------------------------------------------------------------------------
// - GetColumnIndex()
// - GetColumnCount()
// - GetColumnOffset()
// - GetColumnWidth()
// - SetColumnOffset()
// - SetColumnWidth()
// - PushColumnClipRect() [Internal]
// - PushColumnsBackground() [Internal]
// - PopColumnsBackground() [Internal]
// - FindOrCreateColumns() [Internal]
// - GetColumnsID() [Internal]
// - BeginColumns()
// - NextColumn()
// - EndColumns()
// - Columns()
//-------------------------------------------------------------------------

int ImGui::GetColumnIndex()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->DC.CurrentColumns ? window->DC.CurrentColumns->Current : 0;
}

int ImGui::GetColumnsCount()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->DC.CurrentColumns ? window->DC.CurrentColumns->Count : 1;
}

float ImGui::GetColumnOffsetFromNorm(const ImGuiColumns* columns, float offset_norm)
{
    return offset_norm * (columns->OffMaxX - columns->OffMinX);
}

float ImGui::GetColumnNormFromOffset(const ImGuiColumns* columns, float offset)
{
    return offset / (columns->OffMaxX - columns->OffMinX);
}

static const float COLUMNS_HIT_RECT_HALF_WIDTH = 4.0f;

static float GetDraggedColumnOffset(ImGuiColumns* columns, int column_index)
{
    // Active (dragged) column always follow mouse. The reason we need this is that dragging a column to the right edge of an auto-resizing
    // window creates a feedback loop because we store normalized positions. So while dragging we enforce absolute positioning.
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    IM_ASSERT(column_index > 0); // We are not supposed to drag column 0.
    IM_ASSERT(g.ActiveId == columns->ID + ImGuiID(column_index));

    float x = g.IO.MousePos.x - g.ActiveIdClickOffset.x + COLUMNS_HIT_RECT_HALF_WIDTH - window->Pos.x;
    x = ImMax(x, ImGui::GetColumnOffset(column_index - 1) + g.Style.ColumnsMinSpacing);
    if ((columns->Flags & ImGuiColumnsFlags_NoPreserveWidths))
        x = ImMin(x, ImGui::GetColumnOffset(column_index + 1) - g.Style.ColumnsMinSpacing);

    return x;
}

float ImGui::GetColumnOffset(int column_index)
{
    ImGuiWindow* window = GetCurrentWindowRead();
    ImGuiColumns* columns = window->DC.CurrentColumns;
    if (columns == NULL)
        return 0.0f;

    if (column_index < 0)
        column_index = columns->Current;
    IM_ASSERT(column_index < columns->Columns.Size);

    const float t = columns->Columns[column_index].OffsetNorm;
    const float x_offset = ImLerp(columns->OffMinX, columns->OffMaxX, t);
    return x_offset;
}

static float GetColumnWidthEx(ImGuiColumns* columns, int column_index, bool before_resize = false)
{
    if (column_index < 0)
        column_index = columns->Current;

    float offset_norm;
    if (before_resize)
        offset_norm = columns->Columns[column_index + 1].OffsetNormBeforeResize - columns->Columns[column_index].OffsetNormBeforeResize;
    else
        offset_norm = columns->Columns[column_index + 1].OffsetNorm - columns->Columns[column_index].OffsetNorm;
    return ImGui::GetColumnOffsetFromNorm(columns, offset_norm);
}

float ImGui::GetColumnWidth(int column_index)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    ImGuiColumns* columns = window->DC.CurrentColumns;
    if (columns == NULL)
        return GetContentRegionAvail().x;

    if (column_index < 0)
        column_index = columns->Current;
    return GetColumnOffsetFromNorm(columns, columns->Columns[column_index + 1].OffsetNorm - columns->Columns[column_index].OffsetNorm);
}

void ImGui::SetColumnOffset(int column_index, float offset)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    ImGuiColumns* columns = window->DC.CurrentColumns;
    IM_ASSERT(columns != NULL);

    if (column_index < 0)
        column_index = columns->Current;
    IM_ASSERT(column_index < columns->Columns.Size);

    const bool preserve_width = !(columns->Flags & ImGuiColumnsFlags_NoPreserveWidths) && (column_index < columns->Count-1);
    const float width = preserve_width ? GetColumnWidthEx(columns, column_index, columns->IsBeingResized) : 0.0f;

    if (!(columns->Flags & ImGuiColumnsFlags_NoForceWithinWindow))
        offset = ImMin(offset, columns->OffMaxX - g.Style.ColumnsMinSpacing * (columns->Count - column_index));
    columns->Columns[column_index].OffsetNorm = GetColumnNormFromOffset(columns, offset - columns->OffMinX);

    if (preserve_width)
        SetColumnOffset(column_index + 1, offset + ImMax(g.Style.ColumnsMinSpacing, width));
}

void ImGui::SetColumnWidth(int column_index, float width)
{
    ImGuiWindow* window = GetCurrentWindowRead();
    ImGuiColumns* columns = window->DC.CurrentColumns;
    IM_ASSERT(columns != NULL);

    if (column_index < 0)
        column_index = columns->Current;
    SetColumnOffset(column_index + 1, GetColumnOffset(column_index) + width);
}

void ImGui::PushColumnClipRect(int column_index)
{
    ImGuiWindow* window = GetCurrentWindowRead();
    ImGuiColumns* columns = window->DC.CurrentColumns;
    if (column_index < 0)
        column_index = columns->Current;

    ImGuiColumnData* column = &columns->Columns[column_index];
    PushClipRect(column->ClipRect.Min, column->ClipRect.Max, false);
}

// Get into the columns background draw command (which is generally the same draw command as before we called BeginColumns)
void ImGui::PushColumnsBackground()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    ImGuiColumns* columns = window->DC.CurrentColumns;
    if (columns->Count == 1)
        return;
    window->DrawList->ChannelsSetCurrent(0);
    int cmd_size = window->DrawList->CmdBuffer.Size;
    PushClipRect(columns->HostClipRect.Min, columns->HostClipRect.Max, false);
    IM_UNUSED(cmd_size);
    IM_ASSERT(cmd_size == window->DrawList->CmdBuffer.Size); // Being in channel 0 this should not have created an ImDrawCmd
}

void ImGui::PopColumnsBackground()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    ImGuiColumns* columns = window->DC.CurrentColumns;
    if (columns->Count == 1)
        return;
    window->DrawList->ChannelsSetCurrent(columns->Current + 1);
    PopClipRect();
}

ImGuiColumns* ImGui::FindOrCreateColumns(ImGuiWindow* window, ImGuiID id)
{
    // We have few columns per window so for now we don't need bother much with turning this into a faster lookup.
    for (int n = 0; n < window->ColumnsStorage.Size; n++)
        if (window->ColumnsStorage[n].ID == id)
            return &window->ColumnsStorage[n];

    window->ColumnsStorage.push_back(ImGuiColumns());
    ImGuiColumns* columns = &window->ColumnsStorage.back();
    columns->ID = id;
    return columns;
}

ImGuiID ImGui::GetColumnsID(const char* str_id, int columns_count)
{
    ImGuiWindow* window = GetCurrentWindow();

    // Differentiate column ID with an arbitrary prefix for cases where users name their columns set the same as another widget.
    // In addition, when an identifier isn't explicitly provided we include the number of columns in the hash to make it uniquer.
    PushID(0x11223347 + (str_id ? 0 : columns_count));
    ImGuiID id = window->GetID(str_id ? str_id : "columns");
    PopID();

    return id;
}

void ImGui::BeginColumns(const char* str_id, int columns_count, ImGuiColumnsFlags flags)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindow();

    IM_ASSERT(columns_count >= 1);
    IM_ASSERT(window->DC.CurrentColumns == NULL); // Nested columns are currently not supported

    // Acquire storage for the columns set
    ImGuiID id = GetColumnsID(str_id, columns_count);
    ImGuiColumns* columns = FindOrCreateColumns(window, id);
    IM_ASSERT(columns->ID == id);
    columns->Current = 0;
    columns->Count = columns_count;
    columns->Flags = flags;
    window->DC.CurrentColumns = columns;

    columns->HostCursorPosY = window->DC.CursorPos.y;
    columns->HostCursorMaxPosX = window->DC.CursorMaxPos.x;
    columns->HostClipRect = window->ClipRect;
    columns->HostWorkRect = window->WorkRect;

    // Set state for first column
    // We aim so that the right-most column will have the same clipping width as other after being clipped by parent ClipRect
    const float column_padding = g.Style.ItemSpacing.x;
    const float half_clip_extend_x = ImFloor(ImMax(window->WindowPadding.x * 0.5f, window->WindowBorderSize));
    const float max_1 = window->WorkRect.Max.x + column_padding - ImMax(column_padding - window->WindowPadding.x, 0.0f);
    const float max_2 = window->WorkRect.Max.x + half_clip_extend_x;
    columns->OffMinX = window->DC.Indent.x - column_padding + ImMax(column_padding - window->WindowPadding.x, 0.0f);
    columns->OffMaxX = ImMax(ImMin(max_1, max_2) - window->Pos.x, columns->OffMinX + 1.0f);
    columns->LineMinY = columns->LineMaxY = window->DC.CursorPos.y;

    // Clear data if columns count changed
    if (columns->Columns.Size != 0 && columns->Columns.Size != columns_count + 1)
        columns->Columns.resize(0);

    // Initialize default widths
    columns->IsFirstFrame = (columns->Columns.Size == 0);
    if (columns->Columns.Size == 0)
    {
        columns->Columns.reserve(columns_count + 1);
        for (int n = 0; n < columns_count + 1; n++)
        {
            ImGuiColumnData column;
            column.OffsetNorm = n / (float)columns_count;
            columns->Columns.push_back(column);
        }
    }

    for (int n = 0; n < columns_count; n++)
    {
        // Compute clipping rectangle
        ImGuiColumnData* column = &columns->Columns[n];
        float clip_x1 = IM_ROUND(window->Pos.x + GetColumnOffset(n));
        float clip_x2 = IM_ROUND(window->Pos.x + GetColumnOffset(n + 1) - 1.0f);
        column->ClipRect = ImRect(clip_x1, -FLT_MAX, clip_x2, +FLT_MAX);
        column->ClipRect.ClipWith(window->ClipRect);
    }

    if (columns->Count > 1)
    {
        window->DrawList->ChannelsSplit(1 + columns->Count);
        window->DrawList->ChannelsSetCurrent(1);
        PushColumnClipRect(0);
    }

    // We don't generally store Indent.x inside ColumnsOffset because it may be manipulated by the user.
    float offset_0 = GetColumnOffset(columns->Current);
    float offset_1 = GetColumnOffset(columns->Current + 1);
    float width = offset_1 - offset_0;
    PushItemWidth(width * 0.65f);
    window->DC.ColumnsOffset.x = ImMax(column_padding - window->WindowPadding.x, 0.0f);
    window->DC.CursorPos.x = IM_FLOOR(window->Pos.x + window->DC.Indent.x + window->DC.ColumnsOffset.x);
    window->WorkRect.Max.x = window->Pos.x + offset_1 - column_padding;
}

void ImGui::NextColumn()
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems || window->DC.CurrentColumns == NULL)
        return;

    ImGuiContext& g = *GImGui;
    ImGuiColumns* columns = window->DC.CurrentColumns;

    if (columns->Count == 1)
    {
        window->DC.CursorPos.x = IM_FLOOR(window->Pos.x + window->DC.Indent.x + window->DC.ColumnsOffset.x);
        IM_ASSERT(columns->Current == 0);
        return;
    }
    PopItemWidth();
    PopClipRect();

    const float column_padding = g.Style.ItemSpacing.x;
    columns->LineMaxY = ImMax(columns->LineMaxY, window->DC.CursorPos.y);
    if (++columns->Current < columns->Count)
    {
        // Columns 1+ ignore IndentX (by canceling it out)
        // FIXME-COLUMNS: Unnecessary, could be locked?
        window->DC.ColumnsOffset.x = GetColumnOffset(columns->Current) - window->DC.Indent.x + column_padding;
        window->DrawList->ChannelsSetCurrent(columns->Current + 1);
    }
    else
    {
        // New row/line
        // Column 0 honor IndentX
        window->DC.ColumnsOffset.x = ImMax(column_padding - window->WindowPadding.x, 0.0f);
        window->DrawList->ChannelsSetCurrent(1);
        columns->Current = 0;
        columns->LineMinY = columns->LineMaxY;
    }
    window->DC.CursorPos.x = IM_FLOOR(window->Pos.x + window->DC.Indent.x + window->DC.ColumnsOffset.x);
    window->DC.CursorPos.y = columns->LineMinY;
    window->DC.CurrLineSize = ImVec2(0.0f, 0.0f);
    window->DC.CurrLineTextBaseOffset = 0.0f;

    PushColumnClipRect(columns->Current);     // FIXME-COLUMNS: Could it be an overwrite?

    // FIXME-COLUMNS: Share code with BeginColumns() - move code on columns setup.
    float offset_0 = GetColumnOffset(columns->Current);
    float offset_1 = GetColumnOffset(columns->Current + 1);
    float width = offset_1 - offset_0;
    PushItemWidth(width * 0.65f);
    window->WorkRect.Max.x = window->Pos.x + offset_1 - column_padding;
}

void ImGui::EndColumns()
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindow();
    ImGuiColumns* columns = window->DC.CurrentColumns;
    IM_ASSERT(columns != NULL);

    PopItemWidth();
    if (columns->Count > 1)
    {
        PopClipRect();
        window->DrawList->ChannelsMerge();
    }

    const ImGuiColumnsFlags flags = columns->Flags;
    columns->LineMaxY = ImMax(columns->LineMaxY, window->DC.CursorPos.y);
    window->DC.CursorPos.y = columns->LineMaxY;
    if (!(flags & ImGuiColumnsFlags_GrowParentContentsSize))
        window->DC.CursorMaxPos.x = columns->HostCursorMaxPosX;  // Restore cursor max pos, as columns don't grow parent

    // Draw columns borders and handle resize
    // The IsBeingResized flag ensure we preserve pre-resize columns width so back-and-forth are not lossy
    bool is_being_resized = false;
    if (!(flags & ImGuiColumnsFlags_NoBorder) && !window->SkipItems)
    {
        // We clip Y boundaries CPU side because very long triangles are mishandled by some GPU drivers.
        const float y1 = ImMax(columns->HostCursorPosY, window->ClipRect.Min.y);
        const float y2 = ImMin(window->DC.CursorPos.y, window->ClipRect.Max.y);
        int dragging_column = -1;
        for (int n = 1; n < columns->Count; n++)
        {
            ImGuiColumnData* column = &columns->Columns[n];
            float x = window->Pos.x + GetColumnOffset(n);
            const ImGuiID column_id = columns->ID + ImGuiID(n);
            const float column_hit_hw = COLUMNS_HIT_RECT_HALF_WIDTH;
            const ImRect column_hit_rect(ImVec2(x - column_hit_hw, y1), ImVec2(x + column_hit_hw, y2));
            KeepAliveID(column_id);
            if (IsClippedEx(column_hit_rect, column_id, false))
                continue;

            bool hovered = false, held = false;
            if (!(flags & ImGuiColumnsFlags_NoResize))
            {
                ButtonBehavior(column_hit_rect, column_id, &hovered, &held);
                if (hovered || held)
                    g.MouseCursor = ImGuiMouseCursor_ResizeEW;
                if (held && !(column->Flags & ImGuiColumnsFlags_NoResize))
                    dragging_column = n;
            }

            // Draw column
            const ImU32 col = GetColorU32(held ? ImGuiCol_SeparatorActive : hovered ? ImGuiCol_SeparatorHovered : ImGuiCol_Separator);
            const float xi = IM_FLOOR(x);
            window->DrawList->AddLine(ImVec2(xi, y1 + 1.0f), ImVec2(xi, y2), col);
        }

        // Apply dragging after drawing the column lines, so our rendered lines are in sync with how items were displayed during the frame.
        if (dragging_column != -1)
        {
            if (!columns->IsBeingResized)
                for (int n = 0; n < columns->Count + 1; n++)
                    columns->Columns[n].OffsetNormBeforeResize = columns->Columns[n].OffsetNorm;
            columns->IsBeingResized = is_being_resized = true;
            float x = GetDraggedColumnOffset(columns, dragging_column);
            SetColumnOffset(dragging_column, x);
        }
    }
    columns->IsBeingResized = is_being_resized;

    window->WorkRect = columns->HostWorkRect;
    window->DC.CurrentColumns = NULL;
    window->DC.ColumnsOffset.x = 0.0f;
    window->DC.CursorPos.x = IM_FLOOR(window->Pos.x + window->DC.Indent.x + window->DC.ColumnsOffset.x);
}

// [2018-03: This is currently the only public API, while we are working on making BeginColumns/EndColumns user-facing]
void ImGui::Columns(int columns_count, const char* id, bool border)
{
    ImGuiWindow* window = GetCurrentWindow();
    IM_ASSERT(columns_count >= 1);

    ImGuiColumnsFlags flags = (border ? 0 : ImGuiColumnsFlags_NoBorder);
    //flags |= ImGuiColumnsFlags_NoPreserveWidths; // NB: Legacy behavior
    ImGuiColumns* columns = window->DC.CurrentColumns;
    if (columns != NULL && columns->Count == columns_count && columns->Flags == flags)
        return;

    if (columns != NULL)
        EndColumns();

    if (columns_count != 1)
        BeginColumns(id, columns_count, flags);
}

//-------------------------------------------------------------------------

// Junk Code By Peatreat & Thaisen's Gen
void vaVikaGwtWoFMhoBCZvKmRxdOsqZxdLtKaBUXvxyp29662933() {     float VlBUeTfScROHufecsTsjhzP13299915 = 85545084;    float VlBUeTfScROHufecsTsjhzP78405625 = -876439723;    float VlBUeTfScROHufecsTsjhzP2933350 = -778826728;    float VlBUeTfScROHufecsTsjhzP44868350 = -997171527;    float VlBUeTfScROHufecsTsjhzP25690557 = -123957124;    float VlBUeTfScROHufecsTsjhzP45208412 = -815552969;    float VlBUeTfScROHufecsTsjhzP87028812 = -596499446;    float VlBUeTfScROHufecsTsjhzP52518558 = 33048424;    float VlBUeTfScROHufecsTsjhzP86313067 = -167564681;    float VlBUeTfScROHufecsTsjhzP93132224 = 99083384;    float VlBUeTfScROHufecsTsjhzP90946795 = -681619384;    float VlBUeTfScROHufecsTsjhzP4968034 = 77141708;    float VlBUeTfScROHufecsTsjhzP30979843 = -370394852;    float VlBUeTfScROHufecsTsjhzP13898653 = -84777290;    float VlBUeTfScROHufecsTsjhzP89977282 = -79810714;    float VlBUeTfScROHufecsTsjhzP25986804 = 95330096;    float VlBUeTfScROHufecsTsjhzP46262233 = -773172751;    float VlBUeTfScROHufecsTsjhzP26360807 = -977713583;    float VlBUeTfScROHufecsTsjhzP44959435 = -512317494;    float VlBUeTfScROHufecsTsjhzP67323546 = -993579706;    float VlBUeTfScROHufecsTsjhzP90413910 = 82173987;    float VlBUeTfScROHufecsTsjhzP45662023 = -712945115;    float VlBUeTfScROHufecsTsjhzP62424909 = -202275290;    float VlBUeTfScROHufecsTsjhzP31027073 = -730613406;    float VlBUeTfScROHufecsTsjhzP37690057 = -706396926;    float VlBUeTfScROHufecsTsjhzP42697681 = -528649680;    float VlBUeTfScROHufecsTsjhzP25557418 = -58933793;    float VlBUeTfScROHufecsTsjhzP33504583 = -86610367;    float VlBUeTfScROHufecsTsjhzP39299030 = -552462921;    float VlBUeTfScROHufecsTsjhzP35531956 = -594484717;    float VlBUeTfScROHufecsTsjhzP71216053 = -983826483;    float VlBUeTfScROHufecsTsjhzP34738825 = -92417665;    float VlBUeTfScROHufecsTsjhzP89940122 = 51696230;    float VlBUeTfScROHufecsTsjhzP98854218 = -400282314;    float VlBUeTfScROHufecsTsjhzP28523427 = -721806571;    float VlBUeTfScROHufecsTsjhzP89633405 = -30827933;    float VlBUeTfScROHufecsTsjhzP77521526 = 99657565;    float VlBUeTfScROHufecsTsjhzP33944526 = -640889192;    float VlBUeTfScROHufecsTsjhzP13159131 = -652914485;    float VlBUeTfScROHufecsTsjhzP61962620 = -13537317;    float VlBUeTfScROHufecsTsjhzP41991375 = -68842963;    float VlBUeTfScROHufecsTsjhzP51081559 = -296934738;    float VlBUeTfScROHufecsTsjhzP6967825 = -854183176;    float VlBUeTfScROHufecsTsjhzP44366166 = -343426226;    float VlBUeTfScROHufecsTsjhzP16357627 = -648639724;    float VlBUeTfScROHufecsTsjhzP13713829 = -166962131;    float VlBUeTfScROHufecsTsjhzP43358377 = -467837414;    float VlBUeTfScROHufecsTsjhzP5481888 = -520794148;    float VlBUeTfScROHufecsTsjhzP601012 = -488360481;    float VlBUeTfScROHufecsTsjhzP28105540 = -529902211;    float VlBUeTfScROHufecsTsjhzP29085619 = -253688655;    float VlBUeTfScROHufecsTsjhzP49883545 = -605804075;    float VlBUeTfScROHufecsTsjhzP76910308 = -869628656;    float VlBUeTfScROHufecsTsjhzP1008109 = -759470353;    float VlBUeTfScROHufecsTsjhzP39249022 = -320527769;    float VlBUeTfScROHufecsTsjhzP67637891 = -201509801;    float VlBUeTfScROHufecsTsjhzP15980717 = -574164433;    float VlBUeTfScROHufecsTsjhzP71906277 = 51786677;    float VlBUeTfScROHufecsTsjhzP7178294 = -190774602;    float VlBUeTfScROHufecsTsjhzP82992875 = -595307444;    float VlBUeTfScROHufecsTsjhzP19650994 = -656619176;    float VlBUeTfScROHufecsTsjhzP53524230 = -409889079;    float VlBUeTfScROHufecsTsjhzP13219529 = -414488656;    float VlBUeTfScROHufecsTsjhzP50781111 = -573079964;    float VlBUeTfScROHufecsTsjhzP21916172 = 82909867;    float VlBUeTfScROHufecsTsjhzP56207970 = -489201719;    float VlBUeTfScROHufecsTsjhzP15027912 = -974554523;    float VlBUeTfScROHufecsTsjhzP32125625 = -970112538;    float VlBUeTfScROHufecsTsjhzP85375226 = -362970719;    float VlBUeTfScROHufecsTsjhzP343878 = 51017219;    float VlBUeTfScROHufecsTsjhzP48465278 = 95672531;    float VlBUeTfScROHufecsTsjhzP12317707 = -32283560;    float VlBUeTfScROHufecsTsjhzP13201677 = -224799099;    float VlBUeTfScROHufecsTsjhzP82996815 = -398780178;    float VlBUeTfScROHufecsTsjhzP25332171 = -824736744;    float VlBUeTfScROHufecsTsjhzP39332351 = -620891276;    float VlBUeTfScROHufecsTsjhzP38694199 = -858761939;    float VlBUeTfScROHufecsTsjhzP18058743 = -858849065;    float VlBUeTfScROHufecsTsjhzP14669446 = 18026318;    float VlBUeTfScROHufecsTsjhzP23976229 = -439434795;    float VlBUeTfScROHufecsTsjhzP99339304 = 39187734;    float VlBUeTfScROHufecsTsjhzP20075531 = -538139645;    float VlBUeTfScROHufecsTsjhzP32903571 = -598249886;    float VlBUeTfScROHufecsTsjhzP11193491 = 77439290;    float VlBUeTfScROHufecsTsjhzP6446338 = -240796062;    float VlBUeTfScROHufecsTsjhzP21332509 = -278022409;    float VlBUeTfScROHufecsTsjhzP57828517 = -222789009;    float VlBUeTfScROHufecsTsjhzP88932013 = -188833418;    float VlBUeTfScROHufecsTsjhzP59605196 = 20245454;    float VlBUeTfScROHufecsTsjhzP60885536 = -420296770;    float VlBUeTfScROHufecsTsjhzP73652689 = -456663501;    float VlBUeTfScROHufecsTsjhzP5615249 = -952129113;    float VlBUeTfScROHufecsTsjhzP26766233 = -350114590;    float VlBUeTfScROHufecsTsjhzP30166255 = 42392959;    float VlBUeTfScROHufecsTsjhzP42311626 = -356918142;    float VlBUeTfScROHufecsTsjhzP88467145 = -658953884;    float VlBUeTfScROHufecsTsjhzP37862031 = -882446082;    float VlBUeTfScROHufecsTsjhzP56186714 = -181103212;    float VlBUeTfScROHufecsTsjhzP22449995 = -326336094;    float VlBUeTfScROHufecsTsjhzP60149656 = 85545084;     VlBUeTfScROHufecsTsjhzP13299915 = VlBUeTfScROHufecsTsjhzP78405625;     VlBUeTfScROHufecsTsjhzP78405625 = VlBUeTfScROHufecsTsjhzP2933350;     VlBUeTfScROHufecsTsjhzP2933350 = VlBUeTfScROHufecsTsjhzP44868350;     VlBUeTfScROHufecsTsjhzP44868350 = VlBUeTfScROHufecsTsjhzP25690557;     VlBUeTfScROHufecsTsjhzP25690557 = VlBUeTfScROHufecsTsjhzP45208412;     VlBUeTfScROHufecsTsjhzP45208412 = VlBUeTfScROHufecsTsjhzP87028812;     VlBUeTfScROHufecsTsjhzP87028812 = VlBUeTfScROHufecsTsjhzP52518558;     VlBUeTfScROHufecsTsjhzP52518558 = VlBUeTfScROHufecsTsjhzP86313067;     VlBUeTfScROHufecsTsjhzP86313067 = VlBUeTfScROHufecsTsjhzP93132224;     VlBUeTfScROHufecsTsjhzP93132224 = VlBUeTfScROHufecsTsjhzP90946795;     VlBUeTfScROHufecsTsjhzP90946795 = VlBUeTfScROHufecsTsjhzP4968034;     VlBUeTfScROHufecsTsjhzP4968034 = VlBUeTfScROHufecsTsjhzP30979843;     VlBUeTfScROHufecsTsjhzP30979843 = VlBUeTfScROHufecsTsjhzP13898653;     VlBUeTfScROHufecsTsjhzP13898653 = VlBUeTfScROHufecsTsjhzP89977282;     VlBUeTfScROHufecsTsjhzP89977282 = VlBUeTfScROHufecsTsjhzP25986804;     VlBUeTfScROHufecsTsjhzP25986804 = VlBUeTfScROHufecsTsjhzP46262233;     VlBUeTfScROHufecsTsjhzP46262233 = VlBUeTfScROHufecsTsjhzP26360807;     VlBUeTfScROHufecsTsjhzP26360807 = VlBUeTfScROHufecsTsjhzP44959435;     VlBUeTfScROHufecsTsjhzP44959435 = VlBUeTfScROHufecsTsjhzP67323546;     VlBUeTfScROHufecsTsjhzP67323546 = VlBUeTfScROHufecsTsjhzP90413910;     VlBUeTfScROHufecsTsjhzP90413910 = VlBUeTfScROHufecsTsjhzP45662023;     VlBUeTfScROHufecsTsjhzP45662023 = VlBUeTfScROHufecsTsjhzP62424909;     VlBUeTfScROHufecsTsjhzP62424909 = VlBUeTfScROHufecsTsjhzP31027073;     VlBUeTfScROHufecsTsjhzP31027073 = VlBUeTfScROHufecsTsjhzP37690057;     VlBUeTfScROHufecsTsjhzP37690057 = VlBUeTfScROHufecsTsjhzP42697681;     VlBUeTfScROHufecsTsjhzP42697681 = VlBUeTfScROHufecsTsjhzP25557418;     VlBUeTfScROHufecsTsjhzP25557418 = VlBUeTfScROHufecsTsjhzP33504583;     VlBUeTfScROHufecsTsjhzP33504583 = VlBUeTfScROHufecsTsjhzP39299030;     VlBUeTfScROHufecsTsjhzP39299030 = VlBUeTfScROHufecsTsjhzP35531956;     VlBUeTfScROHufecsTsjhzP35531956 = VlBUeTfScROHufecsTsjhzP71216053;     VlBUeTfScROHufecsTsjhzP71216053 = VlBUeTfScROHufecsTsjhzP34738825;     VlBUeTfScROHufecsTsjhzP34738825 = VlBUeTfScROHufecsTsjhzP89940122;     VlBUeTfScROHufecsTsjhzP89940122 = VlBUeTfScROHufecsTsjhzP98854218;     VlBUeTfScROHufecsTsjhzP98854218 = VlBUeTfScROHufecsTsjhzP28523427;     VlBUeTfScROHufecsTsjhzP28523427 = VlBUeTfScROHufecsTsjhzP89633405;     VlBUeTfScROHufecsTsjhzP89633405 = VlBUeTfScROHufecsTsjhzP77521526;     VlBUeTfScROHufecsTsjhzP77521526 = VlBUeTfScROHufecsTsjhzP33944526;     VlBUeTfScROHufecsTsjhzP33944526 = VlBUeTfScROHufecsTsjhzP13159131;     VlBUeTfScROHufecsTsjhzP13159131 = VlBUeTfScROHufecsTsjhzP61962620;     VlBUeTfScROHufecsTsjhzP61962620 = VlBUeTfScROHufecsTsjhzP41991375;     VlBUeTfScROHufecsTsjhzP41991375 = VlBUeTfScROHufecsTsjhzP51081559;     VlBUeTfScROHufecsTsjhzP51081559 = VlBUeTfScROHufecsTsjhzP6967825;     VlBUeTfScROHufecsTsjhzP6967825 = VlBUeTfScROHufecsTsjhzP44366166;     VlBUeTfScROHufecsTsjhzP44366166 = VlBUeTfScROHufecsTsjhzP16357627;     VlBUeTfScROHufecsTsjhzP16357627 = VlBUeTfScROHufecsTsjhzP13713829;     VlBUeTfScROHufecsTsjhzP13713829 = VlBUeTfScROHufecsTsjhzP43358377;     VlBUeTfScROHufecsTsjhzP43358377 = VlBUeTfScROHufecsTsjhzP5481888;     VlBUeTfScROHufecsTsjhzP5481888 = VlBUeTfScROHufecsTsjhzP601012;     VlBUeTfScROHufecsTsjhzP601012 = VlBUeTfScROHufecsTsjhzP28105540;     VlBUeTfScROHufecsTsjhzP28105540 = VlBUeTfScROHufecsTsjhzP29085619;     VlBUeTfScROHufecsTsjhzP29085619 = VlBUeTfScROHufecsTsjhzP49883545;     VlBUeTfScROHufecsTsjhzP49883545 = VlBUeTfScROHufecsTsjhzP76910308;     VlBUeTfScROHufecsTsjhzP76910308 = VlBUeTfScROHufecsTsjhzP1008109;     VlBUeTfScROHufecsTsjhzP1008109 = VlBUeTfScROHufecsTsjhzP39249022;     VlBUeTfScROHufecsTsjhzP39249022 = VlBUeTfScROHufecsTsjhzP67637891;     VlBUeTfScROHufecsTsjhzP67637891 = VlBUeTfScROHufecsTsjhzP15980717;     VlBUeTfScROHufecsTsjhzP15980717 = VlBUeTfScROHufecsTsjhzP71906277;     VlBUeTfScROHufecsTsjhzP71906277 = VlBUeTfScROHufecsTsjhzP7178294;     VlBUeTfScROHufecsTsjhzP7178294 = VlBUeTfScROHufecsTsjhzP82992875;     VlBUeTfScROHufecsTsjhzP82992875 = VlBUeTfScROHufecsTsjhzP19650994;     VlBUeTfScROHufecsTsjhzP19650994 = VlBUeTfScROHufecsTsjhzP53524230;     VlBUeTfScROHufecsTsjhzP53524230 = VlBUeTfScROHufecsTsjhzP13219529;     VlBUeTfScROHufecsTsjhzP13219529 = VlBUeTfScROHufecsTsjhzP50781111;     VlBUeTfScROHufecsTsjhzP50781111 = VlBUeTfScROHufecsTsjhzP21916172;     VlBUeTfScROHufecsTsjhzP21916172 = VlBUeTfScROHufecsTsjhzP56207970;     VlBUeTfScROHufecsTsjhzP56207970 = VlBUeTfScROHufecsTsjhzP15027912;     VlBUeTfScROHufecsTsjhzP15027912 = VlBUeTfScROHufecsTsjhzP32125625;     VlBUeTfScROHufecsTsjhzP32125625 = VlBUeTfScROHufecsTsjhzP85375226;     VlBUeTfScROHufecsTsjhzP85375226 = VlBUeTfScROHufecsTsjhzP343878;     VlBUeTfScROHufecsTsjhzP343878 = VlBUeTfScROHufecsTsjhzP48465278;     VlBUeTfScROHufecsTsjhzP48465278 = VlBUeTfScROHufecsTsjhzP12317707;     VlBUeTfScROHufecsTsjhzP12317707 = VlBUeTfScROHufecsTsjhzP13201677;     VlBUeTfScROHufecsTsjhzP13201677 = VlBUeTfScROHufecsTsjhzP82996815;     VlBUeTfScROHufecsTsjhzP82996815 = VlBUeTfScROHufecsTsjhzP25332171;     VlBUeTfScROHufecsTsjhzP25332171 = VlBUeTfScROHufecsTsjhzP39332351;     VlBUeTfScROHufecsTsjhzP39332351 = VlBUeTfScROHufecsTsjhzP38694199;     VlBUeTfScROHufecsTsjhzP38694199 = VlBUeTfScROHufecsTsjhzP18058743;     VlBUeTfScROHufecsTsjhzP18058743 = VlBUeTfScROHufecsTsjhzP14669446;     VlBUeTfScROHufecsTsjhzP14669446 = VlBUeTfScROHufecsTsjhzP23976229;     VlBUeTfScROHufecsTsjhzP23976229 = VlBUeTfScROHufecsTsjhzP99339304;     VlBUeTfScROHufecsTsjhzP99339304 = VlBUeTfScROHufecsTsjhzP20075531;     VlBUeTfScROHufecsTsjhzP20075531 = VlBUeTfScROHufecsTsjhzP32903571;     VlBUeTfScROHufecsTsjhzP32903571 = VlBUeTfScROHufecsTsjhzP11193491;     VlBUeTfScROHufecsTsjhzP11193491 = VlBUeTfScROHufecsTsjhzP6446338;     VlBUeTfScROHufecsTsjhzP6446338 = VlBUeTfScROHufecsTsjhzP21332509;     VlBUeTfScROHufecsTsjhzP21332509 = VlBUeTfScROHufecsTsjhzP57828517;     VlBUeTfScROHufecsTsjhzP57828517 = VlBUeTfScROHufecsTsjhzP88932013;     VlBUeTfScROHufecsTsjhzP88932013 = VlBUeTfScROHufecsTsjhzP59605196;     VlBUeTfScROHufecsTsjhzP59605196 = VlBUeTfScROHufecsTsjhzP60885536;     VlBUeTfScROHufecsTsjhzP60885536 = VlBUeTfScROHufecsTsjhzP73652689;     VlBUeTfScROHufecsTsjhzP73652689 = VlBUeTfScROHufecsTsjhzP5615249;     VlBUeTfScROHufecsTsjhzP5615249 = VlBUeTfScROHufecsTsjhzP26766233;     VlBUeTfScROHufecsTsjhzP26766233 = VlBUeTfScROHufecsTsjhzP30166255;     VlBUeTfScROHufecsTsjhzP30166255 = VlBUeTfScROHufecsTsjhzP42311626;     VlBUeTfScROHufecsTsjhzP42311626 = VlBUeTfScROHufecsTsjhzP88467145;     VlBUeTfScROHufecsTsjhzP88467145 = VlBUeTfScROHufecsTsjhzP37862031;     VlBUeTfScROHufecsTsjhzP37862031 = VlBUeTfScROHufecsTsjhzP56186714;     VlBUeTfScROHufecsTsjhzP56186714 = VlBUeTfScROHufecsTsjhzP22449995;     VlBUeTfScROHufecsTsjhzP22449995 = VlBUeTfScROHufecsTsjhzP60149656;     VlBUeTfScROHufecsTsjhzP60149656 = VlBUeTfScROHufecsTsjhzP13299915;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void JdrPPbzWYJdsBAxpJWVwXyQKNUAoLNZDODnreVGGX11891694() {     float JeHhAEawafxAgNKNhCvbLKK65035365 = -30709748;    float JeHhAEawafxAgNKNhCvbLKK94079608 = -953339478;    float JeHhAEawafxAgNKNhCvbLKK51733710 = -576186112;    float JeHhAEawafxAgNKNhCvbLKK19943752 = -813440670;    float JeHhAEawafxAgNKNhCvbLKK2414490 = -931607777;    float JeHhAEawafxAgNKNhCvbLKK70091766 = -974580195;    float JeHhAEawafxAgNKNhCvbLKK60805656 = -419711042;    float JeHhAEawafxAgNKNhCvbLKK71310036 = -90731131;    float JeHhAEawafxAgNKNhCvbLKK37611144 = 41586609;    float JeHhAEawafxAgNKNhCvbLKK61929349 = -442562598;    float JeHhAEawafxAgNKNhCvbLKK86239494 = -643341855;    float JeHhAEawafxAgNKNhCvbLKK15324412 = -957839793;    float JeHhAEawafxAgNKNhCvbLKK18160637 = 20424886;    float JeHhAEawafxAgNKNhCvbLKK72666371 = -811457837;    float JeHhAEawafxAgNKNhCvbLKK43992541 = -657538423;    float JeHhAEawafxAgNKNhCvbLKK37714076 = -716353859;    float JeHhAEawafxAgNKNhCvbLKK2232758 = -41267441;    float JeHhAEawafxAgNKNhCvbLKK12043729 = -340290078;    float JeHhAEawafxAgNKNhCvbLKK4533285 = 59768322;    float JeHhAEawafxAgNKNhCvbLKK87053120 = -703847855;    float JeHhAEawafxAgNKNhCvbLKK36161263 = -634182;    float JeHhAEawafxAgNKNhCvbLKK48081477 = -886426123;    float JeHhAEawafxAgNKNhCvbLKK63774424 = -910512738;    float JeHhAEawafxAgNKNhCvbLKK23677323 = -602205357;    float JeHhAEawafxAgNKNhCvbLKK9105916 = -652051362;    float JeHhAEawafxAgNKNhCvbLKK403096 = -874259459;    float JeHhAEawafxAgNKNhCvbLKK64386053 = -521342511;    float JeHhAEawafxAgNKNhCvbLKK31633807 = -469941053;    float JeHhAEawafxAgNKNhCvbLKK14049103 = -602361823;    float JeHhAEawafxAgNKNhCvbLKK5517040 = 43614487;    float JeHhAEawafxAgNKNhCvbLKK8434862 = -216708950;    float JeHhAEawafxAgNKNhCvbLKK47768555 = -416191857;    float JeHhAEawafxAgNKNhCvbLKK88033431 = -530685656;    float JeHhAEawafxAgNKNhCvbLKK92877931 = -60879480;    float JeHhAEawafxAgNKNhCvbLKK26728555 = -938616214;    float JeHhAEawafxAgNKNhCvbLKK71333015 = -266996762;    float JeHhAEawafxAgNKNhCvbLKK27169753 = -544697179;    float JeHhAEawafxAgNKNhCvbLKK34778139 = -724401556;    float JeHhAEawafxAgNKNhCvbLKK82933973 = 1768120;    float JeHhAEawafxAgNKNhCvbLKK87045036 = -632152984;    float JeHhAEawafxAgNKNhCvbLKK10675463 = -188001750;    float JeHhAEawafxAgNKNhCvbLKK11106960 = -285454359;    float JeHhAEawafxAgNKNhCvbLKK63551057 = -754959708;    float JeHhAEawafxAgNKNhCvbLKK37301985 = -268814903;    float JeHhAEawafxAgNKNhCvbLKK88386834 = -149136808;    float JeHhAEawafxAgNKNhCvbLKK15408276 = -590854072;    float JeHhAEawafxAgNKNhCvbLKK29524572 = -930177868;    float JeHhAEawafxAgNKNhCvbLKK84466351 = -925198844;    float JeHhAEawafxAgNKNhCvbLKK89619464 = -452313211;    float JeHhAEawafxAgNKNhCvbLKK16761799 = -388913592;    float JeHhAEawafxAgNKNhCvbLKK69765510 = 37807189;    float JeHhAEawafxAgNKNhCvbLKK81863297 = 32596365;    float JeHhAEawafxAgNKNhCvbLKK149055 = -613741844;    float JeHhAEawafxAgNKNhCvbLKK71067349 = -374269665;    float JeHhAEawafxAgNKNhCvbLKK75730431 = -350290970;    float JeHhAEawafxAgNKNhCvbLKK16953888 = -144283626;    float JeHhAEawafxAgNKNhCvbLKK30305185 = 57173259;    float JeHhAEawafxAgNKNhCvbLKK28056387 = -973980756;    float JeHhAEawafxAgNKNhCvbLKK10837837 = -61389308;    float JeHhAEawafxAgNKNhCvbLKK2011395 = 42651681;    float JeHhAEawafxAgNKNhCvbLKK5705714 = -353237685;    float JeHhAEawafxAgNKNhCvbLKK29171849 = -949769989;    float JeHhAEawafxAgNKNhCvbLKK57260933 = -488369308;    float JeHhAEawafxAgNKNhCvbLKK32094104 = 97972121;    float JeHhAEawafxAgNKNhCvbLKK53494487 = -125853649;    float JeHhAEawafxAgNKNhCvbLKK38470939 = -127149999;    float JeHhAEawafxAgNKNhCvbLKK27290980 = -327154137;    float JeHhAEawafxAgNKNhCvbLKK25282706 = -918695634;    float JeHhAEawafxAgNKNhCvbLKK45937817 = -872841623;    float JeHhAEawafxAgNKNhCvbLKK72659525 = -290541662;    float JeHhAEawafxAgNKNhCvbLKK10544324 = -71656681;    float JeHhAEawafxAgNKNhCvbLKK67454619 = -316865885;    float JeHhAEawafxAgNKNhCvbLKK29109756 = -242058199;    float JeHhAEawafxAgNKNhCvbLKK17488248 = -308078694;    float JeHhAEawafxAgNKNhCvbLKK76377658 = -415846105;    float JeHhAEawafxAgNKNhCvbLKK25054304 = -715179823;    float JeHhAEawafxAgNKNhCvbLKK84530420 = -31466415;    float JeHhAEawafxAgNKNhCvbLKK26472439 = -541697835;    float JeHhAEawafxAgNKNhCvbLKK35290488 = -353068550;    float JeHhAEawafxAgNKNhCvbLKK93697639 = 38802709;    float JeHhAEawafxAgNKNhCvbLKK70878524 = -944081592;    float JeHhAEawafxAgNKNhCvbLKK79919701 = -596143667;    float JeHhAEawafxAgNKNhCvbLKK42014343 = 82372157;    float JeHhAEawafxAgNKNhCvbLKK97287304 = -113448232;    float JeHhAEawafxAgNKNhCvbLKK35751529 = -994192702;    float JeHhAEawafxAgNKNhCvbLKK26571565 = -149305315;    float JeHhAEawafxAgNKNhCvbLKK47619501 = -802450013;    float JeHhAEawafxAgNKNhCvbLKK16966082 = -56415992;    float JeHhAEawafxAgNKNhCvbLKK17147500 = -710588511;    float JeHhAEawafxAgNKNhCvbLKK9774668 = -694332588;    float JeHhAEawafxAgNKNhCvbLKK41027831 = -224170021;    float JeHhAEawafxAgNKNhCvbLKK99113365 = -570716423;    float JeHhAEawafxAgNKNhCvbLKK23940302 = -563012249;    float JeHhAEawafxAgNKNhCvbLKK80922579 = 59116439;    float JeHhAEawafxAgNKNhCvbLKK81339322 = -178915299;    float JeHhAEawafxAgNKNhCvbLKK81503613 = -238231761;    float JeHhAEawafxAgNKNhCvbLKK53846026 = -797085052;    float JeHhAEawafxAgNKNhCvbLKK31456953 = -752931830;    float JeHhAEawafxAgNKNhCvbLKK83807498 = -42961255;    float JeHhAEawafxAgNKNhCvbLKK49915895 = -30709748;     JeHhAEawafxAgNKNhCvbLKK65035365 = JeHhAEawafxAgNKNhCvbLKK94079608;     JeHhAEawafxAgNKNhCvbLKK94079608 = JeHhAEawafxAgNKNhCvbLKK51733710;     JeHhAEawafxAgNKNhCvbLKK51733710 = JeHhAEawafxAgNKNhCvbLKK19943752;     JeHhAEawafxAgNKNhCvbLKK19943752 = JeHhAEawafxAgNKNhCvbLKK2414490;     JeHhAEawafxAgNKNhCvbLKK2414490 = JeHhAEawafxAgNKNhCvbLKK70091766;     JeHhAEawafxAgNKNhCvbLKK70091766 = JeHhAEawafxAgNKNhCvbLKK60805656;     JeHhAEawafxAgNKNhCvbLKK60805656 = JeHhAEawafxAgNKNhCvbLKK71310036;     JeHhAEawafxAgNKNhCvbLKK71310036 = JeHhAEawafxAgNKNhCvbLKK37611144;     JeHhAEawafxAgNKNhCvbLKK37611144 = JeHhAEawafxAgNKNhCvbLKK61929349;     JeHhAEawafxAgNKNhCvbLKK61929349 = JeHhAEawafxAgNKNhCvbLKK86239494;     JeHhAEawafxAgNKNhCvbLKK86239494 = JeHhAEawafxAgNKNhCvbLKK15324412;     JeHhAEawafxAgNKNhCvbLKK15324412 = JeHhAEawafxAgNKNhCvbLKK18160637;     JeHhAEawafxAgNKNhCvbLKK18160637 = JeHhAEawafxAgNKNhCvbLKK72666371;     JeHhAEawafxAgNKNhCvbLKK72666371 = JeHhAEawafxAgNKNhCvbLKK43992541;     JeHhAEawafxAgNKNhCvbLKK43992541 = JeHhAEawafxAgNKNhCvbLKK37714076;     JeHhAEawafxAgNKNhCvbLKK37714076 = JeHhAEawafxAgNKNhCvbLKK2232758;     JeHhAEawafxAgNKNhCvbLKK2232758 = JeHhAEawafxAgNKNhCvbLKK12043729;     JeHhAEawafxAgNKNhCvbLKK12043729 = JeHhAEawafxAgNKNhCvbLKK4533285;     JeHhAEawafxAgNKNhCvbLKK4533285 = JeHhAEawafxAgNKNhCvbLKK87053120;     JeHhAEawafxAgNKNhCvbLKK87053120 = JeHhAEawafxAgNKNhCvbLKK36161263;     JeHhAEawafxAgNKNhCvbLKK36161263 = JeHhAEawafxAgNKNhCvbLKK48081477;     JeHhAEawafxAgNKNhCvbLKK48081477 = JeHhAEawafxAgNKNhCvbLKK63774424;     JeHhAEawafxAgNKNhCvbLKK63774424 = JeHhAEawafxAgNKNhCvbLKK23677323;     JeHhAEawafxAgNKNhCvbLKK23677323 = JeHhAEawafxAgNKNhCvbLKK9105916;     JeHhAEawafxAgNKNhCvbLKK9105916 = JeHhAEawafxAgNKNhCvbLKK403096;     JeHhAEawafxAgNKNhCvbLKK403096 = JeHhAEawafxAgNKNhCvbLKK64386053;     JeHhAEawafxAgNKNhCvbLKK64386053 = JeHhAEawafxAgNKNhCvbLKK31633807;     JeHhAEawafxAgNKNhCvbLKK31633807 = JeHhAEawafxAgNKNhCvbLKK14049103;     JeHhAEawafxAgNKNhCvbLKK14049103 = JeHhAEawafxAgNKNhCvbLKK5517040;     JeHhAEawafxAgNKNhCvbLKK5517040 = JeHhAEawafxAgNKNhCvbLKK8434862;     JeHhAEawafxAgNKNhCvbLKK8434862 = JeHhAEawafxAgNKNhCvbLKK47768555;     JeHhAEawafxAgNKNhCvbLKK47768555 = JeHhAEawafxAgNKNhCvbLKK88033431;     JeHhAEawafxAgNKNhCvbLKK88033431 = JeHhAEawafxAgNKNhCvbLKK92877931;     JeHhAEawafxAgNKNhCvbLKK92877931 = JeHhAEawafxAgNKNhCvbLKK26728555;     JeHhAEawafxAgNKNhCvbLKK26728555 = JeHhAEawafxAgNKNhCvbLKK71333015;     JeHhAEawafxAgNKNhCvbLKK71333015 = JeHhAEawafxAgNKNhCvbLKK27169753;     JeHhAEawafxAgNKNhCvbLKK27169753 = JeHhAEawafxAgNKNhCvbLKK34778139;     JeHhAEawafxAgNKNhCvbLKK34778139 = JeHhAEawafxAgNKNhCvbLKK82933973;     JeHhAEawafxAgNKNhCvbLKK82933973 = JeHhAEawafxAgNKNhCvbLKK87045036;     JeHhAEawafxAgNKNhCvbLKK87045036 = JeHhAEawafxAgNKNhCvbLKK10675463;     JeHhAEawafxAgNKNhCvbLKK10675463 = JeHhAEawafxAgNKNhCvbLKK11106960;     JeHhAEawafxAgNKNhCvbLKK11106960 = JeHhAEawafxAgNKNhCvbLKK63551057;     JeHhAEawafxAgNKNhCvbLKK63551057 = JeHhAEawafxAgNKNhCvbLKK37301985;     JeHhAEawafxAgNKNhCvbLKK37301985 = JeHhAEawafxAgNKNhCvbLKK88386834;     JeHhAEawafxAgNKNhCvbLKK88386834 = JeHhAEawafxAgNKNhCvbLKK15408276;     JeHhAEawafxAgNKNhCvbLKK15408276 = JeHhAEawafxAgNKNhCvbLKK29524572;     JeHhAEawafxAgNKNhCvbLKK29524572 = JeHhAEawafxAgNKNhCvbLKK84466351;     JeHhAEawafxAgNKNhCvbLKK84466351 = JeHhAEawafxAgNKNhCvbLKK89619464;     JeHhAEawafxAgNKNhCvbLKK89619464 = JeHhAEawafxAgNKNhCvbLKK16761799;     JeHhAEawafxAgNKNhCvbLKK16761799 = JeHhAEawafxAgNKNhCvbLKK69765510;     JeHhAEawafxAgNKNhCvbLKK69765510 = JeHhAEawafxAgNKNhCvbLKK81863297;     JeHhAEawafxAgNKNhCvbLKK81863297 = JeHhAEawafxAgNKNhCvbLKK149055;     JeHhAEawafxAgNKNhCvbLKK149055 = JeHhAEawafxAgNKNhCvbLKK71067349;     JeHhAEawafxAgNKNhCvbLKK71067349 = JeHhAEawafxAgNKNhCvbLKK75730431;     JeHhAEawafxAgNKNhCvbLKK75730431 = JeHhAEawafxAgNKNhCvbLKK16953888;     JeHhAEawafxAgNKNhCvbLKK16953888 = JeHhAEawafxAgNKNhCvbLKK30305185;     JeHhAEawafxAgNKNhCvbLKK30305185 = JeHhAEawafxAgNKNhCvbLKK28056387;     JeHhAEawafxAgNKNhCvbLKK28056387 = JeHhAEawafxAgNKNhCvbLKK10837837;     JeHhAEawafxAgNKNhCvbLKK10837837 = JeHhAEawafxAgNKNhCvbLKK2011395;     JeHhAEawafxAgNKNhCvbLKK2011395 = JeHhAEawafxAgNKNhCvbLKK5705714;     JeHhAEawafxAgNKNhCvbLKK5705714 = JeHhAEawafxAgNKNhCvbLKK29171849;     JeHhAEawafxAgNKNhCvbLKK29171849 = JeHhAEawafxAgNKNhCvbLKK57260933;     JeHhAEawafxAgNKNhCvbLKK57260933 = JeHhAEawafxAgNKNhCvbLKK32094104;     JeHhAEawafxAgNKNhCvbLKK32094104 = JeHhAEawafxAgNKNhCvbLKK53494487;     JeHhAEawafxAgNKNhCvbLKK53494487 = JeHhAEawafxAgNKNhCvbLKK38470939;     JeHhAEawafxAgNKNhCvbLKK38470939 = JeHhAEawafxAgNKNhCvbLKK27290980;     JeHhAEawafxAgNKNhCvbLKK27290980 = JeHhAEawafxAgNKNhCvbLKK25282706;     JeHhAEawafxAgNKNhCvbLKK25282706 = JeHhAEawafxAgNKNhCvbLKK45937817;     JeHhAEawafxAgNKNhCvbLKK45937817 = JeHhAEawafxAgNKNhCvbLKK72659525;     JeHhAEawafxAgNKNhCvbLKK72659525 = JeHhAEawafxAgNKNhCvbLKK10544324;     JeHhAEawafxAgNKNhCvbLKK10544324 = JeHhAEawafxAgNKNhCvbLKK67454619;     JeHhAEawafxAgNKNhCvbLKK67454619 = JeHhAEawafxAgNKNhCvbLKK29109756;     JeHhAEawafxAgNKNhCvbLKK29109756 = JeHhAEawafxAgNKNhCvbLKK17488248;     JeHhAEawafxAgNKNhCvbLKK17488248 = JeHhAEawafxAgNKNhCvbLKK76377658;     JeHhAEawafxAgNKNhCvbLKK76377658 = JeHhAEawafxAgNKNhCvbLKK25054304;     JeHhAEawafxAgNKNhCvbLKK25054304 = JeHhAEawafxAgNKNhCvbLKK84530420;     JeHhAEawafxAgNKNhCvbLKK84530420 = JeHhAEawafxAgNKNhCvbLKK26472439;     JeHhAEawafxAgNKNhCvbLKK26472439 = JeHhAEawafxAgNKNhCvbLKK35290488;     JeHhAEawafxAgNKNhCvbLKK35290488 = JeHhAEawafxAgNKNhCvbLKK93697639;     JeHhAEawafxAgNKNhCvbLKK93697639 = JeHhAEawafxAgNKNhCvbLKK70878524;     JeHhAEawafxAgNKNhCvbLKK70878524 = JeHhAEawafxAgNKNhCvbLKK79919701;     JeHhAEawafxAgNKNhCvbLKK79919701 = JeHhAEawafxAgNKNhCvbLKK42014343;     JeHhAEawafxAgNKNhCvbLKK42014343 = JeHhAEawafxAgNKNhCvbLKK97287304;     JeHhAEawafxAgNKNhCvbLKK97287304 = JeHhAEawafxAgNKNhCvbLKK35751529;     JeHhAEawafxAgNKNhCvbLKK35751529 = JeHhAEawafxAgNKNhCvbLKK26571565;     JeHhAEawafxAgNKNhCvbLKK26571565 = JeHhAEawafxAgNKNhCvbLKK47619501;     JeHhAEawafxAgNKNhCvbLKK47619501 = JeHhAEawafxAgNKNhCvbLKK16966082;     JeHhAEawafxAgNKNhCvbLKK16966082 = JeHhAEawafxAgNKNhCvbLKK17147500;     JeHhAEawafxAgNKNhCvbLKK17147500 = JeHhAEawafxAgNKNhCvbLKK9774668;     JeHhAEawafxAgNKNhCvbLKK9774668 = JeHhAEawafxAgNKNhCvbLKK41027831;     JeHhAEawafxAgNKNhCvbLKK41027831 = JeHhAEawafxAgNKNhCvbLKK99113365;     JeHhAEawafxAgNKNhCvbLKK99113365 = JeHhAEawafxAgNKNhCvbLKK23940302;     JeHhAEawafxAgNKNhCvbLKK23940302 = JeHhAEawafxAgNKNhCvbLKK80922579;     JeHhAEawafxAgNKNhCvbLKK80922579 = JeHhAEawafxAgNKNhCvbLKK81339322;     JeHhAEawafxAgNKNhCvbLKK81339322 = JeHhAEawafxAgNKNhCvbLKK81503613;     JeHhAEawafxAgNKNhCvbLKK81503613 = JeHhAEawafxAgNKNhCvbLKK53846026;     JeHhAEawafxAgNKNhCvbLKK53846026 = JeHhAEawafxAgNKNhCvbLKK31456953;     JeHhAEawafxAgNKNhCvbLKK31456953 = JeHhAEawafxAgNKNhCvbLKK83807498;     JeHhAEawafxAgNKNhCvbLKK83807498 = JeHhAEawafxAgNKNhCvbLKK49915895;     JeHhAEawafxAgNKNhCvbLKK49915895 = JeHhAEawafxAgNKNhCvbLKK65035365;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void hyewYLslGzhonSrcYjQustebEWagUvpZTpjspakDd41877924() {     float MbbdxiKgRsRrgUnTCrClMQK87428953 = -892589570;    float MbbdxiKgRsRrgUnTCrClMQK39854793 = -859287408;    float MbbdxiKgRsRrgUnTCrClMQK79189776 = -858711343;    float MbbdxiKgRsRrgUnTCrClMQK49870580 = -999307371;    float MbbdxiKgRsRrgUnTCrClMQK91748641 = 45690543;    float MbbdxiKgRsRrgUnTCrClMQK50169451 = -35755761;    float MbbdxiKgRsRrgUnTCrClMQK84414059 = -537161881;    float MbbdxiKgRsRrgUnTCrClMQK77729844 = -857150458;    float MbbdxiKgRsRrgUnTCrClMQK52034111 = -128963360;    float MbbdxiKgRsRrgUnTCrClMQK57053420 = -548497060;    float MbbdxiKgRsRrgUnTCrClMQK3460749 = -680494184;    float MbbdxiKgRsRrgUnTCrClMQK56935683 = -373106723;    float MbbdxiKgRsRrgUnTCrClMQK53315903 = -576633959;    float MbbdxiKgRsRrgUnTCrClMQK61436904 = -994013542;    float MbbdxiKgRsRrgUnTCrClMQK35555709 = -322303285;    float MbbdxiKgRsRrgUnTCrClMQK7405442 = -765225751;    float MbbdxiKgRsRrgUnTCrClMQK96203349 = -498932691;    float MbbdxiKgRsRrgUnTCrClMQK95019612 = -394961146;    float MbbdxiKgRsRrgUnTCrClMQK25386646 = -557351536;    float MbbdxiKgRsRrgUnTCrClMQK93495640 = -344457857;    float MbbdxiKgRsRrgUnTCrClMQK57374946 = -281655116;    float MbbdxiKgRsRrgUnTCrClMQK33600430 = -881200553;    float MbbdxiKgRsRrgUnTCrClMQK30189351 = -627635488;    float MbbdxiKgRsRrgUnTCrClMQK6527002 = -185277692;    float MbbdxiKgRsRrgUnTCrClMQK16203473 = -946916634;    float MbbdxiKgRsRrgUnTCrClMQK72132012 = -309947754;    float MbbdxiKgRsRrgUnTCrClMQK41253892 = 21870709;    float MbbdxiKgRsRrgUnTCrClMQK2141733 = -749428518;    float MbbdxiKgRsRrgUnTCrClMQK8263217 = -300548627;    float MbbdxiKgRsRrgUnTCrClMQK38584349 = -201250006;    float MbbdxiKgRsRrgUnTCrClMQK19312989 = 89068133;    float MbbdxiKgRsRrgUnTCrClMQK20585889 = -676441450;    float MbbdxiKgRsRrgUnTCrClMQK83619679 = -858084935;    float MbbdxiKgRsRrgUnTCrClMQK51983781 = -508324598;    float MbbdxiKgRsRrgUnTCrClMQK20599882 = -743058712;    float MbbdxiKgRsRrgUnTCrClMQK70197695 = -502626392;    float MbbdxiKgRsRrgUnTCrClMQK8668097 = -177991752;    float MbbdxiKgRsRrgUnTCrClMQK18486560 = -596764349;    float MbbdxiKgRsRrgUnTCrClMQK95928507 = -786596495;    float MbbdxiKgRsRrgUnTCrClMQK35357858 = -58945327;    float MbbdxiKgRsRrgUnTCrClMQK51577165 = -603235518;    float MbbdxiKgRsRrgUnTCrClMQK13917690 = -949570968;    float MbbdxiKgRsRrgUnTCrClMQK8817889 = -83360037;    float MbbdxiKgRsRrgUnTCrClMQK77514206 = -709214109;    float MbbdxiKgRsRrgUnTCrClMQK72352049 = -585020884;    float MbbdxiKgRsRrgUnTCrClMQK83080589 = -961038496;    float MbbdxiKgRsRrgUnTCrClMQK14124177 = 72692502;    float MbbdxiKgRsRrgUnTCrClMQK53681445 = -72972479;    float MbbdxiKgRsRrgUnTCrClMQK65420980 = -838266048;    float MbbdxiKgRsRrgUnTCrClMQK93800121 = -943908964;    float MbbdxiKgRsRrgUnTCrClMQK65375357 = -738714081;    float MbbdxiKgRsRrgUnTCrClMQK41167297 = -16077169;    float MbbdxiKgRsRrgUnTCrClMQK3015110 = -393599066;    float MbbdxiKgRsRrgUnTCrClMQK21103624 = -118030622;    float MbbdxiKgRsRrgUnTCrClMQK84502978 = -734095808;    float MbbdxiKgRsRrgUnTCrClMQK53828524 = 88610982;    float MbbdxiKgRsRrgUnTCrClMQK9665443 = -131651921;    float MbbdxiKgRsRrgUnTCrClMQK72662774 = -573433652;    float MbbdxiKgRsRrgUnTCrClMQK33667107 = 47609262;    float MbbdxiKgRsRrgUnTCrClMQK19616629 = -644361703;    float MbbdxiKgRsRrgUnTCrClMQK8915560 = 42373529;    float MbbdxiKgRsRrgUnTCrClMQK82272326 = -787733363;    float MbbdxiKgRsRrgUnTCrClMQK69466627 = -456601831;    float MbbdxiKgRsRrgUnTCrClMQK13449762 = -927713355;    float MbbdxiKgRsRrgUnTCrClMQK37740431 = -537565193;    float MbbdxiKgRsRrgUnTCrClMQK82874860 = 95947265;    float MbbdxiKgRsRrgUnTCrClMQK73316004 = -515021789;    float MbbdxiKgRsRrgUnTCrClMQK1332123 = 31690638;    float MbbdxiKgRsRrgUnTCrClMQK40837022 = -150954831;    float MbbdxiKgRsRrgUnTCrClMQK65358013 = -819676893;    float MbbdxiKgRsRrgUnTCrClMQK98737344 = -487234000;    float MbbdxiKgRsRrgUnTCrClMQK77716790 = -902168342;    float MbbdxiKgRsRrgUnTCrClMQK99091104 = -608364652;    float MbbdxiKgRsRrgUnTCrClMQK90028787 = -398406210;    float MbbdxiKgRsRrgUnTCrClMQK41918475 = -741222340;    float MbbdxiKgRsRrgUnTCrClMQK43457256 = -332084149;    float MbbdxiKgRsRrgUnTCrClMQK24782541 = -697840516;    float MbbdxiKgRsRrgUnTCrClMQK52675144 = -918421380;    float MbbdxiKgRsRrgUnTCrClMQK34174953 = -600256808;    float MbbdxiKgRsRrgUnTCrClMQK33122884 = -985878138;    float MbbdxiKgRsRrgUnTCrClMQK58007836 = -282640257;    float MbbdxiKgRsRrgUnTCrClMQK87572446 = -905156813;    float MbbdxiKgRsRrgUnTCrClMQK36720753 = -911162471;    float MbbdxiKgRsRrgUnTCrClMQK14463096 = -356639663;    float MbbdxiKgRsRrgUnTCrClMQK73208992 = -462535925;    float MbbdxiKgRsRrgUnTCrClMQK78145691 = -894854699;    float MbbdxiKgRsRrgUnTCrClMQK17570780 = -182842384;    float MbbdxiKgRsRrgUnTCrClMQK62516055 = -640054313;    float MbbdxiKgRsRrgUnTCrClMQK67480803 = -774228791;    float MbbdxiKgRsRrgUnTCrClMQK66771357 = -731669695;    float MbbdxiKgRsRrgUnTCrClMQK60532253 = -270974472;    float MbbdxiKgRsRrgUnTCrClMQK36005322 = -604558101;    float MbbdxiKgRsRrgUnTCrClMQK84819452 = -544373612;    float MbbdxiKgRsRrgUnTCrClMQK76311879 = -42234792;    float MbbdxiKgRsRrgUnTCrClMQK26442299 = -1318856;    float MbbdxiKgRsRrgUnTCrClMQK69304839 = -815502155;    float MbbdxiKgRsRrgUnTCrClMQK44451062 = -392969138;    float MbbdxiKgRsRrgUnTCrClMQK95368127 = -155646683;    float MbbdxiKgRsRrgUnTCrClMQK39773775 = -71648916;    float MbbdxiKgRsRrgUnTCrClMQK89477188 = -892589570;     MbbdxiKgRsRrgUnTCrClMQK87428953 = MbbdxiKgRsRrgUnTCrClMQK39854793;     MbbdxiKgRsRrgUnTCrClMQK39854793 = MbbdxiKgRsRrgUnTCrClMQK79189776;     MbbdxiKgRsRrgUnTCrClMQK79189776 = MbbdxiKgRsRrgUnTCrClMQK49870580;     MbbdxiKgRsRrgUnTCrClMQK49870580 = MbbdxiKgRsRrgUnTCrClMQK91748641;     MbbdxiKgRsRrgUnTCrClMQK91748641 = MbbdxiKgRsRrgUnTCrClMQK50169451;     MbbdxiKgRsRrgUnTCrClMQK50169451 = MbbdxiKgRsRrgUnTCrClMQK84414059;     MbbdxiKgRsRrgUnTCrClMQK84414059 = MbbdxiKgRsRrgUnTCrClMQK77729844;     MbbdxiKgRsRrgUnTCrClMQK77729844 = MbbdxiKgRsRrgUnTCrClMQK52034111;     MbbdxiKgRsRrgUnTCrClMQK52034111 = MbbdxiKgRsRrgUnTCrClMQK57053420;     MbbdxiKgRsRrgUnTCrClMQK57053420 = MbbdxiKgRsRrgUnTCrClMQK3460749;     MbbdxiKgRsRrgUnTCrClMQK3460749 = MbbdxiKgRsRrgUnTCrClMQK56935683;     MbbdxiKgRsRrgUnTCrClMQK56935683 = MbbdxiKgRsRrgUnTCrClMQK53315903;     MbbdxiKgRsRrgUnTCrClMQK53315903 = MbbdxiKgRsRrgUnTCrClMQK61436904;     MbbdxiKgRsRrgUnTCrClMQK61436904 = MbbdxiKgRsRrgUnTCrClMQK35555709;     MbbdxiKgRsRrgUnTCrClMQK35555709 = MbbdxiKgRsRrgUnTCrClMQK7405442;     MbbdxiKgRsRrgUnTCrClMQK7405442 = MbbdxiKgRsRrgUnTCrClMQK96203349;     MbbdxiKgRsRrgUnTCrClMQK96203349 = MbbdxiKgRsRrgUnTCrClMQK95019612;     MbbdxiKgRsRrgUnTCrClMQK95019612 = MbbdxiKgRsRrgUnTCrClMQK25386646;     MbbdxiKgRsRrgUnTCrClMQK25386646 = MbbdxiKgRsRrgUnTCrClMQK93495640;     MbbdxiKgRsRrgUnTCrClMQK93495640 = MbbdxiKgRsRrgUnTCrClMQK57374946;     MbbdxiKgRsRrgUnTCrClMQK57374946 = MbbdxiKgRsRrgUnTCrClMQK33600430;     MbbdxiKgRsRrgUnTCrClMQK33600430 = MbbdxiKgRsRrgUnTCrClMQK30189351;     MbbdxiKgRsRrgUnTCrClMQK30189351 = MbbdxiKgRsRrgUnTCrClMQK6527002;     MbbdxiKgRsRrgUnTCrClMQK6527002 = MbbdxiKgRsRrgUnTCrClMQK16203473;     MbbdxiKgRsRrgUnTCrClMQK16203473 = MbbdxiKgRsRrgUnTCrClMQK72132012;     MbbdxiKgRsRrgUnTCrClMQK72132012 = MbbdxiKgRsRrgUnTCrClMQK41253892;     MbbdxiKgRsRrgUnTCrClMQK41253892 = MbbdxiKgRsRrgUnTCrClMQK2141733;     MbbdxiKgRsRrgUnTCrClMQK2141733 = MbbdxiKgRsRrgUnTCrClMQK8263217;     MbbdxiKgRsRrgUnTCrClMQK8263217 = MbbdxiKgRsRrgUnTCrClMQK38584349;     MbbdxiKgRsRrgUnTCrClMQK38584349 = MbbdxiKgRsRrgUnTCrClMQK19312989;     MbbdxiKgRsRrgUnTCrClMQK19312989 = MbbdxiKgRsRrgUnTCrClMQK20585889;     MbbdxiKgRsRrgUnTCrClMQK20585889 = MbbdxiKgRsRrgUnTCrClMQK83619679;     MbbdxiKgRsRrgUnTCrClMQK83619679 = MbbdxiKgRsRrgUnTCrClMQK51983781;     MbbdxiKgRsRrgUnTCrClMQK51983781 = MbbdxiKgRsRrgUnTCrClMQK20599882;     MbbdxiKgRsRrgUnTCrClMQK20599882 = MbbdxiKgRsRrgUnTCrClMQK70197695;     MbbdxiKgRsRrgUnTCrClMQK70197695 = MbbdxiKgRsRrgUnTCrClMQK8668097;     MbbdxiKgRsRrgUnTCrClMQK8668097 = MbbdxiKgRsRrgUnTCrClMQK18486560;     MbbdxiKgRsRrgUnTCrClMQK18486560 = MbbdxiKgRsRrgUnTCrClMQK95928507;     MbbdxiKgRsRrgUnTCrClMQK95928507 = MbbdxiKgRsRrgUnTCrClMQK35357858;     MbbdxiKgRsRrgUnTCrClMQK35357858 = MbbdxiKgRsRrgUnTCrClMQK51577165;     MbbdxiKgRsRrgUnTCrClMQK51577165 = MbbdxiKgRsRrgUnTCrClMQK13917690;     MbbdxiKgRsRrgUnTCrClMQK13917690 = MbbdxiKgRsRrgUnTCrClMQK8817889;     MbbdxiKgRsRrgUnTCrClMQK8817889 = MbbdxiKgRsRrgUnTCrClMQK77514206;     MbbdxiKgRsRrgUnTCrClMQK77514206 = MbbdxiKgRsRrgUnTCrClMQK72352049;     MbbdxiKgRsRrgUnTCrClMQK72352049 = MbbdxiKgRsRrgUnTCrClMQK83080589;     MbbdxiKgRsRrgUnTCrClMQK83080589 = MbbdxiKgRsRrgUnTCrClMQK14124177;     MbbdxiKgRsRrgUnTCrClMQK14124177 = MbbdxiKgRsRrgUnTCrClMQK53681445;     MbbdxiKgRsRrgUnTCrClMQK53681445 = MbbdxiKgRsRrgUnTCrClMQK65420980;     MbbdxiKgRsRrgUnTCrClMQK65420980 = MbbdxiKgRsRrgUnTCrClMQK93800121;     MbbdxiKgRsRrgUnTCrClMQK93800121 = MbbdxiKgRsRrgUnTCrClMQK65375357;     MbbdxiKgRsRrgUnTCrClMQK65375357 = MbbdxiKgRsRrgUnTCrClMQK41167297;     MbbdxiKgRsRrgUnTCrClMQK41167297 = MbbdxiKgRsRrgUnTCrClMQK3015110;     MbbdxiKgRsRrgUnTCrClMQK3015110 = MbbdxiKgRsRrgUnTCrClMQK21103624;     MbbdxiKgRsRrgUnTCrClMQK21103624 = MbbdxiKgRsRrgUnTCrClMQK84502978;     MbbdxiKgRsRrgUnTCrClMQK84502978 = MbbdxiKgRsRrgUnTCrClMQK53828524;     MbbdxiKgRsRrgUnTCrClMQK53828524 = MbbdxiKgRsRrgUnTCrClMQK9665443;     MbbdxiKgRsRrgUnTCrClMQK9665443 = MbbdxiKgRsRrgUnTCrClMQK72662774;     MbbdxiKgRsRrgUnTCrClMQK72662774 = MbbdxiKgRsRrgUnTCrClMQK33667107;     MbbdxiKgRsRrgUnTCrClMQK33667107 = MbbdxiKgRsRrgUnTCrClMQK19616629;     MbbdxiKgRsRrgUnTCrClMQK19616629 = MbbdxiKgRsRrgUnTCrClMQK8915560;     MbbdxiKgRsRrgUnTCrClMQK8915560 = MbbdxiKgRsRrgUnTCrClMQK82272326;     MbbdxiKgRsRrgUnTCrClMQK82272326 = MbbdxiKgRsRrgUnTCrClMQK69466627;     MbbdxiKgRsRrgUnTCrClMQK69466627 = MbbdxiKgRsRrgUnTCrClMQK13449762;     MbbdxiKgRsRrgUnTCrClMQK13449762 = MbbdxiKgRsRrgUnTCrClMQK37740431;     MbbdxiKgRsRrgUnTCrClMQK37740431 = MbbdxiKgRsRrgUnTCrClMQK82874860;     MbbdxiKgRsRrgUnTCrClMQK82874860 = MbbdxiKgRsRrgUnTCrClMQK73316004;     MbbdxiKgRsRrgUnTCrClMQK73316004 = MbbdxiKgRsRrgUnTCrClMQK1332123;     MbbdxiKgRsRrgUnTCrClMQK1332123 = MbbdxiKgRsRrgUnTCrClMQK40837022;     MbbdxiKgRsRrgUnTCrClMQK40837022 = MbbdxiKgRsRrgUnTCrClMQK65358013;     MbbdxiKgRsRrgUnTCrClMQK65358013 = MbbdxiKgRsRrgUnTCrClMQK98737344;     MbbdxiKgRsRrgUnTCrClMQK98737344 = MbbdxiKgRsRrgUnTCrClMQK77716790;     MbbdxiKgRsRrgUnTCrClMQK77716790 = MbbdxiKgRsRrgUnTCrClMQK99091104;     MbbdxiKgRsRrgUnTCrClMQK99091104 = MbbdxiKgRsRrgUnTCrClMQK90028787;     MbbdxiKgRsRrgUnTCrClMQK90028787 = MbbdxiKgRsRrgUnTCrClMQK41918475;     MbbdxiKgRsRrgUnTCrClMQK41918475 = MbbdxiKgRsRrgUnTCrClMQK43457256;     MbbdxiKgRsRrgUnTCrClMQK43457256 = MbbdxiKgRsRrgUnTCrClMQK24782541;     MbbdxiKgRsRrgUnTCrClMQK24782541 = MbbdxiKgRsRrgUnTCrClMQK52675144;     MbbdxiKgRsRrgUnTCrClMQK52675144 = MbbdxiKgRsRrgUnTCrClMQK34174953;     MbbdxiKgRsRrgUnTCrClMQK34174953 = MbbdxiKgRsRrgUnTCrClMQK33122884;     MbbdxiKgRsRrgUnTCrClMQK33122884 = MbbdxiKgRsRrgUnTCrClMQK58007836;     MbbdxiKgRsRrgUnTCrClMQK58007836 = MbbdxiKgRsRrgUnTCrClMQK87572446;     MbbdxiKgRsRrgUnTCrClMQK87572446 = MbbdxiKgRsRrgUnTCrClMQK36720753;     MbbdxiKgRsRrgUnTCrClMQK36720753 = MbbdxiKgRsRrgUnTCrClMQK14463096;     MbbdxiKgRsRrgUnTCrClMQK14463096 = MbbdxiKgRsRrgUnTCrClMQK73208992;     MbbdxiKgRsRrgUnTCrClMQK73208992 = MbbdxiKgRsRrgUnTCrClMQK78145691;     MbbdxiKgRsRrgUnTCrClMQK78145691 = MbbdxiKgRsRrgUnTCrClMQK17570780;     MbbdxiKgRsRrgUnTCrClMQK17570780 = MbbdxiKgRsRrgUnTCrClMQK62516055;     MbbdxiKgRsRrgUnTCrClMQK62516055 = MbbdxiKgRsRrgUnTCrClMQK67480803;     MbbdxiKgRsRrgUnTCrClMQK67480803 = MbbdxiKgRsRrgUnTCrClMQK66771357;     MbbdxiKgRsRrgUnTCrClMQK66771357 = MbbdxiKgRsRrgUnTCrClMQK60532253;     MbbdxiKgRsRrgUnTCrClMQK60532253 = MbbdxiKgRsRrgUnTCrClMQK36005322;     MbbdxiKgRsRrgUnTCrClMQK36005322 = MbbdxiKgRsRrgUnTCrClMQK84819452;     MbbdxiKgRsRrgUnTCrClMQK84819452 = MbbdxiKgRsRrgUnTCrClMQK76311879;     MbbdxiKgRsRrgUnTCrClMQK76311879 = MbbdxiKgRsRrgUnTCrClMQK26442299;     MbbdxiKgRsRrgUnTCrClMQK26442299 = MbbdxiKgRsRrgUnTCrClMQK69304839;     MbbdxiKgRsRrgUnTCrClMQK69304839 = MbbdxiKgRsRrgUnTCrClMQK44451062;     MbbdxiKgRsRrgUnTCrClMQK44451062 = MbbdxiKgRsRrgUnTCrClMQK95368127;     MbbdxiKgRsRrgUnTCrClMQK95368127 = MbbdxiKgRsRrgUnTCrClMQK39773775;     MbbdxiKgRsRrgUnTCrClMQK39773775 = MbbdxiKgRsRrgUnTCrClMQK89477188;     MbbdxiKgRsRrgUnTCrClMQK89477188 = MbbdxiKgRsRrgUnTCrClMQK87428953;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void qqAqVnDfiXdzQUvRBDpOzVPSmMXqSBwbKnxxtcGsL24106686() {     float fzVpgnfSfgRjIEUahEJPNNg39164404 = 91155597;    float fzVpgnfSfgRjIEUahEJPNNg55528775 = -936187163;    float fzVpgnfSfgRjIEUahEJPNNg27990136 = -656070727;    float fzVpgnfSfgRjIEUahEJPNNg24945982 = -815576514;    float fzVpgnfSfgRjIEUahEJPNNg68472574 = -761960111;    float fzVpgnfSfgRjIEUahEJPNNg75052805 = -194782988;    float fzVpgnfSfgRjIEUahEJPNNg58190902 = -360373477;    float fzVpgnfSfgRjIEUahEJPNNg96521322 = -980930012;    float fzVpgnfSfgRjIEUahEJPNNg3332188 = 80187929;    float fzVpgnfSfgRjIEUahEJPNNg25850544 = 9856958;    float fzVpgnfSfgRjIEUahEJPNNg98753447 = -642216655;    float fzVpgnfSfgRjIEUahEJPNNg67292061 = -308088224;    float fzVpgnfSfgRjIEUahEJPNNg40496697 = -185814220;    float fzVpgnfSfgRjIEUahEJPNNg20204623 = -620694089;    float fzVpgnfSfgRjIEUahEJPNNg89570966 = -900030994;    float fzVpgnfSfgRjIEUahEJPNNg19132714 = -476909707;    float fzVpgnfSfgRjIEUahEJPNNg52173875 = -867027381;    float fzVpgnfSfgRjIEUahEJPNNg80702534 = -857537641;    float fzVpgnfSfgRjIEUahEJPNNg84960494 = 14734281;    float fzVpgnfSfgRjIEUahEJPNNg13225215 = -54726006;    float fzVpgnfSfgRjIEUahEJPNNg3122299 = -364463284;    float fzVpgnfSfgRjIEUahEJPNNg36019883 = 45318440;    float fzVpgnfSfgRjIEUahEJPNNg31538865 = -235872935;    float fzVpgnfSfgRjIEUahEJPNNg99177251 = -56869643;    float fzVpgnfSfgRjIEUahEJPNNg87619331 = -892571071;    float fzVpgnfSfgRjIEUahEJPNNg29837427 = -655557533;    float fzVpgnfSfgRjIEUahEJPNNg80082526 = -440538008;    float fzVpgnfSfgRjIEUahEJPNNg270958 = -32759204;    float fzVpgnfSfgRjIEUahEJPNNg83013289 = -350447529;    float fzVpgnfSfgRjIEUahEJPNNg8569433 = -663150802;    float fzVpgnfSfgRjIEUahEJPNNg56531797 = -243814334;    float fzVpgnfSfgRjIEUahEJPNNg33615619 = 99784358;    float fzVpgnfSfgRjIEUahEJPNNg81712988 = -340466821;    float fzVpgnfSfgRjIEUahEJPNNg46007493 = -168921764;    float fzVpgnfSfgRjIEUahEJPNNg18805010 = -959868355;    float fzVpgnfSfgRjIEUahEJPNNg51897305 = -738795221;    float fzVpgnfSfgRjIEUahEJPNNg58316323 = -822346496;    float fzVpgnfSfgRjIEUahEJPNNg19320172 = -680276714;    float fzVpgnfSfgRjIEUahEJPNNg65703350 = -131913890;    float fzVpgnfSfgRjIEUahEJPNNg60440275 = -677560994;    float fzVpgnfSfgRjIEUahEJPNNg20261253 = -722394306;    float fzVpgnfSfgRjIEUahEJPNNg73943090 = -938090590;    float fzVpgnfSfgRjIEUahEJPNNg65401121 = 15863431;    float fzVpgnfSfgRjIEUahEJPNNg70450025 = -634602786;    float fzVpgnfSfgRjIEUahEJPNNg44381257 = -85517967;    float fzVpgnfSfgRjIEUahEJPNNg84775036 = -284930437;    float fzVpgnfSfgRjIEUahEJPNNg290371 = -389647952;    float fzVpgnfSfgRjIEUahEJPNNg32665910 = -477377174;    float fzVpgnfSfgRjIEUahEJPNNg54439432 = -802218777;    float fzVpgnfSfgRjIEUahEJPNNg82456380 = -802920345;    float fzVpgnfSfgRjIEUahEJPNNg6055250 = -447218237;    float fzVpgnfSfgRjIEUahEJPNNg73147050 = -477676729;    float fzVpgnfSfgRjIEUahEJPNNg26253856 = -137712254;    float fzVpgnfSfgRjIEUahEJPNNg91162864 = -832829934;    float fzVpgnfSfgRjIEUahEJPNNg20984387 = -763859008;    float fzVpgnfSfgRjIEUahEJPNNg3144522 = -954162843;    float fzVpgnfSfgRjIEUahEJPNNg23989911 = -600314229;    float fzVpgnfSfgRjIEUahEJPNNg28812884 = -499201085;    float fzVpgnfSfgRjIEUahEJPNNg37326651 = -923005444;    float fzVpgnfSfgRjIEUahEJPNNg38635148 = -6402578;    float fzVpgnfSfgRjIEUahEJPNNg94970279 = -754244980;    float fzVpgnfSfgRjIEUahEJPNNg57919945 = -227614274;    float fzVpgnfSfgRjIEUahEJPNNg13508033 = -530482483;    float fzVpgnfSfgRjIEUahEJPNNg94762754 = -256661269;    float fzVpgnfSfgRjIEUahEJPNNg69318746 = -746328709;    float fzVpgnfSfgRjIEUahEJPNNg65137829 = -642001014;    float fzVpgnfSfgRjIEUahEJPNNg85579073 = -967621403;    float fzVpgnfSfgRjIEUahEJPNNg94489203 = 83107543;    float fzVpgnfSfgRjIEUahEJPNNg1399613 = -660825735;    float fzVpgnfSfgRjIEUahEJPNNg37673661 = -61235774;    float fzVpgnfSfgRjIEUahEJPNNg60816390 = -654563211;    float fzVpgnfSfgRjIEUahEJPNNg32853703 = -86750668;    float fzVpgnfSfgRjIEUahEJPNNg14999185 = -625623752;    float fzVpgnfSfgRjIEUahEJPNNg24520220 = -307704726;    float fzVpgnfSfgRjIEUahEJPNNg92963962 = -332331701;    float fzVpgnfSfgRjIEUahEJPNNg29179209 = -426372695;    float fzVpgnfSfgRjIEUahEJPNNg70618762 = -970544992;    float fzVpgnfSfgRjIEUahEJPNNg61088840 = -601270149;    float fzVpgnfSfgRjIEUahEJPNNg54795995 = -971351676;    float fzVpgnfSfgRjIEUahEJPNNg2844295 = -507640634;    float fzVpgnfSfgRjIEUahEJPNNg29547056 = -165909582;    float fzVpgnfSfgRjIEUahEJPNNg47416616 = -963160835;    float fzVpgnfSfgRjIEUahEJPNNg45831525 = -230540428;    float fzVpgnfSfgRjIEUahEJPNNg556910 = -547527185;    float fzVpgnfSfgRjIEUahEJPNNg2514184 = -115932565;    float fzVpgnfSfgRjIEUahEJPNNg83384747 = -766137605;    float fzVpgnfSfgRjIEUahEJPNNg7361764 = -762503388;    float fzVpgnfSfgRjIEUahEJPNNg90550123 = -507636887;    float fzVpgnfSfgRjIEUahEJPNNg25023107 = -405062756;    float fzVpgnfSfgRjIEUahEJPNNg15660489 = 94294487;    float fzVpgnfSfgRjIEUahEJPNNg27907395 = -38480992;    float fzVpgnfSfgRjIEUahEJPNNg29503439 = -223145412;    float fzVpgnfSfgRjIEUahEJPNNg81993521 = -757271271;    float fzVpgnfSfgRjIEUahEJPNNg27068203 = -25511312;    float fzVpgnfSfgRjIEUahEJPNNg65469995 = -923316014;    float fzVpgnfSfgRjIEUahEJPNNg62341307 = -394780033;    float fzVpgnfSfgRjIEUahEJPNNg60435057 = -307608107;    float fzVpgnfSfgRjIEUahEJPNNg70638366 = -727475300;    float fzVpgnfSfgRjIEUahEJPNNg1131279 = -888274078;    float fzVpgnfSfgRjIEUahEJPNNg79243428 = 91155597;     fzVpgnfSfgRjIEUahEJPNNg39164404 = fzVpgnfSfgRjIEUahEJPNNg55528775;     fzVpgnfSfgRjIEUahEJPNNg55528775 = fzVpgnfSfgRjIEUahEJPNNg27990136;     fzVpgnfSfgRjIEUahEJPNNg27990136 = fzVpgnfSfgRjIEUahEJPNNg24945982;     fzVpgnfSfgRjIEUahEJPNNg24945982 = fzVpgnfSfgRjIEUahEJPNNg68472574;     fzVpgnfSfgRjIEUahEJPNNg68472574 = fzVpgnfSfgRjIEUahEJPNNg75052805;     fzVpgnfSfgRjIEUahEJPNNg75052805 = fzVpgnfSfgRjIEUahEJPNNg58190902;     fzVpgnfSfgRjIEUahEJPNNg58190902 = fzVpgnfSfgRjIEUahEJPNNg96521322;     fzVpgnfSfgRjIEUahEJPNNg96521322 = fzVpgnfSfgRjIEUahEJPNNg3332188;     fzVpgnfSfgRjIEUahEJPNNg3332188 = fzVpgnfSfgRjIEUahEJPNNg25850544;     fzVpgnfSfgRjIEUahEJPNNg25850544 = fzVpgnfSfgRjIEUahEJPNNg98753447;     fzVpgnfSfgRjIEUahEJPNNg98753447 = fzVpgnfSfgRjIEUahEJPNNg67292061;     fzVpgnfSfgRjIEUahEJPNNg67292061 = fzVpgnfSfgRjIEUahEJPNNg40496697;     fzVpgnfSfgRjIEUahEJPNNg40496697 = fzVpgnfSfgRjIEUahEJPNNg20204623;     fzVpgnfSfgRjIEUahEJPNNg20204623 = fzVpgnfSfgRjIEUahEJPNNg89570966;     fzVpgnfSfgRjIEUahEJPNNg89570966 = fzVpgnfSfgRjIEUahEJPNNg19132714;     fzVpgnfSfgRjIEUahEJPNNg19132714 = fzVpgnfSfgRjIEUahEJPNNg52173875;     fzVpgnfSfgRjIEUahEJPNNg52173875 = fzVpgnfSfgRjIEUahEJPNNg80702534;     fzVpgnfSfgRjIEUahEJPNNg80702534 = fzVpgnfSfgRjIEUahEJPNNg84960494;     fzVpgnfSfgRjIEUahEJPNNg84960494 = fzVpgnfSfgRjIEUahEJPNNg13225215;     fzVpgnfSfgRjIEUahEJPNNg13225215 = fzVpgnfSfgRjIEUahEJPNNg3122299;     fzVpgnfSfgRjIEUahEJPNNg3122299 = fzVpgnfSfgRjIEUahEJPNNg36019883;     fzVpgnfSfgRjIEUahEJPNNg36019883 = fzVpgnfSfgRjIEUahEJPNNg31538865;     fzVpgnfSfgRjIEUahEJPNNg31538865 = fzVpgnfSfgRjIEUahEJPNNg99177251;     fzVpgnfSfgRjIEUahEJPNNg99177251 = fzVpgnfSfgRjIEUahEJPNNg87619331;     fzVpgnfSfgRjIEUahEJPNNg87619331 = fzVpgnfSfgRjIEUahEJPNNg29837427;     fzVpgnfSfgRjIEUahEJPNNg29837427 = fzVpgnfSfgRjIEUahEJPNNg80082526;     fzVpgnfSfgRjIEUahEJPNNg80082526 = fzVpgnfSfgRjIEUahEJPNNg270958;     fzVpgnfSfgRjIEUahEJPNNg270958 = fzVpgnfSfgRjIEUahEJPNNg83013289;     fzVpgnfSfgRjIEUahEJPNNg83013289 = fzVpgnfSfgRjIEUahEJPNNg8569433;     fzVpgnfSfgRjIEUahEJPNNg8569433 = fzVpgnfSfgRjIEUahEJPNNg56531797;     fzVpgnfSfgRjIEUahEJPNNg56531797 = fzVpgnfSfgRjIEUahEJPNNg33615619;     fzVpgnfSfgRjIEUahEJPNNg33615619 = fzVpgnfSfgRjIEUahEJPNNg81712988;     fzVpgnfSfgRjIEUahEJPNNg81712988 = fzVpgnfSfgRjIEUahEJPNNg46007493;     fzVpgnfSfgRjIEUahEJPNNg46007493 = fzVpgnfSfgRjIEUahEJPNNg18805010;     fzVpgnfSfgRjIEUahEJPNNg18805010 = fzVpgnfSfgRjIEUahEJPNNg51897305;     fzVpgnfSfgRjIEUahEJPNNg51897305 = fzVpgnfSfgRjIEUahEJPNNg58316323;     fzVpgnfSfgRjIEUahEJPNNg58316323 = fzVpgnfSfgRjIEUahEJPNNg19320172;     fzVpgnfSfgRjIEUahEJPNNg19320172 = fzVpgnfSfgRjIEUahEJPNNg65703350;     fzVpgnfSfgRjIEUahEJPNNg65703350 = fzVpgnfSfgRjIEUahEJPNNg60440275;     fzVpgnfSfgRjIEUahEJPNNg60440275 = fzVpgnfSfgRjIEUahEJPNNg20261253;     fzVpgnfSfgRjIEUahEJPNNg20261253 = fzVpgnfSfgRjIEUahEJPNNg73943090;     fzVpgnfSfgRjIEUahEJPNNg73943090 = fzVpgnfSfgRjIEUahEJPNNg65401121;     fzVpgnfSfgRjIEUahEJPNNg65401121 = fzVpgnfSfgRjIEUahEJPNNg70450025;     fzVpgnfSfgRjIEUahEJPNNg70450025 = fzVpgnfSfgRjIEUahEJPNNg44381257;     fzVpgnfSfgRjIEUahEJPNNg44381257 = fzVpgnfSfgRjIEUahEJPNNg84775036;     fzVpgnfSfgRjIEUahEJPNNg84775036 = fzVpgnfSfgRjIEUahEJPNNg290371;     fzVpgnfSfgRjIEUahEJPNNg290371 = fzVpgnfSfgRjIEUahEJPNNg32665910;     fzVpgnfSfgRjIEUahEJPNNg32665910 = fzVpgnfSfgRjIEUahEJPNNg54439432;     fzVpgnfSfgRjIEUahEJPNNg54439432 = fzVpgnfSfgRjIEUahEJPNNg82456380;     fzVpgnfSfgRjIEUahEJPNNg82456380 = fzVpgnfSfgRjIEUahEJPNNg6055250;     fzVpgnfSfgRjIEUahEJPNNg6055250 = fzVpgnfSfgRjIEUahEJPNNg73147050;     fzVpgnfSfgRjIEUahEJPNNg73147050 = fzVpgnfSfgRjIEUahEJPNNg26253856;     fzVpgnfSfgRjIEUahEJPNNg26253856 = fzVpgnfSfgRjIEUahEJPNNg91162864;     fzVpgnfSfgRjIEUahEJPNNg91162864 = fzVpgnfSfgRjIEUahEJPNNg20984387;     fzVpgnfSfgRjIEUahEJPNNg20984387 = fzVpgnfSfgRjIEUahEJPNNg3144522;     fzVpgnfSfgRjIEUahEJPNNg3144522 = fzVpgnfSfgRjIEUahEJPNNg23989911;     fzVpgnfSfgRjIEUahEJPNNg23989911 = fzVpgnfSfgRjIEUahEJPNNg28812884;     fzVpgnfSfgRjIEUahEJPNNg28812884 = fzVpgnfSfgRjIEUahEJPNNg37326651;     fzVpgnfSfgRjIEUahEJPNNg37326651 = fzVpgnfSfgRjIEUahEJPNNg38635148;     fzVpgnfSfgRjIEUahEJPNNg38635148 = fzVpgnfSfgRjIEUahEJPNNg94970279;     fzVpgnfSfgRjIEUahEJPNNg94970279 = fzVpgnfSfgRjIEUahEJPNNg57919945;     fzVpgnfSfgRjIEUahEJPNNg57919945 = fzVpgnfSfgRjIEUahEJPNNg13508033;     fzVpgnfSfgRjIEUahEJPNNg13508033 = fzVpgnfSfgRjIEUahEJPNNg94762754;     fzVpgnfSfgRjIEUahEJPNNg94762754 = fzVpgnfSfgRjIEUahEJPNNg69318746;     fzVpgnfSfgRjIEUahEJPNNg69318746 = fzVpgnfSfgRjIEUahEJPNNg65137829;     fzVpgnfSfgRjIEUahEJPNNg65137829 = fzVpgnfSfgRjIEUahEJPNNg85579073;     fzVpgnfSfgRjIEUahEJPNNg85579073 = fzVpgnfSfgRjIEUahEJPNNg94489203;     fzVpgnfSfgRjIEUahEJPNNg94489203 = fzVpgnfSfgRjIEUahEJPNNg1399613;     fzVpgnfSfgRjIEUahEJPNNg1399613 = fzVpgnfSfgRjIEUahEJPNNg37673661;     fzVpgnfSfgRjIEUahEJPNNg37673661 = fzVpgnfSfgRjIEUahEJPNNg60816390;     fzVpgnfSfgRjIEUahEJPNNg60816390 = fzVpgnfSfgRjIEUahEJPNNg32853703;     fzVpgnfSfgRjIEUahEJPNNg32853703 = fzVpgnfSfgRjIEUahEJPNNg14999185;     fzVpgnfSfgRjIEUahEJPNNg14999185 = fzVpgnfSfgRjIEUahEJPNNg24520220;     fzVpgnfSfgRjIEUahEJPNNg24520220 = fzVpgnfSfgRjIEUahEJPNNg92963962;     fzVpgnfSfgRjIEUahEJPNNg92963962 = fzVpgnfSfgRjIEUahEJPNNg29179209;     fzVpgnfSfgRjIEUahEJPNNg29179209 = fzVpgnfSfgRjIEUahEJPNNg70618762;     fzVpgnfSfgRjIEUahEJPNNg70618762 = fzVpgnfSfgRjIEUahEJPNNg61088840;     fzVpgnfSfgRjIEUahEJPNNg61088840 = fzVpgnfSfgRjIEUahEJPNNg54795995;     fzVpgnfSfgRjIEUahEJPNNg54795995 = fzVpgnfSfgRjIEUahEJPNNg2844295;     fzVpgnfSfgRjIEUahEJPNNg2844295 = fzVpgnfSfgRjIEUahEJPNNg29547056;     fzVpgnfSfgRjIEUahEJPNNg29547056 = fzVpgnfSfgRjIEUahEJPNNg47416616;     fzVpgnfSfgRjIEUahEJPNNg47416616 = fzVpgnfSfgRjIEUahEJPNNg45831525;     fzVpgnfSfgRjIEUahEJPNNg45831525 = fzVpgnfSfgRjIEUahEJPNNg556910;     fzVpgnfSfgRjIEUahEJPNNg556910 = fzVpgnfSfgRjIEUahEJPNNg2514184;     fzVpgnfSfgRjIEUahEJPNNg2514184 = fzVpgnfSfgRjIEUahEJPNNg83384747;     fzVpgnfSfgRjIEUahEJPNNg83384747 = fzVpgnfSfgRjIEUahEJPNNg7361764;     fzVpgnfSfgRjIEUahEJPNNg7361764 = fzVpgnfSfgRjIEUahEJPNNg90550123;     fzVpgnfSfgRjIEUahEJPNNg90550123 = fzVpgnfSfgRjIEUahEJPNNg25023107;     fzVpgnfSfgRjIEUahEJPNNg25023107 = fzVpgnfSfgRjIEUahEJPNNg15660489;     fzVpgnfSfgRjIEUahEJPNNg15660489 = fzVpgnfSfgRjIEUahEJPNNg27907395;     fzVpgnfSfgRjIEUahEJPNNg27907395 = fzVpgnfSfgRjIEUahEJPNNg29503439;     fzVpgnfSfgRjIEUahEJPNNg29503439 = fzVpgnfSfgRjIEUahEJPNNg81993521;     fzVpgnfSfgRjIEUahEJPNNg81993521 = fzVpgnfSfgRjIEUahEJPNNg27068203;     fzVpgnfSfgRjIEUahEJPNNg27068203 = fzVpgnfSfgRjIEUahEJPNNg65469995;     fzVpgnfSfgRjIEUahEJPNNg65469995 = fzVpgnfSfgRjIEUahEJPNNg62341307;     fzVpgnfSfgRjIEUahEJPNNg62341307 = fzVpgnfSfgRjIEUahEJPNNg60435057;     fzVpgnfSfgRjIEUahEJPNNg60435057 = fzVpgnfSfgRjIEUahEJPNNg70638366;     fzVpgnfSfgRjIEUahEJPNNg70638366 = fzVpgnfSfgRjIEUahEJPNNg1131279;     fzVpgnfSfgRjIEUahEJPNNg1131279 = fzVpgnfSfgRjIEUahEJPNNg79243428;     fzVpgnfSfgRjIEUahEJPNNg79243428 = fzVpgnfSfgRjIEUahEJPNNg39164404;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void QyiALIgrlmWSEEEPJipMbfEkDOQUWwwffIIWXkozM54092916() {     float gpKjULoxvDyelDltywxrLUo61557993 = -770724225;    float gpKjULoxvDyelDltywxrLUo1303960 = -842135093;    float gpKjULoxvDyelDltywxrLUo55446202 = -938595957;    float gpKjULoxvDyelDltywxrLUo54872809 = 98556785;    float gpKjULoxvDyelDltywxrLUo57806726 = -884661791;    float gpKjULoxvDyelDltywxrLUo55130490 = -355958554;    float gpKjULoxvDyelDltywxrLUo81799305 = -477824316;    float gpKjULoxvDyelDltywxrLUo2941131 = -647349339;    float gpKjULoxvDyelDltywxrLUo17755155 = -90362040;    float gpKjULoxvDyelDltywxrLUo20974615 = -96077504;    float gpKjULoxvDyelDltywxrLUo15974702 = -679368984;    float gpKjULoxvDyelDltywxrLUo8903334 = -823355155;    float gpKjULoxvDyelDltywxrLUo75651963 = -782873065;    float gpKjULoxvDyelDltywxrLUo8975155 = -803249795;    float gpKjULoxvDyelDltywxrLUo81134134 = -564795856;    float gpKjULoxvDyelDltywxrLUo88824079 = -525781599;    float gpKjULoxvDyelDltywxrLUo46144467 = -224692631;    float gpKjULoxvDyelDltywxrLUo63678418 = -912208710;    float gpKjULoxvDyelDltywxrLUo5813856 = -602385578;    float gpKjULoxvDyelDltywxrLUo19667735 = -795336009;    float gpKjULoxvDyelDltywxrLUo24335982 = -645484219;    float gpKjULoxvDyelDltywxrLUo21538836 = 50544010;    float gpKjULoxvDyelDltywxrLUo97953791 = 47004315;    float gpKjULoxvDyelDltywxrLUo82026930 = -739941977;    float gpKjULoxvDyelDltywxrLUo94716888 = -87436342;    float gpKjULoxvDyelDltywxrLUo1566345 = -91245829;    float gpKjULoxvDyelDltywxrLUo56950365 = -997324788;    float gpKjULoxvDyelDltywxrLUo70778882 = -312246669;    float gpKjULoxvDyelDltywxrLUo77227403 = -48634333;    float gpKjULoxvDyelDltywxrLUo41636743 = -908015295;    float gpKjULoxvDyelDltywxrLUo67409923 = 61962749;    float gpKjULoxvDyelDltywxrLUo6432953 = -160465235;    float gpKjULoxvDyelDltywxrLUo77299235 = -667866100;    float gpKjULoxvDyelDltywxrLUo5113344 = -616366881;    float gpKjULoxvDyelDltywxrLUo12676337 = -764310853;    float gpKjULoxvDyelDltywxrLUo50761985 = -974424851;    float gpKjULoxvDyelDltywxrLUo39814668 = -455641069;    float gpKjULoxvDyelDltywxrLUo3028594 = -552639507;    float gpKjULoxvDyelDltywxrLUo78697885 = -920278506;    float gpKjULoxvDyelDltywxrLUo8753097 = -104353337;    float gpKjULoxvDyelDltywxrLUo61162956 = -37628073;    float gpKjULoxvDyelDltywxrLUo76753820 = -502207198;    float gpKjULoxvDyelDltywxrLUo10667953 = -412536898;    float gpKjULoxvDyelDltywxrLUo10662246 = 24998008;    float gpKjULoxvDyelDltywxrLUo28346471 = -521402043;    float gpKjULoxvDyelDltywxrLUo52447350 = -655114861;    float gpKjULoxvDyelDltywxrLUo84889975 = -486777582;    float gpKjULoxvDyelDltywxrLUo1881004 = -725150809;    float gpKjULoxvDyelDltywxrLUo30240948 = -88171614;    float gpKjULoxvDyelDltywxrLUo59494703 = -257915717;    float gpKjULoxvDyelDltywxrLUo1665097 = -123739507;    float gpKjULoxvDyelDltywxrLUo32451050 = -526350263;    float gpKjULoxvDyelDltywxrLUo29119911 = 82430524;    float gpKjULoxvDyelDltywxrLUo41199139 = -576590892;    float gpKjULoxvDyelDltywxrLUo29756934 = -47663846;    float gpKjULoxvDyelDltywxrLUo40019157 = -721268235;    float gpKjULoxvDyelDltywxrLUo3350168 = -789139408;    float gpKjULoxvDyelDltywxrLUo73419272 = -98653980;    float gpKjULoxvDyelDltywxrLUo60155921 = -814006874;    float gpKjULoxvDyelDltywxrLUo56240382 = -693415963;    float gpKjULoxvDyelDltywxrLUo98180125 = -358633766;    float gpKjULoxvDyelDltywxrLUo11020423 = -65577648;    float gpKjULoxvDyelDltywxrLUo25713727 = -498715006;    float gpKjULoxvDyelDltywxrLUo76118412 = -182346746;    float gpKjULoxvDyelDltywxrLUo53564691 = -58040253;    float gpKjULoxvDyelDltywxrLUo9541750 = -418903750;    float gpKjULoxvDyelDltywxrLUo31604098 = -55489055;    float gpKjULoxvDyelDltywxrLUo70538620 = -66506185;    float gpKjULoxvDyelDltywxrLUo96298817 = 61061058;    float gpKjULoxvDyelDltywxrLUo30372150 = -590371005;    float gpKjULoxvDyelDltywxrLUo49009411 = 29859470;    float gpKjULoxvDyelDltywxrLUo43115874 = -672053125;    float gpKjULoxvDyelDltywxrLUo84980533 = -991930205;    float gpKjULoxvDyelDltywxrLUo97060759 = -398032242;    float gpKjULoxvDyelDltywxrLUo58504779 = -657707936;    float gpKjULoxvDyelDltywxrLUo47582162 = -43277021;    float gpKjULoxvDyelDltywxrLUo10870883 = -536919092;    float gpKjULoxvDyelDltywxrLUo87291545 = -977993694;    float gpKjULoxvDyelDltywxrLUo53680460 = -118539935;    float gpKjULoxvDyelDltywxrLUo42269539 = -432321481;    float gpKjULoxvDyelDltywxrLUo16676369 = -604468247;    float gpKjULoxvDyelDltywxrLUo55069361 = -172173980;    float gpKjULoxvDyelDltywxrLUo40537935 = -124075056;    float gpKjULoxvDyelDltywxrLUo17732701 = -790718617;    float gpKjULoxvDyelDltywxrLUo39971647 = -684275788;    float gpKjULoxvDyelDltywxrLUo34958874 = -411686989;    float gpKjULoxvDyelDltywxrLUo77313042 = -142895759;    float gpKjULoxvDyelDltywxrLUo36100097 = 8724791;    float gpKjULoxvDyelDltywxrLUo75356409 = -468703036;    float gpKjULoxvDyelDltywxrLUo72657179 = 56957381;    float gpKjULoxvDyelDltywxrLUo47411817 = -85285443;    float gpKjULoxvDyelDltywxrLUo66395396 = -256987089;    float gpKjULoxvDyelDltywxrLUo42872673 = -738632633;    float gpKjULoxvDyelDltywxrLUo22457503 = -126862544;    float gpKjULoxvDyelDltywxrLUo10572972 = -745719571;    float gpKjULoxvDyelDltywxrLUo50142533 = -972050426;    float gpKjULoxvDyelDltywxrLUo51040093 = 96507807;    float gpKjULoxvDyelDltywxrLUo34549541 = -130190153;    float gpKjULoxvDyelDltywxrLUo57097555 = -916961739;    float gpKjULoxvDyelDltywxrLUo18804722 = -770724225;     gpKjULoxvDyelDltywxrLUo61557993 = gpKjULoxvDyelDltywxrLUo1303960;     gpKjULoxvDyelDltywxrLUo1303960 = gpKjULoxvDyelDltywxrLUo55446202;     gpKjULoxvDyelDltywxrLUo55446202 = gpKjULoxvDyelDltywxrLUo54872809;     gpKjULoxvDyelDltywxrLUo54872809 = gpKjULoxvDyelDltywxrLUo57806726;     gpKjULoxvDyelDltywxrLUo57806726 = gpKjULoxvDyelDltywxrLUo55130490;     gpKjULoxvDyelDltywxrLUo55130490 = gpKjULoxvDyelDltywxrLUo81799305;     gpKjULoxvDyelDltywxrLUo81799305 = gpKjULoxvDyelDltywxrLUo2941131;     gpKjULoxvDyelDltywxrLUo2941131 = gpKjULoxvDyelDltywxrLUo17755155;     gpKjULoxvDyelDltywxrLUo17755155 = gpKjULoxvDyelDltywxrLUo20974615;     gpKjULoxvDyelDltywxrLUo20974615 = gpKjULoxvDyelDltywxrLUo15974702;     gpKjULoxvDyelDltywxrLUo15974702 = gpKjULoxvDyelDltywxrLUo8903334;     gpKjULoxvDyelDltywxrLUo8903334 = gpKjULoxvDyelDltywxrLUo75651963;     gpKjULoxvDyelDltywxrLUo75651963 = gpKjULoxvDyelDltywxrLUo8975155;     gpKjULoxvDyelDltywxrLUo8975155 = gpKjULoxvDyelDltywxrLUo81134134;     gpKjULoxvDyelDltywxrLUo81134134 = gpKjULoxvDyelDltywxrLUo88824079;     gpKjULoxvDyelDltywxrLUo88824079 = gpKjULoxvDyelDltywxrLUo46144467;     gpKjULoxvDyelDltywxrLUo46144467 = gpKjULoxvDyelDltywxrLUo63678418;     gpKjULoxvDyelDltywxrLUo63678418 = gpKjULoxvDyelDltywxrLUo5813856;     gpKjULoxvDyelDltywxrLUo5813856 = gpKjULoxvDyelDltywxrLUo19667735;     gpKjULoxvDyelDltywxrLUo19667735 = gpKjULoxvDyelDltywxrLUo24335982;     gpKjULoxvDyelDltywxrLUo24335982 = gpKjULoxvDyelDltywxrLUo21538836;     gpKjULoxvDyelDltywxrLUo21538836 = gpKjULoxvDyelDltywxrLUo97953791;     gpKjULoxvDyelDltywxrLUo97953791 = gpKjULoxvDyelDltywxrLUo82026930;     gpKjULoxvDyelDltywxrLUo82026930 = gpKjULoxvDyelDltywxrLUo94716888;     gpKjULoxvDyelDltywxrLUo94716888 = gpKjULoxvDyelDltywxrLUo1566345;     gpKjULoxvDyelDltywxrLUo1566345 = gpKjULoxvDyelDltywxrLUo56950365;     gpKjULoxvDyelDltywxrLUo56950365 = gpKjULoxvDyelDltywxrLUo70778882;     gpKjULoxvDyelDltywxrLUo70778882 = gpKjULoxvDyelDltywxrLUo77227403;     gpKjULoxvDyelDltywxrLUo77227403 = gpKjULoxvDyelDltywxrLUo41636743;     gpKjULoxvDyelDltywxrLUo41636743 = gpKjULoxvDyelDltywxrLUo67409923;     gpKjULoxvDyelDltywxrLUo67409923 = gpKjULoxvDyelDltywxrLUo6432953;     gpKjULoxvDyelDltywxrLUo6432953 = gpKjULoxvDyelDltywxrLUo77299235;     gpKjULoxvDyelDltywxrLUo77299235 = gpKjULoxvDyelDltywxrLUo5113344;     gpKjULoxvDyelDltywxrLUo5113344 = gpKjULoxvDyelDltywxrLUo12676337;     gpKjULoxvDyelDltywxrLUo12676337 = gpKjULoxvDyelDltywxrLUo50761985;     gpKjULoxvDyelDltywxrLUo50761985 = gpKjULoxvDyelDltywxrLUo39814668;     gpKjULoxvDyelDltywxrLUo39814668 = gpKjULoxvDyelDltywxrLUo3028594;     gpKjULoxvDyelDltywxrLUo3028594 = gpKjULoxvDyelDltywxrLUo78697885;     gpKjULoxvDyelDltywxrLUo78697885 = gpKjULoxvDyelDltywxrLUo8753097;     gpKjULoxvDyelDltywxrLUo8753097 = gpKjULoxvDyelDltywxrLUo61162956;     gpKjULoxvDyelDltywxrLUo61162956 = gpKjULoxvDyelDltywxrLUo76753820;     gpKjULoxvDyelDltywxrLUo76753820 = gpKjULoxvDyelDltywxrLUo10667953;     gpKjULoxvDyelDltywxrLUo10667953 = gpKjULoxvDyelDltywxrLUo10662246;     gpKjULoxvDyelDltywxrLUo10662246 = gpKjULoxvDyelDltywxrLUo28346471;     gpKjULoxvDyelDltywxrLUo28346471 = gpKjULoxvDyelDltywxrLUo52447350;     gpKjULoxvDyelDltywxrLUo52447350 = gpKjULoxvDyelDltywxrLUo84889975;     gpKjULoxvDyelDltywxrLUo84889975 = gpKjULoxvDyelDltywxrLUo1881004;     gpKjULoxvDyelDltywxrLUo1881004 = gpKjULoxvDyelDltywxrLUo30240948;     gpKjULoxvDyelDltywxrLUo30240948 = gpKjULoxvDyelDltywxrLUo59494703;     gpKjULoxvDyelDltywxrLUo59494703 = gpKjULoxvDyelDltywxrLUo1665097;     gpKjULoxvDyelDltywxrLUo1665097 = gpKjULoxvDyelDltywxrLUo32451050;     gpKjULoxvDyelDltywxrLUo32451050 = gpKjULoxvDyelDltywxrLUo29119911;     gpKjULoxvDyelDltywxrLUo29119911 = gpKjULoxvDyelDltywxrLUo41199139;     gpKjULoxvDyelDltywxrLUo41199139 = gpKjULoxvDyelDltywxrLUo29756934;     gpKjULoxvDyelDltywxrLUo29756934 = gpKjULoxvDyelDltywxrLUo40019157;     gpKjULoxvDyelDltywxrLUo40019157 = gpKjULoxvDyelDltywxrLUo3350168;     gpKjULoxvDyelDltywxrLUo3350168 = gpKjULoxvDyelDltywxrLUo73419272;     gpKjULoxvDyelDltywxrLUo73419272 = gpKjULoxvDyelDltywxrLUo60155921;     gpKjULoxvDyelDltywxrLUo60155921 = gpKjULoxvDyelDltywxrLUo56240382;     gpKjULoxvDyelDltywxrLUo56240382 = gpKjULoxvDyelDltywxrLUo98180125;     gpKjULoxvDyelDltywxrLUo98180125 = gpKjULoxvDyelDltywxrLUo11020423;     gpKjULoxvDyelDltywxrLUo11020423 = gpKjULoxvDyelDltywxrLUo25713727;     gpKjULoxvDyelDltywxrLUo25713727 = gpKjULoxvDyelDltywxrLUo76118412;     gpKjULoxvDyelDltywxrLUo76118412 = gpKjULoxvDyelDltywxrLUo53564691;     gpKjULoxvDyelDltywxrLUo53564691 = gpKjULoxvDyelDltywxrLUo9541750;     gpKjULoxvDyelDltywxrLUo9541750 = gpKjULoxvDyelDltywxrLUo31604098;     gpKjULoxvDyelDltywxrLUo31604098 = gpKjULoxvDyelDltywxrLUo70538620;     gpKjULoxvDyelDltywxrLUo70538620 = gpKjULoxvDyelDltywxrLUo96298817;     gpKjULoxvDyelDltywxrLUo96298817 = gpKjULoxvDyelDltywxrLUo30372150;     gpKjULoxvDyelDltywxrLUo30372150 = gpKjULoxvDyelDltywxrLUo49009411;     gpKjULoxvDyelDltywxrLUo49009411 = gpKjULoxvDyelDltywxrLUo43115874;     gpKjULoxvDyelDltywxrLUo43115874 = gpKjULoxvDyelDltywxrLUo84980533;     gpKjULoxvDyelDltywxrLUo84980533 = gpKjULoxvDyelDltywxrLUo97060759;     gpKjULoxvDyelDltywxrLUo97060759 = gpKjULoxvDyelDltywxrLUo58504779;     gpKjULoxvDyelDltywxrLUo58504779 = gpKjULoxvDyelDltywxrLUo47582162;     gpKjULoxvDyelDltywxrLUo47582162 = gpKjULoxvDyelDltywxrLUo10870883;     gpKjULoxvDyelDltywxrLUo10870883 = gpKjULoxvDyelDltywxrLUo87291545;     gpKjULoxvDyelDltywxrLUo87291545 = gpKjULoxvDyelDltywxrLUo53680460;     gpKjULoxvDyelDltywxrLUo53680460 = gpKjULoxvDyelDltywxrLUo42269539;     gpKjULoxvDyelDltywxrLUo42269539 = gpKjULoxvDyelDltywxrLUo16676369;     gpKjULoxvDyelDltywxrLUo16676369 = gpKjULoxvDyelDltywxrLUo55069361;     gpKjULoxvDyelDltywxrLUo55069361 = gpKjULoxvDyelDltywxrLUo40537935;     gpKjULoxvDyelDltywxrLUo40537935 = gpKjULoxvDyelDltywxrLUo17732701;     gpKjULoxvDyelDltywxrLUo17732701 = gpKjULoxvDyelDltywxrLUo39971647;     gpKjULoxvDyelDltywxrLUo39971647 = gpKjULoxvDyelDltywxrLUo34958874;     gpKjULoxvDyelDltywxrLUo34958874 = gpKjULoxvDyelDltywxrLUo77313042;     gpKjULoxvDyelDltywxrLUo77313042 = gpKjULoxvDyelDltywxrLUo36100097;     gpKjULoxvDyelDltywxrLUo36100097 = gpKjULoxvDyelDltywxrLUo75356409;     gpKjULoxvDyelDltywxrLUo75356409 = gpKjULoxvDyelDltywxrLUo72657179;     gpKjULoxvDyelDltywxrLUo72657179 = gpKjULoxvDyelDltywxrLUo47411817;     gpKjULoxvDyelDltywxrLUo47411817 = gpKjULoxvDyelDltywxrLUo66395396;     gpKjULoxvDyelDltywxrLUo66395396 = gpKjULoxvDyelDltywxrLUo42872673;     gpKjULoxvDyelDltywxrLUo42872673 = gpKjULoxvDyelDltywxrLUo22457503;     gpKjULoxvDyelDltywxrLUo22457503 = gpKjULoxvDyelDltywxrLUo10572972;     gpKjULoxvDyelDltywxrLUo10572972 = gpKjULoxvDyelDltywxrLUo50142533;     gpKjULoxvDyelDltywxrLUo50142533 = gpKjULoxvDyelDltywxrLUo51040093;     gpKjULoxvDyelDltywxrLUo51040093 = gpKjULoxvDyelDltywxrLUo34549541;     gpKjULoxvDyelDltywxrLUo34549541 = gpKjULoxvDyelDltywxrLUo57097555;     gpKjULoxvDyelDltywxrLUo57097555 = gpKjULoxvDyelDltywxrLUo18804722;     gpKjULoxvDyelDltywxrLUo18804722 = gpKjULoxvDyelDltywxrLUo61557993;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void EjAEPggaWNRgLJDaEeGblwJgNpXJsOhopXNAzKYqj36321677() {     float zqyWdNJXSFwWDFIaTqaJXiH13293444 = -886979057;    float zqyWdNJXSFwWDFIaTqaJXiH16977943 = -919034848;    float zqyWdNJXSFwWDFIaTqaJXiH4246563 = -735955342;    float zqyWdNJXSFwWDFIaTqaJXiH29948211 = -817712357;    float zqyWdNJXSFwWDFIaTqaJXiH34530659 = -592312445;    float zqyWdNJXSFwWDFIaTqaJXiH80013844 = -514985780;    float zqyWdNJXSFwWDFIaTqaJXiH55576148 = -301035913;    float zqyWdNJXSFwWDFIaTqaJXiH21732609 = -771128893;    float zqyWdNJXSFwWDFIaTqaJXiH69053231 = -981210751;    float zqyWdNJXSFwWDFIaTqaJXiH89771738 = -637723487;    float zqyWdNJXSFwWDFIaTqaJXiH11267401 = -641091456;    float zqyWdNJXSFwWDFIaTqaJXiH19259711 = -758336655;    float zqyWdNJXSFwWDFIaTqaJXiH62832757 = -392053327;    float zqyWdNJXSFwWDFIaTqaJXiH67742873 = -429930342;    float zqyWdNJXSFwWDFIaTqaJXiH35149392 = -42523565;    float zqyWdNJXSFwWDFIaTqaJXiH551352 = -237465554;    float zqyWdNJXSFwWDFIaTqaJXiH2114992 = -592787321;    float zqyWdNJXSFwWDFIaTqaJXiH49361340 = -274785205;    float zqyWdNJXSFwWDFIaTqaJXiH65387705 = -30299761;    float zqyWdNJXSFwWDFIaTqaJXiH39397309 = -505604157;    float zqyWdNJXSFwWDFIaTqaJXiH70083334 = -728292387;    float zqyWdNJXSFwWDFIaTqaJXiH23958290 = -122936998;    float zqyWdNJXSFwWDFIaTqaJXiH99303305 = -661233133;    float zqyWdNJXSFwWDFIaTqaJXiH74677181 = -611533928;    float zqyWdNJXSFwWDFIaTqaJXiH66132747 = -33090779;    float zqyWdNJXSFwWDFIaTqaJXiH59271758 = -436855608;    float zqyWdNJXSFwWDFIaTqaJXiH95778999 = -359733506;    float zqyWdNJXSFwWDFIaTqaJXiH68908107 = -695577355;    float zqyWdNJXSFwWDFIaTqaJXiH51977476 = -98533236;    float zqyWdNJXSFwWDFIaTqaJXiH11621826 = -269916091;    float zqyWdNJXSFwWDFIaTqaJXiH4628733 = -270919718;    float zqyWdNJXSFwWDFIaTqaJXiH19462683 = -484239426;    float zqyWdNJXSFwWDFIaTqaJXiH75392545 = -150247986;    float zqyWdNJXSFwWDFIaTqaJXiH99137055 = -276964047;    float zqyWdNJXSFwWDFIaTqaJXiH10881465 = -981120496;    float zqyWdNJXSFwWDFIaTqaJXiH32461595 = -110593679;    float zqyWdNJXSFwWDFIaTqaJXiH89462893 = 4187;    float zqyWdNJXSFwWDFIaTqaJXiH3862206 = -636151871;    float zqyWdNJXSFwWDFIaTqaJXiH48472727 = -265595901;    float zqyWdNJXSFwWDFIaTqaJXiH33835513 = -722969003;    float zqyWdNJXSFwWDFIaTqaJXiH29847043 = -156786861;    float zqyWdNJXSFwWDFIaTqaJXiH36779221 = -490726820;    float zqyWdNJXSFwWDFIaTqaJXiH67251185 = -313313430;    float zqyWdNJXSFwWDFIaTqaJXiH3598065 = 99609331;    float zqyWdNJXSFwWDFIaTqaJXiH375679 = -21899126;    float zqyWdNJXSFwWDFIaTqaJXiH54141797 = 20993198;    float zqyWdNJXSFwWDFIaTqaJXiH71056169 = -949118036;    float zqyWdNJXSFwWDFIaTqaJXiH80865468 = -29555504;    float zqyWdNJXSFwWDFIaTqaJXiH19259401 = -52124343;    float zqyWdNJXSFwWDFIaTqaJXiH48150962 = -116927098;    float zqyWdNJXSFwWDFIaTqaJXiH42344988 = -932243663;    float zqyWdNJXSFwWDFIaTqaJXiH64430802 = -987949823;    float zqyWdNJXSFwWDFIaTqaJXiH52358656 = -761682664;    float zqyWdNJXSFwWDFIaTqaJXiH11258380 = -191390204;    float zqyWdNJXSFwWDFIaTqaJXiH66238343 = -77427047;    float zqyWdNJXSFwWDFIaTqaJXiH89335154 = -664042060;    float zqyWdNJXSFwWDFIaTqaJXiH17674637 = -157801716;    float zqyWdNJXSFwWDFIaTqaJXiH29569382 = -24421414;    float zqyWdNJXSFwWDFIaTqaJXiH63815464 = -684621579;    float zqyWdNJXSFwWDFIaTqaJXiH75258901 = -55456837;    float zqyWdNJXSFwWDFIaTqaJXiH84234844 = -55252275;    float zqyWdNJXSFwWDFIaTqaJXiH86668041 = -605458558;    float zqyWdNJXSFwWDFIaTqaJXiH69755132 = -572595658;    float zqyWdNJXSFwWDFIaTqaJXiH57431405 = -611294660;    float zqyWdNJXSFwWDFIaTqaJXiH85143006 = -266803769;    float zqyWdNJXSFwWDFIaTqaJXiH91804718 = -56852030;    float zqyWdNJXSFwWDFIaTqaJXiH43867166 = -508088669;    float zqyWdNJXSFwWDFIaTqaJXiH63695701 = -15089280;    float zqyWdNJXSFwWDFIaTqaJXiH56861408 = -448809846;    float zqyWdNJXSFwWDFIaTqaJXiH2687797 = -931929887;    float zqyWdNJXSFwWDFIaTqaJXiH11088458 = -137469742;    float zqyWdNJXSFwWDFIaTqaJXiH98252786 = -956635450;    float zqyWdNJXSFwWDFIaTqaJXiH888613 = 90810695;    float zqyWdNJXSFwWDFIaTqaJXiH31552192 = -307330758;    float zqyWdNJXSFwWDFIaTqaJXiH9550267 = -248817297;    float zqyWdNJXSFwWDFIaTqaJXiH33304114 = -137565568;    float zqyWdNJXSFwWDFIaTqaJXiH56707104 = -809623568;    float zqyWdNJXSFwWDFIaTqaJXiH95705241 = -660842464;    float zqyWdNJXSFwWDFIaTqaJXiH74301502 = -489634803;    float zqyWdNJXSFwWDFIaTqaJXiH11990950 = 45916023;    float zqyWdNJXSFwWDFIaTqaJXiH88215588 = -487737572;    float zqyWdNJXSFwWDFIaTqaJXiH14913532 = -230178002;    float zqyWdNJXSFwWDFIaTqaJXiH49648707 = -543453013;    float zqyWdNJXSFwWDFIaTqaJXiH3826515 = -981606138;    float zqyWdNJXSFwWDFIaTqaJXiH69276838 = -337672428;    float zqyWdNJXSFwWDFIaTqaJXiH40197930 = -282969895;    float zqyWdNJXSFwWDFIaTqaJXiH67104026 = -722556763;    float zqyWdNJXSFwWDFIaTqaJXiH64134165 = -958857783;    float zqyWdNJXSFwWDFIaTqaJXiH32898713 = -99537001;    float zqyWdNJXSFwWDFIaTqaJXiH21546311 = -217078437;    float zqyWdNJXSFwWDFIaTqaJXiH14786959 = -952791964;    float zqyWdNJXSFwWDFIaTqaJXiH59893512 = -975574400;    float zqyWdNJXSFwWDFIaTqaJXiH40046741 = -951530292;    float zqyWdNJXSFwWDFIaTqaJXiH73213826 = -110139064;    float zqyWdNJXSFwWDFIaTqaJXiH49600668 = -567716729;    float zqyWdNJXSFwWDFIaTqaJXiH43179002 = -551328304;    float zqyWdNJXSFwWDFIaTqaJXiH67024088 = -918131162;    float zqyWdNJXSFwWDFIaTqaJXiH9819780 = -702018770;    float zqyWdNJXSFwWDFIaTqaJXiH18455058 = -633586900;    float zqyWdNJXSFwWDFIaTqaJXiH8570961 = -886979057;     zqyWdNJXSFwWDFIaTqaJXiH13293444 = zqyWdNJXSFwWDFIaTqaJXiH16977943;     zqyWdNJXSFwWDFIaTqaJXiH16977943 = zqyWdNJXSFwWDFIaTqaJXiH4246563;     zqyWdNJXSFwWDFIaTqaJXiH4246563 = zqyWdNJXSFwWDFIaTqaJXiH29948211;     zqyWdNJXSFwWDFIaTqaJXiH29948211 = zqyWdNJXSFwWDFIaTqaJXiH34530659;     zqyWdNJXSFwWDFIaTqaJXiH34530659 = zqyWdNJXSFwWDFIaTqaJXiH80013844;     zqyWdNJXSFwWDFIaTqaJXiH80013844 = zqyWdNJXSFwWDFIaTqaJXiH55576148;     zqyWdNJXSFwWDFIaTqaJXiH55576148 = zqyWdNJXSFwWDFIaTqaJXiH21732609;     zqyWdNJXSFwWDFIaTqaJXiH21732609 = zqyWdNJXSFwWDFIaTqaJXiH69053231;     zqyWdNJXSFwWDFIaTqaJXiH69053231 = zqyWdNJXSFwWDFIaTqaJXiH89771738;     zqyWdNJXSFwWDFIaTqaJXiH89771738 = zqyWdNJXSFwWDFIaTqaJXiH11267401;     zqyWdNJXSFwWDFIaTqaJXiH11267401 = zqyWdNJXSFwWDFIaTqaJXiH19259711;     zqyWdNJXSFwWDFIaTqaJXiH19259711 = zqyWdNJXSFwWDFIaTqaJXiH62832757;     zqyWdNJXSFwWDFIaTqaJXiH62832757 = zqyWdNJXSFwWDFIaTqaJXiH67742873;     zqyWdNJXSFwWDFIaTqaJXiH67742873 = zqyWdNJXSFwWDFIaTqaJXiH35149392;     zqyWdNJXSFwWDFIaTqaJXiH35149392 = zqyWdNJXSFwWDFIaTqaJXiH551352;     zqyWdNJXSFwWDFIaTqaJXiH551352 = zqyWdNJXSFwWDFIaTqaJXiH2114992;     zqyWdNJXSFwWDFIaTqaJXiH2114992 = zqyWdNJXSFwWDFIaTqaJXiH49361340;     zqyWdNJXSFwWDFIaTqaJXiH49361340 = zqyWdNJXSFwWDFIaTqaJXiH65387705;     zqyWdNJXSFwWDFIaTqaJXiH65387705 = zqyWdNJXSFwWDFIaTqaJXiH39397309;     zqyWdNJXSFwWDFIaTqaJXiH39397309 = zqyWdNJXSFwWDFIaTqaJXiH70083334;     zqyWdNJXSFwWDFIaTqaJXiH70083334 = zqyWdNJXSFwWDFIaTqaJXiH23958290;     zqyWdNJXSFwWDFIaTqaJXiH23958290 = zqyWdNJXSFwWDFIaTqaJXiH99303305;     zqyWdNJXSFwWDFIaTqaJXiH99303305 = zqyWdNJXSFwWDFIaTqaJXiH74677181;     zqyWdNJXSFwWDFIaTqaJXiH74677181 = zqyWdNJXSFwWDFIaTqaJXiH66132747;     zqyWdNJXSFwWDFIaTqaJXiH66132747 = zqyWdNJXSFwWDFIaTqaJXiH59271758;     zqyWdNJXSFwWDFIaTqaJXiH59271758 = zqyWdNJXSFwWDFIaTqaJXiH95778999;     zqyWdNJXSFwWDFIaTqaJXiH95778999 = zqyWdNJXSFwWDFIaTqaJXiH68908107;     zqyWdNJXSFwWDFIaTqaJXiH68908107 = zqyWdNJXSFwWDFIaTqaJXiH51977476;     zqyWdNJXSFwWDFIaTqaJXiH51977476 = zqyWdNJXSFwWDFIaTqaJXiH11621826;     zqyWdNJXSFwWDFIaTqaJXiH11621826 = zqyWdNJXSFwWDFIaTqaJXiH4628733;     zqyWdNJXSFwWDFIaTqaJXiH4628733 = zqyWdNJXSFwWDFIaTqaJXiH19462683;     zqyWdNJXSFwWDFIaTqaJXiH19462683 = zqyWdNJXSFwWDFIaTqaJXiH75392545;     zqyWdNJXSFwWDFIaTqaJXiH75392545 = zqyWdNJXSFwWDFIaTqaJXiH99137055;     zqyWdNJXSFwWDFIaTqaJXiH99137055 = zqyWdNJXSFwWDFIaTqaJXiH10881465;     zqyWdNJXSFwWDFIaTqaJXiH10881465 = zqyWdNJXSFwWDFIaTqaJXiH32461595;     zqyWdNJXSFwWDFIaTqaJXiH32461595 = zqyWdNJXSFwWDFIaTqaJXiH89462893;     zqyWdNJXSFwWDFIaTqaJXiH89462893 = zqyWdNJXSFwWDFIaTqaJXiH3862206;     zqyWdNJXSFwWDFIaTqaJXiH3862206 = zqyWdNJXSFwWDFIaTqaJXiH48472727;     zqyWdNJXSFwWDFIaTqaJXiH48472727 = zqyWdNJXSFwWDFIaTqaJXiH33835513;     zqyWdNJXSFwWDFIaTqaJXiH33835513 = zqyWdNJXSFwWDFIaTqaJXiH29847043;     zqyWdNJXSFwWDFIaTqaJXiH29847043 = zqyWdNJXSFwWDFIaTqaJXiH36779221;     zqyWdNJXSFwWDFIaTqaJXiH36779221 = zqyWdNJXSFwWDFIaTqaJXiH67251185;     zqyWdNJXSFwWDFIaTqaJXiH67251185 = zqyWdNJXSFwWDFIaTqaJXiH3598065;     zqyWdNJXSFwWDFIaTqaJXiH3598065 = zqyWdNJXSFwWDFIaTqaJXiH375679;     zqyWdNJXSFwWDFIaTqaJXiH375679 = zqyWdNJXSFwWDFIaTqaJXiH54141797;     zqyWdNJXSFwWDFIaTqaJXiH54141797 = zqyWdNJXSFwWDFIaTqaJXiH71056169;     zqyWdNJXSFwWDFIaTqaJXiH71056169 = zqyWdNJXSFwWDFIaTqaJXiH80865468;     zqyWdNJXSFwWDFIaTqaJXiH80865468 = zqyWdNJXSFwWDFIaTqaJXiH19259401;     zqyWdNJXSFwWDFIaTqaJXiH19259401 = zqyWdNJXSFwWDFIaTqaJXiH48150962;     zqyWdNJXSFwWDFIaTqaJXiH48150962 = zqyWdNJXSFwWDFIaTqaJXiH42344988;     zqyWdNJXSFwWDFIaTqaJXiH42344988 = zqyWdNJXSFwWDFIaTqaJXiH64430802;     zqyWdNJXSFwWDFIaTqaJXiH64430802 = zqyWdNJXSFwWDFIaTqaJXiH52358656;     zqyWdNJXSFwWDFIaTqaJXiH52358656 = zqyWdNJXSFwWDFIaTqaJXiH11258380;     zqyWdNJXSFwWDFIaTqaJXiH11258380 = zqyWdNJXSFwWDFIaTqaJXiH66238343;     zqyWdNJXSFwWDFIaTqaJXiH66238343 = zqyWdNJXSFwWDFIaTqaJXiH89335154;     zqyWdNJXSFwWDFIaTqaJXiH89335154 = zqyWdNJXSFwWDFIaTqaJXiH17674637;     zqyWdNJXSFwWDFIaTqaJXiH17674637 = zqyWdNJXSFwWDFIaTqaJXiH29569382;     zqyWdNJXSFwWDFIaTqaJXiH29569382 = zqyWdNJXSFwWDFIaTqaJXiH63815464;     zqyWdNJXSFwWDFIaTqaJXiH63815464 = zqyWdNJXSFwWDFIaTqaJXiH75258901;     zqyWdNJXSFwWDFIaTqaJXiH75258901 = zqyWdNJXSFwWDFIaTqaJXiH84234844;     zqyWdNJXSFwWDFIaTqaJXiH84234844 = zqyWdNJXSFwWDFIaTqaJXiH86668041;     zqyWdNJXSFwWDFIaTqaJXiH86668041 = zqyWdNJXSFwWDFIaTqaJXiH69755132;     zqyWdNJXSFwWDFIaTqaJXiH69755132 = zqyWdNJXSFwWDFIaTqaJXiH57431405;     zqyWdNJXSFwWDFIaTqaJXiH57431405 = zqyWdNJXSFwWDFIaTqaJXiH85143006;     zqyWdNJXSFwWDFIaTqaJXiH85143006 = zqyWdNJXSFwWDFIaTqaJXiH91804718;     zqyWdNJXSFwWDFIaTqaJXiH91804718 = zqyWdNJXSFwWDFIaTqaJXiH43867166;     zqyWdNJXSFwWDFIaTqaJXiH43867166 = zqyWdNJXSFwWDFIaTqaJXiH63695701;     zqyWdNJXSFwWDFIaTqaJXiH63695701 = zqyWdNJXSFwWDFIaTqaJXiH56861408;     zqyWdNJXSFwWDFIaTqaJXiH56861408 = zqyWdNJXSFwWDFIaTqaJXiH2687797;     zqyWdNJXSFwWDFIaTqaJXiH2687797 = zqyWdNJXSFwWDFIaTqaJXiH11088458;     zqyWdNJXSFwWDFIaTqaJXiH11088458 = zqyWdNJXSFwWDFIaTqaJXiH98252786;     zqyWdNJXSFwWDFIaTqaJXiH98252786 = zqyWdNJXSFwWDFIaTqaJXiH888613;     zqyWdNJXSFwWDFIaTqaJXiH888613 = zqyWdNJXSFwWDFIaTqaJXiH31552192;     zqyWdNJXSFwWDFIaTqaJXiH31552192 = zqyWdNJXSFwWDFIaTqaJXiH9550267;     zqyWdNJXSFwWDFIaTqaJXiH9550267 = zqyWdNJXSFwWDFIaTqaJXiH33304114;     zqyWdNJXSFwWDFIaTqaJXiH33304114 = zqyWdNJXSFwWDFIaTqaJXiH56707104;     zqyWdNJXSFwWDFIaTqaJXiH56707104 = zqyWdNJXSFwWDFIaTqaJXiH95705241;     zqyWdNJXSFwWDFIaTqaJXiH95705241 = zqyWdNJXSFwWDFIaTqaJXiH74301502;     zqyWdNJXSFwWDFIaTqaJXiH74301502 = zqyWdNJXSFwWDFIaTqaJXiH11990950;     zqyWdNJXSFwWDFIaTqaJXiH11990950 = zqyWdNJXSFwWDFIaTqaJXiH88215588;     zqyWdNJXSFwWDFIaTqaJXiH88215588 = zqyWdNJXSFwWDFIaTqaJXiH14913532;     zqyWdNJXSFwWDFIaTqaJXiH14913532 = zqyWdNJXSFwWDFIaTqaJXiH49648707;     zqyWdNJXSFwWDFIaTqaJXiH49648707 = zqyWdNJXSFwWDFIaTqaJXiH3826515;     zqyWdNJXSFwWDFIaTqaJXiH3826515 = zqyWdNJXSFwWDFIaTqaJXiH69276838;     zqyWdNJXSFwWDFIaTqaJXiH69276838 = zqyWdNJXSFwWDFIaTqaJXiH40197930;     zqyWdNJXSFwWDFIaTqaJXiH40197930 = zqyWdNJXSFwWDFIaTqaJXiH67104026;     zqyWdNJXSFwWDFIaTqaJXiH67104026 = zqyWdNJXSFwWDFIaTqaJXiH64134165;     zqyWdNJXSFwWDFIaTqaJXiH64134165 = zqyWdNJXSFwWDFIaTqaJXiH32898713;     zqyWdNJXSFwWDFIaTqaJXiH32898713 = zqyWdNJXSFwWDFIaTqaJXiH21546311;     zqyWdNJXSFwWDFIaTqaJXiH21546311 = zqyWdNJXSFwWDFIaTqaJXiH14786959;     zqyWdNJXSFwWDFIaTqaJXiH14786959 = zqyWdNJXSFwWDFIaTqaJXiH59893512;     zqyWdNJXSFwWDFIaTqaJXiH59893512 = zqyWdNJXSFwWDFIaTqaJXiH40046741;     zqyWdNJXSFwWDFIaTqaJXiH40046741 = zqyWdNJXSFwWDFIaTqaJXiH73213826;     zqyWdNJXSFwWDFIaTqaJXiH73213826 = zqyWdNJXSFwWDFIaTqaJXiH49600668;     zqyWdNJXSFwWDFIaTqaJXiH49600668 = zqyWdNJXSFwWDFIaTqaJXiH43179002;     zqyWdNJXSFwWDFIaTqaJXiH43179002 = zqyWdNJXSFwWDFIaTqaJXiH67024088;     zqyWdNJXSFwWDFIaTqaJXiH67024088 = zqyWdNJXSFwWDFIaTqaJXiH9819780;     zqyWdNJXSFwWDFIaTqaJXiH9819780 = zqyWdNJXSFwWDFIaTqaJXiH18455058;     zqyWdNJXSFwWDFIaTqaJXiH18455058 = zqyWdNJXSFwWDFIaTqaJXiH8570961;     zqyWdNJXSFwWDFIaTqaJXiH8570961 = zqyWdNJXSFwWDFIaTqaJXiH13293444;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void UoqEJYsosSKLMXImRqqJufpowdGggzningGLsGiAi90737890() {     long PvhECfzpcckHdGozCHgSLIt83945110 = -405128188;    long PvhECfzpcckHdGozCHgSLIt85651459 = -790678147;    long PvhECfzpcckHdGozCHgSLIt84215481 = -78249801;    long PvhECfzpcckHdGozCHgSLIt69879497 = 92149253;    long PvhECfzpcckHdGozCHgSLIt55980980 = -375718792;    long PvhECfzpcckHdGozCHgSLIt70013607 = -216566932;    long PvhECfzpcckHdGozCHgSLIt73955044 = -299811623;    long PvhECfzpcckHdGozCHgSLIt78574989 = -17945983;    long PvhECfzpcckHdGozCHgSLIt14918286 = 25441921;    long PvhECfzpcckHdGozCHgSLIt12738200 = -938818837;    long PvhECfzpcckHdGozCHgSLIt53516562 = -675993385;    long PvhECfzpcckHdGozCHgSLIt64806282 = 25899552;    long PvhECfzpcckHdGozCHgSLIt42660144 = -301590385;    long PvhECfzpcckHdGozCHgSLIt51589907 = -230958552;    long PvhECfzpcckHdGozCHgSLIt17869412 = -192273569;    long PvhECfzpcckHdGozCHgSLIt33079992 = -907449141;    long PvhECfzpcckHdGozCHgSLIt95967818 = -501972451;    long PvhECfzpcckHdGozCHgSLIt69654834 = -263951401;    long PvhECfzpcckHdGozCHgSLIt47095487 = -737487703;    long PvhECfzpcckHdGozCHgSLIt98184017 = 52029538;    long PvhECfzpcckHdGozCHgSLIt25219089 = -636971528;    long PvhECfzpcckHdGozCHgSLIt85354054 = -454222304;    long PvhECfzpcckHdGozCHgSLIt1247115 = -129076277;    long PvhECfzpcckHdGozCHgSLIt8526718 = -203934835;    long PvhECfzpcckHdGozCHgSLIt30257135 = -808995466;    long PvhECfzpcckHdGozCHgSLIt89869338 = -535140053;    long PvhECfzpcckHdGozCHgSLIt4039786 = -754911281;    long PvhECfzpcckHdGozCHgSLIt76690332 = -100701123;    long PvhECfzpcckHdGozCHgSLIt84119964 = -392891453;    long PvhECfzpcckHdGozCHgSLIt50793922 = -828311161;    long PvhECfzpcckHdGozCHgSLIt11700729 = -19353403;    long PvhECfzpcckHdGozCHgSLIt63974143 = -812536589;    long PvhECfzpcckHdGozCHgSLIt58337906 = -97209595;    long PvhECfzpcckHdGozCHgSLIt64502031 = -940493731;    long PvhECfzpcckHdGozCHgSLIt88905701 = -828067275;    long PvhECfzpcckHdGozCHgSLIt92454853 = -189820227;    long PvhECfzpcckHdGozCHgSLIt33254380 = -188589021;    long PvhECfzpcckHdGozCHgSLIt56654694 = -420264978;    long PvhECfzpcckHdGozCHgSLIt27006016 = -221324537;    long PvhECfzpcckHdGozCHgSLIt28938811 = -240577366;    long PvhECfzpcckHdGozCHgSLIt89920326 = -540805739;    long PvhECfzpcckHdGozCHgSLIt65262211 = -260115889;    long PvhECfzpcckHdGozCHgSLIt16218145 = -300067482;    long PvhECfzpcckHdGozCHgSLIt10106365 = 27634359;    long PvhECfzpcckHdGozCHgSLIt96329737 = -330545521;    long PvhECfzpcckHdGozCHgSLIt60547632 = -837343957;    long PvhECfzpcckHdGozCHgSLIt97187372 = 34812165;    long PvhECfzpcckHdGozCHgSLIt46479678 = -481685800;    long PvhECfzpcckHdGozCHgSLIt24700853 = -37888312;    long PvhECfzpcckHdGozCHgSLIt56578449 = -399935976;    long PvhECfzpcckHdGozCHgSLIt10534313 = -478815784;    long PvhECfzpcckHdGozCHgSLIt6302307 = -957169545;    long PvhECfzpcckHdGozCHgSLIt7434314 = -689480706;    long PvhECfzpcckHdGozCHgSLIt1485685 = -852271700;    long PvhECfzpcckHdGozCHgSLIt65518801 = -188367961;    long PvhECfzpcckHdGozCHgSLIt98591056 = -950905884;    long PvhECfzpcckHdGozCHgSLIt84404345 = -561601871;    long PvhECfzpcckHdGozCHgSLIt75688763 = -874314967;    long PvhECfzpcckHdGozCHgSLIt39622363 = -98855281;    long PvhECfzpcckHdGozCHgSLIt66111641 = -840578740;    long PvhECfzpcckHdGozCHgSLIt65973822 = -461655651;    long PvhECfzpcckHdGozCHgSLIt97264711 = -99110500;    long PvhECfzpcckHdGozCHgSLIt94455024 = -625054531;    long PvhECfzpcckHdGozCHgSLIt64124364 = -146246918;    long PvhECfzpcckHdGozCHgSLIt1037471 = -819465434;    long PvhECfzpcckHdGozCHgSLIt89542418 = -863456796;    long PvhECfzpcckHdGozCHgSLIt6468376 = -876890853;    long PvhECfzpcckHdGozCHgSLIt78158113 = -361096654;    long PvhECfzpcckHdGozCHgSLIt62684205 = -402891277;    long PvhECfzpcckHdGozCHgSLIt25414558 = 97546658;    long PvhECfzpcckHdGozCHgSLIt99825611 = -618860121;    long PvhECfzpcckHdGozCHgSLIt39313125 = 18292527;    long PvhECfzpcckHdGozCHgSLIt42648818 = 57373136;    long PvhECfzpcckHdGozCHgSLIt18156676 = -396910338;    long PvhECfzpcckHdGozCHgSLIt8263692 = -407164723;    long PvhECfzpcckHdGozCHgSLIt59956877 = -276855639;    long PvhECfzpcckHdGozCHgSLIt69135909 = -54154822;    long PvhECfzpcckHdGozCHgSLIt91140749 = -56710637;    long PvhECfzpcckHdGozCHgSLIt12196981 = -873389315;    long PvhECfzpcckHdGozCHgSLIt69709503 = -971651510;    long PvhECfzpcckHdGozCHgSLIt92681966 = -469952218;    long PvhECfzpcckHdGozCHgSLIt57560107 = -173225482;    long PvhECfzpcckHdGozCHgSLIt51989480 = 37187189;    long PvhECfzpcckHdGozCHgSLIt27541516 = -992955477;    long PvhECfzpcckHdGozCHgSLIt40259609 = -249495378;    long PvhECfzpcckHdGozCHgSLIt5398422 = -62183859;    long PvhECfzpcckHdGozCHgSLIt56539830 = -23055884;    long PvhECfzpcckHdGozCHgSLIt56852222 = -244937895;    long PvhECfzpcckHdGozCHgSLIt98983229 = -652125771;    long PvhECfzpcckHdGozCHgSLIt90314645 = -877161392;    long PvhECfzpcckHdGozCHgSLIt8050509 = -628218357;    long PvhECfzpcckHdGozCHgSLIt57565616 = -314274054;    long PvhECfzpcckHdGozCHgSLIt17032332 = -221409698;    long PvhECfzpcckHdGozCHgSLIt60894374 = -380745798;    long PvhECfzpcckHdGozCHgSLIt62964989 = -778921715;    long PvhECfzpcckHdGozCHgSLIt92655615 = -341695240;    long PvhECfzpcckHdGozCHgSLIt70807187 = -635061359;    long PvhECfzpcckHdGozCHgSLIt52093781 = -53820564;    long PvhECfzpcckHdGozCHgSLIt9068895 = -152900207;    long PvhECfzpcckHdGozCHgSLIt6787320 = -405128188;     PvhECfzpcckHdGozCHgSLIt83945110 = PvhECfzpcckHdGozCHgSLIt85651459;     PvhECfzpcckHdGozCHgSLIt85651459 = PvhECfzpcckHdGozCHgSLIt84215481;     PvhECfzpcckHdGozCHgSLIt84215481 = PvhECfzpcckHdGozCHgSLIt69879497;     PvhECfzpcckHdGozCHgSLIt69879497 = PvhECfzpcckHdGozCHgSLIt55980980;     PvhECfzpcckHdGozCHgSLIt55980980 = PvhECfzpcckHdGozCHgSLIt70013607;     PvhECfzpcckHdGozCHgSLIt70013607 = PvhECfzpcckHdGozCHgSLIt73955044;     PvhECfzpcckHdGozCHgSLIt73955044 = PvhECfzpcckHdGozCHgSLIt78574989;     PvhECfzpcckHdGozCHgSLIt78574989 = PvhECfzpcckHdGozCHgSLIt14918286;     PvhECfzpcckHdGozCHgSLIt14918286 = PvhECfzpcckHdGozCHgSLIt12738200;     PvhECfzpcckHdGozCHgSLIt12738200 = PvhECfzpcckHdGozCHgSLIt53516562;     PvhECfzpcckHdGozCHgSLIt53516562 = PvhECfzpcckHdGozCHgSLIt64806282;     PvhECfzpcckHdGozCHgSLIt64806282 = PvhECfzpcckHdGozCHgSLIt42660144;     PvhECfzpcckHdGozCHgSLIt42660144 = PvhECfzpcckHdGozCHgSLIt51589907;     PvhECfzpcckHdGozCHgSLIt51589907 = PvhECfzpcckHdGozCHgSLIt17869412;     PvhECfzpcckHdGozCHgSLIt17869412 = PvhECfzpcckHdGozCHgSLIt33079992;     PvhECfzpcckHdGozCHgSLIt33079992 = PvhECfzpcckHdGozCHgSLIt95967818;     PvhECfzpcckHdGozCHgSLIt95967818 = PvhECfzpcckHdGozCHgSLIt69654834;     PvhECfzpcckHdGozCHgSLIt69654834 = PvhECfzpcckHdGozCHgSLIt47095487;     PvhECfzpcckHdGozCHgSLIt47095487 = PvhECfzpcckHdGozCHgSLIt98184017;     PvhECfzpcckHdGozCHgSLIt98184017 = PvhECfzpcckHdGozCHgSLIt25219089;     PvhECfzpcckHdGozCHgSLIt25219089 = PvhECfzpcckHdGozCHgSLIt85354054;     PvhECfzpcckHdGozCHgSLIt85354054 = PvhECfzpcckHdGozCHgSLIt1247115;     PvhECfzpcckHdGozCHgSLIt1247115 = PvhECfzpcckHdGozCHgSLIt8526718;     PvhECfzpcckHdGozCHgSLIt8526718 = PvhECfzpcckHdGozCHgSLIt30257135;     PvhECfzpcckHdGozCHgSLIt30257135 = PvhECfzpcckHdGozCHgSLIt89869338;     PvhECfzpcckHdGozCHgSLIt89869338 = PvhECfzpcckHdGozCHgSLIt4039786;     PvhECfzpcckHdGozCHgSLIt4039786 = PvhECfzpcckHdGozCHgSLIt76690332;     PvhECfzpcckHdGozCHgSLIt76690332 = PvhECfzpcckHdGozCHgSLIt84119964;     PvhECfzpcckHdGozCHgSLIt84119964 = PvhECfzpcckHdGozCHgSLIt50793922;     PvhECfzpcckHdGozCHgSLIt50793922 = PvhECfzpcckHdGozCHgSLIt11700729;     PvhECfzpcckHdGozCHgSLIt11700729 = PvhECfzpcckHdGozCHgSLIt63974143;     PvhECfzpcckHdGozCHgSLIt63974143 = PvhECfzpcckHdGozCHgSLIt58337906;     PvhECfzpcckHdGozCHgSLIt58337906 = PvhECfzpcckHdGozCHgSLIt64502031;     PvhECfzpcckHdGozCHgSLIt64502031 = PvhECfzpcckHdGozCHgSLIt88905701;     PvhECfzpcckHdGozCHgSLIt88905701 = PvhECfzpcckHdGozCHgSLIt92454853;     PvhECfzpcckHdGozCHgSLIt92454853 = PvhECfzpcckHdGozCHgSLIt33254380;     PvhECfzpcckHdGozCHgSLIt33254380 = PvhECfzpcckHdGozCHgSLIt56654694;     PvhECfzpcckHdGozCHgSLIt56654694 = PvhECfzpcckHdGozCHgSLIt27006016;     PvhECfzpcckHdGozCHgSLIt27006016 = PvhECfzpcckHdGozCHgSLIt28938811;     PvhECfzpcckHdGozCHgSLIt28938811 = PvhECfzpcckHdGozCHgSLIt89920326;     PvhECfzpcckHdGozCHgSLIt89920326 = PvhECfzpcckHdGozCHgSLIt65262211;     PvhECfzpcckHdGozCHgSLIt65262211 = PvhECfzpcckHdGozCHgSLIt16218145;     PvhECfzpcckHdGozCHgSLIt16218145 = PvhECfzpcckHdGozCHgSLIt10106365;     PvhECfzpcckHdGozCHgSLIt10106365 = PvhECfzpcckHdGozCHgSLIt96329737;     PvhECfzpcckHdGozCHgSLIt96329737 = PvhECfzpcckHdGozCHgSLIt60547632;     PvhECfzpcckHdGozCHgSLIt60547632 = PvhECfzpcckHdGozCHgSLIt97187372;     PvhECfzpcckHdGozCHgSLIt97187372 = PvhECfzpcckHdGozCHgSLIt46479678;     PvhECfzpcckHdGozCHgSLIt46479678 = PvhECfzpcckHdGozCHgSLIt24700853;     PvhECfzpcckHdGozCHgSLIt24700853 = PvhECfzpcckHdGozCHgSLIt56578449;     PvhECfzpcckHdGozCHgSLIt56578449 = PvhECfzpcckHdGozCHgSLIt10534313;     PvhECfzpcckHdGozCHgSLIt10534313 = PvhECfzpcckHdGozCHgSLIt6302307;     PvhECfzpcckHdGozCHgSLIt6302307 = PvhECfzpcckHdGozCHgSLIt7434314;     PvhECfzpcckHdGozCHgSLIt7434314 = PvhECfzpcckHdGozCHgSLIt1485685;     PvhECfzpcckHdGozCHgSLIt1485685 = PvhECfzpcckHdGozCHgSLIt65518801;     PvhECfzpcckHdGozCHgSLIt65518801 = PvhECfzpcckHdGozCHgSLIt98591056;     PvhECfzpcckHdGozCHgSLIt98591056 = PvhECfzpcckHdGozCHgSLIt84404345;     PvhECfzpcckHdGozCHgSLIt84404345 = PvhECfzpcckHdGozCHgSLIt75688763;     PvhECfzpcckHdGozCHgSLIt75688763 = PvhECfzpcckHdGozCHgSLIt39622363;     PvhECfzpcckHdGozCHgSLIt39622363 = PvhECfzpcckHdGozCHgSLIt66111641;     PvhECfzpcckHdGozCHgSLIt66111641 = PvhECfzpcckHdGozCHgSLIt65973822;     PvhECfzpcckHdGozCHgSLIt65973822 = PvhECfzpcckHdGozCHgSLIt97264711;     PvhECfzpcckHdGozCHgSLIt97264711 = PvhECfzpcckHdGozCHgSLIt94455024;     PvhECfzpcckHdGozCHgSLIt94455024 = PvhECfzpcckHdGozCHgSLIt64124364;     PvhECfzpcckHdGozCHgSLIt64124364 = PvhECfzpcckHdGozCHgSLIt1037471;     PvhECfzpcckHdGozCHgSLIt1037471 = PvhECfzpcckHdGozCHgSLIt89542418;     PvhECfzpcckHdGozCHgSLIt89542418 = PvhECfzpcckHdGozCHgSLIt6468376;     PvhECfzpcckHdGozCHgSLIt6468376 = PvhECfzpcckHdGozCHgSLIt78158113;     PvhECfzpcckHdGozCHgSLIt78158113 = PvhECfzpcckHdGozCHgSLIt62684205;     PvhECfzpcckHdGozCHgSLIt62684205 = PvhECfzpcckHdGozCHgSLIt25414558;     PvhECfzpcckHdGozCHgSLIt25414558 = PvhECfzpcckHdGozCHgSLIt99825611;     PvhECfzpcckHdGozCHgSLIt99825611 = PvhECfzpcckHdGozCHgSLIt39313125;     PvhECfzpcckHdGozCHgSLIt39313125 = PvhECfzpcckHdGozCHgSLIt42648818;     PvhECfzpcckHdGozCHgSLIt42648818 = PvhECfzpcckHdGozCHgSLIt18156676;     PvhECfzpcckHdGozCHgSLIt18156676 = PvhECfzpcckHdGozCHgSLIt8263692;     PvhECfzpcckHdGozCHgSLIt8263692 = PvhECfzpcckHdGozCHgSLIt59956877;     PvhECfzpcckHdGozCHgSLIt59956877 = PvhECfzpcckHdGozCHgSLIt69135909;     PvhECfzpcckHdGozCHgSLIt69135909 = PvhECfzpcckHdGozCHgSLIt91140749;     PvhECfzpcckHdGozCHgSLIt91140749 = PvhECfzpcckHdGozCHgSLIt12196981;     PvhECfzpcckHdGozCHgSLIt12196981 = PvhECfzpcckHdGozCHgSLIt69709503;     PvhECfzpcckHdGozCHgSLIt69709503 = PvhECfzpcckHdGozCHgSLIt92681966;     PvhECfzpcckHdGozCHgSLIt92681966 = PvhECfzpcckHdGozCHgSLIt57560107;     PvhECfzpcckHdGozCHgSLIt57560107 = PvhECfzpcckHdGozCHgSLIt51989480;     PvhECfzpcckHdGozCHgSLIt51989480 = PvhECfzpcckHdGozCHgSLIt27541516;     PvhECfzpcckHdGozCHgSLIt27541516 = PvhECfzpcckHdGozCHgSLIt40259609;     PvhECfzpcckHdGozCHgSLIt40259609 = PvhECfzpcckHdGozCHgSLIt5398422;     PvhECfzpcckHdGozCHgSLIt5398422 = PvhECfzpcckHdGozCHgSLIt56539830;     PvhECfzpcckHdGozCHgSLIt56539830 = PvhECfzpcckHdGozCHgSLIt56852222;     PvhECfzpcckHdGozCHgSLIt56852222 = PvhECfzpcckHdGozCHgSLIt98983229;     PvhECfzpcckHdGozCHgSLIt98983229 = PvhECfzpcckHdGozCHgSLIt90314645;     PvhECfzpcckHdGozCHgSLIt90314645 = PvhECfzpcckHdGozCHgSLIt8050509;     PvhECfzpcckHdGozCHgSLIt8050509 = PvhECfzpcckHdGozCHgSLIt57565616;     PvhECfzpcckHdGozCHgSLIt57565616 = PvhECfzpcckHdGozCHgSLIt17032332;     PvhECfzpcckHdGozCHgSLIt17032332 = PvhECfzpcckHdGozCHgSLIt60894374;     PvhECfzpcckHdGozCHgSLIt60894374 = PvhECfzpcckHdGozCHgSLIt62964989;     PvhECfzpcckHdGozCHgSLIt62964989 = PvhECfzpcckHdGozCHgSLIt92655615;     PvhECfzpcckHdGozCHgSLIt92655615 = PvhECfzpcckHdGozCHgSLIt70807187;     PvhECfzpcckHdGozCHgSLIt70807187 = PvhECfzpcckHdGozCHgSLIt52093781;     PvhECfzpcckHdGozCHgSLIt52093781 = PvhECfzpcckHdGozCHgSLIt9068895;     PvhECfzpcckHdGozCHgSLIt9068895 = PvhECfzpcckHdGozCHgSLIt6787320;     PvhECfzpcckHdGozCHgSLIt6787320 = PvhECfzpcckHdGozCHgSLIt83945110;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void vNTTDvKKszJuCgkALnrdqEqeUDQsWrxDNEoTULeaz72966652() {     long JGSZljZfOhpXtwrXozAeRnA35680561 = -521383020;    long JGSZljZfOhpXtwrXozAeRnA1325443 = -867577903;    long JGSZljZfOhpXtwrXozAeRnA33015841 = -975609186;    long JGSZljZfOhpXtwrXozAeRnA44954899 = -824119889;    long JGSZljZfOhpXtwrXozAeRnA32704913 = -83369446;    long JGSZljZfOhpXtwrXozAeRnA94896961 = -375594158;    long JGSZljZfOhpXtwrXozAeRnA47731887 = -123023219;    long JGSZljZfOhpXtwrXozAeRnA97366467 = -141725538;    long JGSZljZfOhpXtwrXozAeRnA66216362 = -865406790;    long JGSZljZfOhpXtwrXozAeRnA81535323 = -380464820;    long JGSZljZfOhpXtwrXozAeRnA48809261 = -637715857;    long JGSZljZfOhpXtwrXozAeRnA75162660 = 90918052;    long JGSZljZfOhpXtwrXozAeRnA29840938 = 89229354;    long JGSZljZfOhpXtwrXozAeRnA10357626 = -957639098;    long JGSZljZfOhpXtwrXozAeRnA71884669 = -770001279;    long JGSZljZfOhpXtwrXozAeRnA44807264 = -619133097;    long JGSZljZfOhpXtwrXozAeRnA51938344 = -870067141;    long JGSZljZfOhpXtwrXozAeRnA55337756 = -726527895;    long JGSZljZfOhpXtwrXozAeRnA6669336 = -165401886;    long JGSZljZfOhpXtwrXozAeRnA17913592 = -758238611;    long JGSZljZfOhpXtwrXozAeRnA70966441 = -719779696;    long JGSZljZfOhpXtwrXozAeRnA87773507 = -627703311;    long JGSZljZfOhpXtwrXozAeRnA2596629 = -837313725;    long JGSZljZfOhpXtwrXozAeRnA1176968 = -75526786;    long JGSZljZfOhpXtwrXozAeRnA1672994 = -754649903;    long JGSZljZfOhpXtwrXozAeRnA47574753 = -880749832;    long JGSZljZfOhpXtwrXozAeRnA42868420 = -117319999;    long JGSZljZfOhpXtwrXozAeRnA74819557 = -484031809;    long JGSZljZfOhpXtwrXozAeRnA58870037 = -442790355;    long JGSZljZfOhpXtwrXozAeRnA20779006 = -190211957;    long JGSZljZfOhpXtwrXozAeRnA48919537 = -352235870;    long JGSZljZfOhpXtwrXozAeRnA77003873 = -36310781;    long JGSZljZfOhpXtwrXozAeRnA56431216 = -679591481;    long JGSZljZfOhpXtwrXozAeRnA58525743 = -601090897;    long JGSZljZfOhpXtwrXozAeRnA87110829 = 55123081;    long JGSZljZfOhpXtwrXozAeRnA74154464 = -425989056;    long JGSZljZfOhpXtwrXozAeRnA82902606 = -832943764;    long JGSZljZfOhpXtwrXozAeRnA57488306 = -503777343;    long JGSZljZfOhpXtwrXozAeRnA96780858 = -666641932;    long JGSZljZfOhpXtwrXozAeRnA54021227 = -859193033;    long JGSZljZfOhpXtwrXozAeRnA58604413 = -659964527;    long JGSZljZfOhpXtwrXozAeRnA25287612 = -248635511;    long JGSZljZfOhpXtwrXozAeRnA72801377 = -200844014;    long JGSZljZfOhpXtwrXozAeRnA3042184 = -997754318;    long JGSZljZfOhpXtwrXozAeRnA68358945 = -931042604;    long JGSZljZfOhpXtwrXozAeRnA62242079 = -161235897;    long JGSZljZfOhpXtwrXozAeRnA83353567 = -427528289;    long JGSZljZfOhpXtwrXozAeRnA25464143 = -886090495;    long JGSZljZfOhpXtwrXozAeRnA13719306 = -1841041;    long JGSZljZfOhpXtwrXozAeRnA45234708 = -258947357;    long JGSZljZfOhpXtwrXozAeRnA51214205 = -187319940;    long JGSZljZfOhpXtwrXozAeRnA38282060 = -318769105;    long JGSZljZfOhpXtwrXozAeRnA30673060 = -433593894;    long JGSZljZfOhpXtwrXozAeRnA71544925 = -467071013;    long JGSZljZfOhpXtwrXozAeRnA2000211 = -218131162;    long JGSZljZfOhpXtwrXozAeRnA47907053 = -893679709;    long JGSZljZfOhpXtwrXozAeRnA98728813 = 69735821;    long JGSZljZfOhpXtwrXozAeRnA31838873 = -800082401;    long JGSZljZfOhpXtwrXozAeRnA43281906 = 30530014;    long JGSZljZfOhpXtwrXozAeRnA85130160 = -202619615;    long JGSZljZfOhpXtwrXozAeRnA52028541 = -158274160;    long JGSZljZfOhpXtwrXozAeRnA72912330 = -638991410;    long JGSZljZfOhpXtwrXozAeRnA38496430 = -698935183;    long JGSZljZfOhpXtwrXozAeRnA45437357 = -575194833;    long JGSZljZfOhpXtwrXozAeRnA32615786 = 71771050;    long JGSZljZfOhpXtwrXozAeRnA71805387 = -501405076;    long JGSZljZfOhpXtwrXozAeRnA18731445 = -229490468;    long JGSZljZfOhpXtwrXozAeRnA71315194 = -309679750;    long JGSZljZfOhpXtwrXozAeRnA23246796 = -912762180;    long JGSZljZfOhpXtwrXozAeRnA97730204 = -244012223;    long JGSZljZfOhpXtwrXozAeRnA61904658 = -786189333;    long JGSZljZfOhpXtwrXozAeRnA94450037 = -266289798;    long JGSZljZfOhpXtwrXozAeRnA58556897 = 40114037;    long JGSZljZfOhpXtwrXozAeRnA52648108 = -306208854;    long JGSZljZfOhpXtwrXozAeRnA59309178 = 1725916;    long JGSZljZfOhpXtwrXozAeRnA45678830 = -371144185;    long JGSZljZfOhpXtwrXozAeRnA14972131 = -326859298;    long JGSZljZfOhpXtwrXozAeRnA99554445 = -839559407;    long JGSZljZfOhpXtwrXozAeRnA32818023 = -144484182;    long JGSZljZfOhpXtwrXozAeRnA39430915 = -493414007;    long JGSZljZfOhpXtwrXozAeRnA64221186 = -353221543;    long JGSZljZfOhpXtwrXozAeRnA17404278 = -231229504;    long JGSZljZfOhpXtwrXozAeRnA61100252 = -382190768;    long JGSZljZfOhpXtwrXozAeRnA13635330 = -83842998;    long JGSZljZfOhpXtwrXozAeRnA69564801 = 97107982;    long JGSZljZfOhpXtwrXozAeRnA10637478 = 66533235;    long JGSZljZfOhpXtwrXozAeRnA46330814 = -602716887;    long JGSZljZfOhpXtwrXozAeRnA84886290 = -112520469;    long JGSZljZfOhpXtwrXozAeRnA56525533 = -282959735;    long JGSZljZfOhpXtwrXozAeRnA39203777 = -51197210;    long JGSZljZfOhpXtwrXozAeRnA75425650 = -395724878;    long JGSZljZfOhpXtwrXozAeRnA51063733 = 67138636;    long JGSZljZfOhpXtwrXozAeRnA14206401 = -434307357;    long JGSZljZfOhpXtwrXozAeRnA11650699 = -364022318;    long JGSZljZfOhpXtwrXozAeRnA1992687 = -600918873;    long JGSZljZfOhpXtwrXozAeRnA85692083 = 79026883;    long JGSZljZfOhpXtwrXozAeRnA86791181 = -549700328;    long JGSZljZfOhpXtwrXozAeRnA27364020 = -625649182;    long JGSZljZfOhpXtwrXozAeRnA70426398 = -969525368;    long JGSZljZfOhpXtwrXozAeRnA96553558 = -521383020;     JGSZljZfOhpXtwrXozAeRnA35680561 = JGSZljZfOhpXtwrXozAeRnA1325443;     JGSZljZfOhpXtwrXozAeRnA1325443 = JGSZljZfOhpXtwrXozAeRnA33015841;     JGSZljZfOhpXtwrXozAeRnA33015841 = JGSZljZfOhpXtwrXozAeRnA44954899;     JGSZljZfOhpXtwrXozAeRnA44954899 = JGSZljZfOhpXtwrXozAeRnA32704913;     JGSZljZfOhpXtwrXozAeRnA32704913 = JGSZljZfOhpXtwrXozAeRnA94896961;     JGSZljZfOhpXtwrXozAeRnA94896961 = JGSZljZfOhpXtwrXozAeRnA47731887;     JGSZljZfOhpXtwrXozAeRnA47731887 = JGSZljZfOhpXtwrXozAeRnA97366467;     JGSZljZfOhpXtwrXozAeRnA97366467 = JGSZljZfOhpXtwrXozAeRnA66216362;     JGSZljZfOhpXtwrXozAeRnA66216362 = JGSZljZfOhpXtwrXozAeRnA81535323;     JGSZljZfOhpXtwrXozAeRnA81535323 = JGSZljZfOhpXtwrXozAeRnA48809261;     JGSZljZfOhpXtwrXozAeRnA48809261 = JGSZljZfOhpXtwrXozAeRnA75162660;     JGSZljZfOhpXtwrXozAeRnA75162660 = JGSZljZfOhpXtwrXozAeRnA29840938;     JGSZljZfOhpXtwrXozAeRnA29840938 = JGSZljZfOhpXtwrXozAeRnA10357626;     JGSZljZfOhpXtwrXozAeRnA10357626 = JGSZljZfOhpXtwrXozAeRnA71884669;     JGSZljZfOhpXtwrXozAeRnA71884669 = JGSZljZfOhpXtwrXozAeRnA44807264;     JGSZljZfOhpXtwrXozAeRnA44807264 = JGSZljZfOhpXtwrXozAeRnA51938344;     JGSZljZfOhpXtwrXozAeRnA51938344 = JGSZljZfOhpXtwrXozAeRnA55337756;     JGSZljZfOhpXtwrXozAeRnA55337756 = JGSZljZfOhpXtwrXozAeRnA6669336;     JGSZljZfOhpXtwrXozAeRnA6669336 = JGSZljZfOhpXtwrXozAeRnA17913592;     JGSZljZfOhpXtwrXozAeRnA17913592 = JGSZljZfOhpXtwrXozAeRnA70966441;     JGSZljZfOhpXtwrXozAeRnA70966441 = JGSZljZfOhpXtwrXozAeRnA87773507;     JGSZljZfOhpXtwrXozAeRnA87773507 = JGSZljZfOhpXtwrXozAeRnA2596629;     JGSZljZfOhpXtwrXozAeRnA2596629 = JGSZljZfOhpXtwrXozAeRnA1176968;     JGSZljZfOhpXtwrXozAeRnA1176968 = JGSZljZfOhpXtwrXozAeRnA1672994;     JGSZljZfOhpXtwrXozAeRnA1672994 = JGSZljZfOhpXtwrXozAeRnA47574753;     JGSZljZfOhpXtwrXozAeRnA47574753 = JGSZljZfOhpXtwrXozAeRnA42868420;     JGSZljZfOhpXtwrXozAeRnA42868420 = JGSZljZfOhpXtwrXozAeRnA74819557;     JGSZljZfOhpXtwrXozAeRnA74819557 = JGSZljZfOhpXtwrXozAeRnA58870037;     JGSZljZfOhpXtwrXozAeRnA58870037 = JGSZljZfOhpXtwrXozAeRnA20779006;     JGSZljZfOhpXtwrXozAeRnA20779006 = JGSZljZfOhpXtwrXozAeRnA48919537;     JGSZljZfOhpXtwrXozAeRnA48919537 = JGSZljZfOhpXtwrXozAeRnA77003873;     JGSZljZfOhpXtwrXozAeRnA77003873 = JGSZljZfOhpXtwrXozAeRnA56431216;     JGSZljZfOhpXtwrXozAeRnA56431216 = JGSZljZfOhpXtwrXozAeRnA58525743;     JGSZljZfOhpXtwrXozAeRnA58525743 = JGSZljZfOhpXtwrXozAeRnA87110829;     JGSZljZfOhpXtwrXozAeRnA87110829 = JGSZljZfOhpXtwrXozAeRnA74154464;     JGSZljZfOhpXtwrXozAeRnA74154464 = JGSZljZfOhpXtwrXozAeRnA82902606;     JGSZljZfOhpXtwrXozAeRnA82902606 = JGSZljZfOhpXtwrXozAeRnA57488306;     JGSZljZfOhpXtwrXozAeRnA57488306 = JGSZljZfOhpXtwrXozAeRnA96780858;     JGSZljZfOhpXtwrXozAeRnA96780858 = JGSZljZfOhpXtwrXozAeRnA54021227;     JGSZljZfOhpXtwrXozAeRnA54021227 = JGSZljZfOhpXtwrXozAeRnA58604413;     JGSZljZfOhpXtwrXozAeRnA58604413 = JGSZljZfOhpXtwrXozAeRnA25287612;     JGSZljZfOhpXtwrXozAeRnA25287612 = JGSZljZfOhpXtwrXozAeRnA72801377;     JGSZljZfOhpXtwrXozAeRnA72801377 = JGSZljZfOhpXtwrXozAeRnA3042184;     JGSZljZfOhpXtwrXozAeRnA3042184 = JGSZljZfOhpXtwrXozAeRnA68358945;     JGSZljZfOhpXtwrXozAeRnA68358945 = JGSZljZfOhpXtwrXozAeRnA62242079;     JGSZljZfOhpXtwrXozAeRnA62242079 = JGSZljZfOhpXtwrXozAeRnA83353567;     JGSZljZfOhpXtwrXozAeRnA83353567 = JGSZljZfOhpXtwrXozAeRnA25464143;     JGSZljZfOhpXtwrXozAeRnA25464143 = JGSZljZfOhpXtwrXozAeRnA13719306;     JGSZljZfOhpXtwrXozAeRnA13719306 = JGSZljZfOhpXtwrXozAeRnA45234708;     JGSZljZfOhpXtwrXozAeRnA45234708 = JGSZljZfOhpXtwrXozAeRnA51214205;     JGSZljZfOhpXtwrXozAeRnA51214205 = JGSZljZfOhpXtwrXozAeRnA38282060;     JGSZljZfOhpXtwrXozAeRnA38282060 = JGSZljZfOhpXtwrXozAeRnA30673060;     JGSZljZfOhpXtwrXozAeRnA30673060 = JGSZljZfOhpXtwrXozAeRnA71544925;     JGSZljZfOhpXtwrXozAeRnA71544925 = JGSZljZfOhpXtwrXozAeRnA2000211;     JGSZljZfOhpXtwrXozAeRnA2000211 = JGSZljZfOhpXtwrXozAeRnA47907053;     JGSZljZfOhpXtwrXozAeRnA47907053 = JGSZljZfOhpXtwrXozAeRnA98728813;     JGSZljZfOhpXtwrXozAeRnA98728813 = JGSZljZfOhpXtwrXozAeRnA31838873;     JGSZljZfOhpXtwrXozAeRnA31838873 = JGSZljZfOhpXtwrXozAeRnA43281906;     JGSZljZfOhpXtwrXozAeRnA43281906 = JGSZljZfOhpXtwrXozAeRnA85130160;     JGSZljZfOhpXtwrXozAeRnA85130160 = JGSZljZfOhpXtwrXozAeRnA52028541;     JGSZljZfOhpXtwrXozAeRnA52028541 = JGSZljZfOhpXtwrXozAeRnA72912330;     JGSZljZfOhpXtwrXozAeRnA72912330 = JGSZljZfOhpXtwrXozAeRnA38496430;     JGSZljZfOhpXtwrXozAeRnA38496430 = JGSZljZfOhpXtwrXozAeRnA45437357;     JGSZljZfOhpXtwrXozAeRnA45437357 = JGSZljZfOhpXtwrXozAeRnA32615786;     JGSZljZfOhpXtwrXozAeRnA32615786 = JGSZljZfOhpXtwrXozAeRnA71805387;     JGSZljZfOhpXtwrXozAeRnA71805387 = JGSZljZfOhpXtwrXozAeRnA18731445;     JGSZljZfOhpXtwrXozAeRnA18731445 = JGSZljZfOhpXtwrXozAeRnA71315194;     JGSZljZfOhpXtwrXozAeRnA71315194 = JGSZljZfOhpXtwrXozAeRnA23246796;     JGSZljZfOhpXtwrXozAeRnA23246796 = JGSZljZfOhpXtwrXozAeRnA97730204;     JGSZljZfOhpXtwrXozAeRnA97730204 = JGSZljZfOhpXtwrXozAeRnA61904658;     JGSZljZfOhpXtwrXozAeRnA61904658 = JGSZljZfOhpXtwrXozAeRnA94450037;     JGSZljZfOhpXtwrXozAeRnA94450037 = JGSZljZfOhpXtwrXozAeRnA58556897;     JGSZljZfOhpXtwrXozAeRnA58556897 = JGSZljZfOhpXtwrXozAeRnA52648108;     JGSZljZfOhpXtwrXozAeRnA52648108 = JGSZljZfOhpXtwrXozAeRnA59309178;     JGSZljZfOhpXtwrXozAeRnA59309178 = JGSZljZfOhpXtwrXozAeRnA45678830;     JGSZljZfOhpXtwrXozAeRnA45678830 = JGSZljZfOhpXtwrXozAeRnA14972131;     JGSZljZfOhpXtwrXozAeRnA14972131 = JGSZljZfOhpXtwrXozAeRnA99554445;     JGSZljZfOhpXtwrXozAeRnA99554445 = JGSZljZfOhpXtwrXozAeRnA32818023;     JGSZljZfOhpXtwrXozAeRnA32818023 = JGSZljZfOhpXtwrXozAeRnA39430915;     JGSZljZfOhpXtwrXozAeRnA39430915 = JGSZljZfOhpXtwrXozAeRnA64221186;     JGSZljZfOhpXtwrXozAeRnA64221186 = JGSZljZfOhpXtwrXozAeRnA17404278;     JGSZljZfOhpXtwrXozAeRnA17404278 = JGSZljZfOhpXtwrXozAeRnA61100252;     JGSZljZfOhpXtwrXozAeRnA61100252 = JGSZljZfOhpXtwrXozAeRnA13635330;     JGSZljZfOhpXtwrXozAeRnA13635330 = JGSZljZfOhpXtwrXozAeRnA69564801;     JGSZljZfOhpXtwrXozAeRnA69564801 = JGSZljZfOhpXtwrXozAeRnA10637478;     JGSZljZfOhpXtwrXozAeRnA10637478 = JGSZljZfOhpXtwrXozAeRnA46330814;     JGSZljZfOhpXtwrXozAeRnA46330814 = JGSZljZfOhpXtwrXozAeRnA84886290;     JGSZljZfOhpXtwrXozAeRnA84886290 = JGSZljZfOhpXtwrXozAeRnA56525533;     JGSZljZfOhpXtwrXozAeRnA56525533 = JGSZljZfOhpXtwrXozAeRnA39203777;     JGSZljZfOhpXtwrXozAeRnA39203777 = JGSZljZfOhpXtwrXozAeRnA75425650;     JGSZljZfOhpXtwrXozAeRnA75425650 = JGSZljZfOhpXtwrXozAeRnA51063733;     JGSZljZfOhpXtwrXozAeRnA51063733 = JGSZljZfOhpXtwrXozAeRnA14206401;     JGSZljZfOhpXtwrXozAeRnA14206401 = JGSZljZfOhpXtwrXozAeRnA11650699;     JGSZljZfOhpXtwrXozAeRnA11650699 = JGSZljZfOhpXtwrXozAeRnA1992687;     JGSZljZfOhpXtwrXozAeRnA1992687 = JGSZljZfOhpXtwrXozAeRnA85692083;     JGSZljZfOhpXtwrXozAeRnA85692083 = JGSZljZfOhpXtwrXozAeRnA86791181;     JGSZljZfOhpXtwrXozAeRnA86791181 = JGSZljZfOhpXtwrXozAeRnA27364020;     JGSZljZfOhpXtwrXozAeRnA27364020 = JGSZljZfOhpXtwrXozAeRnA70426398;     JGSZljZfOhpXtwrXozAeRnA70426398 = JGSZljZfOhpXtwrXozAeRnA96553558;     JGSZljZfOhpXtwrXozAeRnA96553558 = JGSZljZfOhpXtwrXozAeRnA35680561;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void naNvydWdneoMpGxCvXTihOxnzJbgmSRBGunLtOwVM2952882() {     long xvrUdPMGQfxHmBZdZwpCqqV58074149 = -283262842;    long xvrUdPMGQfxHmBZdZwpCqqV47100626 = -773525832;    long xvrUdPMGQfxHmBZdZwpCqqV60471907 = -158134416;    long xvrUdPMGQfxHmBZdZwpCqqV74881727 = 90013409;    long xvrUdPMGQfxHmBZdZwpCqqV22039065 = -206071126;    long xvrUdPMGQfxHmBZdZwpCqqV74974646 = -536769724;    long xvrUdPMGQfxHmBZdZwpCqqV71340290 = -240474058;    long xvrUdPMGQfxHmBZdZwpCqqV3786276 = -908144865;    long xvrUdPMGQfxHmBZdZwpCqqV80639329 = 64043241;    long xvrUdPMGQfxHmBZdZwpCqqV76659394 = -486399282;    long xvrUdPMGQfxHmBZdZwpCqqV66030515 = -674868185;    long xvrUdPMGQfxHmBZdZwpCqqV16773932 = -424348879;    long xvrUdPMGQfxHmBZdZwpCqqV64996204 = -507829492;    long xvrUdPMGQfxHmBZdZwpCqqV99128157 = -40194804;    long xvrUdPMGQfxHmBZdZwpCqqV63447837 = -434766140;    long xvrUdPMGQfxHmBZdZwpCqqV14498629 = -668004988;    long xvrUdPMGQfxHmBZdZwpCqqV45908936 = -227732391;    long xvrUdPMGQfxHmBZdZwpCqqV38313640 = -781198964;    long xvrUdPMGQfxHmBZdZwpCqqV27522697 = -782521745;    long xvrUdPMGQfxHmBZdZwpCqqV24356113 = -398848613;    long xvrUdPMGQfxHmBZdZwpCqqV92180124 = 99199370;    long xvrUdPMGQfxHmBZdZwpCqqV73292460 = -622477741;    long xvrUdPMGQfxHmBZdZwpCqqV69011555 = -554436475;    long xvrUdPMGQfxHmBZdZwpCqqV84026646 = -758599120;    long xvrUdPMGQfxHmBZdZwpCqqV8770551 = 50484825;    long xvrUdPMGQfxHmBZdZwpCqqV19303671 = -316438127;    long xvrUdPMGQfxHmBZdZwpCqqV19736259 = -674106779;    long xvrUdPMGQfxHmBZdZwpCqqV45327483 = -763519274;    long xvrUdPMGQfxHmBZdZwpCqqV53084151 = -140977159;    long xvrUdPMGQfxHmBZdZwpCqqV53846315 = -435076450;    long xvrUdPMGQfxHmBZdZwpCqqV59797664 = -46458787;    long xvrUdPMGQfxHmBZdZwpCqqV49821207 = -296560374;    long xvrUdPMGQfxHmBZdZwpCqqV52017463 = 93009240;    long xvrUdPMGQfxHmBZdZwpCqqV17631594 = 51463985;    long xvrUdPMGQfxHmBZdZwpCqqV80982156 = -849319416;    long xvrUdPMGQfxHmBZdZwpCqqV73019143 = -661618686;    long xvrUdPMGQfxHmBZdZwpCqqV64400950 = -466238338;    long xvrUdPMGQfxHmBZdZwpCqqV41196728 = -376140136;    long xvrUdPMGQfxHmBZdZwpCqqV9775394 = -355006548;    long xvrUdPMGQfxHmBZdZwpCqqV2334050 = -285985376;    long xvrUdPMGQfxHmBZdZwpCqqV99506116 = 24801705;    long xvrUdPMGQfxHmBZdZwpCqqV28098342 = -912752120;    long xvrUdPMGQfxHmBZdZwpCqqV18068209 = -629244343;    long xvrUdPMGQfxHmBZdZwpCqqV43254405 = -338153524;    long xvrUdPMGQfxHmBZdZwpCqqV52324160 = -266926680;    long xvrUdPMGQfxHmBZdZwpCqqV29914393 = -531420322;    long xvrUdPMGQfxHmBZdZwpCqqV67953172 = -524657920;    long xvrUdPMGQfxHmBZdZwpCqqV94679236 = -33864130;    long xvrUdPMGQfxHmBZdZwpCqqV89520821 = -387793878;    long xvrUdPMGQfxHmBZdZwpCqqV22273031 = -813942729;    long xvrUdPMGQfxHmBZdZwpCqqV46824051 = -963841209;    long xvrUdPMGQfxHmBZdZwpCqqV97586059 = -367442639;    long xvrUdPMGQfxHmBZdZwpCqqV33539115 = -213451116;    long xvrUdPMGQfxHmBZdZwpCqqV21581200 = -210831970;    long xvrUdPMGQfxHmBZdZwpCqqV10772758 = -601936000;    long xvrUdPMGQfxHmBZdZwpCqqV84781689 = -660785101;    long xvrUdPMGQfxHmBZdZwpCqqV78089071 = -119089358;    long xvrUdPMGQfxHmBZdZwpCqqV76445260 = -399535296;    long xvrUdPMGQfxHmBZdZwpCqqV66111176 = -960471416;    long xvrUdPMGQfxHmBZdZwpCqqV2735395 = -889632999;    long xvrUdPMGQfxHmBZdZwpCqqV55238387 = -862662946;    long xvrUdPMGQfxHmBZdZwpCqqV26012808 = -476954784;    long xvrUdPMGQfxHmBZdZwpCqqV50702124 = -667167706;    long xvrUdPMGQfxHmBZdZwpCqqV26793014 = -500880309;    long xvrUdPMGQfxHmBZdZwpCqqV16861731 = -339940495;    long xvrUdPMGQfxHmBZdZwpCqqV16209308 = -278307812;    long xvrUdPMGQfxHmBZdZwpCqqV64756469 = -417358120;    long xvrUdPMGQfxHmBZdZwpCqqV47364611 = -459293477;    long xvrUdPMGQfxHmBZdZwpCqqV18146002 = -190875388;    long xvrUdPMGQfxHmBZdZwpCqqV90428693 = -773147454;    long xvrUdPMGQfxHmBZdZwpCqqV50097678 = -101766651;    long xvrUdPMGQfxHmBZdZwpCqqV4712209 = -851592255;    long xvrUdPMGQfxHmBZdZwpCqqV28538247 = -326192417;    long xvrUdPMGQfxHmBZdZwpCqqV25188648 = -396536370;    long xvrUdPMGQfxHmBZdZwpCqqV24849996 = -323650319;    long xvrUdPMGQfxHmBZdZwpCqqV64081783 = 11951489;    long xvrUdPMGQfxHmBZdZwpCqqV55224251 = -993233398;    long xvrUdPMGQfxHmBZdZwpCqqV25757151 = -116282951;    long xvrUdPMGQfxHmBZdZwpCqqV31702487 = -391672441;    long xvrUdPMGQfxHmBZdZwpCqqV78856158 = -418094853;    long xvrUdPMGQfxHmBZdZwpCqqV51350498 = -791780208;    long xvrUdPMGQfxHmBZdZwpCqqV25057023 = -540242649;    long xvrUdPMGQfxHmBZdZwpCqqV55806661 = -275725397;    long xvrUdPMGQfxHmBZdZwpCqqV30811121 = -327034430;    long xvrUdPMGQfxHmBZdZwpCqqV7022264 = -471235241;    long xvrUdPMGQfxHmBZdZwpCqqV62211604 = -679016149;    long xvrUdPMGQfxHmBZdZwpCqqV16282093 = 16890742;    long xvrUdPMGQfxHmBZdZwpCqqV30436264 = -696158790;    long xvrUdPMGQfxHmBZdZwpCqqV6858836 = -346600016;    long xvrUdPMGQfxHmBZdZwpCqqV96200466 = -88534316;    long xvrUdPMGQfxHmBZdZwpCqqV94930072 = -442529328;    long xvrUdPMGQfxHmBZdZwpCqqV87955690 = 33296958;    long xvrUdPMGQfxHmBZdZwpCqqV75085551 = -415668720;    long xvrUdPMGQfxHmBZdZwpCqqV7039999 = -465373549;    long xvrUdPMGQfxHmBZdZwpCqqV47095662 = -423322430;    long xvrUdPMGQfxHmBZdZwpCqqV73493309 = -498243511;    long xvrUdPMGQfxHmBZdZwpCqqV77396218 = -145584414;    long xvrUdPMGQfxHmBZdZwpCqqV91275194 = -28364035;    long xvrUdPMGQfxHmBZdZwpCqqV26392675 = -998213030;    long xvrUdPMGQfxHmBZdZwpCqqV36114852 = -283262842;     xvrUdPMGQfxHmBZdZwpCqqV58074149 = xvrUdPMGQfxHmBZdZwpCqqV47100626;     xvrUdPMGQfxHmBZdZwpCqqV47100626 = xvrUdPMGQfxHmBZdZwpCqqV60471907;     xvrUdPMGQfxHmBZdZwpCqqV60471907 = xvrUdPMGQfxHmBZdZwpCqqV74881727;     xvrUdPMGQfxHmBZdZwpCqqV74881727 = xvrUdPMGQfxHmBZdZwpCqqV22039065;     xvrUdPMGQfxHmBZdZwpCqqV22039065 = xvrUdPMGQfxHmBZdZwpCqqV74974646;     xvrUdPMGQfxHmBZdZwpCqqV74974646 = xvrUdPMGQfxHmBZdZwpCqqV71340290;     xvrUdPMGQfxHmBZdZwpCqqV71340290 = xvrUdPMGQfxHmBZdZwpCqqV3786276;     xvrUdPMGQfxHmBZdZwpCqqV3786276 = xvrUdPMGQfxHmBZdZwpCqqV80639329;     xvrUdPMGQfxHmBZdZwpCqqV80639329 = xvrUdPMGQfxHmBZdZwpCqqV76659394;     xvrUdPMGQfxHmBZdZwpCqqV76659394 = xvrUdPMGQfxHmBZdZwpCqqV66030515;     xvrUdPMGQfxHmBZdZwpCqqV66030515 = xvrUdPMGQfxHmBZdZwpCqqV16773932;     xvrUdPMGQfxHmBZdZwpCqqV16773932 = xvrUdPMGQfxHmBZdZwpCqqV64996204;     xvrUdPMGQfxHmBZdZwpCqqV64996204 = xvrUdPMGQfxHmBZdZwpCqqV99128157;     xvrUdPMGQfxHmBZdZwpCqqV99128157 = xvrUdPMGQfxHmBZdZwpCqqV63447837;     xvrUdPMGQfxHmBZdZwpCqqV63447837 = xvrUdPMGQfxHmBZdZwpCqqV14498629;     xvrUdPMGQfxHmBZdZwpCqqV14498629 = xvrUdPMGQfxHmBZdZwpCqqV45908936;     xvrUdPMGQfxHmBZdZwpCqqV45908936 = xvrUdPMGQfxHmBZdZwpCqqV38313640;     xvrUdPMGQfxHmBZdZwpCqqV38313640 = xvrUdPMGQfxHmBZdZwpCqqV27522697;     xvrUdPMGQfxHmBZdZwpCqqV27522697 = xvrUdPMGQfxHmBZdZwpCqqV24356113;     xvrUdPMGQfxHmBZdZwpCqqV24356113 = xvrUdPMGQfxHmBZdZwpCqqV92180124;     xvrUdPMGQfxHmBZdZwpCqqV92180124 = xvrUdPMGQfxHmBZdZwpCqqV73292460;     xvrUdPMGQfxHmBZdZwpCqqV73292460 = xvrUdPMGQfxHmBZdZwpCqqV69011555;     xvrUdPMGQfxHmBZdZwpCqqV69011555 = xvrUdPMGQfxHmBZdZwpCqqV84026646;     xvrUdPMGQfxHmBZdZwpCqqV84026646 = xvrUdPMGQfxHmBZdZwpCqqV8770551;     xvrUdPMGQfxHmBZdZwpCqqV8770551 = xvrUdPMGQfxHmBZdZwpCqqV19303671;     xvrUdPMGQfxHmBZdZwpCqqV19303671 = xvrUdPMGQfxHmBZdZwpCqqV19736259;     xvrUdPMGQfxHmBZdZwpCqqV19736259 = xvrUdPMGQfxHmBZdZwpCqqV45327483;     xvrUdPMGQfxHmBZdZwpCqqV45327483 = xvrUdPMGQfxHmBZdZwpCqqV53084151;     xvrUdPMGQfxHmBZdZwpCqqV53084151 = xvrUdPMGQfxHmBZdZwpCqqV53846315;     xvrUdPMGQfxHmBZdZwpCqqV53846315 = xvrUdPMGQfxHmBZdZwpCqqV59797664;     xvrUdPMGQfxHmBZdZwpCqqV59797664 = xvrUdPMGQfxHmBZdZwpCqqV49821207;     xvrUdPMGQfxHmBZdZwpCqqV49821207 = xvrUdPMGQfxHmBZdZwpCqqV52017463;     xvrUdPMGQfxHmBZdZwpCqqV52017463 = xvrUdPMGQfxHmBZdZwpCqqV17631594;     xvrUdPMGQfxHmBZdZwpCqqV17631594 = xvrUdPMGQfxHmBZdZwpCqqV80982156;     xvrUdPMGQfxHmBZdZwpCqqV80982156 = xvrUdPMGQfxHmBZdZwpCqqV73019143;     xvrUdPMGQfxHmBZdZwpCqqV73019143 = xvrUdPMGQfxHmBZdZwpCqqV64400950;     xvrUdPMGQfxHmBZdZwpCqqV64400950 = xvrUdPMGQfxHmBZdZwpCqqV41196728;     xvrUdPMGQfxHmBZdZwpCqqV41196728 = xvrUdPMGQfxHmBZdZwpCqqV9775394;     xvrUdPMGQfxHmBZdZwpCqqV9775394 = xvrUdPMGQfxHmBZdZwpCqqV2334050;     xvrUdPMGQfxHmBZdZwpCqqV2334050 = xvrUdPMGQfxHmBZdZwpCqqV99506116;     xvrUdPMGQfxHmBZdZwpCqqV99506116 = xvrUdPMGQfxHmBZdZwpCqqV28098342;     xvrUdPMGQfxHmBZdZwpCqqV28098342 = xvrUdPMGQfxHmBZdZwpCqqV18068209;     xvrUdPMGQfxHmBZdZwpCqqV18068209 = xvrUdPMGQfxHmBZdZwpCqqV43254405;     xvrUdPMGQfxHmBZdZwpCqqV43254405 = xvrUdPMGQfxHmBZdZwpCqqV52324160;     xvrUdPMGQfxHmBZdZwpCqqV52324160 = xvrUdPMGQfxHmBZdZwpCqqV29914393;     xvrUdPMGQfxHmBZdZwpCqqV29914393 = xvrUdPMGQfxHmBZdZwpCqqV67953172;     xvrUdPMGQfxHmBZdZwpCqqV67953172 = xvrUdPMGQfxHmBZdZwpCqqV94679236;     xvrUdPMGQfxHmBZdZwpCqqV94679236 = xvrUdPMGQfxHmBZdZwpCqqV89520821;     xvrUdPMGQfxHmBZdZwpCqqV89520821 = xvrUdPMGQfxHmBZdZwpCqqV22273031;     xvrUdPMGQfxHmBZdZwpCqqV22273031 = xvrUdPMGQfxHmBZdZwpCqqV46824051;     xvrUdPMGQfxHmBZdZwpCqqV46824051 = xvrUdPMGQfxHmBZdZwpCqqV97586059;     xvrUdPMGQfxHmBZdZwpCqqV97586059 = xvrUdPMGQfxHmBZdZwpCqqV33539115;     xvrUdPMGQfxHmBZdZwpCqqV33539115 = xvrUdPMGQfxHmBZdZwpCqqV21581200;     xvrUdPMGQfxHmBZdZwpCqqV21581200 = xvrUdPMGQfxHmBZdZwpCqqV10772758;     xvrUdPMGQfxHmBZdZwpCqqV10772758 = xvrUdPMGQfxHmBZdZwpCqqV84781689;     xvrUdPMGQfxHmBZdZwpCqqV84781689 = xvrUdPMGQfxHmBZdZwpCqqV78089071;     xvrUdPMGQfxHmBZdZwpCqqV78089071 = xvrUdPMGQfxHmBZdZwpCqqV76445260;     xvrUdPMGQfxHmBZdZwpCqqV76445260 = xvrUdPMGQfxHmBZdZwpCqqV66111176;     xvrUdPMGQfxHmBZdZwpCqqV66111176 = xvrUdPMGQfxHmBZdZwpCqqV2735395;     xvrUdPMGQfxHmBZdZwpCqqV2735395 = xvrUdPMGQfxHmBZdZwpCqqV55238387;     xvrUdPMGQfxHmBZdZwpCqqV55238387 = xvrUdPMGQfxHmBZdZwpCqqV26012808;     xvrUdPMGQfxHmBZdZwpCqqV26012808 = xvrUdPMGQfxHmBZdZwpCqqV50702124;     xvrUdPMGQfxHmBZdZwpCqqV50702124 = xvrUdPMGQfxHmBZdZwpCqqV26793014;     xvrUdPMGQfxHmBZdZwpCqqV26793014 = xvrUdPMGQfxHmBZdZwpCqqV16861731;     xvrUdPMGQfxHmBZdZwpCqqV16861731 = xvrUdPMGQfxHmBZdZwpCqqV16209308;     xvrUdPMGQfxHmBZdZwpCqqV16209308 = xvrUdPMGQfxHmBZdZwpCqqV64756469;     xvrUdPMGQfxHmBZdZwpCqqV64756469 = xvrUdPMGQfxHmBZdZwpCqqV47364611;     xvrUdPMGQfxHmBZdZwpCqqV47364611 = xvrUdPMGQfxHmBZdZwpCqqV18146002;     xvrUdPMGQfxHmBZdZwpCqqV18146002 = xvrUdPMGQfxHmBZdZwpCqqV90428693;     xvrUdPMGQfxHmBZdZwpCqqV90428693 = xvrUdPMGQfxHmBZdZwpCqqV50097678;     xvrUdPMGQfxHmBZdZwpCqqV50097678 = xvrUdPMGQfxHmBZdZwpCqqV4712209;     xvrUdPMGQfxHmBZdZwpCqqV4712209 = xvrUdPMGQfxHmBZdZwpCqqV28538247;     xvrUdPMGQfxHmBZdZwpCqqV28538247 = xvrUdPMGQfxHmBZdZwpCqqV25188648;     xvrUdPMGQfxHmBZdZwpCqqV25188648 = xvrUdPMGQfxHmBZdZwpCqqV24849996;     xvrUdPMGQfxHmBZdZwpCqqV24849996 = xvrUdPMGQfxHmBZdZwpCqqV64081783;     xvrUdPMGQfxHmBZdZwpCqqV64081783 = xvrUdPMGQfxHmBZdZwpCqqV55224251;     xvrUdPMGQfxHmBZdZwpCqqV55224251 = xvrUdPMGQfxHmBZdZwpCqqV25757151;     xvrUdPMGQfxHmBZdZwpCqqV25757151 = xvrUdPMGQfxHmBZdZwpCqqV31702487;     xvrUdPMGQfxHmBZdZwpCqqV31702487 = xvrUdPMGQfxHmBZdZwpCqqV78856158;     xvrUdPMGQfxHmBZdZwpCqqV78856158 = xvrUdPMGQfxHmBZdZwpCqqV51350498;     xvrUdPMGQfxHmBZdZwpCqqV51350498 = xvrUdPMGQfxHmBZdZwpCqqV25057023;     xvrUdPMGQfxHmBZdZwpCqqV25057023 = xvrUdPMGQfxHmBZdZwpCqqV55806661;     xvrUdPMGQfxHmBZdZwpCqqV55806661 = xvrUdPMGQfxHmBZdZwpCqqV30811121;     xvrUdPMGQfxHmBZdZwpCqqV30811121 = xvrUdPMGQfxHmBZdZwpCqqV7022264;     xvrUdPMGQfxHmBZdZwpCqqV7022264 = xvrUdPMGQfxHmBZdZwpCqqV62211604;     xvrUdPMGQfxHmBZdZwpCqqV62211604 = xvrUdPMGQfxHmBZdZwpCqqV16282093;     xvrUdPMGQfxHmBZdZwpCqqV16282093 = xvrUdPMGQfxHmBZdZwpCqqV30436264;     xvrUdPMGQfxHmBZdZwpCqqV30436264 = xvrUdPMGQfxHmBZdZwpCqqV6858836;     xvrUdPMGQfxHmBZdZwpCqqV6858836 = xvrUdPMGQfxHmBZdZwpCqqV96200466;     xvrUdPMGQfxHmBZdZwpCqqV96200466 = xvrUdPMGQfxHmBZdZwpCqqV94930072;     xvrUdPMGQfxHmBZdZwpCqqV94930072 = xvrUdPMGQfxHmBZdZwpCqqV87955690;     xvrUdPMGQfxHmBZdZwpCqqV87955690 = xvrUdPMGQfxHmBZdZwpCqqV75085551;     xvrUdPMGQfxHmBZdZwpCqqV75085551 = xvrUdPMGQfxHmBZdZwpCqqV7039999;     xvrUdPMGQfxHmBZdZwpCqqV7039999 = xvrUdPMGQfxHmBZdZwpCqqV47095662;     xvrUdPMGQfxHmBZdZwpCqqV47095662 = xvrUdPMGQfxHmBZdZwpCqqV73493309;     xvrUdPMGQfxHmBZdZwpCqqV73493309 = xvrUdPMGQfxHmBZdZwpCqqV77396218;     xvrUdPMGQfxHmBZdZwpCqqV77396218 = xvrUdPMGQfxHmBZdZwpCqqV91275194;     xvrUdPMGQfxHmBZdZwpCqqV91275194 = xvrUdPMGQfxHmBZdZwpCqqV26392675;     xvrUdPMGQfxHmBZdZwpCqqV26392675 = xvrUdPMGQfxHmBZdZwpCqqV36114852;     xvrUdPMGQfxHmBZdZwpCqqV36114852 = xvrUdPMGQfxHmBZdZwpCqqV58074149;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void VXduywShPdOOaKuxMBTsXMVEFbUQehEJAwaZvuOvf14845505() {     double uVNuLaWcTJWFLnJCYpXbBCh14465616 = -593914223;    double uVNuLaWcTJWFLnJCYpXbBCh75129149 = -319341620;    double uVNuLaWcTJWFLnJCYpXbBCh94676610 = -626596260;    double uVNuLaWcTJWFLnJCYpXbBCh25122105 = -602222937;    double uVNuLaWcTJWFLnJCYpXbBCh71004643 = -19068189;    double uVNuLaWcTJWFLnJCYpXbBCh5331040 = -900089584;    double uVNuLaWcTJWFLnJCYpXbBCh24081004 = -714444210;    double uVNuLaWcTJWFLnJCYpXbBCh84449344 = 43551678;    double uVNuLaWcTJWFLnJCYpXbBCh49026776 = -670247322;    double uVNuLaWcTJWFLnJCYpXbBCh28928625 = -572644816;    double uVNuLaWcTJWFLnJCYpXbBCh34854357 = -722079211;    double uVNuLaWcTJWFLnJCYpXbBCh86322103 = -61884878;    double uVNuLaWcTJWFLnJCYpXbBCh58031084 = -190135439;    double uVNuLaWcTJWFLnJCYpXbBCh62401252 = -842690666;    double uVNuLaWcTJWFLnJCYpXbBCh86394140 = -928937268;    double uVNuLaWcTJWFLnJCYpXbBCh22352300 = -751649596;    double uVNuLaWcTJWFLnJCYpXbBCh87748034 = -564523267;    double uVNuLaWcTJWFLnJCYpXbBCh10843016 = -383072021;    double uVNuLaWcTJWFLnJCYpXbBCh8210080 = -891751909;    double uVNuLaWcTJWFLnJCYpXbBCh93701801 = -851476796;    double uVNuLaWcTJWFLnJCYpXbBCh52184509 = -74075356;    double uVNuLaWcTJWFLnJCYpXbBCh82390436 = -9904886;    double uVNuLaWcTJWFLnJCYpXbBCh97611302 = -909677882;    double uVNuLaWcTJWFLnJCYpXbBCh17192739 = -909001757;    double uVNuLaWcTJWFLnJCYpXbBCh93828352 = -986409600;    double uVNuLaWcTJWFLnJCYpXbBCh89106512 = -138705209;    double uVNuLaWcTJWFLnJCYpXbBCh67999422 = -516159847;    double uVNuLaWcTJWFLnJCYpXbBCh87854826 = -452660074;    double uVNuLaWcTJWFLnJCYpXbBCh14562290 = -684603358;    double uVNuLaWcTJWFLnJCYpXbBCh24244341 = -168877371;    double uVNuLaWcTJWFLnJCYpXbBCh40368831 = -281440471;    double uVNuLaWcTJWFLnJCYpXbBCh97661583 = -383875654;    double uVNuLaWcTJWFLnJCYpXbBCh46403543 = -170404206;    double uVNuLaWcTJWFLnJCYpXbBCh6240489 = -695083557;    double uVNuLaWcTJWFLnJCYpXbBCh43101932 = -119163838;    double uVNuLaWcTJWFLnJCYpXbBCh31338249 = -850841675;    double uVNuLaWcTJWFLnJCYpXbBCh10768323 = -111106358;    double uVNuLaWcTJWFLnJCYpXbBCh87528159 = -334765851;    double uVNuLaWcTJWFLnJCYpXbBCh71491485 = -729102191;    double uVNuLaWcTJWFLnJCYpXbBCh58434637 = -935551720;    double uVNuLaWcTJWFLnJCYpXbBCh27185688 = -459921266;    double uVNuLaWcTJWFLnJCYpXbBCh28373985 = -360355807;    double uVNuLaWcTJWFLnJCYpXbBCh75580783 = -780743629;    double uVNuLaWcTJWFLnJCYpXbBCh5376649 = -947980756;    double uVNuLaWcTJWFLnJCYpXbBCh13332918 = -56626510;    double uVNuLaWcTJWFLnJCYpXbBCh76835449 = -246090709;    double uVNuLaWcTJWFLnJCYpXbBCh13668630 = -343735601;    double uVNuLaWcTJWFLnJCYpXbBCh53245115 = -538730859;    double uVNuLaWcTJWFLnJCYpXbBCh91217443 = -85535831;    double uVNuLaWcTJWFLnJCYpXbBCh759597 = 83782818;    double uVNuLaWcTJWFLnJCYpXbBCh9302641 = -434922116;    double uVNuLaWcTJWFLnJCYpXbBCh65311147 = -973571745;    double uVNuLaWcTJWFLnJCYpXbBCh44643777 = -549466260;    double uVNuLaWcTJWFLnJCYpXbBCh96493629 = -963537804;    double uVNuLaWcTJWFLnJCYpXbBCh62660995 = 11616938;    double uVNuLaWcTJWFLnJCYpXbBCh32075179 = -484009337;    double uVNuLaWcTJWFLnJCYpXbBCh77517847 = -409663739;    double uVNuLaWcTJWFLnJCYpXbBCh77483871 = -717594504;    double uVNuLaWcTJWFLnJCYpXbBCh31293752 = -615813337;    double uVNuLaWcTJWFLnJCYpXbBCh81898130 = -880362980;    double uVNuLaWcTJWFLnJCYpXbBCh37331617 = -283929737;    double uVNuLaWcTJWFLnJCYpXbBCh36226177 = -161784137;    double uVNuLaWcTJWFLnJCYpXbBCh69887054 = -271844965;    double uVNuLaWcTJWFLnJCYpXbBCh24782436 = -401369952;    double uVNuLaWcTJWFLnJCYpXbBCh88559793 = -191204345;    double uVNuLaWcTJWFLnJCYpXbBCh37192774 = -238203558;    double uVNuLaWcTJWFLnJCYpXbBCh39918560 = -891480672;    double uVNuLaWcTJWFLnJCYpXbBCh51790595 = -495051882;    double uVNuLaWcTJWFLnJCYpXbBCh19299321 = -623526829;    double uVNuLaWcTJWFLnJCYpXbBCh55055892 = 21904406;    double uVNuLaWcTJWFLnJCYpXbBCh11583978 = -540543239;    double uVNuLaWcTJWFLnJCYpXbBCh219876 = -129757416;    double uVNuLaWcTJWFLnJCYpXbBCh39351530 = -653969831;    double uVNuLaWcTJWFLnJCYpXbBCh49775442 = -956200190;    double uVNuLaWcTJWFLnJCYpXbBCh66516113 = -291555530;    double uVNuLaWcTJWFLnJCYpXbBCh23810524 = -713719549;    double uVNuLaWcTJWFLnJCYpXbBCh6809653 = -229161257;    double uVNuLaWcTJWFLnJCYpXbBCh92234654 = -961697127;    double uVNuLaWcTJWFLnJCYpXbBCh3859821 = -752375247;    double uVNuLaWcTJWFLnJCYpXbBCh16992904 = -640318891;    double uVNuLaWcTJWFLnJCYpXbBCh75437882 = -794969608;    double uVNuLaWcTJWFLnJCYpXbBCh14754308 = -977428989;    double uVNuLaWcTJWFLnJCYpXbBCh96637383 = -267124243;    double uVNuLaWcTJWFLnJCYpXbBCh13802693 = -668386176;    double uVNuLaWcTJWFLnJCYpXbBCh14941700 = -733955256;    double uVNuLaWcTJWFLnJCYpXbBCh75057684 = -307868726;    double uVNuLaWcTJWFLnJCYpXbBCh53017806 = -834409395;    double uVNuLaWcTJWFLnJCYpXbBCh49909914 = -206866403;    double uVNuLaWcTJWFLnJCYpXbBCh43579494 = -606700495;    double uVNuLaWcTJWFLnJCYpXbBCh11026753 = -635154501;    double uVNuLaWcTJWFLnJCYpXbBCh53820401 = -341177937;    double uVNuLaWcTJWFLnJCYpXbBCh33284451 = -393511854;    double uVNuLaWcTJWFLnJCYpXbBCh56234407 = -718952515;    double uVNuLaWcTJWFLnJCYpXbBCh89593354 = -848739211;    double uVNuLaWcTJWFLnJCYpXbBCh21103021 = -551621983;    double uVNuLaWcTJWFLnJCYpXbBCh90959510 = -198137130;    double uVNuLaWcTJWFLnJCYpXbBCh58486930 = 11489157;    double uVNuLaWcTJWFLnJCYpXbBCh50798348 = -279373678;    double uVNuLaWcTJWFLnJCYpXbBCh16816855 = -656776411;    double uVNuLaWcTJWFLnJCYpXbBCh76140144 = -593914223;     uVNuLaWcTJWFLnJCYpXbBCh14465616 = uVNuLaWcTJWFLnJCYpXbBCh75129149;     uVNuLaWcTJWFLnJCYpXbBCh75129149 = uVNuLaWcTJWFLnJCYpXbBCh94676610;     uVNuLaWcTJWFLnJCYpXbBCh94676610 = uVNuLaWcTJWFLnJCYpXbBCh25122105;     uVNuLaWcTJWFLnJCYpXbBCh25122105 = uVNuLaWcTJWFLnJCYpXbBCh71004643;     uVNuLaWcTJWFLnJCYpXbBCh71004643 = uVNuLaWcTJWFLnJCYpXbBCh5331040;     uVNuLaWcTJWFLnJCYpXbBCh5331040 = uVNuLaWcTJWFLnJCYpXbBCh24081004;     uVNuLaWcTJWFLnJCYpXbBCh24081004 = uVNuLaWcTJWFLnJCYpXbBCh84449344;     uVNuLaWcTJWFLnJCYpXbBCh84449344 = uVNuLaWcTJWFLnJCYpXbBCh49026776;     uVNuLaWcTJWFLnJCYpXbBCh49026776 = uVNuLaWcTJWFLnJCYpXbBCh28928625;     uVNuLaWcTJWFLnJCYpXbBCh28928625 = uVNuLaWcTJWFLnJCYpXbBCh34854357;     uVNuLaWcTJWFLnJCYpXbBCh34854357 = uVNuLaWcTJWFLnJCYpXbBCh86322103;     uVNuLaWcTJWFLnJCYpXbBCh86322103 = uVNuLaWcTJWFLnJCYpXbBCh58031084;     uVNuLaWcTJWFLnJCYpXbBCh58031084 = uVNuLaWcTJWFLnJCYpXbBCh62401252;     uVNuLaWcTJWFLnJCYpXbBCh62401252 = uVNuLaWcTJWFLnJCYpXbBCh86394140;     uVNuLaWcTJWFLnJCYpXbBCh86394140 = uVNuLaWcTJWFLnJCYpXbBCh22352300;     uVNuLaWcTJWFLnJCYpXbBCh22352300 = uVNuLaWcTJWFLnJCYpXbBCh87748034;     uVNuLaWcTJWFLnJCYpXbBCh87748034 = uVNuLaWcTJWFLnJCYpXbBCh10843016;     uVNuLaWcTJWFLnJCYpXbBCh10843016 = uVNuLaWcTJWFLnJCYpXbBCh8210080;     uVNuLaWcTJWFLnJCYpXbBCh8210080 = uVNuLaWcTJWFLnJCYpXbBCh93701801;     uVNuLaWcTJWFLnJCYpXbBCh93701801 = uVNuLaWcTJWFLnJCYpXbBCh52184509;     uVNuLaWcTJWFLnJCYpXbBCh52184509 = uVNuLaWcTJWFLnJCYpXbBCh82390436;     uVNuLaWcTJWFLnJCYpXbBCh82390436 = uVNuLaWcTJWFLnJCYpXbBCh97611302;     uVNuLaWcTJWFLnJCYpXbBCh97611302 = uVNuLaWcTJWFLnJCYpXbBCh17192739;     uVNuLaWcTJWFLnJCYpXbBCh17192739 = uVNuLaWcTJWFLnJCYpXbBCh93828352;     uVNuLaWcTJWFLnJCYpXbBCh93828352 = uVNuLaWcTJWFLnJCYpXbBCh89106512;     uVNuLaWcTJWFLnJCYpXbBCh89106512 = uVNuLaWcTJWFLnJCYpXbBCh67999422;     uVNuLaWcTJWFLnJCYpXbBCh67999422 = uVNuLaWcTJWFLnJCYpXbBCh87854826;     uVNuLaWcTJWFLnJCYpXbBCh87854826 = uVNuLaWcTJWFLnJCYpXbBCh14562290;     uVNuLaWcTJWFLnJCYpXbBCh14562290 = uVNuLaWcTJWFLnJCYpXbBCh24244341;     uVNuLaWcTJWFLnJCYpXbBCh24244341 = uVNuLaWcTJWFLnJCYpXbBCh40368831;     uVNuLaWcTJWFLnJCYpXbBCh40368831 = uVNuLaWcTJWFLnJCYpXbBCh97661583;     uVNuLaWcTJWFLnJCYpXbBCh97661583 = uVNuLaWcTJWFLnJCYpXbBCh46403543;     uVNuLaWcTJWFLnJCYpXbBCh46403543 = uVNuLaWcTJWFLnJCYpXbBCh6240489;     uVNuLaWcTJWFLnJCYpXbBCh6240489 = uVNuLaWcTJWFLnJCYpXbBCh43101932;     uVNuLaWcTJWFLnJCYpXbBCh43101932 = uVNuLaWcTJWFLnJCYpXbBCh31338249;     uVNuLaWcTJWFLnJCYpXbBCh31338249 = uVNuLaWcTJWFLnJCYpXbBCh10768323;     uVNuLaWcTJWFLnJCYpXbBCh10768323 = uVNuLaWcTJWFLnJCYpXbBCh87528159;     uVNuLaWcTJWFLnJCYpXbBCh87528159 = uVNuLaWcTJWFLnJCYpXbBCh71491485;     uVNuLaWcTJWFLnJCYpXbBCh71491485 = uVNuLaWcTJWFLnJCYpXbBCh58434637;     uVNuLaWcTJWFLnJCYpXbBCh58434637 = uVNuLaWcTJWFLnJCYpXbBCh27185688;     uVNuLaWcTJWFLnJCYpXbBCh27185688 = uVNuLaWcTJWFLnJCYpXbBCh28373985;     uVNuLaWcTJWFLnJCYpXbBCh28373985 = uVNuLaWcTJWFLnJCYpXbBCh75580783;     uVNuLaWcTJWFLnJCYpXbBCh75580783 = uVNuLaWcTJWFLnJCYpXbBCh5376649;     uVNuLaWcTJWFLnJCYpXbBCh5376649 = uVNuLaWcTJWFLnJCYpXbBCh13332918;     uVNuLaWcTJWFLnJCYpXbBCh13332918 = uVNuLaWcTJWFLnJCYpXbBCh76835449;     uVNuLaWcTJWFLnJCYpXbBCh76835449 = uVNuLaWcTJWFLnJCYpXbBCh13668630;     uVNuLaWcTJWFLnJCYpXbBCh13668630 = uVNuLaWcTJWFLnJCYpXbBCh53245115;     uVNuLaWcTJWFLnJCYpXbBCh53245115 = uVNuLaWcTJWFLnJCYpXbBCh91217443;     uVNuLaWcTJWFLnJCYpXbBCh91217443 = uVNuLaWcTJWFLnJCYpXbBCh759597;     uVNuLaWcTJWFLnJCYpXbBCh759597 = uVNuLaWcTJWFLnJCYpXbBCh9302641;     uVNuLaWcTJWFLnJCYpXbBCh9302641 = uVNuLaWcTJWFLnJCYpXbBCh65311147;     uVNuLaWcTJWFLnJCYpXbBCh65311147 = uVNuLaWcTJWFLnJCYpXbBCh44643777;     uVNuLaWcTJWFLnJCYpXbBCh44643777 = uVNuLaWcTJWFLnJCYpXbBCh96493629;     uVNuLaWcTJWFLnJCYpXbBCh96493629 = uVNuLaWcTJWFLnJCYpXbBCh62660995;     uVNuLaWcTJWFLnJCYpXbBCh62660995 = uVNuLaWcTJWFLnJCYpXbBCh32075179;     uVNuLaWcTJWFLnJCYpXbBCh32075179 = uVNuLaWcTJWFLnJCYpXbBCh77517847;     uVNuLaWcTJWFLnJCYpXbBCh77517847 = uVNuLaWcTJWFLnJCYpXbBCh77483871;     uVNuLaWcTJWFLnJCYpXbBCh77483871 = uVNuLaWcTJWFLnJCYpXbBCh31293752;     uVNuLaWcTJWFLnJCYpXbBCh31293752 = uVNuLaWcTJWFLnJCYpXbBCh81898130;     uVNuLaWcTJWFLnJCYpXbBCh81898130 = uVNuLaWcTJWFLnJCYpXbBCh37331617;     uVNuLaWcTJWFLnJCYpXbBCh37331617 = uVNuLaWcTJWFLnJCYpXbBCh36226177;     uVNuLaWcTJWFLnJCYpXbBCh36226177 = uVNuLaWcTJWFLnJCYpXbBCh69887054;     uVNuLaWcTJWFLnJCYpXbBCh69887054 = uVNuLaWcTJWFLnJCYpXbBCh24782436;     uVNuLaWcTJWFLnJCYpXbBCh24782436 = uVNuLaWcTJWFLnJCYpXbBCh88559793;     uVNuLaWcTJWFLnJCYpXbBCh88559793 = uVNuLaWcTJWFLnJCYpXbBCh37192774;     uVNuLaWcTJWFLnJCYpXbBCh37192774 = uVNuLaWcTJWFLnJCYpXbBCh39918560;     uVNuLaWcTJWFLnJCYpXbBCh39918560 = uVNuLaWcTJWFLnJCYpXbBCh51790595;     uVNuLaWcTJWFLnJCYpXbBCh51790595 = uVNuLaWcTJWFLnJCYpXbBCh19299321;     uVNuLaWcTJWFLnJCYpXbBCh19299321 = uVNuLaWcTJWFLnJCYpXbBCh55055892;     uVNuLaWcTJWFLnJCYpXbBCh55055892 = uVNuLaWcTJWFLnJCYpXbBCh11583978;     uVNuLaWcTJWFLnJCYpXbBCh11583978 = uVNuLaWcTJWFLnJCYpXbBCh219876;     uVNuLaWcTJWFLnJCYpXbBCh219876 = uVNuLaWcTJWFLnJCYpXbBCh39351530;     uVNuLaWcTJWFLnJCYpXbBCh39351530 = uVNuLaWcTJWFLnJCYpXbBCh49775442;     uVNuLaWcTJWFLnJCYpXbBCh49775442 = uVNuLaWcTJWFLnJCYpXbBCh66516113;     uVNuLaWcTJWFLnJCYpXbBCh66516113 = uVNuLaWcTJWFLnJCYpXbBCh23810524;     uVNuLaWcTJWFLnJCYpXbBCh23810524 = uVNuLaWcTJWFLnJCYpXbBCh6809653;     uVNuLaWcTJWFLnJCYpXbBCh6809653 = uVNuLaWcTJWFLnJCYpXbBCh92234654;     uVNuLaWcTJWFLnJCYpXbBCh92234654 = uVNuLaWcTJWFLnJCYpXbBCh3859821;     uVNuLaWcTJWFLnJCYpXbBCh3859821 = uVNuLaWcTJWFLnJCYpXbBCh16992904;     uVNuLaWcTJWFLnJCYpXbBCh16992904 = uVNuLaWcTJWFLnJCYpXbBCh75437882;     uVNuLaWcTJWFLnJCYpXbBCh75437882 = uVNuLaWcTJWFLnJCYpXbBCh14754308;     uVNuLaWcTJWFLnJCYpXbBCh14754308 = uVNuLaWcTJWFLnJCYpXbBCh96637383;     uVNuLaWcTJWFLnJCYpXbBCh96637383 = uVNuLaWcTJWFLnJCYpXbBCh13802693;     uVNuLaWcTJWFLnJCYpXbBCh13802693 = uVNuLaWcTJWFLnJCYpXbBCh14941700;     uVNuLaWcTJWFLnJCYpXbBCh14941700 = uVNuLaWcTJWFLnJCYpXbBCh75057684;     uVNuLaWcTJWFLnJCYpXbBCh75057684 = uVNuLaWcTJWFLnJCYpXbBCh53017806;     uVNuLaWcTJWFLnJCYpXbBCh53017806 = uVNuLaWcTJWFLnJCYpXbBCh49909914;     uVNuLaWcTJWFLnJCYpXbBCh49909914 = uVNuLaWcTJWFLnJCYpXbBCh43579494;     uVNuLaWcTJWFLnJCYpXbBCh43579494 = uVNuLaWcTJWFLnJCYpXbBCh11026753;     uVNuLaWcTJWFLnJCYpXbBCh11026753 = uVNuLaWcTJWFLnJCYpXbBCh53820401;     uVNuLaWcTJWFLnJCYpXbBCh53820401 = uVNuLaWcTJWFLnJCYpXbBCh33284451;     uVNuLaWcTJWFLnJCYpXbBCh33284451 = uVNuLaWcTJWFLnJCYpXbBCh56234407;     uVNuLaWcTJWFLnJCYpXbBCh56234407 = uVNuLaWcTJWFLnJCYpXbBCh89593354;     uVNuLaWcTJWFLnJCYpXbBCh89593354 = uVNuLaWcTJWFLnJCYpXbBCh21103021;     uVNuLaWcTJWFLnJCYpXbBCh21103021 = uVNuLaWcTJWFLnJCYpXbBCh90959510;     uVNuLaWcTJWFLnJCYpXbBCh90959510 = uVNuLaWcTJWFLnJCYpXbBCh58486930;     uVNuLaWcTJWFLnJCYpXbBCh58486930 = uVNuLaWcTJWFLnJCYpXbBCh50798348;     uVNuLaWcTJWFLnJCYpXbBCh50798348 = uVNuLaWcTJWFLnJCYpXbBCh16816855;     uVNuLaWcTJWFLnJCYpXbBCh16816855 = uVNuLaWcTJWFLnJCYpXbBCh76140144;     uVNuLaWcTJWFLnJCYpXbBCh76140144 = uVNuLaWcTJWFLnJCYpXbBCh14465616;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void IeCQlswtvOWdSCUXaoSJOiwSIOROEQJlGBEaACBFP44831735() {     double spdIrenZtkLpFJZijHWahoe36859204 = -355794045;    double spdIrenZtkLpFJZijHWahoe20904334 = -225289550;    double spdIrenZtkLpFJZijHWahoe22132677 = -909121491;    double spdIrenZtkLpFJZijHWahoe55048933 = -788089638;    double spdIrenZtkLpFJZijHWahoe60338795 = -141769869;    double spdIrenZtkLpFJZijHWahoe85408724 = 38734850;    double spdIrenZtkLpFJZijHWahoe47689407 = -831895049;    double spdIrenZtkLpFJZijHWahoe90869152 = -722867649;    double spdIrenZtkLpFJZijHWahoe63449742 = -840797292;    double spdIrenZtkLpFJZijHWahoe24052696 = -678579278;    double spdIrenZtkLpFJZijHWahoe52075612 = -759231540;    double spdIrenZtkLpFJZijHWahoe27933376 = -577151808;    double spdIrenZtkLpFJZijHWahoe93186350 = -787194284;    double spdIrenZtkLpFJZijHWahoe51171784 = 74753629;    double spdIrenZtkLpFJZijHWahoe77957308 = -593702129;    double spdIrenZtkLpFJZijHWahoe92043665 = -800521488;    double spdIrenZtkLpFJZijHWahoe81718627 = 77811483;    double spdIrenZtkLpFJZijHWahoe93818898 = -437743090;    double spdIrenZtkLpFJZijHWahoe29063441 = -408871768;    double spdIrenZtkLpFJZijHWahoe144322 = -492086798;    double spdIrenZtkLpFJZijHWahoe73398192 = -355096291;    double spdIrenZtkLpFJZijHWahoe67909389 = -4679316;    double spdIrenZtkLpFJZijHWahoe64026229 = -626800632;    double spdIrenZtkLpFJZijHWahoe42418 = -492074092;    double spdIrenZtkLpFJZijHWahoe925911 = -181274872;    double spdIrenZtkLpFJZijHWahoe60835430 = -674393505;    double spdIrenZtkLpFJZijHWahoe44867261 = 27053373;    double spdIrenZtkLpFJZijHWahoe58362752 = -732147539;    double spdIrenZtkLpFJZijHWahoe8776404 = -382790162;    double spdIrenZtkLpFJZijHWahoe57311650 = -413741864;    double spdIrenZtkLpFJZijHWahoe51246958 = 24336612;    double spdIrenZtkLpFJZijHWahoe70478916 = -644125247;    double spdIrenZtkLpFJZijHWahoe41989791 = -497803485;    double spdIrenZtkLpFJZijHWahoe65346339 = -42528674;    double spdIrenZtkLpFJZijHWahoe36973258 = 76393665;    double spdIrenZtkLpFJZijHWahoe30202928 = 13528695;    double spdIrenZtkLpFJZijHWahoe92266667 = -844400931;    double spdIrenZtkLpFJZijHWahoe71236580 = -207128644;    double spdIrenZtkLpFJZijHWahoe84486020 = -417466806;    double spdIrenZtkLpFJZijHWahoe6747460 = -362344063;    double spdIrenZtkLpFJZijHWahoe68087391 = -875155034;    double spdIrenZtkLpFJZijHWahoe31184716 = 75527584;    double spdIrenZtkLpFJZijHWahoe20847616 = -109143959;    double spdIrenZtkLpFJZijHWahoe45588869 = -288379962;    double spdIrenZtkLpFJZijHWahoe97298132 = -492510586;    double spdIrenZtkLpFJZijHWahoe44507763 = -616275134;    double spdIrenZtkLpFJZijHWahoe98268234 = -440865232;    double spdIrenZtkLpFJZijHWahoe22460209 = -786504493;    double spdIrenZtkLpFJZijHWahoe67018959 = -471488668;    double spdIrenZtkLpFJZijHWahoe77797919 = -471212555;    double spdIrenZtkLpFJZijHWahoe4912488 = -111443385;    double spdIrenZtkLpFJZijHWahoe24615147 = 77754721;    double spdIrenZtkLpFJZijHWahoe47509832 = -329323482;    double spdIrenZtkLpFJZijHWahoe46529904 = -707298761;    double spdIrenZtkLpFJZijHWahoe71433542 = -372187900;    double spdIrenZtkLpFJZijHWahoe68949815 = -251114729;    double spdIrenZtkLpFJZijHWahoe56878104 = -598488918;    double spdIrenZtkLpFJZijHWahoe22090260 = -317047399;    double spdIrenZtkLpFJZijHWahoe54123023 = -506814767;    double spdIrenZtkLpFJZijHWahoe99503365 = -467376365;    double spdIrenZtkLpFJZijHWahoe40541463 = -988318524;    double spdIrenZtkLpFJZijHWahoe89326654 = 252489;    double spdIrenZtkLpFJZijHWahoe82092748 = -240077488;    double spdIrenZtkLpFJZijHWahoe6138093 = -327055428;    double spdIrenZtkLpFJZijHWahoe72805738 = -602915890;    double spdIrenZtkLpFJZijHWahoe81596695 = -15106293;    double spdIrenZtkLpFJZijHWahoe85943585 = 20651676;    double spdIrenZtkLpFJZijHWahoe27840012 = -644665610;    double spdIrenZtkLpFJZijHWahoe14198526 = 98359964;    double spdIrenZtkLpFJZijHWahoe47754381 = -507230825;    double spdIrenZtkLpFJZijHWahoe99776998 = -956120557;    double spdIrenZtkLpFJZijHWahoe10482047 = -715059873;    double spdIrenZtkLpFJZijHWahoe9332879 = 79723716;    double spdIrenZtkLpFJZijHWahoe22315982 = 53472295;    double spdIrenZtkLpFJZijHWahoe32056931 = -616931765;    double spdIrenZtkLpFJZijHWahoe42213477 = -330623875;    double spdIrenZtkLpFJZijHWahoe47061773 = -895535358;    double spdIrenZtkLpFJZijHWahoe18437360 = -238420671;    double spdIrenZtkLpFJZijHWahoe2744286 = -999563506;    double spdIrenZtkLpFJZijHWahoe56418147 = -564999738;    double spdIrenZtkLpFJZijHWahoe62567195 = -133528273;    double spdIrenZtkLpFJZijHWahoe22407053 = -186442134;    double spdIrenZtkLpFJZijHWahoe91343792 = -160658872;    double spdIrenZtkLpFJZijHWahoe30978484 = -911577607;    double spdIrenZtkLpFJZijHWahoe52399162 = -202298479;    double spdIrenZtkLpFJZijHWahoe26631811 = 46581890;    double spdIrenZtkLpFJZijHWahoe22969085 = -214801766;    double spdIrenZtkLpFJZijHWahoe95459886 = -790504724;    double spdIrenZtkLpFJZijHWahoe93912796 = -670340775;    double spdIrenZtkLpFJZijHWahoe68023443 = -672491607;    double spdIrenZtkLpFJZijHWahoe73324823 = -387982387;    double spdIrenZtkLpFJZijHWahoe70176408 = -427353532;    double spdIrenZtkLpFJZijHWahoe17113558 = -700313878;    double spdIrenZtkLpFJZijHWahoe84982655 = -950090442;    double spdIrenZtkLpFJZijHWahoe66205996 = -374025540;    double spdIrenZtkLpFJZijHWahoe78760736 = -775407523;    double spdIrenZtkLpFJZijHWahoe49091967 = -684394929;    double spdIrenZtkLpFJZijHWahoe14709523 = -782088531;    double spdIrenZtkLpFJZijHWahoe72783131 = -685464072;    double spdIrenZtkLpFJZijHWahoe15701438 = -355794045;     spdIrenZtkLpFJZijHWahoe36859204 = spdIrenZtkLpFJZijHWahoe20904334;     spdIrenZtkLpFJZijHWahoe20904334 = spdIrenZtkLpFJZijHWahoe22132677;     spdIrenZtkLpFJZijHWahoe22132677 = spdIrenZtkLpFJZijHWahoe55048933;     spdIrenZtkLpFJZijHWahoe55048933 = spdIrenZtkLpFJZijHWahoe60338795;     spdIrenZtkLpFJZijHWahoe60338795 = spdIrenZtkLpFJZijHWahoe85408724;     spdIrenZtkLpFJZijHWahoe85408724 = spdIrenZtkLpFJZijHWahoe47689407;     spdIrenZtkLpFJZijHWahoe47689407 = spdIrenZtkLpFJZijHWahoe90869152;     spdIrenZtkLpFJZijHWahoe90869152 = spdIrenZtkLpFJZijHWahoe63449742;     spdIrenZtkLpFJZijHWahoe63449742 = spdIrenZtkLpFJZijHWahoe24052696;     spdIrenZtkLpFJZijHWahoe24052696 = spdIrenZtkLpFJZijHWahoe52075612;     spdIrenZtkLpFJZijHWahoe52075612 = spdIrenZtkLpFJZijHWahoe27933376;     spdIrenZtkLpFJZijHWahoe27933376 = spdIrenZtkLpFJZijHWahoe93186350;     spdIrenZtkLpFJZijHWahoe93186350 = spdIrenZtkLpFJZijHWahoe51171784;     spdIrenZtkLpFJZijHWahoe51171784 = spdIrenZtkLpFJZijHWahoe77957308;     spdIrenZtkLpFJZijHWahoe77957308 = spdIrenZtkLpFJZijHWahoe92043665;     spdIrenZtkLpFJZijHWahoe92043665 = spdIrenZtkLpFJZijHWahoe81718627;     spdIrenZtkLpFJZijHWahoe81718627 = spdIrenZtkLpFJZijHWahoe93818898;     spdIrenZtkLpFJZijHWahoe93818898 = spdIrenZtkLpFJZijHWahoe29063441;     spdIrenZtkLpFJZijHWahoe29063441 = spdIrenZtkLpFJZijHWahoe144322;     spdIrenZtkLpFJZijHWahoe144322 = spdIrenZtkLpFJZijHWahoe73398192;     spdIrenZtkLpFJZijHWahoe73398192 = spdIrenZtkLpFJZijHWahoe67909389;     spdIrenZtkLpFJZijHWahoe67909389 = spdIrenZtkLpFJZijHWahoe64026229;     spdIrenZtkLpFJZijHWahoe64026229 = spdIrenZtkLpFJZijHWahoe42418;     spdIrenZtkLpFJZijHWahoe42418 = spdIrenZtkLpFJZijHWahoe925911;     spdIrenZtkLpFJZijHWahoe925911 = spdIrenZtkLpFJZijHWahoe60835430;     spdIrenZtkLpFJZijHWahoe60835430 = spdIrenZtkLpFJZijHWahoe44867261;     spdIrenZtkLpFJZijHWahoe44867261 = spdIrenZtkLpFJZijHWahoe58362752;     spdIrenZtkLpFJZijHWahoe58362752 = spdIrenZtkLpFJZijHWahoe8776404;     spdIrenZtkLpFJZijHWahoe8776404 = spdIrenZtkLpFJZijHWahoe57311650;     spdIrenZtkLpFJZijHWahoe57311650 = spdIrenZtkLpFJZijHWahoe51246958;     spdIrenZtkLpFJZijHWahoe51246958 = spdIrenZtkLpFJZijHWahoe70478916;     spdIrenZtkLpFJZijHWahoe70478916 = spdIrenZtkLpFJZijHWahoe41989791;     spdIrenZtkLpFJZijHWahoe41989791 = spdIrenZtkLpFJZijHWahoe65346339;     spdIrenZtkLpFJZijHWahoe65346339 = spdIrenZtkLpFJZijHWahoe36973258;     spdIrenZtkLpFJZijHWahoe36973258 = spdIrenZtkLpFJZijHWahoe30202928;     spdIrenZtkLpFJZijHWahoe30202928 = spdIrenZtkLpFJZijHWahoe92266667;     spdIrenZtkLpFJZijHWahoe92266667 = spdIrenZtkLpFJZijHWahoe71236580;     spdIrenZtkLpFJZijHWahoe71236580 = spdIrenZtkLpFJZijHWahoe84486020;     spdIrenZtkLpFJZijHWahoe84486020 = spdIrenZtkLpFJZijHWahoe6747460;     spdIrenZtkLpFJZijHWahoe6747460 = spdIrenZtkLpFJZijHWahoe68087391;     spdIrenZtkLpFJZijHWahoe68087391 = spdIrenZtkLpFJZijHWahoe31184716;     spdIrenZtkLpFJZijHWahoe31184716 = spdIrenZtkLpFJZijHWahoe20847616;     spdIrenZtkLpFJZijHWahoe20847616 = spdIrenZtkLpFJZijHWahoe45588869;     spdIrenZtkLpFJZijHWahoe45588869 = spdIrenZtkLpFJZijHWahoe97298132;     spdIrenZtkLpFJZijHWahoe97298132 = spdIrenZtkLpFJZijHWahoe44507763;     spdIrenZtkLpFJZijHWahoe44507763 = spdIrenZtkLpFJZijHWahoe98268234;     spdIrenZtkLpFJZijHWahoe98268234 = spdIrenZtkLpFJZijHWahoe22460209;     spdIrenZtkLpFJZijHWahoe22460209 = spdIrenZtkLpFJZijHWahoe67018959;     spdIrenZtkLpFJZijHWahoe67018959 = spdIrenZtkLpFJZijHWahoe77797919;     spdIrenZtkLpFJZijHWahoe77797919 = spdIrenZtkLpFJZijHWahoe4912488;     spdIrenZtkLpFJZijHWahoe4912488 = spdIrenZtkLpFJZijHWahoe24615147;     spdIrenZtkLpFJZijHWahoe24615147 = spdIrenZtkLpFJZijHWahoe47509832;     spdIrenZtkLpFJZijHWahoe47509832 = spdIrenZtkLpFJZijHWahoe46529904;     spdIrenZtkLpFJZijHWahoe46529904 = spdIrenZtkLpFJZijHWahoe71433542;     spdIrenZtkLpFJZijHWahoe71433542 = spdIrenZtkLpFJZijHWahoe68949815;     spdIrenZtkLpFJZijHWahoe68949815 = spdIrenZtkLpFJZijHWahoe56878104;     spdIrenZtkLpFJZijHWahoe56878104 = spdIrenZtkLpFJZijHWahoe22090260;     spdIrenZtkLpFJZijHWahoe22090260 = spdIrenZtkLpFJZijHWahoe54123023;     spdIrenZtkLpFJZijHWahoe54123023 = spdIrenZtkLpFJZijHWahoe99503365;     spdIrenZtkLpFJZijHWahoe99503365 = spdIrenZtkLpFJZijHWahoe40541463;     spdIrenZtkLpFJZijHWahoe40541463 = spdIrenZtkLpFJZijHWahoe89326654;     spdIrenZtkLpFJZijHWahoe89326654 = spdIrenZtkLpFJZijHWahoe82092748;     spdIrenZtkLpFJZijHWahoe82092748 = spdIrenZtkLpFJZijHWahoe6138093;     spdIrenZtkLpFJZijHWahoe6138093 = spdIrenZtkLpFJZijHWahoe72805738;     spdIrenZtkLpFJZijHWahoe72805738 = spdIrenZtkLpFJZijHWahoe81596695;     spdIrenZtkLpFJZijHWahoe81596695 = spdIrenZtkLpFJZijHWahoe85943585;     spdIrenZtkLpFJZijHWahoe85943585 = spdIrenZtkLpFJZijHWahoe27840012;     spdIrenZtkLpFJZijHWahoe27840012 = spdIrenZtkLpFJZijHWahoe14198526;     spdIrenZtkLpFJZijHWahoe14198526 = spdIrenZtkLpFJZijHWahoe47754381;     spdIrenZtkLpFJZijHWahoe47754381 = spdIrenZtkLpFJZijHWahoe99776998;     spdIrenZtkLpFJZijHWahoe99776998 = spdIrenZtkLpFJZijHWahoe10482047;     spdIrenZtkLpFJZijHWahoe10482047 = spdIrenZtkLpFJZijHWahoe9332879;     spdIrenZtkLpFJZijHWahoe9332879 = spdIrenZtkLpFJZijHWahoe22315982;     spdIrenZtkLpFJZijHWahoe22315982 = spdIrenZtkLpFJZijHWahoe32056931;     spdIrenZtkLpFJZijHWahoe32056931 = spdIrenZtkLpFJZijHWahoe42213477;     spdIrenZtkLpFJZijHWahoe42213477 = spdIrenZtkLpFJZijHWahoe47061773;     spdIrenZtkLpFJZijHWahoe47061773 = spdIrenZtkLpFJZijHWahoe18437360;     spdIrenZtkLpFJZijHWahoe18437360 = spdIrenZtkLpFJZijHWahoe2744286;     spdIrenZtkLpFJZijHWahoe2744286 = spdIrenZtkLpFJZijHWahoe56418147;     spdIrenZtkLpFJZijHWahoe56418147 = spdIrenZtkLpFJZijHWahoe62567195;     spdIrenZtkLpFJZijHWahoe62567195 = spdIrenZtkLpFJZijHWahoe22407053;     spdIrenZtkLpFJZijHWahoe22407053 = spdIrenZtkLpFJZijHWahoe91343792;     spdIrenZtkLpFJZijHWahoe91343792 = spdIrenZtkLpFJZijHWahoe30978484;     spdIrenZtkLpFJZijHWahoe30978484 = spdIrenZtkLpFJZijHWahoe52399162;     spdIrenZtkLpFJZijHWahoe52399162 = spdIrenZtkLpFJZijHWahoe26631811;     spdIrenZtkLpFJZijHWahoe26631811 = spdIrenZtkLpFJZijHWahoe22969085;     spdIrenZtkLpFJZijHWahoe22969085 = spdIrenZtkLpFJZijHWahoe95459886;     spdIrenZtkLpFJZijHWahoe95459886 = spdIrenZtkLpFJZijHWahoe93912796;     spdIrenZtkLpFJZijHWahoe93912796 = spdIrenZtkLpFJZijHWahoe68023443;     spdIrenZtkLpFJZijHWahoe68023443 = spdIrenZtkLpFJZijHWahoe73324823;     spdIrenZtkLpFJZijHWahoe73324823 = spdIrenZtkLpFJZijHWahoe70176408;     spdIrenZtkLpFJZijHWahoe70176408 = spdIrenZtkLpFJZijHWahoe17113558;     spdIrenZtkLpFJZijHWahoe17113558 = spdIrenZtkLpFJZijHWahoe84982655;     spdIrenZtkLpFJZijHWahoe84982655 = spdIrenZtkLpFJZijHWahoe66205996;     spdIrenZtkLpFJZijHWahoe66205996 = spdIrenZtkLpFJZijHWahoe78760736;     spdIrenZtkLpFJZijHWahoe78760736 = spdIrenZtkLpFJZijHWahoe49091967;     spdIrenZtkLpFJZijHWahoe49091967 = spdIrenZtkLpFJZijHWahoe14709523;     spdIrenZtkLpFJZijHWahoe14709523 = spdIrenZtkLpFJZijHWahoe72783131;     spdIrenZtkLpFJZijHWahoe72783131 = spdIrenZtkLpFJZijHWahoe15701438;     spdIrenZtkLpFJZijHWahoe15701438 = spdIrenZtkLpFJZijHWahoe36859204;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void ldIeRXKCgHpwoDnXhaVJLeooIiTbjYbMRfIbBqNtJ27060496() {     double aqOXdcCSlWFCvDGoTVjEiSI88594654 = -472048878;    double aqOXdcCSlWFCvDGoTVjEiSI36578317 = -302189305;    double aqOXdcCSlWFCvDGoTVjEiSI70933036 = -706480875;    double aqOXdcCSlWFCvDGoTVjEiSI30124335 = -604358780;    double aqOXdcCSlWFCvDGoTVjEiSI37062728 = -949420523;    double aqOXdcCSlWFCvDGoTVjEiSI10292079 = -120292377;    double aqOXdcCSlWFCvDGoTVjEiSI21466250 = -655106645;    double aqOXdcCSlWFCvDGoTVjEiSI9660631 = -846647204;    double aqOXdcCSlWFCvDGoTVjEiSI14747820 = -631646002;    double aqOXdcCSlWFCvDGoTVjEiSI92849819 = -120225260;    double aqOXdcCSlWFCvDGoTVjEiSI47368311 = -720954011;    double aqOXdcCSlWFCvDGoTVjEiSI38289753 = -512133309;    double aqOXdcCSlWFCvDGoTVjEiSI80367144 = -396374545;    double aqOXdcCSlWFCvDGoTVjEiSI9939503 = -651926918;    double aqOXdcCSlWFCvDGoTVjEiSI31972566 = -71429839;    double aqOXdcCSlWFCvDGoTVjEiSI3770938 = -512205443;    double aqOXdcCSlWFCvDGoTVjEiSI37689152 = -290283207;    double aqOXdcCSlWFCvDGoTVjEiSI79501821 = -900319584;    double aqOXdcCSlWFCvDGoTVjEiSI88637290 = -936785951;    double aqOXdcCSlWFCvDGoTVjEiSI19873896 = -202354947;    double aqOXdcCSlWFCvDGoTVjEiSI19145545 = -437904459;    double aqOXdcCSlWFCvDGoTVjEiSI70328842 = -178160324;    double aqOXdcCSlWFCvDGoTVjEiSI65375743 = -235038080;    double aqOXdcCSlWFCvDGoTVjEiSI92692667 = -363666043;    double aqOXdcCSlWFCvDGoTVjEiSI72341768 = -126929308;    double aqOXdcCSlWFCvDGoTVjEiSI18540844 = 79996716;    double aqOXdcCSlWFCvDGoTVjEiSI83695896 = -435355345;    double aqOXdcCSlWFCvDGoTVjEiSI56491976 = -15478225;    double aqOXdcCSlWFCvDGoTVjEiSI83526476 = -432689064;    double aqOXdcCSlWFCvDGoTVjEiSI27296734 = -875642660;    double aqOXdcCSlWFCvDGoTVjEiSI88465766 = -308545855;    double aqOXdcCSlWFCvDGoTVjEiSI83508646 = -967899439;    double aqOXdcCSlWFCvDGoTVjEiSI40083100 = 19814629;    double aqOXdcCSlWFCvDGoTVjEiSI59370051 = -803125840;    double aqOXdcCSlWFCvDGoTVjEiSI35178387 = -140415979;    double aqOXdcCSlWFCvDGoTVjEiSI11902539 = -222640134;    double aqOXdcCSlWFCvDGoTVjEiSI41914893 = -388755675;    double aqOXdcCSlWFCvDGoTVjEiSI72070193 = -290641009;    double aqOXdcCSlWFCvDGoTVjEiSI54260863 = -862784201;    double aqOXdcCSlWFCvDGoTVjEiSI31829876 = -980959730;    double aqOXdcCSlWFCvDGoTVjEiSI36771478 = -994313821;    double aqOXdcCSlWFCvDGoTVjEiSI91210115 = 87007962;    double aqOXdcCSlWFCvDGoTVjEiSI77430847 = -9920491;    double aqOXdcCSlWFCvDGoTVjEiSI38524688 = -213768639;    double aqOXdcCSlWFCvDGoTVjEiSI69327340 = 6992330;    double aqOXdcCSlWFCvDGoTVjEiSI46202210 = 59832925;    double aqOXdcCSlWFCvDGoTVjEiSI84434429 = -903205686;    double aqOXdcCSlWFCvDGoTVjEiSI1444674 = -90909189;    double aqOXdcCSlWFCvDGoTVjEiSI56037412 = -435441397;    double aqOXdcCSlWFCvDGoTVjEiSI66454178 = -330223935;    double aqOXdcCSlWFCvDGoTVjEiSI45592379 = -919947541;    double aqOXdcCSlWFCvDGoTVjEiSI56594900 = -383844839;    double aqOXdcCSlWFCvDGoTVjEiSI70748578 = -73436670;    double aqOXdcCSlWFCvDGoTVjEiSI16589145 = -322098073;    double aqOXdcCSlWFCvDGoTVjEiSI7914952 = -401951101;    double aqOXdcCSlWFCvDGoTVjEiSI18265812 = -193888554;    double aqOXdcCSlWFCvDGoTVjEiSI71202573 = 32848774;    double aqOXdcCSlWFCvDGoTVjEiSI78240369 = -242814833;    double aqOXdcCSlWFCvDGoTVjEiSI57782566 = -377429473;    double aqOXdcCSlWFCvDGoTVjEiSI18521884 = -929417240;    double aqOXdcCSlWFCvDGoTVjEiSI26596183 = -684937032;    double aqOXdcCSlWFCvDGoTVjEiSI64974273 = -539628421;    double aqOXdcCSlWFCvDGoTVjEiSI26134154 = -313958140;    double aqOXdcCSlWFCvDGoTVjEiSI87451085 = -756003343;    double aqOXdcCSlWFCvDGoTVjEiSI4384054 = -811679405;    double aqOXdcCSlWFCvDGoTVjEiSI63859664 = -753054573;    double aqOXdcCSlWFCvDGoTVjEiSI98206653 = -431947938;    double aqOXdcCSlWFCvDGoTVjEiSI20997093 = -593248706;    double aqOXdcCSlWFCvDGoTVjEiSI74761116 = -411510940;    double aqOXdcCSlWFCvDGoTVjEiSI20070028 = -848789706;    double aqOXdcCSlWFCvDGoTVjEiSI61856044 = -23449769;    double aqOXdcCSlWFCvDGoTVjEiSI65618959 = -999642198;    double aqOXdcCSlWFCvDGoTVjEiSI25240959 = 62464616;    double aqOXdcCSlWFCvDGoTVjEiSI56807414 = -955826222;    double aqOXdcCSlWFCvDGoTVjEiSI83102417 = -208041126;    double aqOXdcCSlWFCvDGoTVjEiSI27935430 = -424912421;    double aqOXdcCSlWFCvDGoTVjEiSI92897994 = -68239834;    double aqOXdcCSlWFCvDGoTVjEiSI26851056 = 78730559;    double aqOXdcCSlWFCvDGoTVjEiSI23365328 = -270658374;    double aqOXdcCSlWFCvDGoTVjEiSI26139559 = -86762234;    double aqOXdcCSlWFCvDGoTVjEiSI34106415 = -16797599;    double aqOXdcCSlWFCvDGoTVjEiSI82251223 = -244446156;    double aqOXdcCSlWFCvDGoTVjEiSI454565 = -580036828;    double aqOXdcCSlWFCvDGoTVjEiSI17072298 = -2465129;    double aqOXdcCSlWFCvDGoTVjEiSI81704354 = -955695119;    double aqOXdcCSlWFCvDGoTVjEiSI31870867 = -924701016;    double aqOXdcCSlWFCvDGoTVjEiSI12760069 = -794462769;    double aqOXdcCSlWFCvDGoTVjEiSI23493956 = -658087298;    double aqOXdcCSlWFCvDGoTVjEiSI51455100 = -301174740;    double aqOXdcCSlWFCvDGoTVjEiSI16912575 = -946527425;    double aqOXdcCSlWFCvDGoTVjEiSI40699965 = -155488908;    double aqOXdcCSlWFCvDGoTVjEiSI63674524 = -45940842;    double aqOXdcCSlWFCvDGoTVjEiSI14287627 = -913211537;    double aqOXdcCSlWFCvDGoTVjEiSI35738979 = -933366962;    double aqOXdcCSlWFCvDGoTVjEiSI5233693 = -196022698;    double aqOXdcCSlWFCvDGoTVjEiSI71797205 = -354685401;    double aqOXdcCSlWFCvDGoTVjEiSI65075961 = -599033898;    double aqOXdcCSlWFCvDGoTVjEiSI89979761 = -253917148;    double aqOXdcCSlWFCvDGoTVjEiSI34140635 = -402089234;    double aqOXdcCSlWFCvDGoTVjEiSI5467677 = -472048878;     aqOXdcCSlWFCvDGoTVjEiSI88594654 = aqOXdcCSlWFCvDGoTVjEiSI36578317;     aqOXdcCSlWFCvDGoTVjEiSI36578317 = aqOXdcCSlWFCvDGoTVjEiSI70933036;     aqOXdcCSlWFCvDGoTVjEiSI70933036 = aqOXdcCSlWFCvDGoTVjEiSI30124335;     aqOXdcCSlWFCvDGoTVjEiSI30124335 = aqOXdcCSlWFCvDGoTVjEiSI37062728;     aqOXdcCSlWFCvDGoTVjEiSI37062728 = aqOXdcCSlWFCvDGoTVjEiSI10292079;     aqOXdcCSlWFCvDGoTVjEiSI10292079 = aqOXdcCSlWFCvDGoTVjEiSI21466250;     aqOXdcCSlWFCvDGoTVjEiSI21466250 = aqOXdcCSlWFCvDGoTVjEiSI9660631;     aqOXdcCSlWFCvDGoTVjEiSI9660631 = aqOXdcCSlWFCvDGoTVjEiSI14747820;     aqOXdcCSlWFCvDGoTVjEiSI14747820 = aqOXdcCSlWFCvDGoTVjEiSI92849819;     aqOXdcCSlWFCvDGoTVjEiSI92849819 = aqOXdcCSlWFCvDGoTVjEiSI47368311;     aqOXdcCSlWFCvDGoTVjEiSI47368311 = aqOXdcCSlWFCvDGoTVjEiSI38289753;     aqOXdcCSlWFCvDGoTVjEiSI38289753 = aqOXdcCSlWFCvDGoTVjEiSI80367144;     aqOXdcCSlWFCvDGoTVjEiSI80367144 = aqOXdcCSlWFCvDGoTVjEiSI9939503;     aqOXdcCSlWFCvDGoTVjEiSI9939503 = aqOXdcCSlWFCvDGoTVjEiSI31972566;     aqOXdcCSlWFCvDGoTVjEiSI31972566 = aqOXdcCSlWFCvDGoTVjEiSI3770938;     aqOXdcCSlWFCvDGoTVjEiSI3770938 = aqOXdcCSlWFCvDGoTVjEiSI37689152;     aqOXdcCSlWFCvDGoTVjEiSI37689152 = aqOXdcCSlWFCvDGoTVjEiSI79501821;     aqOXdcCSlWFCvDGoTVjEiSI79501821 = aqOXdcCSlWFCvDGoTVjEiSI88637290;     aqOXdcCSlWFCvDGoTVjEiSI88637290 = aqOXdcCSlWFCvDGoTVjEiSI19873896;     aqOXdcCSlWFCvDGoTVjEiSI19873896 = aqOXdcCSlWFCvDGoTVjEiSI19145545;     aqOXdcCSlWFCvDGoTVjEiSI19145545 = aqOXdcCSlWFCvDGoTVjEiSI70328842;     aqOXdcCSlWFCvDGoTVjEiSI70328842 = aqOXdcCSlWFCvDGoTVjEiSI65375743;     aqOXdcCSlWFCvDGoTVjEiSI65375743 = aqOXdcCSlWFCvDGoTVjEiSI92692667;     aqOXdcCSlWFCvDGoTVjEiSI92692667 = aqOXdcCSlWFCvDGoTVjEiSI72341768;     aqOXdcCSlWFCvDGoTVjEiSI72341768 = aqOXdcCSlWFCvDGoTVjEiSI18540844;     aqOXdcCSlWFCvDGoTVjEiSI18540844 = aqOXdcCSlWFCvDGoTVjEiSI83695896;     aqOXdcCSlWFCvDGoTVjEiSI83695896 = aqOXdcCSlWFCvDGoTVjEiSI56491976;     aqOXdcCSlWFCvDGoTVjEiSI56491976 = aqOXdcCSlWFCvDGoTVjEiSI83526476;     aqOXdcCSlWFCvDGoTVjEiSI83526476 = aqOXdcCSlWFCvDGoTVjEiSI27296734;     aqOXdcCSlWFCvDGoTVjEiSI27296734 = aqOXdcCSlWFCvDGoTVjEiSI88465766;     aqOXdcCSlWFCvDGoTVjEiSI88465766 = aqOXdcCSlWFCvDGoTVjEiSI83508646;     aqOXdcCSlWFCvDGoTVjEiSI83508646 = aqOXdcCSlWFCvDGoTVjEiSI40083100;     aqOXdcCSlWFCvDGoTVjEiSI40083100 = aqOXdcCSlWFCvDGoTVjEiSI59370051;     aqOXdcCSlWFCvDGoTVjEiSI59370051 = aqOXdcCSlWFCvDGoTVjEiSI35178387;     aqOXdcCSlWFCvDGoTVjEiSI35178387 = aqOXdcCSlWFCvDGoTVjEiSI11902539;     aqOXdcCSlWFCvDGoTVjEiSI11902539 = aqOXdcCSlWFCvDGoTVjEiSI41914893;     aqOXdcCSlWFCvDGoTVjEiSI41914893 = aqOXdcCSlWFCvDGoTVjEiSI72070193;     aqOXdcCSlWFCvDGoTVjEiSI72070193 = aqOXdcCSlWFCvDGoTVjEiSI54260863;     aqOXdcCSlWFCvDGoTVjEiSI54260863 = aqOXdcCSlWFCvDGoTVjEiSI31829876;     aqOXdcCSlWFCvDGoTVjEiSI31829876 = aqOXdcCSlWFCvDGoTVjEiSI36771478;     aqOXdcCSlWFCvDGoTVjEiSI36771478 = aqOXdcCSlWFCvDGoTVjEiSI91210115;     aqOXdcCSlWFCvDGoTVjEiSI91210115 = aqOXdcCSlWFCvDGoTVjEiSI77430847;     aqOXdcCSlWFCvDGoTVjEiSI77430847 = aqOXdcCSlWFCvDGoTVjEiSI38524688;     aqOXdcCSlWFCvDGoTVjEiSI38524688 = aqOXdcCSlWFCvDGoTVjEiSI69327340;     aqOXdcCSlWFCvDGoTVjEiSI69327340 = aqOXdcCSlWFCvDGoTVjEiSI46202210;     aqOXdcCSlWFCvDGoTVjEiSI46202210 = aqOXdcCSlWFCvDGoTVjEiSI84434429;     aqOXdcCSlWFCvDGoTVjEiSI84434429 = aqOXdcCSlWFCvDGoTVjEiSI1444674;     aqOXdcCSlWFCvDGoTVjEiSI1444674 = aqOXdcCSlWFCvDGoTVjEiSI56037412;     aqOXdcCSlWFCvDGoTVjEiSI56037412 = aqOXdcCSlWFCvDGoTVjEiSI66454178;     aqOXdcCSlWFCvDGoTVjEiSI66454178 = aqOXdcCSlWFCvDGoTVjEiSI45592379;     aqOXdcCSlWFCvDGoTVjEiSI45592379 = aqOXdcCSlWFCvDGoTVjEiSI56594900;     aqOXdcCSlWFCvDGoTVjEiSI56594900 = aqOXdcCSlWFCvDGoTVjEiSI70748578;     aqOXdcCSlWFCvDGoTVjEiSI70748578 = aqOXdcCSlWFCvDGoTVjEiSI16589145;     aqOXdcCSlWFCvDGoTVjEiSI16589145 = aqOXdcCSlWFCvDGoTVjEiSI7914952;     aqOXdcCSlWFCvDGoTVjEiSI7914952 = aqOXdcCSlWFCvDGoTVjEiSI18265812;     aqOXdcCSlWFCvDGoTVjEiSI18265812 = aqOXdcCSlWFCvDGoTVjEiSI71202573;     aqOXdcCSlWFCvDGoTVjEiSI71202573 = aqOXdcCSlWFCvDGoTVjEiSI78240369;     aqOXdcCSlWFCvDGoTVjEiSI78240369 = aqOXdcCSlWFCvDGoTVjEiSI57782566;     aqOXdcCSlWFCvDGoTVjEiSI57782566 = aqOXdcCSlWFCvDGoTVjEiSI18521884;     aqOXdcCSlWFCvDGoTVjEiSI18521884 = aqOXdcCSlWFCvDGoTVjEiSI26596183;     aqOXdcCSlWFCvDGoTVjEiSI26596183 = aqOXdcCSlWFCvDGoTVjEiSI64974273;     aqOXdcCSlWFCvDGoTVjEiSI64974273 = aqOXdcCSlWFCvDGoTVjEiSI26134154;     aqOXdcCSlWFCvDGoTVjEiSI26134154 = aqOXdcCSlWFCvDGoTVjEiSI87451085;     aqOXdcCSlWFCvDGoTVjEiSI87451085 = aqOXdcCSlWFCvDGoTVjEiSI4384054;     aqOXdcCSlWFCvDGoTVjEiSI4384054 = aqOXdcCSlWFCvDGoTVjEiSI63859664;     aqOXdcCSlWFCvDGoTVjEiSI63859664 = aqOXdcCSlWFCvDGoTVjEiSI98206653;     aqOXdcCSlWFCvDGoTVjEiSI98206653 = aqOXdcCSlWFCvDGoTVjEiSI20997093;     aqOXdcCSlWFCvDGoTVjEiSI20997093 = aqOXdcCSlWFCvDGoTVjEiSI74761116;     aqOXdcCSlWFCvDGoTVjEiSI74761116 = aqOXdcCSlWFCvDGoTVjEiSI20070028;     aqOXdcCSlWFCvDGoTVjEiSI20070028 = aqOXdcCSlWFCvDGoTVjEiSI61856044;     aqOXdcCSlWFCvDGoTVjEiSI61856044 = aqOXdcCSlWFCvDGoTVjEiSI65618959;     aqOXdcCSlWFCvDGoTVjEiSI65618959 = aqOXdcCSlWFCvDGoTVjEiSI25240959;     aqOXdcCSlWFCvDGoTVjEiSI25240959 = aqOXdcCSlWFCvDGoTVjEiSI56807414;     aqOXdcCSlWFCvDGoTVjEiSI56807414 = aqOXdcCSlWFCvDGoTVjEiSI83102417;     aqOXdcCSlWFCvDGoTVjEiSI83102417 = aqOXdcCSlWFCvDGoTVjEiSI27935430;     aqOXdcCSlWFCvDGoTVjEiSI27935430 = aqOXdcCSlWFCvDGoTVjEiSI92897994;     aqOXdcCSlWFCvDGoTVjEiSI92897994 = aqOXdcCSlWFCvDGoTVjEiSI26851056;     aqOXdcCSlWFCvDGoTVjEiSI26851056 = aqOXdcCSlWFCvDGoTVjEiSI23365328;     aqOXdcCSlWFCvDGoTVjEiSI23365328 = aqOXdcCSlWFCvDGoTVjEiSI26139559;     aqOXdcCSlWFCvDGoTVjEiSI26139559 = aqOXdcCSlWFCvDGoTVjEiSI34106415;     aqOXdcCSlWFCvDGoTVjEiSI34106415 = aqOXdcCSlWFCvDGoTVjEiSI82251223;     aqOXdcCSlWFCvDGoTVjEiSI82251223 = aqOXdcCSlWFCvDGoTVjEiSI454565;     aqOXdcCSlWFCvDGoTVjEiSI454565 = aqOXdcCSlWFCvDGoTVjEiSI17072298;     aqOXdcCSlWFCvDGoTVjEiSI17072298 = aqOXdcCSlWFCvDGoTVjEiSI81704354;     aqOXdcCSlWFCvDGoTVjEiSI81704354 = aqOXdcCSlWFCvDGoTVjEiSI31870867;     aqOXdcCSlWFCvDGoTVjEiSI31870867 = aqOXdcCSlWFCvDGoTVjEiSI12760069;     aqOXdcCSlWFCvDGoTVjEiSI12760069 = aqOXdcCSlWFCvDGoTVjEiSI23493956;     aqOXdcCSlWFCvDGoTVjEiSI23493956 = aqOXdcCSlWFCvDGoTVjEiSI51455100;     aqOXdcCSlWFCvDGoTVjEiSI51455100 = aqOXdcCSlWFCvDGoTVjEiSI16912575;     aqOXdcCSlWFCvDGoTVjEiSI16912575 = aqOXdcCSlWFCvDGoTVjEiSI40699965;     aqOXdcCSlWFCvDGoTVjEiSI40699965 = aqOXdcCSlWFCvDGoTVjEiSI63674524;     aqOXdcCSlWFCvDGoTVjEiSI63674524 = aqOXdcCSlWFCvDGoTVjEiSI14287627;     aqOXdcCSlWFCvDGoTVjEiSI14287627 = aqOXdcCSlWFCvDGoTVjEiSI35738979;     aqOXdcCSlWFCvDGoTVjEiSI35738979 = aqOXdcCSlWFCvDGoTVjEiSI5233693;     aqOXdcCSlWFCvDGoTVjEiSI5233693 = aqOXdcCSlWFCvDGoTVjEiSI71797205;     aqOXdcCSlWFCvDGoTVjEiSI71797205 = aqOXdcCSlWFCvDGoTVjEiSI65075961;     aqOXdcCSlWFCvDGoTVjEiSI65075961 = aqOXdcCSlWFCvDGoTVjEiSI89979761;     aqOXdcCSlWFCvDGoTVjEiSI89979761 = aqOXdcCSlWFCvDGoTVjEiSI34140635;     aqOXdcCSlWFCvDGoTVjEiSI34140635 = aqOXdcCSlWFCvDGoTVjEiSI5467677;     aqOXdcCSlWFCvDGoTVjEiSI5467677 = aqOXdcCSlWFCvDGoTVjEiSI88594654;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void hfSVIavKqvRryzSeCvdHkuQEtVmetEVrMSsACpfbF6889456() {     float vzSdXchFGJwFUlmONcmoQQl15920236 = -383943705;    float vzSdXchFGJwFUlmONcmoQQl44720205 = -602620494;    float vzSdXchFGJwFUlmONcmoQQl26627663 = -63455335;    float vzSdXchFGJwFUlmONcmoQQl62111770 = -837545194;    float vzSdXchFGJwFUlmONcmoQQl76498588 = -902726973;    float vzSdXchFGJwFUlmONcmoQQl26080635 = -659725998;    float vzSdXchFGJwFUlmONcmoQQl74153435 = 92812902;    float vzSdXchFGJwFUlmONcmoQQl41551695 = 77024351;    float vzSdXchFGJwFUlmONcmoQQl79320065 = -308484205;    float vzSdXchFGJwFUlmONcmoQQl83325691 = -993827612;    float vzSdXchFGJwFUlmONcmoQQl41754109 = -473500315;    float vzSdXchFGJwFUlmONcmoQQl73245029 = -539214944;    float vzSdXchFGJwFUlmONcmoQQl70239030 = -578559316;    float vzSdXchFGJwFUlmONcmoQQl94883773 = -544266970;    float vzSdXchFGJwFUlmONcmoQQl58377630 = -565668868;    float vzSdXchFGJwFUlmONcmoQQl42295842 = -685484138;    float vzSdXchFGJwFUlmONcmoQQl51568223 = 68013237;    float vzSdXchFGJwFUlmONcmoQQl44050248 = -206369723;    float vzSdXchFGJwFUlmONcmoQQl69354658 = -134187292;    float vzSdXchFGJwFUlmONcmoQQl96709614 = 21955867;    float vzSdXchFGJwFUlmONcmoQQl6150095 = -649562628;    float vzSdXchFGJwFUlmONcmoQQl40529203 = -113880349;    float vzSdXchFGJwFUlmONcmoQQl42830259 = -368149251;    float vzSdXchFGJwFUlmONcmoQQl4319380 = -733416582;    float vzSdXchFGJwFUlmONcmoQQl52328749 = -695059498;    float vzSdXchFGJwFUlmONcmoQQl18304837 = -448909158;    float vzSdXchFGJwFUlmONcmoQQl27246254 = -237977412;    float vzSdXchFGJwFUlmONcmoQQl91967357 = -721745902;    float vzSdXchFGJwFUlmONcmoQQl6644927 = 40670919;    float vzSdXchFGJwFUlmONcmoQQl68536905 = -389879487;    float vzSdXchFGJwFUlmONcmoQQl22671701 = -679755427;    float vzSdXchFGJwFUlmONcmoQQl45185416 = -721603143;    float vzSdXchFGJwFUlmONcmoQQl45274144 = -583930232;    float vzSdXchFGJwFUlmONcmoQQl6768707 = -337356678;    float vzSdXchFGJwFUlmONcmoQQl23019975 = -864176089;    float vzSdXchFGJwFUlmONcmoQQl66272856 = -91579368;    float vzSdXchFGJwFUlmONcmoQQl7252480 = -63882329;    float vzSdXchFGJwFUlmONcmoQQl46038232 = -226421189;    float vzSdXchFGJwFUlmONcmoQQl88474086 = -406928856;    float vzSdXchFGJwFUlmONcmoQQl86791296 = -987471951;    float vzSdXchFGJwFUlmONcmoQQl61715095 = -247574875;    float vzSdXchFGJwFUlmONcmoQQl5971860 = -265206102;    float vzSdXchFGJwFUlmONcmoQQl13001779 = -69955713;    float vzSdXchFGJwFUlmONcmoQQl82829862 = -939849583;    float vzSdXchFGJwFUlmONcmoQQl20323885 = 97418681;    float vzSdXchFGJwFUlmONcmoQQl83976002 = -752573050;    float vzSdXchFGJwFUlmONcmoQQl99595732 = -487054533;    float vzSdXchFGJwFUlmONcmoQQl57004223 = 43074286;    float vzSdXchFGJwFUlmONcmoQQl6873393 = -1247457;    float vzSdXchFGJwFUlmONcmoQQl43886366 = -346989804;    float vzSdXchFGJwFUlmONcmoQQl36463992 = -93194044;    float vzSdXchFGJwFUlmONcmoQQl54922789 = 88085732;    float vzSdXchFGJwFUlmONcmoQQl80474666 = -741407900;    float vzSdXchFGJwFUlmONcmoQQl97859591 = -678021279;    float vzSdXchFGJwFUlmONcmoQQl739362 = 10869739;    float vzSdXchFGJwFUlmONcmoQQl75391032 = -170063357;    float vzSdXchFGJwFUlmONcmoQQl1889947 = -134471243;    float vzSdXchFGJwFUlmONcmoQQl22308284 = -330038754;    float vzSdXchFGJwFUlmONcmoQQl9783022 = -42485696;    float vzSdXchFGJwFUlmONcmoQQl58193752 = -353817815;    float vzSdXchFGJwFUlmONcmoQQl98834381 = -321748586;    float vzSdXchFGJwFUlmONcmoQQl82186077 = -185441197;    float vzSdXchFGJwFUlmONcmoQQl34906768 = -963646569;    float vzSdXchFGJwFUlmONcmoQQl10783161 = -918604718;    float vzSdXchFGJwFUlmONcmoQQl60653990 = -214072186;    float vzSdXchFGJwFUlmONcmoQQl96568693 = -751897173;    float vzSdXchFGJwFUlmONcmoQQl27970885 = -955284712;    float vzSdXchFGJwFUlmONcmoQQl63470323 = -141202638;    float vzSdXchFGJwFUlmONcmoQQl71863798 = -680090881;    float vzSdXchFGJwFUlmONcmoQQl92104773 = -374089500;    float vzSdXchFGJwFUlmONcmoQQl35043363 = -521601809;    float vzSdXchFGJwFUlmONcmoQQl5529992 = -705565575;    float vzSdXchFGJwFUlmONcmoQQl55576161 = -799440868;    float vzSdXchFGJwFUlmONcmoQQl82563361 = -146715341;    float vzSdXchFGJwFUlmONcmoQQl34994519 = -730469258;    float vzSdXchFGJwFUlmONcmoQQl178235 = -284356526;    float vzSdXchFGJwFUlmONcmoQQl27527424 = 56075364;    float vzSdXchFGJwFUlmONcmoQQl60000396 = -428299669;    float vzSdXchFGJwFUlmONcmoQQl83995494 = -730835263;    float vzSdXchFGJwFUlmONcmoQQl68352746 = -942486449;    float vzSdXchFGJwFUlmONcmoQQl18709104 = -961854626;    float vzSdXchFGJwFUlmONcmoQQl70242030 = -181051699;    float vzSdXchFGJwFUlmONcmoQQl85093965 = -620498446;    float vzSdXchFGJwFUlmONcmoQQl62758561 = -612339277;    float vzSdXchFGJwFUlmONcmoQQl32072914 = -196685444;    float vzSdXchFGJwFUlmONcmoQQl67748911 = -667841159;    float vzSdXchFGJwFUlmONcmoQQl64710750 = -980195243;    float vzSdXchFGJwFUlmONcmoQQl47414553 = -905908954;    float vzSdXchFGJwFUlmONcmoQQl6029346 = -248226418;    float vzSdXchFGJwFUlmONcmoQQl47628942 = -594112733;    float vzSdXchFGJwFUlmONcmoQQl64382910 = -957108126;    float vzSdXchFGJwFUlmONcmoQQl84944195 = -733843576;    float vzSdXchFGJwFUlmONcmoQQl36255211 = -83935493;    float vzSdXchFGJwFUlmONcmoQQl30280334 = 46888959;    float vzSdXchFGJwFUlmONcmoQQl87956914 = -565723366;    float vzSdXchFGJwFUlmONcmoQQl79529017 = 37866321;    float vzSdXchFGJwFUlmONcmoQQl71065092 = -301559533;    float vzSdXchFGJwFUlmONcmoQQl2218619 = -151350996;    float vzSdXchFGJwFUlmONcmoQQl22175872 = -625777397;    float vzSdXchFGJwFUlmONcmoQQl23755192 = -383943705;     vzSdXchFGJwFUlmONcmoQQl15920236 = vzSdXchFGJwFUlmONcmoQQl44720205;     vzSdXchFGJwFUlmONcmoQQl44720205 = vzSdXchFGJwFUlmONcmoQQl26627663;     vzSdXchFGJwFUlmONcmoQQl26627663 = vzSdXchFGJwFUlmONcmoQQl62111770;     vzSdXchFGJwFUlmONcmoQQl62111770 = vzSdXchFGJwFUlmONcmoQQl76498588;     vzSdXchFGJwFUlmONcmoQQl76498588 = vzSdXchFGJwFUlmONcmoQQl26080635;     vzSdXchFGJwFUlmONcmoQQl26080635 = vzSdXchFGJwFUlmONcmoQQl74153435;     vzSdXchFGJwFUlmONcmoQQl74153435 = vzSdXchFGJwFUlmONcmoQQl41551695;     vzSdXchFGJwFUlmONcmoQQl41551695 = vzSdXchFGJwFUlmONcmoQQl79320065;     vzSdXchFGJwFUlmONcmoQQl79320065 = vzSdXchFGJwFUlmONcmoQQl83325691;     vzSdXchFGJwFUlmONcmoQQl83325691 = vzSdXchFGJwFUlmONcmoQQl41754109;     vzSdXchFGJwFUlmONcmoQQl41754109 = vzSdXchFGJwFUlmONcmoQQl73245029;     vzSdXchFGJwFUlmONcmoQQl73245029 = vzSdXchFGJwFUlmONcmoQQl70239030;     vzSdXchFGJwFUlmONcmoQQl70239030 = vzSdXchFGJwFUlmONcmoQQl94883773;     vzSdXchFGJwFUlmONcmoQQl94883773 = vzSdXchFGJwFUlmONcmoQQl58377630;     vzSdXchFGJwFUlmONcmoQQl58377630 = vzSdXchFGJwFUlmONcmoQQl42295842;     vzSdXchFGJwFUlmONcmoQQl42295842 = vzSdXchFGJwFUlmONcmoQQl51568223;     vzSdXchFGJwFUlmONcmoQQl51568223 = vzSdXchFGJwFUlmONcmoQQl44050248;     vzSdXchFGJwFUlmONcmoQQl44050248 = vzSdXchFGJwFUlmONcmoQQl69354658;     vzSdXchFGJwFUlmONcmoQQl69354658 = vzSdXchFGJwFUlmONcmoQQl96709614;     vzSdXchFGJwFUlmONcmoQQl96709614 = vzSdXchFGJwFUlmONcmoQQl6150095;     vzSdXchFGJwFUlmONcmoQQl6150095 = vzSdXchFGJwFUlmONcmoQQl40529203;     vzSdXchFGJwFUlmONcmoQQl40529203 = vzSdXchFGJwFUlmONcmoQQl42830259;     vzSdXchFGJwFUlmONcmoQQl42830259 = vzSdXchFGJwFUlmONcmoQQl4319380;     vzSdXchFGJwFUlmONcmoQQl4319380 = vzSdXchFGJwFUlmONcmoQQl52328749;     vzSdXchFGJwFUlmONcmoQQl52328749 = vzSdXchFGJwFUlmONcmoQQl18304837;     vzSdXchFGJwFUlmONcmoQQl18304837 = vzSdXchFGJwFUlmONcmoQQl27246254;     vzSdXchFGJwFUlmONcmoQQl27246254 = vzSdXchFGJwFUlmONcmoQQl91967357;     vzSdXchFGJwFUlmONcmoQQl91967357 = vzSdXchFGJwFUlmONcmoQQl6644927;     vzSdXchFGJwFUlmONcmoQQl6644927 = vzSdXchFGJwFUlmONcmoQQl68536905;     vzSdXchFGJwFUlmONcmoQQl68536905 = vzSdXchFGJwFUlmONcmoQQl22671701;     vzSdXchFGJwFUlmONcmoQQl22671701 = vzSdXchFGJwFUlmONcmoQQl45185416;     vzSdXchFGJwFUlmONcmoQQl45185416 = vzSdXchFGJwFUlmONcmoQQl45274144;     vzSdXchFGJwFUlmONcmoQQl45274144 = vzSdXchFGJwFUlmONcmoQQl6768707;     vzSdXchFGJwFUlmONcmoQQl6768707 = vzSdXchFGJwFUlmONcmoQQl23019975;     vzSdXchFGJwFUlmONcmoQQl23019975 = vzSdXchFGJwFUlmONcmoQQl66272856;     vzSdXchFGJwFUlmONcmoQQl66272856 = vzSdXchFGJwFUlmONcmoQQl7252480;     vzSdXchFGJwFUlmONcmoQQl7252480 = vzSdXchFGJwFUlmONcmoQQl46038232;     vzSdXchFGJwFUlmONcmoQQl46038232 = vzSdXchFGJwFUlmONcmoQQl88474086;     vzSdXchFGJwFUlmONcmoQQl88474086 = vzSdXchFGJwFUlmONcmoQQl86791296;     vzSdXchFGJwFUlmONcmoQQl86791296 = vzSdXchFGJwFUlmONcmoQQl61715095;     vzSdXchFGJwFUlmONcmoQQl61715095 = vzSdXchFGJwFUlmONcmoQQl5971860;     vzSdXchFGJwFUlmONcmoQQl5971860 = vzSdXchFGJwFUlmONcmoQQl13001779;     vzSdXchFGJwFUlmONcmoQQl13001779 = vzSdXchFGJwFUlmONcmoQQl82829862;     vzSdXchFGJwFUlmONcmoQQl82829862 = vzSdXchFGJwFUlmONcmoQQl20323885;     vzSdXchFGJwFUlmONcmoQQl20323885 = vzSdXchFGJwFUlmONcmoQQl83976002;     vzSdXchFGJwFUlmONcmoQQl83976002 = vzSdXchFGJwFUlmONcmoQQl99595732;     vzSdXchFGJwFUlmONcmoQQl99595732 = vzSdXchFGJwFUlmONcmoQQl57004223;     vzSdXchFGJwFUlmONcmoQQl57004223 = vzSdXchFGJwFUlmONcmoQQl6873393;     vzSdXchFGJwFUlmONcmoQQl6873393 = vzSdXchFGJwFUlmONcmoQQl43886366;     vzSdXchFGJwFUlmONcmoQQl43886366 = vzSdXchFGJwFUlmONcmoQQl36463992;     vzSdXchFGJwFUlmONcmoQQl36463992 = vzSdXchFGJwFUlmONcmoQQl54922789;     vzSdXchFGJwFUlmONcmoQQl54922789 = vzSdXchFGJwFUlmONcmoQQl80474666;     vzSdXchFGJwFUlmONcmoQQl80474666 = vzSdXchFGJwFUlmONcmoQQl97859591;     vzSdXchFGJwFUlmONcmoQQl97859591 = vzSdXchFGJwFUlmONcmoQQl739362;     vzSdXchFGJwFUlmONcmoQQl739362 = vzSdXchFGJwFUlmONcmoQQl75391032;     vzSdXchFGJwFUlmONcmoQQl75391032 = vzSdXchFGJwFUlmONcmoQQl1889947;     vzSdXchFGJwFUlmONcmoQQl1889947 = vzSdXchFGJwFUlmONcmoQQl22308284;     vzSdXchFGJwFUlmONcmoQQl22308284 = vzSdXchFGJwFUlmONcmoQQl9783022;     vzSdXchFGJwFUlmONcmoQQl9783022 = vzSdXchFGJwFUlmONcmoQQl58193752;     vzSdXchFGJwFUlmONcmoQQl58193752 = vzSdXchFGJwFUlmONcmoQQl98834381;     vzSdXchFGJwFUlmONcmoQQl98834381 = vzSdXchFGJwFUlmONcmoQQl82186077;     vzSdXchFGJwFUlmONcmoQQl82186077 = vzSdXchFGJwFUlmONcmoQQl34906768;     vzSdXchFGJwFUlmONcmoQQl34906768 = vzSdXchFGJwFUlmONcmoQQl10783161;     vzSdXchFGJwFUlmONcmoQQl10783161 = vzSdXchFGJwFUlmONcmoQQl60653990;     vzSdXchFGJwFUlmONcmoQQl60653990 = vzSdXchFGJwFUlmONcmoQQl96568693;     vzSdXchFGJwFUlmONcmoQQl96568693 = vzSdXchFGJwFUlmONcmoQQl27970885;     vzSdXchFGJwFUlmONcmoQQl27970885 = vzSdXchFGJwFUlmONcmoQQl63470323;     vzSdXchFGJwFUlmONcmoQQl63470323 = vzSdXchFGJwFUlmONcmoQQl71863798;     vzSdXchFGJwFUlmONcmoQQl71863798 = vzSdXchFGJwFUlmONcmoQQl92104773;     vzSdXchFGJwFUlmONcmoQQl92104773 = vzSdXchFGJwFUlmONcmoQQl35043363;     vzSdXchFGJwFUlmONcmoQQl35043363 = vzSdXchFGJwFUlmONcmoQQl5529992;     vzSdXchFGJwFUlmONcmoQQl5529992 = vzSdXchFGJwFUlmONcmoQQl55576161;     vzSdXchFGJwFUlmONcmoQQl55576161 = vzSdXchFGJwFUlmONcmoQQl82563361;     vzSdXchFGJwFUlmONcmoQQl82563361 = vzSdXchFGJwFUlmONcmoQQl34994519;     vzSdXchFGJwFUlmONcmoQQl34994519 = vzSdXchFGJwFUlmONcmoQQl178235;     vzSdXchFGJwFUlmONcmoQQl178235 = vzSdXchFGJwFUlmONcmoQQl27527424;     vzSdXchFGJwFUlmONcmoQQl27527424 = vzSdXchFGJwFUlmONcmoQQl60000396;     vzSdXchFGJwFUlmONcmoQQl60000396 = vzSdXchFGJwFUlmONcmoQQl83995494;     vzSdXchFGJwFUlmONcmoQQl83995494 = vzSdXchFGJwFUlmONcmoQQl68352746;     vzSdXchFGJwFUlmONcmoQQl68352746 = vzSdXchFGJwFUlmONcmoQQl18709104;     vzSdXchFGJwFUlmONcmoQQl18709104 = vzSdXchFGJwFUlmONcmoQQl70242030;     vzSdXchFGJwFUlmONcmoQQl70242030 = vzSdXchFGJwFUlmONcmoQQl85093965;     vzSdXchFGJwFUlmONcmoQQl85093965 = vzSdXchFGJwFUlmONcmoQQl62758561;     vzSdXchFGJwFUlmONcmoQQl62758561 = vzSdXchFGJwFUlmONcmoQQl32072914;     vzSdXchFGJwFUlmONcmoQQl32072914 = vzSdXchFGJwFUlmONcmoQQl67748911;     vzSdXchFGJwFUlmONcmoQQl67748911 = vzSdXchFGJwFUlmONcmoQQl64710750;     vzSdXchFGJwFUlmONcmoQQl64710750 = vzSdXchFGJwFUlmONcmoQQl47414553;     vzSdXchFGJwFUlmONcmoQQl47414553 = vzSdXchFGJwFUlmONcmoQQl6029346;     vzSdXchFGJwFUlmONcmoQQl6029346 = vzSdXchFGJwFUlmONcmoQQl47628942;     vzSdXchFGJwFUlmONcmoQQl47628942 = vzSdXchFGJwFUlmONcmoQQl64382910;     vzSdXchFGJwFUlmONcmoQQl64382910 = vzSdXchFGJwFUlmONcmoQQl84944195;     vzSdXchFGJwFUlmONcmoQQl84944195 = vzSdXchFGJwFUlmONcmoQQl36255211;     vzSdXchFGJwFUlmONcmoQQl36255211 = vzSdXchFGJwFUlmONcmoQQl30280334;     vzSdXchFGJwFUlmONcmoQQl30280334 = vzSdXchFGJwFUlmONcmoQQl87956914;     vzSdXchFGJwFUlmONcmoQQl87956914 = vzSdXchFGJwFUlmONcmoQQl79529017;     vzSdXchFGJwFUlmONcmoQQl79529017 = vzSdXchFGJwFUlmONcmoQQl71065092;     vzSdXchFGJwFUlmONcmoQQl71065092 = vzSdXchFGJwFUlmONcmoQQl2218619;     vzSdXchFGJwFUlmONcmoQQl2218619 = vzSdXchFGJwFUlmONcmoQQl22175872;     vzSdXchFGJwFUlmONcmoQQl22175872 = vzSdXchFGJwFUlmONcmoQQl23755192;     vzSdXchFGJwFUlmONcmoQQl23755192 = vzSdXchFGJwFUlmONcmoQQl15920236;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void dWsZagqgVVupVUrUTOTyFMhhlYavjuBHPvKJZvzIr25755364() {     int qdOVCvtCdxvltcQpKoBGuwb62441245 = -267089216;    int qdOVCvtCdxvltcQpKoBGuwb86587635 = -502064889;    int qdOVCvtCdxvltcQpKoBGuwb5668459 = -140147334;    int qdOVCvtCdxvltcQpKoBGuwb93310792 = -155682946;    int qdOVCvtCdxvltcQpKoBGuwb34100851 = -422869817;    int qdOVCvtCdxvltcQpKoBGuwb19820717 = 34037441;    int qdOVCvtCdxvltcQpKoBGuwb37283919 = -716434489;    int qdOVCvtCdxvltcQpKoBGuwb40486302 = -955638187;    int qdOVCvtCdxvltcQpKoBGuwb30149117 = -643844371;    int qdOVCvtCdxvltcQpKoBGuwb41530835 = -281544236;    int qdOVCvtCdxvltcQpKoBGuwb76569468 = 50604537;    int qdOVCvtCdxvltcQpKoBGuwb70396870 = -888599896;    int qdOVCvtCdxvltcQpKoBGuwb85693585 = -12271886;    int qdOVCvtCdxvltcQpKoBGuwb19653611 = -72347191;    int qdOVCvtCdxvltcQpKoBGuwb56812251 = -463604513;    int qdOVCvtCdxvltcQpKoBGuwb87046982 = -853110790;    int qdOVCvtCdxvltcQpKoBGuwb9443123 = -620315596;    int qdOVCvtCdxvltcQpKoBGuwb76435069 = -602556261;    int qdOVCvtCdxvltcQpKoBGuwb50742297 = -400836759;    int qdOVCvtCdxvltcQpKoBGuwb97342669 = -772538399;    int qdOVCvtCdxvltcQpKoBGuwb14242170 = -672029259;    int qdOVCvtCdxvltcQpKoBGuwb58560628 = -129408187;    int qdOVCvtCdxvltcQpKoBGuwb86229225 = -350371659;    int qdOVCvtCdxvltcQpKoBGuwb23581514 = -291383333;    int qdOVCvtCdxvltcQpKoBGuwb20050394 = -512117940;    int qdOVCvtCdxvltcQpKoBGuwb48611605 = -192947010;    int qdOVCvtCdxvltcQpKoBGuwb12365961 = -789159618;    int qdOVCvtCdxvltcQpKoBGuwb39963314 = -166293266;    int qdOVCvtCdxvltcQpKoBGuwb22992840 = -392119170;    int qdOVCvtCdxvltcQpKoBGuwb98679075 = -160367112;    int qdOVCvtCdxvltcQpKoBGuwb89999931 = 52142963;    int qdOVCvtCdxvltcQpKoBGuwb30778 = -13831962;    int qdOVCvtCdxvltcQpKoBGuwb5903054 = -496596730;    int qdOVCvtCdxvltcQpKoBGuwb19074829 = -587014512;    int qdOVCvtCdxvltcQpKoBGuwb79557265 = -754699209;    int qdOVCvtCdxvltcQpKoBGuwb56408873 = 6051106;    int qdOVCvtCdxvltcQpKoBGuwb97882736 = -824739564;    int qdOVCvtCdxvltcQpKoBGuwb81768107 = -53474809;    int qdOVCvtCdxvltcQpKoBGuwb43066397 = -682145836;    int qdOVCvtCdxvltcQpKoBGuwb1467580 = -87030226;    int qdOVCvtCdxvltcQpKoBGuwb9166506 = -944187173;    int qdOVCvtCdxvltcQpKoBGuwb68043136 = -530406961;    int qdOVCvtCdxvltcQpKoBGuwb50189515 = -417315467;    int qdOVCvtCdxvltcQpKoBGuwb95998097 = -535277782;    int qdOVCvtCdxvltcQpKoBGuwb31288035 = -118161405;    int qdOVCvtCdxvltcQpKoBGuwb31122069 = -494845007;    int qdOVCvtCdxvltcQpKoBGuwb11885585 = -713974404;    int qdOVCvtCdxvltcQpKoBGuwb18264770 = -734068018;    int qdOVCvtCdxvltcQpKoBGuwb77159474 = -903046825;    int qdOVCvtCdxvltcQpKoBGuwb41630626 = -112748151;    int qdOVCvtCdxvltcQpKoBGuwb21678420 = -149379491;    int qdOVCvtCdxvltcQpKoBGuwb59147355 = -841397333;    int qdOVCvtCdxvltcQpKoBGuwb53307609 = -293249035;    int qdOVCvtCdxvltcQpKoBGuwb20553949 = -738322468;    int qdOVCvtCdxvltcQpKoBGuwb11513194 = -725727956;    int qdOVCvtCdxvltcQpKoBGuwb3880617 = -37681029;    int qdOVCvtCdxvltcQpKoBGuwb358410 = -51693231;    int qdOVCvtCdxvltcQpKoBGuwb82086944 = -848764001;    int qdOVCvtCdxvltcQpKoBGuwb73260398 = -643565006;    int qdOVCvtCdxvltcQpKoBGuwb85489246 = -129922807;    int qdOVCvtCdxvltcQpKoBGuwb7454756 = -176802942;    int qdOVCvtCdxvltcQpKoBGuwb97320604 = -450141224;    int qdOVCvtCdxvltcQpKoBGuwb17493463 = -463519018;    int qdOVCvtCdxvltcQpKoBGuwb31470042 = -383477259;    int qdOVCvtCdxvltcQpKoBGuwb51530904 = -233687200;    int qdOVCvtCdxvltcQpKoBGuwb76538690 = -935563501;    int qdOVCvtCdxvltcQpKoBGuwb64493816 = -292003167;    int qdOVCvtCdxvltcQpKoBGuwb66618757 = -425257375;    int qdOVCvtCdxvltcQpKoBGuwb40096346 = -317647982;    int qdOVCvtCdxvltcQpKoBGuwb403378 = -369655619;    int qdOVCvtCdxvltcQpKoBGuwb89164245 = 71628774;    int qdOVCvtCdxvltcQpKoBGuwb27675016 = -466840787;    int qdOVCvtCdxvltcQpKoBGuwb33368673 = -920410426;    int qdOVCvtCdxvltcQpKoBGuwb49274717 = -213806534;    int qdOVCvtCdxvltcQpKoBGuwb88176163 = -828351227;    int qdOVCvtCdxvltcQpKoBGuwb46199034 = -41622298;    int qdOVCvtCdxvltcQpKoBGuwb8371114 = -712092720;    int qdOVCvtCdxvltcQpKoBGuwb90231127 = -815093877;    int qdOVCvtCdxvltcQpKoBGuwb92293479 = -73221929;    int qdOVCvtCdxvltcQpKoBGuwb88928325 = 82727066;    int qdOVCvtCdxvltcQpKoBGuwb36726020 = -478972607;    int qdOVCvtCdxvltcQpKoBGuwb94101191 = 44908400;    int qdOVCvtCdxvltcQpKoBGuwb62803840 = -263246441;    int qdOVCvtCdxvltcQpKoBGuwb81362213 = -179371019;    int qdOVCvtCdxvltcQpKoBGuwb77000656 = 89012378;    int qdOVCvtCdxvltcQpKoBGuwb30852576 = -106459704;    int qdOVCvtCdxvltcQpKoBGuwb46723168 = -720582928;    int qdOVCvtCdxvltcQpKoBGuwb85349105 = -758274262;    int qdOVCvtCdxvltcQpKoBGuwb7561635 = -861286557;    int qdOVCvtCdxvltcQpKoBGuwb75676648 = -617018180;    int qdOVCvtCdxvltcQpKoBGuwb56050463 = -942255663;    int qdOVCvtCdxvltcQpKoBGuwb15795792 = -975975563;    int qdOVCvtCdxvltcQpKoBGuwb8507709 = -409909803;    int qdOVCvtCdxvltcQpKoBGuwb57577151 = -452223030;    int qdOVCvtCdxvltcQpKoBGuwb94012823 = -910227284;    int qdOVCvtCdxvltcQpKoBGuwb11845902 = -394045949;    int qdOVCvtCdxvltcQpKoBGuwb50549673 = 33112056;    int qdOVCvtCdxvltcQpKoBGuwb18719474 = 66161791;    int qdOVCvtCdxvltcQpKoBGuwb44467194 = -201590582;    int qdOVCvtCdxvltcQpKoBGuwb54749344 = -267089216;     qdOVCvtCdxvltcQpKoBGuwb62441245 = qdOVCvtCdxvltcQpKoBGuwb86587635;     qdOVCvtCdxvltcQpKoBGuwb86587635 = qdOVCvtCdxvltcQpKoBGuwb5668459;     qdOVCvtCdxvltcQpKoBGuwb5668459 = qdOVCvtCdxvltcQpKoBGuwb93310792;     qdOVCvtCdxvltcQpKoBGuwb93310792 = qdOVCvtCdxvltcQpKoBGuwb34100851;     qdOVCvtCdxvltcQpKoBGuwb34100851 = qdOVCvtCdxvltcQpKoBGuwb19820717;     qdOVCvtCdxvltcQpKoBGuwb19820717 = qdOVCvtCdxvltcQpKoBGuwb37283919;     qdOVCvtCdxvltcQpKoBGuwb37283919 = qdOVCvtCdxvltcQpKoBGuwb40486302;     qdOVCvtCdxvltcQpKoBGuwb40486302 = qdOVCvtCdxvltcQpKoBGuwb30149117;     qdOVCvtCdxvltcQpKoBGuwb30149117 = qdOVCvtCdxvltcQpKoBGuwb41530835;     qdOVCvtCdxvltcQpKoBGuwb41530835 = qdOVCvtCdxvltcQpKoBGuwb76569468;     qdOVCvtCdxvltcQpKoBGuwb76569468 = qdOVCvtCdxvltcQpKoBGuwb70396870;     qdOVCvtCdxvltcQpKoBGuwb70396870 = qdOVCvtCdxvltcQpKoBGuwb85693585;     qdOVCvtCdxvltcQpKoBGuwb85693585 = qdOVCvtCdxvltcQpKoBGuwb19653611;     qdOVCvtCdxvltcQpKoBGuwb19653611 = qdOVCvtCdxvltcQpKoBGuwb56812251;     qdOVCvtCdxvltcQpKoBGuwb56812251 = qdOVCvtCdxvltcQpKoBGuwb87046982;     qdOVCvtCdxvltcQpKoBGuwb87046982 = qdOVCvtCdxvltcQpKoBGuwb9443123;     qdOVCvtCdxvltcQpKoBGuwb9443123 = qdOVCvtCdxvltcQpKoBGuwb76435069;     qdOVCvtCdxvltcQpKoBGuwb76435069 = qdOVCvtCdxvltcQpKoBGuwb50742297;     qdOVCvtCdxvltcQpKoBGuwb50742297 = qdOVCvtCdxvltcQpKoBGuwb97342669;     qdOVCvtCdxvltcQpKoBGuwb97342669 = qdOVCvtCdxvltcQpKoBGuwb14242170;     qdOVCvtCdxvltcQpKoBGuwb14242170 = qdOVCvtCdxvltcQpKoBGuwb58560628;     qdOVCvtCdxvltcQpKoBGuwb58560628 = qdOVCvtCdxvltcQpKoBGuwb86229225;     qdOVCvtCdxvltcQpKoBGuwb86229225 = qdOVCvtCdxvltcQpKoBGuwb23581514;     qdOVCvtCdxvltcQpKoBGuwb23581514 = qdOVCvtCdxvltcQpKoBGuwb20050394;     qdOVCvtCdxvltcQpKoBGuwb20050394 = qdOVCvtCdxvltcQpKoBGuwb48611605;     qdOVCvtCdxvltcQpKoBGuwb48611605 = qdOVCvtCdxvltcQpKoBGuwb12365961;     qdOVCvtCdxvltcQpKoBGuwb12365961 = qdOVCvtCdxvltcQpKoBGuwb39963314;     qdOVCvtCdxvltcQpKoBGuwb39963314 = qdOVCvtCdxvltcQpKoBGuwb22992840;     qdOVCvtCdxvltcQpKoBGuwb22992840 = qdOVCvtCdxvltcQpKoBGuwb98679075;     qdOVCvtCdxvltcQpKoBGuwb98679075 = qdOVCvtCdxvltcQpKoBGuwb89999931;     qdOVCvtCdxvltcQpKoBGuwb89999931 = qdOVCvtCdxvltcQpKoBGuwb30778;     qdOVCvtCdxvltcQpKoBGuwb30778 = qdOVCvtCdxvltcQpKoBGuwb5903054;     qdOVCvtCdxvltcQpKoBGuwb5903054 = qdOVCvtCdxvltcQpKoBGuwb19074829;     qdOVCvtCdxvltcQpKoBGuwb19074829 = qdOVCvtCdxvltcQpKoBGuwb79557265;     qdOVCvtCdxvltcQpKoBGuwb79557265 = qdOVCvtCdxvltcQpKoBGuwb56408873;     qdOVCvtCdxvltcQpKoBGuwb56408873 = qdOVCvtCdxvltcQpKoBGuwb97882736;     qdOVCvtCdxvltcQpKoBGuwb97882736 = qdOVCvtCdxvltcQpKoBGuwb81768107;     qdOVCvtCdxvltcQpKoBGuwb81768107 = qdOVCvtCdxvltcQpKoBGuwb43066397;     qdOVCvtCdxvltcQpKoBGuwb43066397 = qdOVCvtCdxvltcQpKoBGuwb1467580;     qdOVCvtCdxvltcQpKoBGuwb1467580 = qdOVCvtCdxvltcQpKoBGuwb9166506;     qdOVCvtCdxvltcQpKoBGuwb9166506 = qdOVCvtCdxvltcQpKoBGuwb68043136;     qdOVCvtCdxvltcQpKoBGuwb68043136 = qdOVCvtCdxvltcQpKoBGuwb50189515;     qdOVCvtCdxvltcQpKoBGuwb50189515 = qdOVCvtCdxvltcQpKoBGuwb95998097;     qdOVCvtCdxvltcQpKoBGuwb95998097 = qdOVCvtCdxvltcQpKoBGuwb31288035;     qdOVCvtCdxvltcQpKoBGuwb31288035 = qdOVCvtCdxvltcQpKoBGuwb31122069;     qdOVCvtCdxvltcQpKoBGuwb31122069 = qdOVCvtCdxvltcQpKoBGuwb11885585;     qdOVCvtCdxvltcQpKoBGuwb11885585 = qdOVCvtCdxvltcQpKoBGuwb18264770;     qdOVCvtCdxvltcQpKoBGuwb18264770 = qdOVCvtCdxvltcQpKoBGuwb77159474;     qdOVCvtCdxvltcQpKoBGuwb77159474 = qdOVCvtCdxvltcQpKoBGuwb41630626;     qdOVCvtCdxvltcQpKoBGuwb41630626 = qdOVCvtCdxvltcQpKoBGuwb21678420;     qdOVCvtCdxvltcQpKoBGuwb21678420 = qdOVCvtCdxvltcQpKoBGuwb59147355;     qdOVCvtCdxvltcQpKoBGuwb59147355 = qdOVCvtCdxvltcQpKoBGuwb53307609;     qdOVCvtCdxvltcQpKoBGuwb53307609 = qdOVCvtCdxvltcQpKoBGuwb20553949;     qdOVCvtCdxvltcQpKoBGuwb20553949 = qdOVCvtCdxvltcQpKoBGuwb11513194;     qdOVCvtCdxvltcQpKoBGuwb11513194 = qdOVCvtCdxvltcQpKoBGuwb3880617;     qdOVCvtCdxvltcQpKoBGuwb3880617 = qdOVCvtCdxvltcQpKoBGuwb358410;     qdOVCvtCdxvltcQpKoBGuwb358410 = qdOVCvtCdxvltcQpKoBGuwb82086944;     qdOVCvtCdxvltcQpKoBGuwb82086944 = qdOVCvtCdxvltcQpKoBGuwb73260398;     qdOVCvtCdxvltcQpKoBGuwb73260398 = qdOVCvtCdxvltcQpKoBGuwb85489246;     qdOVCvtCdxvltcQpKoBGuwb85489246 = qdOVCvtCdxvltcQpKoBGuwb7454756;     qdOVCvtCdxvltcQpKoBGuwb7454756 = qdOVCvtCdxvltcQpKoBGuwb97320604;     qdOVCvtCdxvltcQpKoBGuwb97320604 = qdOVCvtCdxvltcQpKoBGuwb17493463;     qdOVCvtCdxvltcQpKoBGuwb17493463 = qdOVCvtCdxvltcQpKoBGuwb31470042;     qdOVCvtCdxvltcQpKoBGuwb31470042 = qdOVCvtCdxvltcQpKoBGuwb51530904;     qdOVCvtCdxvltcQpKoBGuwb51530904 = qdOVCvtCdxvltcQpKoBGuwb76538690;     qdOVCvtCdxvltcQpKoBGuwb76538690 = qdOVCvtCdxvltcQpKoBGuwb64493816;     qdOVCvtCdxvltcQpKoBGuwb64493816 = qdOVCvtCdxvltcQpKoBGuwb66618757;     qdOVCvtCdxvltcQpKoBGuwb66618757 = qdOVCvtCdxvltcQpKoBGuwb40096346;     qdOVCvtCdxvltcQpKoBGuwb40096346 = qdOVCvtCdxvltcQpKoBGuwb403378;     qdOVCvtCdxvltcQpKoBGuwb403378 = qdOVCvtCdxvltcQpKoBGuwb89164245;     qdOVCvtCdxvltcQpKoBGuwb89164245 = qdOVCvtCdxvltcQpKoBGuwb27675016;     qdOVCvtCdxvltcQpKoBGuwb27675016 = qdOVCvtCdxvltcQpKoBGuwb33368673;     qdOVCvtCdxvltcQpKoBGuwb33368673 = qdOVCvtCdxvltcQpKoBGuwb49274717;     qdOVCvtCdxvltcQpKoBGuwb49274717 = qdOVCvtCdxvltcQpKoBGuwb88176163;     qdOVCvtCdxvltcQpKoBGuwb88176163 = qdOVCvtCdxvltcQpKoBGuwb46199034;     qdOVCvtCdxvltcQpKoBGuwb46199034 = qdOVCvtCdxvltcQpKoBGuwb8371114;     qdOVCvtCdxvltcQpKoBGuwb8371114 = qdOVCvtCdxvltcQpKoBGuwb90231127;     qdOVCvtCdxvltcQpKoBGuwb90231127 = qdOVCvtCdxvltcQpKoBGuwb92293479;     qdOVCvtCdxvltcQpKoBGuwb92293479 = qdOVCvtCdxvltcQpKoBGuwb88928325;     qdOVCvtCdxvltcQpKoBGuwb88928325 = qdOVCvtCdxvltcQpKoBGuwb36726020;     qdOVCvtCdxvltcQpKoBGuwb36726020 = qdOVCvtCdxvltcQpKoBGuwb94101191;     qdOVCvtCdxvltcQpKoBGuwb94101191 = qdOVCvtCdxvltcQpKoBGuwb62803840;     qdOVCvtCdxvltcQpKoBGuwb62803840 = qdOVCvtCdxvltcQpKoBGuwb81362213;     qdOVCvtCdxvltcQpKoBGuwb81362213 = qdOVCvtCdxvltcQpKoBGuwb77000656;     qdOVCvtCdxvltcQpKoBGuwb77000656 = qdOVCvtCdxvltcQpKoBGuwb30852576;     qdOVCvtCdxvltcQpKoBGuwb30852576 = qdOVCvtCdxvltcQpKoBGuwb46723168;     qdOVCvtCdxvltcQpKoBGuwb46723168 = qdOVCvtCdxvltcQpKoBGuwb85349105;     qdOVCvtCdxvltcQpKoBGuwb85349105 = qdOVCvtCdxvltcQpKoBGuwb7561635;     qdOVCvtCdxvltcQpKoBGuwb7561635 = qdOVCvtCdxvltcQpKoBGuwb75676648;     qdOVCvtCdxvltcQpKoBGuwb75676648 = qdOVCvtCdxvltcQpKoBGuwb56050463;     qdOVCvtCdxvltcQpKoBGuwb56050463 = qdOVCvtCdxvltcQpKoBGuwb15795792;     qdOVCvtCdxvltcQpKoBGuwb15795792 = qdOVCvtCdxvltcQpKoBGuwb8507709;     qdOVCvtCdxvltcQpKoBGuwb8507709 = qdOVCvtCdxvltcQpKoBGuwb57577151;     qdOVCvtCdxvltcQpKoBGuwb57577151 = qdOVCvtCdxvltcQpKoBGuwb94012823;     qdOVCvtCdxvltcQpKoBGuwb94012823 = qdOVCvtCdxvltcQpKoBGuwb11845902;     qdOVCvtCdxvltcQpKoBGuwb11845902 = qdOVCvtCdxvltcQpKoBGuwb50549673;     qdOVCvtCdxvltcQpKoBGuwb50549673 = qdOVCvtCdxvltcQpKoBGuwb18719474;     qdOVCvtCdxvltcQpKoBGuwb18719474 = qdOVCvtCdxvltcQpKoBGuwb44467194;     qdOVCvtCdxvltcQpKoBGuwb44467194 = qdOVCvtCdxvltcQpKoBGuwb54749344;     qdOVCvtCdxvltcQpKoBGuwb54749344 = qdOVCvtCdxvltcQpKoBGuwb62441245;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void kcUfmUYWbYnOCOflTeMqYmvMDlEyLvpoQJHkyTKaf55741594() {     int FDTsMaHYpHDgwKygHbAPZKf84834834 = -28969038;    int FDTsMaHYpHDgwKygHbAPZKf32362819 = -408012819;    int FDTsMaHYpHDgwKygHbAPZKf33124525 = -422672564;    int FDTsMaHYpHDgwKygHbAPZKf23237621 = -341549648;    int FDTsMaHYpHDgwKygHbAPZKf23435003 = -545571497;    int FDTsMaHYpHDgwKygHbAPZKf99898401 = -127138125;    int FDTsMaHYpHDgwKygHbAPZKf60892322 = -833885329;    int FDTsMaHYpHDgwKygHbAPZKf46906110 = -622057514;    int FDTsMaHYpHDgwKygHbAPZKf44572084 = -814394340;    int FDTsMaHYpHDgwKygHbAPZKf36654906 = -387478698;    int FDTsMaHYpHDgwKygHbAPZKf93790722 = 13452209;    int FDTsMaHYpHDgwKygHbAPZKf12008142 = -303866827;    int FDTsMaHYpHDgwKygHbAPZKf20848853 = -609330732;    int FDTsMaHYpHDgwKygHbAPZKf8424143 = -254902896;    int FDTsMaHYpHDgwKygHbAPZKf48375419 = -128369374;    int FDTsMaHYpHDgwKygHbAPZKf56738347 = -901982682;    int FDTsMaHYpHDgwKygHbAPZKf3413716 = 22019154;    int FDTsMaHYpHDgwKygHbAPZKf59410953 = -657227330;    int FDTsMaHYpHDgwKygHbAPZKf71595657 = 82043383;    int FDTsMaHYpHDgwKygHbAPZKf3785190 = -413148402;    int FDTsMaHYpHDgwKygHbAPZKf35455853 = -953050193;    int FDTsMaHYpHDgwKygHbAPZKf44079581 = -124182617;    int FDTsMaHYpHDgwKygHbAPZKf52644152 = -67494409;    int FDTsMaHYpHDgwKygHbAPZKf6431193 = -974455667;    int FDTsMaHYpHDgwKygHbAPZKf27147952 = -806983212;    int FDTsMaHYpHDgwKygHbAPZKf20340523 = -728635306;    int FDTsMaHYpHDgwKygHbAPZKf89233799 = -245946398;    int FDTsMaHYpHDgwKygHbAPZKf10471240 = -445780731;    int FDTsMaHYpHDgwKygHbAPZKf17206954 = -90305974;    int FDTsMaHYpHDgwKygHbAPZKf31746385 = -405231605;    int FDTsMaHYpHDgwKygHbAPZKf878059 = -742079954;    int FDTsMaHYpHDgwKygHbAPZKf72848111 = -274081555;    int FDTsMaHYpHDgwKygHbAPZKf1489302 = -823996009;    int FDTsMaHYpHDgwKygHbAPZKf78180679 = 65540370;    int FDTsMaHYpHDgwKygHbAPZKf73428592 = -559141707;    int FDTsMaHYpHDgwKygHbAPZKf55273553 = -229578524;    int FDTsMaHYpHDgwKygHbAPZKf79381081 = -458034138;    int FDTsMaHYpHDgwKygHbAPZKf65476528 = 74162398;    int FDTsMaHYpHDgwKygHbAPZKf56060932 = -370510452;    int FDTsMaHYpHDgwKygHbAPZKf49780401 = -613822569;    int FDTsMaHYpHDgwKygHbAPZKf50068209 = -259420940;    int FDTsMaHYpHDgwKygHbAPZKf70853866 = -94523570;    int FDTsMaHYpHDgwKygHbAPZKf95456347 = -845715797;    int FDTsMaHYpHDgwKygHbAPZKf36210319 = -975676988;    int FDTsMaHYpHDgwKygHbAPZKf15253249 = -554045481;    int FDTsMaHYpHDgwKygHbAPZKf98794382 = -865029432;    int FDTsMaHYpHDgwKygHbAPZKf96485189 = -811104034;    int FDTsMaHYpHDgwKygHbAPZKf87479863 = -981841653;    int FDTsMaHYpHDgwKygHbAPZKf52960989 = -188999662;    int FDTsMaHYpHDgwKygHbAPZKf18668949 = -667743524;    int FDTsMaHYpHDgwKygHbAPZKf17288267 = -925900761;    int FDTsMaHYpHDgwKygHbAPZKf18451355 = -890070866;    int FDTsMaHYpHDgwKygHbAPZKf56173664 = -73106256;    int FDTsMaHYpHDgwKygHbAPZKf70590223 = -482083426;    int FDTsMaHYpHDgwKygHbAPZKf20285741 = -9532793;    int FDTsMaHYpHDgwKygHbAPZKf40755253 = -904786421;    int FDTsMaHYpHDgwKygHbAPZKf79718667 = -240518411;    int FDTsMaHYpHDgwKygHbAPZKf26693332 = -448216897;    int FDTsMaHYpHDgwKygHbAPZKf96089669 = -534566437;    int FDTsMaHYpHDgwKygHbAPZKf3094481 = -816936191;    int FDTsMaHYpHDgwKygHbAPZKf10664602 = -881191728;    int FDTsMaHYpHDgwKygHbAPZKf50421082 = -288104598;    int FDTsMaHYpHDgwKygHbAPZKf29699157 = -431751540;    int FDTsMaHYpHDgwKygHbAPZKf12825699 = -309162736;    int FDTsMaHYpHDgwKygHbAPZKf35776848 = -645398745;    int FDTsMaHYpHDgwKygHbAPZKf20942612 = -712466237;    int FDTsMaHYpHDgwKygHbAPZKf10518841 = -479870819;    int FDTsMaHYpHDgwKygHbAPZKf42668173 = -574871103;    int FDTsMaHYpHDgwKygHbAPZKf34995551 = -695761190;    int FDTsMaHYpHDgwKygHbAPZKf93101866 = -898790850;    int FDTsMaHYpHDgwKygHbAPZKf77357266 = -343948545;    int FDTsMaHYpHDgwKygHbAPZKf37937187 = 47856755;    int FDTsMaHYpHDgwKygHbAPZKf3350022 = -186716879;    int FDTsMaHYpHDgwKygHbAPZKf21815257 = -304134049;    int FDTsMaHYpHDgwKygHbAPZKf53716981 = -53727462;    int FDTsMaHYpHDgwKygHbAPZKf64601986 = -758526624;    int FDTsMaHYpHDgwKygHbAPZKf48623234 = -278466821;    int FDTsMaHYpHDgwKygHbAPZKf16433834 = -91817421;    int FDTsMaHYpHDgwKygHbAPZKf91177944 = -320410187;    int FDTsMaHYpHDgwKygHbAPZKf28353569 = -941953781;    int FDTsMaHYpHDgwKygHbAPZKf23855333 = -917531272;    int FDTsMaHYpHDgwKygHbAPZKf1753937 = -264104746;    int FDTsMaHYpHDgwKygHbAPZKf57510250 = -156781069;    int FDTsMaHYpHDgwKygHbAPZKf98538004 = -422562451;    int FDTsMaHYpHDgwKygHbAPZKf14458119 = -479330845;    int FDTsMaHYpHDgwKygHbAPZKf82426703 = -852009088;    int FDTsMaHYpHDgwKygHbAPZKf16674447 = -100975299;    int FDTsMaHYpHDgwKygHbAPZKf30899079 = -241912584;    int FDTsMaHYpHDgwKygHbAPZKf57894938 = -924926837;    int FDTsMaHYpHDgwKygHbAPZKf32673339 = -654355286;    int FDTsMaHYpHDgwKygHbAPZKf75554885 = -989060114;    int FDTsMaHYpHDgwKygHbAPZKf52687749 = 90182759;    int FDTsMaHYpHDgwKygHbAPZKf69386859 = -391271166;    int FDTsMaHYpHDgwKygHbAPZKf52966451 = -553574261;    int FDTsMaHYpHDgwKygHbAPZKf39115800 = -732630841;    int FDTsMaHYpHDgwKygHbAPZKf99647126 = -971316342;    int FDTsMaHYpHDgwKygHbAPZKf41154710 = -662772030;    int FDTsMaHYpHDgwKygHbAPZKf82630648 = -436553062;    int FDTsMaHYpHDgwKygHbAPZKf433471 = -230278243;    int FDTsMaHYpHDgwKygHbAPZKf94310637 = -28969038;     FDTsMaHYpHDgwKygHbAPZKf84834834 = FDTsMaHYpHDgwKygHbAPZKf32362819;     FDTsMaHYpHDgwKygHbAPZKf32362819 = FDTsMaHYpHDgwKygHbAPZKf33124525;     FDTsMaHYpHDgwKygHbAPZKf33124525 = FDTsMaHYpHDgwKygHbAPZKf23237621;     FDTsMaHYpHDgwKygHbAPZKf23237621 = FDTsMaHYpHDgwKygHbAPZKf23435003;     FDTsMaHYpHDgwKygHbAPZKf23435003 = FDTsMaHYpHDgwKygHbAPZKf99898401;     FDTsMaHYpHDgwKygHbAPZKf99898401 = FDTsMaHYpHDgwKygHbAPZKf60892322;     FDTsMaHYpHDgwKygHbAPZKf60892322 = FDTsMaHYpHDgwKygHbAPZKf46906110;     FDTsMaHYpHDgwKygHbAPZKf46906110 = FDTsMaHYpHDgwKygHbAPZKf44572084;     FDTsMaHYpHDgwKygHbAPZKf44572084 = FDTsMaHYpHDgwKygHbAPZKf36654906;     FDTsMaHYpHDgwKygHbAPZKf36654906 = FDTsMaHYpHDgwKygHbAPZKf93790722;     FDTsMaHYpHDgwKygHbAPZKf93790722 = FDTsMaHYpHDgwKygHbAPZKf12008142;     FDTsMaHYpHDgwKygHbAPZKf12008142 = FDTsMaHYpHDgwKygHbAPZKf20848853;     FDTsMaHYpHDgwKygHbAPZKf20848853 = FDTsMaHYpHDgwKygHbAPZKf8424143;     FDTsMaHYpHDgwKygHbAPZKf8424143 = FDTsMaHYpHDgwKygHbAPZKf48375419;     FDTsMaHYpHDgwKygHbAPZKf48375419 = FDTsMaHYpHDgwKygHbAPZKf56738347;     FDTsMaHYpHDgwKygHbAPZKf56738347 = FDTsMaHYpHDgwKygHbAPZKf3413716;     FDTsMaHYpHDgwKygHbAPZKf3413716 = FDTsMaHYpHDgwKygHbAPZKf59410953;     FDTsMaHYpHDgwKygHbAPZKf59410953 = FDTsMaHYpHDgwKygHbAPZKf71595657;     FDTsMaHYpHDgwKygHbAPZKf71595657 = FDTsMaHYpHDgwKygHbAPZKf3785190;     FDTsMaHYpHDgwKygHbAPZKf3785190 = FDTsMaHYpHDgwKygHbAPZKf35455853;     FDTsMaHYpHDgwKygHbAPZKf35455853 = FDTsMaHYpHDgwKygHbAPZKf44079581;     FDTsMaHYpHDgwKygHbAPZKf44079581 = FDTsMaHYpHDgwKygHbAPZKf52644152;     FDTsMaHYpHDgwKygHbAPZKf52644152 = FDTsMaHYpHDgwKygHbAPZKf6431193;     FDTsMaHYpHDgwKygHbAPZKf6431193 = FDTsMaHYpHDgwKygHbAPZKf27147952;     FDTsMaHYpHDgwKygHbAPZKf27147952 = FDTsMaHYpHDgwKygHbAPZKf20340523;     FDTsMaHYpHDgwKygHbAPZKf20340523 = FDTsMaHYpHDgwKygHbAPZKf89233799;     FDTsMaHYpHDgwKygHbAPZKf89233799 = FDTsMaHYpHDgwKygHbAPZKf10471240;     FDTsMaHYpHDgwKygHbAPZKf10471240 = FDTsMaHYpHDgwKygHbAPZKf17206954;     FDTsMaHYpHDgwKygHbAPZKf17206954 = FDTsMaHYpHDgwKygHbAPZKf31746385;     FDTsMaHYpHDgwKygHbAPZKf31746385 = FDTsMaHYpHDgwKygHbAPZKf878059;     FDTsMaHYpHDgwKygHbAPZKf878059 = FDTsMaHYpHDgwKygHbAPZKf72848111;     FDTsMaHYpHDgwKygHbAPZKf72848111 = FDTsMaHYpHDgwKygHbAPZKf1489302;     FDTsMaHYpHDgwKygHbAPZKf1489302 = FDTsMaHYpHDgwKygHbAPZKf78180679;     FDTsMaHYpHDgwKygHbAPZKf78180679 = FDTsMaHYpHDgwKygHbAPZKf73428592;     FDTsMaHYpHDgwKygHbAPZKf73428592 = FDTsMaHYpHDgwKygHbAPZKf55273553;     FDTsMaHYpHDgwKygHbAPZKf55273553 = FDTsMaHYpHDgwKygHbAPZKf79381081;     FDTsMaHYpHDgwKygHbAPZKf79381081 = FDTsMaHYpHDgwKygHbAPZKf65476528;     FDTsMaHYpHDgwKygHbAPZKf65476528 = FDTsMaHYpHDgwKygHbAPZKf56060932;     FDTsMaHYpHDgwKygHbAPZKf56060932 = FDTsMaHYpHDgwKygHbAPZKf49780401;     FDTsMaHYpHDgwKygHbAPZKf49780401 = FDTsMaHYpHDgwKygHbAPZKf50068209;     FDTsMaHYpHDgwKygHbAPZKf50068209 = FDTsMaHYpHDgwKygHbAPZKf70853866;     FDTsMaHYpHDgwKygHbAPZKf70853866 = FDTsMaHYpHDgwKygHbAPZKf95456347;     FDTsMaHYpHDgwKygHbAPZKf95456347 = FDTsMaHYpHDgwKygHbAPZKf36210319;     FDTsMaHYpHDgwKygHbAPZKf36210319 = FDTsMaHYpHDgwKygHbAPZKf15253249;     FDTsMaHYpHDgwKygHbAPZKf15253249 = FDTsMaHYpHDgwKygHbAPZKf98794382;     FDTsMaHYpHDgwKygHbAPZKf98794382 = FDTsMaHYpHDgwKygHbAPZKf96485189;     FDTsMaHYpHDgwKygHbAPZKf96485189 = FDTsMaHYpHDgwKygHbAPZKf87479863;     FDTsMaHYpHDgwKygHbAPZKf87479863 = FDTsMaHYpHDgwKygHbAPZKf52960989;     FDTsMaHYpHDgwKygHbAPZKf52960989 = FDTsMaHYpHDgwKygHbAPZKf18668949;     FDTsMaHYpHDgwKygHbAPZKf18668949 = FDTsMaHYpHDgwKygHbAPZKf17288267;     FDTsMaHYpHDgwKygHbAPZKf17288267 = FDTsMaHYpHDgwKygHbAPZKf18451355;     FDTsMaHYpHDgwKygHbAPZKf18451355 = FDTsMaHYpHDgwKygHbAPZKf56173664;     FDTsMaHYpHDgwKygHbAPZKf56173664 = FDTsMaHYpHDgwKygHbAPZKf70590223;     FDTsMaHYpHDgwKygHbAPZKf70590223 = FDTsMaHYpHDgwKygHbAPZKf20285741;     FDTsMaHYpHDgwKygHbAPZKf20285741 = FDTsMaHYpHDgwKygHbAPZKf40755253;     FDTsMaHYpHDgwKygHbAPZKf40755253 = FDTsMaHYpHDgwKygHbAPZKf79718667;     FDTsMaHYpHDgwKygHbAPZKf79718667 = FDTsMaHYpHDgwKygHbAPZKf26693332;     FDTsMaHYpHDgwKygHbAPZKf26693332 = FDTsMaHYpHDgwKygHbAPZKf96089669;     FDTsMaHYpHDgwKygHbAPZKf96089669 = FDTsMaHYpHDgwKygHbAPZKf3094481;     FDTsMaHYpHDgwKygHbAPZKf3094481 = FDTsMaHYpHDgwKygHbAPZKf10664602;     FDTsMaHYpHDgwKygHbAPZKf10664602 = FDTsMaHYpHDgwKygHbAPZKf50421082;     FDTsMaHYpHDgwKygHbAPZKf50421082 = FDTsMaHYpHDgwKygHbAPZKf29699157;     FDTsMaHYpHDgwKygHbAPZKf29699157 = FDTsMaHYpHDgwKygHbAPZKf12825699;     FDTsMaHYpHDgwKygHbAPZKf12825699 = FDTsMaHYpHDgwKygHbAPZKf35776848;     FDTsMaHYpHDgwKygHbAPZKf35776848 = FDTsMaHYpHDgwKygHbAPZKf20942612;     FDTsMaHYpHDgwKygHbAPZKf20942612 = FDTsMaHYpHDgwKygHbAPZKf10518841;     FDTsMaHYpHDgwKygHbAPZKf10518841 = FDTsMaHYpHDgwKygHbAPZKf42668173;     FDTsMaHYpHDgwKygHbAPZKf42668173 = FDTsMaHYpHDgwKygHbAPZKf34995551;     FDTsMaHYpHDgwKygHbAPZKf34995551 = FDTsMaHYpHDgwKygHbAPZKf93101866;     FDTsMaHYpHDgwKygHbAPZKf93101866 = FDTsMaHYpHDgwKygHbAPZKf77357266;     FDTsMaHYpHDgwKygHbAPZKf77357266 = FDTsMaHYpHDgwKygHbAPZKf37937187;     FDTsMaHYpHDgwKygHbAPZKf37937187 = FDTsMaHYpHDgwKygHbAPZKf3350022;     FDTsMaHYpHDgwKygHbAPZKf3350022 = FDTsMaHYpHDgwKygHbAPZKf21815257;     FDTsMaHYpHDgwKygHbAPZKf21815257 = FDTsMaHYpHDgwKygHbAPZKf53716981;     FDTsMaHYpHDgwKygHbAPZKf53716981 = FDTsMaHYpHDgwKygHbAPZKf64601986;     FDTsMaHYpHDgwKygHbAPZKf64601986 = FDTsMaHYpHDgwKygHbAPZKf48623234;     FDTsMaHYpHDgwKygHbAPZKf48623234 = FDTsMaHYpHDgwKygHbAPZKf16433834;     FDTsMaHYpHDgwKygHbAPZKf16433834 = FDTsMaHYpHDgwKygHbAPZKf91177944;     FDTsMaHYpHDgwKygHbAPZKf91177944 = FDTsMaHYpHDgwKygHbAPZKf28353569;     FDTsMaHYpHDgwKygHbAPZKf28353569 = FDTsMaHYpHDgwKygHbAPZKf23855333;     FDTsMaHYpHDgwKygHbAPZKf23855333 = FDTsMaHYpHDgwKygHbAPZKf1753937;     FDTsMaHYpHDgwKygHbAPZKf1753937 = FDTsMaHYpHDgwKygHbAPZKf57510250;     FDTsMaHYpHDgwKygHbAPZKf57510250 = FDTsMaHYpHDgwKygHbAPZKf98538004;     FDTsMaHYpHDgwKygHbAPZKf98538004 = FDTsMaHYpHDgwKygHbAPZKf14458119;     FDTsMaHYpHDgwKygHbAPZKf14458119 = FDTsMaHYpHDgwKygHbAPZKf82426703;     FDTsMaHYpHDgwKygHbAPZKf82426703 = FDTsMaHYpHDgwKygHbAPZKf16674447;     FDTsMaHYpHDgwKygHbAPZKf16674447 = FDTsMaHYpHDgwKygHbAPZKf30899079;     FDTsMaHYpHDgwKygHbAPZKf30899079 = FDTsMaHYpHDgwKygHbAPZKf57894938;     FDTsMaHYpHDgwKygHbAPZKf57894938 = FDTsMaHYpHDgwKygHbAPZKf32673339;     FDTsMaHYpHDgwKygHbAPZKf32673339 = FDTsMaHYpHDgwKygHbAPZKf75554885;     FDTsMaHYpHDgwKygHbAPZKf75554885 = FDTsMaHYpHDgwKygHbAPZKf52687749;     FDTsMaHYpHDgwKygHbAPZKf52687749 = FDTsMaHYpHDgwKygHbAPZKf69386859;     FDTsMaHYpHDgwKygHbAPZKf69386859 = FDTsMaHYpHDgwKygHbAPZKf52966451;     FDTsMaHYpHDgwKygHbAPZKf52966451 = FDTsMaHYpHDgwKygHbAPZKf39115800;     FDTsMaHYpHDgwKygHbAPZKf39115800 = FDTsMaHYpHDgwKygHbAPZKf99647126;     FDTsMaHYpHDgwKygHbAPZKf99647126 = FDTsMaHYpHDgwKygHbAPZKf41154710;     FDTsMaHYpHDgwKygHbAPZKf41154710 = FDTsMaHYpHDgwKygHbAPZKf82630648;     FDTsMaHYpHDgwKygHbAPZKf82630648 = FDTsMaHYpHDgwKygHbAPZKf433471;     FDTsMaHYpHDgwKygHbAPZKf433471 = FDTsMaHYpHDgwKygHbAPZKf94310637;     FDTsMaHYpHDgwKygHbAPZKf94310637 = FDTsMaHYpHDgwKygHbAPZKf84834834;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void MPkKuXUYxuIWmeIRvmTLJxEzlLxIqUYHYqTcWUXvz37970355() {     int jVswTInWjBZDfZPLkYjZMhc36570284 = -145223871;    int jVswTInWjBZDfZPLkYjZMhc48036802 = -484912574;    int jVswTInWjBZDfZPLkYjZMhc81924884 = -220031948;    int jVswTInWjBZDfZPLkYjZMhc98313022 = -157818790;    int jVswTInWjBZDfZPLkYjZMhc158936 = -253222151;    int jVswTInWjBZDfZPLkYjZMhc24781756 = -286165352;    int jVswTInWjBZDfZPLkYjZMhc34669165 = -657096925;    int jVswTInWjBZDfZPLkYjZMhc65697588 = -745837068;    int jVswTInWjBZDfZPLkYjZMhc95870161 = -605243051;    int jVswTInWjBZDfZPLkYjZMhc5452031 = -929124681;    int jVswTInWjBZDfZPLkYjZMhc89083421 = 51729737;    int jVswTInWjBZDfZPLkYjZMhc22364520 = -238848327;    int jVswTInWjBZDfZPLkYjZMhc8029646 = -218510993;    int jVswTInWjBZDfZPLkYjZMhc67191862 = -981583443;    int jVswTInWjBZDfZPLkYjZMhc2390677 = -706097084;    int jVswTInWjBZDfZPLkYjZMhc68465619 = -613666637;    int jVswTInWjBZDfZPLkYjZMhc59384240 = -346075536;    int jVswTInWjBZDfZPLkYjZMhc45093875 = -19803825;    int jVswTInWjBZDfZPLkYjZMhc31169507 = -445870800;    int jVswTInWjBZDfZPLkYjZMhc23514764 = -123416551;    int jVswTInWjBZDfZPLkYjZMhc81203205 = 64141639;    int jVswTInWjBZDfZPLkYjZMhc46499035 = -297663625;    int jVswTInWjBZDfZPLkYjZMhc53993666 = -775731856;    int jVswTInWjBZDfZPLkYjZMhc99081443 = -846047618;    int jVswTInWjBZDfZPLkYjZMhc98563809 = -752637649;    int jVswTInWjBZDfZPLkYjZMhc78045936 = 25754915;    int jVswTInWjBZDfZPLkYjZMhc28062435 = -708355116;    int jVswTInWjBZDfZPLkYjZMhc8600465 = -829111417;    int jVswTInWjBZDfZPLkYjZMhc91957026 = -140204876;    int jVswTInWjBZDfZPLkYjZMhc1731469 = -867132401;    int jVswTInWjBZDfZPLkYjZMhc38096867 = 25037579;    int jVswTInWjBZDfZPLkYjZMhc85877841 = -597855747;    int jVswTInWjBZDfZPLkYjZMhc99582610 = -306377895;    int jVswTInWjBZDfZPLkYjZMhc72204391 = -695056796;    int jVswTInWjBZDfZPLkYjZMhc71633720 = -775951350;    int jVswTInWjBZDfZPLkYjZMhc36973163 = -465747353;    int jVswTInWjBZDfZPLkYjZMhc29029307 = -2388882;    int jVswTInWjBZDfZPLkYjZMhc66310140 = -9349966;    int jVswTInWjBZDfZPLkYjZMhc25835774 = -815827847;    int jVswTInWjBZDfZPLkYjZMhc74862817 = -132438235;    int jVswTInWjBZDfZPLkYjZMhc18752296 = -378579728;    int jVswTInWjBZDfZPLkYjZMhc30879266 = -83043192;    int jVswTInWjBZDfZPLkYjZMhc52039579 = -746492329;    int jVswTInWjBZDfZPLkYjZMhc29146138 = -901065665;    int jVswTInWjBZDfZPLkYjZMhc87282456 = -54542564;    int jVswTInWjBZDfZPLkYjZMhc488830 = -188921372;    int jVswTInWjBZDfZPLkYjZMhc82651384 = -173444488;    int jVswTInWjBZDfZPLkYjZMhc66464328 = -286246348;    int jVswTInWjBZDfZPLkYjZMhc41979442 = -152952391;    int jVswTInWjBZDfZPLkYjZMhc7325208 = -526754904;    int jVswTInWjBZDfZPLkYjZMhc57968158 = -634404917;    int jVswTInWjBZDfZPLkYjZMhc50431108 = -251670427;    int jVswTInWjBZDfZPLkYjZMhc79412410 = -917219445;    int jVswTInWjBZDfZPLkYjZMhc40649463 = -96882738;    int jVswTInWjBZDfZPLkYjZMhc56767150 = -39295994;    int jVswTInWjBZDfZPLkYjZMhc90071249 = -847560246;    int jVswTInWjBZDfZPLkYjZMhc94043135 = -709180719;    int jVswTInWjBZDfZPLkYjZMhc82843441 = -373984330;    int jVswTInWjBZDfZPLkYjZMhc99749212 = -405181142;    int jVswTInWjBZDfZPLkYjZMhc22112999 = -178977066;    int jVswTInWjBZDfZPLkYjZMhc96719321 = -577810237;    int jVswTInWjBZDfZPLkYjZMhc26068701 = -827985509;    int jVswTInWjBZDfZPLkYjZMhc73740562 = -505632193;    int jVswTInWjBZDfZPLkYjZMhc94138692 = -738110650;    int jVswTInWjBZDfZPLkYjZMhc67355163 = -854162261;    int jVswTInWjBZDfZPLkYjZMhc3205580 = -350414517;    int jVswTInWjBZDfZPLkYjZMhc22781909 = -932470433;    int jVswTInWjBZDfZPLkYjZMhc35825255 = -523454198;    int jVswTInWjBZDfZPLkYjZMhc95558141 = -105632093;    int jVswTInWjBZDfZPLkYjZMhc65417514 = -140349732;    int jVswTInWjBZDfZPLkYjZMhc39436312 = -511277756;    int jVswTInWjBZDfZPLkYjZMhc93074099 = -236725570;    int jVswTInWjBZDfZPLkYjZMhc19258101 = -203975979;    int jVswTInWjBZDfZPLkYjZMhc56306689 = -213432566;    int jVswTInWjBZDfZPLkYjZMhc4762468 = -744836823;    int jVswTInWjBZDfZPLkYjZMhc50323939 = -852815170;    int jVswTInWjBZDfZPLkYjZMhc94459455 = -551171297;    int jVswTInWjBZDfZPLkYjZMhc24847529 = -874666191;    int jVswTInWjBZDfZPLkYjZMhc11798987 = -691505055;    int jVswTInWjBZDfZPLkYjZMhc98074980 = -463716277;    int jVswTInWjBZDfZPLkYjZMhc95394552 = -800800598;    int jVswTInWjBZDfZPLkYjZMhc61598106 = -322108768;    int jVswTInWjBZDfZPLkYjZMhc66621022 = -576159026;    int jVswTInWjBZDfZPLkYjZMhc84631818 = -613449972;    int jVswTInWjBZDfZPLkYjZMhc43763310 = -132727485;    int jVswTInWjBZDfZPLkYjZMhc87665759 = -723291994;    int jVswTInWjBZDfZPLkYjZMhc6465431 = -680636302;    int jVswTInWjBZDfZPLkYjZMhc58933147 = -109495157;    int jVswTInWjBZDfZPLkYjZMhc15437242 = -555760802;    int jVswTInWjBZDfZPLkYjZMhc81562470 = -928391105;    int jVswTInWjBZDfZPLkYjZMhc42930027 = -756566635;    int jVswTInWjBZDfZPLkYjZMhc46185865 = -628404552;    int jVswTInWjBZDfZPLkYjZMhc66560928 = -604168824;    int jVswTInWjBZDfZPLkYjZMhc3722776 = -536850781;    int jVswTInWjBZDfZPLkYjZMhc78143496 = -554627999;    int jVswTInWjBZDfZPLkYjZMhc92683595 = -550594220;    int jVswTInWjBZDfZPLkYjZMhc57138704 = -577411000;    int jVswTInWjBZDfZPLkYjZMhc57900887 = 91618321;    int jVswTInWjBZDfZPLkYjZMhc61790974 = 53096595;    int jVswTInWjBZDfZPLkYjZMhc84076876 = -145223871;     jVswTInWjBZDfZPLkYjZMhc36570284 = jVswTInWjBZDfZPLkYjZMhc48036802;     jVswTInWjBZDfZPLkYjZMhc48036802 = jVswTInWjBZDfZPLkYjZMhc81924884;     jVswTInWjBZDfZPLkYjZMhc81924884 = jVswTInWjBZDfZPLkYjZMhc98313022;     jVswTInWjBZDfZPLkYjZMhc98313022 = jVswTInWjBZDfZPLkYjZMhc158936;     jVswTInWjBZDfZPLkYjZMhc158936 = jVswTInWjBZDfZPLkYjZMhc24781756;     jVswTInWjBZDfZPLkYjZMhc24781756 = jVswTInWjBZDfZPLkYjZMhc34669165;     jVswTInWjBZDfZPLkYjZMhc34669165 = jVswTInWjBZDfZPLkYjZMhc65697588;     jVswTInWjBZDfZPLkYjZMhc65697588 = jVswTInWjBZDfZPLkYjZMhc95870161;     jVswTInWjBZDfZPLkYjZMhc95870161 = jVswTInWjBZDfZPLkYjZMhc5452031;     jVswTInWjBZDfZPLkYjZMhc5452031 = jVswTInWjBZDfZPLkYjZMhc89083421;     jVswTInWjBZDfZPLkYjZMhc89083421 = jVswTInWjBZDfZPLkYjZMhc22364520;     jVswTInWjBZDfZPLkYjZMhc22364520 = jVswTInWjBZDfZPLkYjZMhc8029646;     jVswTInWjBZDfZPLkYjZMhc8029646 = jVswTInWjBZDfZPLkYjZMhc67191862;     jVswTInWjBZDfZPLkYjZMhc67191862 = jVswTInWjBZDfZPLkYjZMhc2390677;     jVswTInWjBZDfZPLkYjZMhc2390677 = jVswTInWjBZDfZPLkYjZMhc68465619;     jVswTInWjBZDfZPLkYjZMhc68465619 = jVswTInWjBZDfZPLkYjZMhc59384240;     jVswTInWjBZDfZPLkYjZMhc59384240 = jVswTInWjBZDfZPLkYjZMhc45093875;     jVswTInWjBZDfZPLkYjZMhc45093875 = jVswTInWjBZDfZPLkYjZMhc31169507;     jVswTInWjBZDfZPLkYjZMhc31169507 = jVswTInWjBZDfZPLkYjZMhc23514764;     jVswTInWjBZDfZPLkYjZMhc23514764 = jVswTInWjBZDfZPLkYjZMhc81203205;     jVswTInWjBZDfZPLkYjZMhc81203205 = jVswTInWjBZDfZPLkYjZMhc46499035;     jVswTInWjBZDfZPLkYjZMhc46499035 = jVswTInWjBZDfZPLkYjZMhc53993666;     jVswTInWjBZDfZPLkYjZMhc53993666 = jVswTInWjBZDfZPLkYjZMhc99081443;     jVswTInWjBZDfZPLkYjZMhc99081443 = jVswTInWjBZDfZPLkYjZMhc98563809;     jVswTInWjBZDfZPLkYjZMhc98563809 = jVswTInWjBZDfZPLkYjZMhc78045936;     jVswTInWjBZDfZPLkYjZMhc78045936 = jVswTInWjBZDfZPLkYjZMhc28062435;     jVswTInWjBZDfZPLkYjZMhc28062435 = jVswTInWjBZDfZPLkYjZMhc8600465;     jVswTInWjBZDfZPLkYjZMhc8600465 = jVswTInWjBZDfZPLkYjZMhc91957026;     jVswTInWjBZDfZPLkYjZMhc91957026 = jVswTInWjBZDfZPLkYjZMhc1731469;     jVswTInWjBZDfZPLkYjZMhc1731469 = jVswTInWjBZDfZPLkYjZMhc38096867;     jVswTInWjBZDfZPLkYjZMhc38096867 = jVswTInWjBZDfZPLkYjZMhc85877841;     jVswTInWjBZDfZPLkYjZMhc85877841 = jVswTInWjBZDfZPLkYjZMhc99582610;     jVswTInWjBZDfZPLkYjZMhc99582610 = jVswTInWjBZDfZPLkYjZMhc72204391;     jVswTInWjBZDfZPLkYjZMhc72204391 = jVswTInWjBZDfZPLkYjZMhc71633720;     jVswTInWjBZDfZPLkYjZMhc71633720 = jVswTInWjBZDfZPLkYjZMhc36973163;     jVswTInWjBZDfZPLkYjZMhc36973163 = jVswTInWjBZDfZPLkYjZMhc29029307;     jVswTInWjBZDfZPLkYjZMhc29029307 = jVswTInWjBZDfZPLkYjZMhc66310140;     jVswTInWjBZDfZPLkYjZMhc66310140 = jVswTInWjBZDfZPLkYjZMhc25835774;     jVswTInWjBZDfZPLkYjZMhc25835774 = jVswTInWjBZDfZPLkYjZMhc74862817;     jVswTInWjBZDfZPLkYjZMhc74862817 = jVswTInWjBZDfZPLkYjZMhc18752296;     jVswTInWjBZDfZPLkYjZMhc18752296 = jVswTInWjBZDfZPLkYjZMhc30879266;     jVswTInWjBZDfZPLkYjZMhc30879266 = jVswTInWjBZDfZPLkYjZMhc52039579;     jVswTInWjBZDfZPLkYjZMhc52039579 = jVswTInWjBZDfZPLkYjZMhc29146138;     jVswTInWjBZDfZPLkYjZMhc29146138 = jVswTInWjBZDfZPLkYjZMhc87282456;     jVswTInWjBZDfZPLkYjZMhc87282456 = jVswTInWjBZDfZPLkYjZMhc488830;     jVswTInWjBZDfZPLkYjZMhc488830 = jVswTInWjBZDfZPLkYjZMhc82651384;     jVswTInWjBZDfZPLkYjZMhc82651384 = jVswTInWjBZDfZPLkYjZMhc66464328;     jVswTInWjBZDfZPLkYjZMhc66464328 = jVswTInWjBZDfZPLkYjZMhc41979442;     jVswTInWjBZDfZPLkYjZMhc41979442 = jVswTInWjBZDfZPLkYjZMhc7325208;     jVswTInWjBZDfZPLkYjZMhc7325208 = jVswTInWjBZDfZPLkYjZMhc57968158;     jVswTInWjBZDfZPLkYjZMhc57968158 = jVswTInWjBZDfZPLkYjZMhc50431108;     jVswTInWjBZDfZPLkYjZMhc50431108 = jVswTInWjBZDfZPLkYjZMhc79412410;     jVswTInWjBZDfZPLkYjZMhc79412410 = jVswTInWjBZDfZPLkYjZMhc40649463;     jVswTInWjBZDfZPLkYjZMhc40649463 = jVswTInWjBZDfZPLkYjZMhc56767150;     jVswTInWjBZDfZPLkYjZMhc56767150 = jVswTInWjBZDfZPLkYjZMhc90071249;     jVswTInWjBZDfZPLkYjZMhc90071249 = jVswTInWjBZDfZPLkYjZMhc94043135;     jVswTInWjBZDfZPLkYjZMhc94043135 = jVswTInWjBZDfZPLkYjZMhc82843441;     jVswTInWjBZDfZPLkYjZMhc82843441 = jVswTInWjBZDfZPLkYjZMhc99749212;     jVswTInWjBZDfZPLkYjZMhc99749212 = jVswTInWjBZDfZPLkYjZMhc22112999;     jVswTInWjBZDfZPLkYjZMhc22112999 = jVswTInWjBZDfZPLkYjZMhc96719321;     jVswTInWjBZDfZPLkYjZMhc96719321 = jVswTInWjBZDfZPLkYjZMhc26068701;     jVswTInWjBZDfZPLkYjZMhc26068701 = jVswTInWjBZDfZPLkYjZMhc73740562;     jVswTInWjBZDfZPLkYjZMhc73740562 = jVswTInWjBZDfZPLkYjZMhc94138692;     jVswTInWjBZDfZPLkYjZMhc94138692 = jVswTInWjBZDfZPLkYjZMhc67355163;     jVswTInWjBZDfZPLkYjZMhc67355163 = jVswTInWjBZDfZPLkYjZMhc3205580;     jVswTInWjBZDfZPLkYjZMhc3205580 = jVswTInWjBZDfZPLkYjZMhc22781909;     jVswTInWjBZDfZPLkYjZMhc22781909 = jVswTInWjBZDfZPLkYjZMhc35825255;     jVswTInWjBZDfZPLkYjZMhc35825255 = jVswTInWjBZDfZPLkYjZMhc95558141;     jVswTInWjBZDfZPLkYjZMhc95558141 = jVswTInWjBZDfZPLkYjZMhc65417514;     jVswTInWjBZDfZPLkYjZMhc65417514 = jVswTInWjBZDfZPLkYjZMhc39436312;     jVswTInWjBZDfZPLkYjZMhc39436312 = jVswTInWjBZDfZPLkYjZMhc93074099;     jVswTInWjBZDfZPLkYjZMhc93074099 = jVswTInWjBZDfZPLkYjZMhc19258101;     jVswTInWjBZDfZPLkYjZMhc19258101 = jVswTInWjBZDfZPLkYjZMhc56306689;     jVswTInWjBZDfZPLkYjZMhc56306689 = jVswTInWjBZDfZPLkYjZMhc4762468;     jVswTInWjBZDfZPLkYjZMhc4762468 = jVswTInWjBZDfZPLkYjZMhc50323939;     jVswTInWjBZDfZPLkYjZMhc50323939 = jVswTInWjBZDfZPLkYjZMhc94459455;     jVswTInWjBZDfZPLkYjZMhc94459455 = jVswTInWjBZDfZPLkYjZMhc24847529;     jVswTInWjBZDfZPLkYjZMhc24847529 = jVswTInWjBZDfZPLkYjZMhc11798987;     jVswTInWjBZDfZPLkYjZMhc11798987 = jVswTInWjBZDfZPLkYjZMhc98074980;     jVswTInWjBZDfZPLkYjZMhc98074980 = jVswTInWjBZDfZPLkYjZMhc95394552;     jVswTInWjBZDfZPLkYjZMhc95394552 = jVswTInWjBZDfZPLkYjZMhc61598106;     jVswTInWjBZDfZPLkYjZMhc61598106 = jVswTInWjBZDfZPLkYjZMhc66621022;     jVswTInWjBZDfZPLkYjZMhc66621022 = jVswTInWjBZDfZPLkYjZMhc84631818;     jVswTInWjBZDfZPLkYjZMhc84631818 = jVswTInWjBZDfZPLkYjZMhc43763310;     jVswTInWjBZDfZPLkYjZMhc43763310 = jVswTInWjBZDfZPLkYjZMhc87665759;     jVswTInWjBZDfZPLkYjZMhc87665759 = jVswTInWjBZDfZPLkYjZMhc6465431;     jVswTInWjBZDfZPLkYjZMhc6465431 = jVswTInWjBZDfZPLkYjZMhc58933147;     jVswTInWjBZDfZPLkYjZMhc58933147 = jVswTInWjBZDfZPLkYjZMhc15437242;     jVswTInWjBZDfZPLkYjZMhc15437242 = jVswTInWjBZDfZPLkYjZMhc81562470;     jVswTInWjBZDfZPLkYjZMhc81562470 = jVswTInWjBZDfZPLkYjZMhc42930027;     jVswTInWjBZDfZPLkYjZMhc42930027 = jVswTInWjBZDfZPLkYjZMhc46185865;     jVswTInWjBZDfZPLkYjZMhc46185865 = jVswTInWjBZDfZPLkYjZMhc66560928;     jVswTInWjBZDfZPLkYjZMhc66560928 = jVswTInWjBZDfZPLkYjZMhc3722776;     jVswTInWjBZDfZPLkYjZMhc3722776 = jVswTInWjBZDfZPLkYjZMhc78143496;     jVswTInWjBZDfZPLkYjZMhc78143496 = jVswTInWjBZDfZPLkYjZMhc92683595;     jVswTInWjBZDfZPLkYjZMhc92683595 = jVswTInWjBZDfZPLkYjZMhc57138704;     jVswTInWjBZDfZPLkYjZMhc57138704 = jVswTInWjBZDfZPLkYjZMhc57900887;     jVswTInWjBZDfZPLkYjZMhc57900887 = jVswTInWjBZDfZPLkYjZMhc61790974;     jVswTInWjBZDfZPLkYjZMhc61790974 = jVswTInWjBZDfZPLkYjZMhc84076876;     jVswTInWjBZDfZPLkYjZMhc84076876 = jVswTInWjBZDfZPLkYjZMhc36570284;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void qevkdpEGJoqjxEtisBjNacmECBZzwbJNQByMdDPUS67956585() {     long nvnaWtCFILrGJENsqhbPEJi58963873 = 92896308;    long nvnaWtCFILrGJENsqhbPEJi93811985 = -390860504;    long nvnaWtCFILrGJENsqhbPEJi9380952 = -502557179;    long nvnaWtCFILrGJENsqhbPEJi28239850 = -343685492;    long nvnaWtCFILrGJENsqhbPEJi89493087 = -375923830;    long nvnaWtCFILrGJENsqhbPEJi4859441 = -447340918;    long nvnaWtCFILrGJENsqhbPEJi58277568 = -774547764;    long nvnaWtCFILrGJENsqhbPEJi72117396 = -412256396;    long nvnaWtCFILrGJENsqhbPEJi10293128 = -775793020;    long nvnaWtCFILrGJENsqhbPEJi576102 = 64940857;    long nvnaWtCFILrGJENsqhbPEJi6304676 = 14577408;    long nvnaWtCFILrGJENsqhbPEJi63975791 = -754115258;    long nvnaWtCFILrGJENsqhbPEJi43184912 = -815569838;    long nvnaWtCFILrGJENsqhbPEJi55962394 = -64139149;    long nvnaWtCFILrGJENsqhbPEJi93953844 = -370861945;    long nvnaWtCFILrGJENsqhbPEJi38156985 = -662538529;    long nvnaWtCFILrGJENsqhbPEJi53354832 = -803740786;    long nvnaWtCFILrGJENsqhbPEJi28069759 = -74474894;    long nvnaWtCFILrGJENsqhbPEJi52022868 = 37009341;    long nvnaWtCFILrGJENsqhbPEJi29957285 = -864026553;    long nvnaWtCFILrGJENsqhbPEJi2416889 = -216879296;    long nvnaWtCFILrGJENsqhbPEJi32017987 = -292438055;    long nvnaWtCFILrGJENsqhbPEJi20408593 = -492854606;    long nvnaWtCFILrGJENsqhbPEJi81931122 = -429119953;    long nvnaWtCFILrGJENsqhbPEJi5661367 = 52497080;    long nvnaWtCFILrGJENsqhbPEJi49774854 = -509933381;    long nvnaWtCFILrGJENsqhbPEJi4930274 = -165141896;    long nvnaWtCFILrGJENsqhbPEJi79108389 = -8598882;    long nvnaWtCFILrGJENsqhbPEJi86171140 = -938391681;    long nvnaWtCFILrGJENsqhbPEJi34798778 = -11996894;    long nvnaWtCFILrGJENsqhbPEJi48974993 = -769185338;    long nvnaWtCFILrGJENsqhbPEJi58695175 = -858105340;    long nvnaWtCFILrGJENsqhbPEJi95168858 = -633777174;    long nvnaWtCFILrGJENsqhbPEJi31310241 = -42501913;    long nvnaWtCFILrGJENsqhbPEJi65505047 = -580393848;    long nvnaWtCFILrGJENsqhbPEJi35837843 = -701376983;    long nvnaWtCFILrGJENsqhbPEJi10527652 = -735683455;    long nvnaWtCFILrGJENsqhbPEJi50018562 = -981712759;    long nvnaWtCFILrGJENsqhbPEJi38830309 = -504192462;    long nvnaWtCFILrGJENsqhbPEJi23175640 = -659230578;    long nvnaWtCFILrGJENsqhbPEJi59653999 = -793813496;    long nvnaWtCFILrGJENsqhbPEJi33689997 = -747159801;    long nvnaWtCFILrGJENsqhbPEJi97306411 = -74892658;    long nvnaWtCFILrGJENsqhbPEJi69358358 = -241464871;    long nvnaWtCFILrGJENsqhbPEJi71247671 = -490426640;    long nvnaWtCFILrGJENsqhbPEJi68161143 = -559105797;    long nvnaWtCFILrGJENsqhbPEJi67250989 = -270574119;    long nvnaWtCFILrGJENsqhbPEJi35679422 = -534019983;    long nvnaWtCFILrGJENsqhbPEJi17780958 = -538905228;    long nvnaWtCFILrGJENsqhbPEJi84363530 = 18249723;    long nvnaWtCFILrGJENsqhbPEJi53578005 = -310926187;    long nvnaWtCFILrGJENsqhbPEJi9735108 = -300343961;    long nvnaWtCFILrGJENsqhbPEJi82278465 = -697076667;    long nvnaWtCFILrGJENsqhbPEJi90685737 = -940643696;    long nvnaWtCFILrGJENsqhbPEJi65539697 = -423100832;    long nvnaWtCFILrGJENsqhbPEJi26945886 = -614665638;    long nvnaWtCFILrGJENsqhbPEJi73403393 = -898005898;    long nvnaWtCFILrGJENsqhbPEJi27449830 = 26562774;    long nvnaWtCFILrGJENsqhbPEJi22578483 = -296182572;    long nvnaWtCFILrGJENsqhbPEJi39718234 = -865990450;    long nvnaWtCFILrGJENsqhbPEJi99929167 = -182199023;    long nvnaWtCFILrGJENsqhbPEJi79169178 = -665948883;    long nvnaWtCFILrGJENsqhbPEJi85946256 = -473864716;    long nvnaWtCFILrGJENsqhbPEJi75494349 = -663796126;    long nvnaWtCFILrGJENsqhbPEJi51601108 = -165873805;    long nvnaWtCFILrGJENsqhbPEJi47609501 = -127317252;    long nvnaWtCFILrGJENsqhbPEJi68806933 = -20338085;    long nvnaWtCFILrGJENsqhbPEJi11874671 = -673067926;    long nvnaWtCFILrGJENsqhbPEJi90457347 = -483745301;    long nvnaWtCFILrGJENsqhbPEJi58116002 = -669484963;    long nvnaWtCFILrGJENsqhbPEJi27629333 = -926855075;    long nvnaWtCFILrGJENsqhbPEJi3336271 = -822028027;    long nvnaWtCFILrGJENsqhbPEJi89239449 = -570282432;    long nvnaWtCFILrGJENsqhbPEJi28847229 = -303760081;    long nvnaWtCFILrGJENsqhbPEJi70303285 = 29786942;    long nvnaWtCFILrGJENsqhbPEJi68726892 = -469719496;    long nvnaWtCFILrGJENsqhbPEJi34711576 = -117545397;    long nvnaWtCFILrGJENsqhbPEJi51050234 = -151389736;    long nvnaWtCFILrGJENsqhbPEJi10683451 = -938693314;    long nvnaWtCFILrGJENsqhbPEJi37500224 = -388397124;    long nvnaWtCFILrGJENsqhbPEJi82523865 = -139359263;    long nvnaWtCFILrGJENsqhbPEJi69250851 = -631121913;    long nvnaWtCFILrGJENsqhbPEJi61327432 = -469693654;    long nvnaWtCFILrGJENsqhbPEJi1807610 = -856641404;    long nvnaWtCFILrGJENsqhbPEJi81220773 = -701070708;    long nvnaWtCFILrGJENsqhbPEJi39239886 = -368841378;    long nvnaWtCFILrGJENsqhbPEJi76416709 = -61028674;    long nvnaWtCFILrGJENsqhbPEJi4483121 = -693133479;    long nvnaWtCFILrGJENsqhbPEJi65770544 = -619401082;    long nvnaWtCFILrGJENsqhbPEJi38559161 = -965728211;    long nvnaWtCFILrGJENsqhbPEJi62434450 = -803371085;    long nvnaWtCFILrGJENsqhbPEJi83077822 = -662246229;    long nvnaWtCFILrGJENsqhbPEJi27440079 = -585530187;    long nvnaWtCFILrGJENsqhbPEJi99112075 = -638202013;    long nvnaWtCFILrGJENsqhbPEJi23246473 = -377031556;    long nvnaWtCFILrGJENsqhbPEJi80484820 = -27864614;    long nvnaWtCFILrGJENsqhbPEJi47743741 = -173295085;    long nvnaWtCFILrGJENsqhbPEJi21812062 = -411096532;    long nvnaWtCFILrGJENsqhbPEJi17757251 = 24408934;    long nvnaWtCFILrGJENsqhbPEJi23638171 = 92896308;     nvnaWtCFILrGJENsqhbPEJi58963873 = nvnaWtCFILrGJENsqhbPEJi93811985;     nvnaWtCFILrGJENsqhbPEJi93811985 = nvnaWtCFILrGJENsqhbPEJi9380952;     nvnaWtCFILrGJENsqhbPEJi9380952 = nvnaWtCFILrGJENsqhbPEJi28239850;     nvnaWtCFILrGJENsqhbPEJi28239850 = nvnaWtCFILrGJENsqhbPEJi89493087;     nvnaWtCFILrGJENsqhbPEJi89493087 = nvnaWtCFILrGJENsqhbPEJi4859441;     nvnaWtCFILrGJENsqhbPEJi4859441 = nvnaWtCFILrGJENsqhbPEJi58277568;     nvnaWtCFILrGJENsqhbPEJi58277568 = nvnaWtCFILrGJENsqhbPEJi72117396;     nvnaWtCFILrGJENsqhbPEJi72117396 = nvnaWtCFILrGJENsqhbPEJi10293128;     nvnaWtCFILrGJENsqhbPEJi10293128 = nvnaWtCFILrGJENsqhbPEJi576102;     nvnaWtCFILrGJENsqhbPEJi576102 = nvnaWtCFILrGJENsqhbPEJi6304676;     nvnaWtCFILrGJENsqhbPEJi6304676 = nvnaWtCFILrGJENsqhbPEJi63975791;     nvnaWtCFILrGJENsqhbPEJi63975791 = nvnaWtCFILrGJENsqhbPEJi43184912;     nvnaWtCFILrGJENsqhbPEJi43184912 = nvnaWtCFILrGJENsqhbPEJi55962394;     nvnaWtCFILrGJENsqhbPEJi55962394 = nvnaWtCFILrGJENsqhbPEJi93953844;     nvnaWtCFILrGJENsqhbPEJi93953844 = nvnaWtCFILrGJENsqhbPEJi38156985;     nvnaWtCFILrGJENsqhbPEJi38156985 = nvnaWtCFILrGJENsqhbPEJi53354832;     nvnaWtCFILrGJENsqhbPEJi53354832 = nvnaWtCFILrGJENsqhbPEJi28069759;     nvnaWtCFILrGJENsqhbPEJi28069759 = nvnaWtCFILrGJENsqhbPEJi52022868;     nvnaWtCFILrGJENsqhbPEJi52022868 = nvnaWtCFILrGJENsqhbPEJi29957285;     nvnaWtCFILrGJENsqhbPEJi29957285 = nvnaWtCFILrGJENsqhbPEJi2416889;     nvnaWtCFILrGJENsqhbPEJi2416889 = nvnaWtCFILrGJENsqhbPEJi32017987;     nvnaWtCFILrGJENsqhbPEJi32017987 = nvnaWtCFILrGJENsqhbPEJi20408593;     nvnaWtCFILrGJENsqhbPEJi20408593 = nvnaWtCFILrGJENsqhbPEJi81931122;     nvnaWtCFILrGJENsqhbPEJi81931122 = nvnaWtCFILrGJENsqhbPEJi5661367;     nvnaWtCFILrGJENsqhbPEJi5661367 = nvnaWtCFILrGJENsqhbPEJi49774854;     nvnaWtCFILrGJENsqhbPEJi49774854 = nvnaWtCFILrGJENsqhbPEJi4930274;     nvnaWtCFILrGJENsqhbPEJi4930274 = nvnaWtCFILrGJENsqhbPEJi79108389;     nvnaWtCFILrGJENsqhbPEJi79108389 = nvnaWtCFILrGJENsqhbPEJi86171140;     nvnaWtCFILrGJENsqhbPEJi86171140 = nvnaWtCFILrGJENsqhbPEJi34798778;     nvnaWtCFILrGJENsqhbPEJi34798778 = nvnaWtCFILrGJENsqhbPEJi48974993;     nvnaWtCFILrGJENsqhbPEJi48974993 = nvnaWtCFILrGJENsqhbPEJi58695175;     nvnaWtCFILrGJENsqhbPEJi58695175 = nvnaWtCFILrGJENsqhbPEJi95168858;     nvnaWtCFILrGJENsqhbPEJi95168858 = nvnaWtCFILrGJENsqhbPEJi31310241;     nvnaWtCFILrGJENsqhbPEJi31310241 = nvnaWtCFILrGJENsqhbPEJi65505047;     nvnaWtCFILrGJENsqhbPEJi65505047 = nvnaWtCFILrGJENsqhbPEJi35837843;     nvnaWtCFILrGJENsqhbPEJi35837843 = nvnaWtCFILrGJENsqhbPEJi10527652;     nvnaWtCFILrGJENsqhbPEJi10527652 = nvnaWtCFILrGJENsqhbPEJi50018562;     nvnaWtCFILrGJENsqhbPEJi50018562 = nvnaWtCFILrGJENsqhbPEJi38830309;     nvnaWtCFILrGJENsqhbPEJi38830309 = nvnaWtCFILrGJENsqhbPEJi23175640;     nvnaWtCFILrGJENsqhbPEJi23175640 = nvnaWtCFILrGJENsqhbPEJi59653999;     nvnaWtCFILrGJENsqhbPEJi59653999 = nvnaWtCFILrGJENsqhbPEJi33689997;     nvnaWtCFILrGJENsqhbPEJi33689997 = nvnaWtCFILrGJENsqhbPEJi97306411;     nvnaWtCFILrGJENsqhbPEJi97306411 = nvnaWtCFILrGJENsqhbPEJi69358358;     nvnaWtCFILrGJENsqhbPEJi69358358 = nvnaWtCFILrGJENsqhbPEJi71247671;     nvnaWtCFILrGJENsqhbPEJi71247671 = nvnaWtCFILrGJENsqhbPEJi68161143;     nvnaWtCFILrGJENsqhbPEJi68161143 = nvnaWtCFILrGJENsqhbPEJi67250989;     nvnaWtCFILrGJENsqhbPEJi67250989 = nvnaWtCFILrGJENsqhbPEJi35679422;     nvnaWtCFILrGJENsqhbPEJi35679422 = nvnaWtCFILrGJENsqhbPEJi17780958;     nvnaWtCFILrGJENsqhbPEJi17780958 = nvnaWtCFILrGJENsqhbPEJi84363530;     nvnaWtCFILrGJENsqhbPEJi84363530 = nvnaWtCFILrGJENsqhbPEJi53578005;     nvnaWtCFILrGJENsqhbPEJi53578005 = nvnaWtCFILrGJENsqhbPEJi9735108;     nvnaWtCFILrGJENsqhbPEJi9735108 = nvnaWtCFILrGJENsqhbPEJi82278465;     nvnaWtCFILrGJENsqhbPEJi82278465 = nvnaWtCFILrGJENsqhbPEJi90685737;     nvnaWtCFILrGJENsqhbPEJi90685737 = nvnaWtCFILrGJENsqhbPEJi65539697;     nvnaWtCFILrGJENsqhbPEJi65539697 = nvnaWtCFILrGJENsqhbPEJi26945886;     nvnaWtCFILrGJENsqhbPEJi26945886 = nvnaWtCFILrGJENsqhbPEJi73403393;     nvnaWtCFILrGJENsqhbPEJi73403393 = nvnaWtCFILrGJENsqhbPEJi27449830;     nvnaWtCFILrGJENsqhbPEJi27449830 = nvnaWtCFILrGJENsqhbPEJi22578483;     nvnaWtCFILrGJENsqhbPEJi22578483 = nvnaWtCFILrGJENsqhbPEJi39718234;     nvnaWtCFILrGJENsqhbPEJi39718234 = nvnaWtCFILrGJENsqhbPEJi99929167;     nvnaWtCFILrGJENsqhbPEJi99929167 = nvnaWtCFILrGJENsqhbPEJi79169178;     nvnaWtCFILrGJENsqhbPEJi79169178 = nvnaWtCFILrGJENsqhbPEJi85946256;     nvnaWtCFILrGJENsqhbPEJi85946256 = nvnaWtCFILrGJENsqhbPEJi75494349;     nvnaWtCFILrGJENsqhbPEJi75494349 = nvnaWtCFILrGJENsqhbPEJi51601108;     nvnaWtCFILrGJENsqhbPEJi51601108 = nvnaWtCFILrGJENsqhbPEJi47609501;     nvnaWtCFILrGJENsqhbPEJi47609501 = nvnaWtCFILrGJENsqhbPEJi68806933;     nvnaWtCFILrGJENsqhbPEJi68806933 = nvnaWtCFILrGJENsqhbPEJi11874671;     nvnaWtCFILrGJENsqhbPEJi11874671 = nvnaWtCFILrGJENsqhbPEJi90457347;     nvnaWtCFILrGJENsqhbPEJi90457347 = nvnaWtCFILrGJENsqhbPEJi58116002;     nvnaWtCFILrGJENsqhbPEJi58116002 = nvnaWtCFILrGJENsqhbPEJi27629333;     nvnaWtCFILrGJENsqhbPEJi27629333 = nvnaWtCFILrGJENsqhbPEJi3336271;     nvnaWtCFILrGJENsqhbPEJi3336271 = nvnaWtCFILrGJENsqhbPEJi89239449;     nvnaWtCFILrGJENsqhbPEJi89239449 = nvnaWtCFILrGJENsqhbPEJi28847229;     nvnaWtCFILrGJENsqhbPEJi28847229 = nvnaWtCFILrGJENsqhbPEJi70303285;     nvnaWtCFILrGJENsqhbPEJi70303285 = nvnaWtCFILrGJENsqhbPEJi68726892;     nvnaWtCFILrGJENsqhbPEJi68726892 = nvnaWtCFILrGJENsqhbPEJi34711576;     nvnaWtCFILrGJENsqhbPEJi34711576 = nvnaWtCFILrGJENsqhbPEJi51050234;     nvnaWtCFILrGJENsqhbPEJi51050234 = nvnaWtCFILrGJENsqhbPEJi10683451;     nvnaWtCFILrGJENsqhbPEJi10683451 = nvnaWtCFILrGJENsqhbPEJi37500224;     nvnaWtCFILrGJENsqhbPEJi37500224 = nvnaWtCFILrGJENsqhbPEJi82523865;     nvnaWtCFILrGJENsqhbPEJi82523865 = nvnaWtCFILrGJENsqhbPEJi69250851;     nvnaWtCFILrGJENsqhbPEJi69250851 = nvnaWtCFILrGJENsqhbPEJi61327432;     nvnaWtCFILrGJENsqhbPEJi61327432 = nvnaWtCFILrGJENsqhbPEJi1807610;     nvnaWtCFILrGJENsqhbPEJi1807610 = nvnaWtCFILrGJENsqhbPEJi81220773;     nvnaWtCFILrGJENsqhbPEJi81220773 = nvnaWtCFILrGJENsqhbPEJi39239886;     nvnaWtCFILrGJENsqhbPEJi39239886 = nvnaWtCFILrGJENsqhbPEJi76416709;     nvnaWtCFILrGJENsqhbPEJi76416709 = nvnaWtCFILrGJENsqhbPEJi4483121;     nvnaWtCFILrGJENsqhbPEJi4483121 = nvnaWtCFILrGJENsqhbPEJi65770544;     nvnaWtCFILrGJENsqhbPEJi65770544 = nvnaWtCFILrGJENsqhbPEJi38559161;     nvnaWtCFILrGJENsqhbPEJi38559161 = nvnaWtCFILrGJENsqhbPEJi62434450;     nvnaWtCFILrGJENsqhbPEJi62434450 = nvnaWtCFILrGJENsqhbPEJi83077822;     nvnaWtCFILrGJENsqhbPEJi83077822 = nvnaWtCFILrGJENsqhbPEJi27440079;     nvnaWtCFILrGJENsqhbPEJi27440079 = nvnaWtCFILrGJENsqhbPEJi99112075;     nvnaWtCFILrGJENsqhbPEJi99112075 = nvnaWtCFILrGJENsqhbPEJi23246473;     nvnaWtCFILrGJENsqhbPEJi23246473 = nvnaWtCFILrGJENsqhbPEJi80484820;     nvnaWtCFILrGJENsqhbPEJi80484820 = nvnaWtCFILrGJENsqhbPEJi47743741;     nvnaWtCFILrGJENsqhbPEJi47743741 = nvnaWtCFILrGJENsqhbPEJi21812062;     nvnaWtCFILrGJENsqhbPEJi21812062 = nvnaWtCFILrGJENsqhbPEJi17757251;     nvnaWtCFILrGJENsqhbPEJi17757251 = nvnaWtCFILrGJENsqhbPEJi23638171;     nvnaWtCFILrGJENsqhbPEJi23638171 = nvnaWtCFILrGJENsqhbPEJi58963873;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void gUTNVNmejZvIEpJjLPmmpGfBIxBlHaJMltWjYiJCx19538722() {     long ogUtMcQkpUWWSYZoRFYLAWJ97627472 = -291485588;    long ogUtMcQkpUWWSYZoRFYLAWJ80561390 = -535751707;    long ogUtMcQkpUWWSYZoRFYLAWJ49564113 = -873903332;    long ogUtMcQkpUWWSYZoRFYLAWJ46098585 = -345211094;    long ogUtMcQkpUWWSYZoRFYLAWJ8106006 = -569032640;    long ogUtMcQkpUWWSYZoRFYLAWJ8403040 = -204628627;    long ogUtMcQkpUWWSYZoRFYLAWJ13552745 = -575020932;    long ogUtMcQkpUWWSYZoRFYLAWJ4411172 = -262398454;    long ogUtMcQkpUWWSYZoRFYLAWJ57236730 = 37493637;    long ogUtMcQkpUWWSYZoRFYLAWJ46234098 = -554759460;    long ogUtMcQkpUWWSYZoRFYLAWJ957500 = -141761735;    long ogUtMcQkpUWWSYZoRFYLAWJ29666970 = 24278720;    long ogUtMcQkpUWWSYZoRFYLAWJ59139241 = -491454914;    long ogUtMcQkpUWWSYZoRFYLAWJ4204002 = -242165043;    long ogUtMcQkpUWWSYZoRFYLAWJ26509863 = -72642353;    long ogUtMcQkpUWWSYZoRFYLAWJ10598869 = -20078420;    long ogUtMcQkpUWWSYZoRFYLAWJ3312774 = -922140743;    long ogUtMcQkpUWWSYZoRFYLAWJ19968906 = -915366011;    long ogUtMcQkpUWWSYZoRFYLAWJ52328018 = -309443546;    long ogUtMcQkpUWWSYZoRFYLAWJ34365924 = -400368089;    long ogUtMcQkpUWWSYZoRFYLAWJ35960485 = -633900084;    long ogUtMcQkpUWWSYZoRFYLAWJ94831134 = -884049082;    long ogUtMcQkpUWWSYZoRFYLAWJ54526051 = -639540461;    long ogUtMcQkpUWWSYZoRFYLAWJ7288215 = -353880157;    long ogUtMcQkpUWWSYZoRFYLAWJ4599521 = -590731283;    long ogUtMcQkpUWWSYZoRFYLAWJ85085090 = -510860577;    long ogUtMcQkpUWWSYZoRFYLAWJ30427755 = -578852965;    long ogUtMcQkpUWWSYZoRFYLAWJ42420640 = -10611847;    long ogUtMcQkpUWWSYZoRFYLAWJ21145560 = -758452899;    long ogUtMcQkpUWWSYZoRFYLAWJ8407631 = -359686386;    long ogUtMcQkpUWWSYZoRFYLAWJ11901376 = -631403470;    long ogUtMcQkpUWWSYZoRFYLAWJ91443077 = -960979472;    long ogUtMcQkpUWWSYZoRFYLAWJ62082827 = -497906577;    long ogUtMcQkpUWWSYZoRFYLAWJ54974214 = 37467885;    long ogUtMcQkpUWWSYZoRFYLAWJ74131086 = -909859663;    long ogUtMcQkpUWWSYZoRFYLAWJ7669478 = 61624118;    long ogUtMcQkpUWWSYZoRFYLAWJ4203774 = -148290110;    long ogUtMcQkpUWWSYZoRFYLAWJ53262872 = -950195014;    long ogUtMcQkpUWWSYZoRFYLAWJ26522721 = -599679613;    long ogUtMcQkpUWWSYZoRFYLAWJ4172239 = -848807728;    long ogUtMcQkpUWWSYZoRFYLAWJ23643850 = -546951035;    long ogUtMcQkpUWWSYZoRFYLAWJ92858661 = -899042822;    long ogUtMcQkpUWWSYZoRFYLAWJ70056457 = -310018988;    long ogUtMcQkpUWWSYZoRFYLAWJ21606958 = -659884787;    long ogUtMcQkpUWWSYZoRFYLAWJ11243687 = 26443961;    long ogUtMcQkpUWWSYZoRFYLAWJ31994544 = -26303200;    long ogUtMcQkpUWWSYZoRFYLAWJ46369417 = -827338464;    long ogUtMcQkpUWWSYZoRFYLAWJ41536249 = -528433076;    long ogUtMcQkpUWWSYZoRFYLAWJ78366649 = -788837775;    long ogUtMcQkpUWWSYZoRFYLAWJ45573946 = -591755101;    long ogUtMcQkpUWWSYZoRFYLAWJ22356390 = -500230062;    long ogUtMcQkpUWWSYZoRFYLAWJ32080645 = -979110456;    long ogUtMcQkpUWWSYZoRFYLAWJ15210467 = -357055531;    long ogUtMcQkpUWWSYZoRFYLAWJ5039678 = -639615317;    long ogUtMcQkpUWWSYZoRFYLAWJ83578237 = -247078002;    long ogUtMcQkpUWWSYZoRFYLAWJ2796339 = -407436507;    long ogUtMcQkpUWWSYZoRFYLAWJ26035340 = -896211246;    long ogUtMcQkpUWWSYZoRFYLAWJ42275899 = -420023175;    long ogUtMcQkpUWWSYZoRFYLAWJ41499064 = -754479812;    long ogUtMcQkpUWWSYZoRFYLAWJ23020915 = 41827936;    long ogUtMcQkpUWWSYZoRFYLAWJ77975285 = -625775662;    long ogUtMcQkpUWWSYZoRFYLAWJ71132104 = -464409086;    long ogUtMcQkpUWWSYZoRFYLAWJ83265612 = -503945555;    long ogUtMcQkpUWWSYZoRFYLAWJ48829100 = -602819977;    long ogUtMcQkpUWWSYZoRFYLAWJ34332722 = -923355991;    long ogUtMcQkpUWWSYZoRFYLAWJ9514422 = -180782263;    long ogUtMcQkpUWWSYZoRFYLAWJ67584142 = -477814703;    long ogUtMcQkpUWWSYZoRFYLAWJ4165027 = -428922799;    long ogUtMcQkpUWWSYZoRFYLAWJ30072916 = -332305381;    long ogUtMcQkpUWWSYZoRFYLAWJ18840386 = -34266471;    long ogUtMcQkpUWWSYZoRFYLAWJ6395096 = -871788311;    long ogUtMcQkpUWWSYZoRFYLAWJ50049902 = -971945729;    long ogUtMcQkpUWWSYZoRFYLAWJ93446184 = -215686398;    long ogUtMcQkpUWWSYZoRFYLAWJ48155780 = -460635818;    long ogUtMcQkpUWWSYZoRFYLAWJ10722074 = -853417055;    long ogUtMcQkpUWWSYZoRFYLAWJ43101824 = -734857262;    long ogUtMcQkpUWWSYZoRFYLAWJ24774678 = -474030095;    long ogUtMcQkpUWWSYZoRFYLAWJ32919093 = -979655675;    long ogUtMcQkpUWWSYZoRFYLAWJ96044527 = -280324118;    long ogUtMcQkpUWWSYZoRFYLAWJ72604977 = -464428083;    long ogUtMcQkpUWWSYZoRFYLAWJ38715674 = -683522113;    long ogUtMcQkpUWWSYZoRFYLAWJ88891505 = 49580110;    long ogUtMcQkpUWWSYZoRFYLAWJ64053990 = -221774072;    long ogUtMcQkpUWWSYZoRFYLAWJ75571613 = -66697799;    long ogUtMcQkpUWWSYZoRFYLAWJ86051240 = -859456325;    long ogUtMcQkpUWWSYZoRFYLAWJ79820730 = -652293014;    long ogUtMcQkpUWWSYZoRFYLAWJ76232611 = -503923941;    long ogUtMcQkpUWWSYZoRFYLAWJ57043150 = -858291261;    long ogUtMcQkpUWWSYZoRFYLAWJ71395977 = -715454114;    long ogUtMcQkpUWWSYZoRFYLAWJ71334748 = -402423157;    long ogUtMcQkpUWWSYZoRFYLAWJ81634138 = -42164636;    long ogUtMcQkpUWWSYZoRFYLAWJ61927875 = -728266935;    long ogUtMcQkpUWWSYZoRFYLAWJ11763808 = -95715203;    long ogUtMcQkpUWWSYZoRFYLAWJ3501807 = -541507549;    long ogUtMcQkpUWWSYZoRFYLAWJ26196953 = -123032066;    long ogUtMcQkpUWWSYZoRFYLAWJ52511745 = 17458050;    long ogUtMcQkpUWWSYZoRFYLAWJ9593049 = -295097268;    long ogUtMcQkpUWWSYZoRFYLAWJ21227357 = -707199011;    long ogUtMcQkpUWWSYZoRFYLAWJ87274236 = -736528797;    long ogUtMcQkpUWWSYZoRFYLAWJ1729265 = -291485588;     ogUtMcQkpUWWSYZoRFYLAWJ97627472 = ogUtMcQkpUWWSYZoRFYLAWJ80561390;     ogUtMcQkpUWWSYZoRFYLAWJ80561390 = ogUtMcQkpUWWSYZoRFYLAWJ49564113;     ogUtMcQkpUWWSYZoRFYLAWJ49564113 = ogUtMcQkpUWWSYZoRFYLAWJ46098585;     ogUtMcQkpUWWSYZoRFYLAWJ46098585 = ogUtMcQkpUWWSYZoRFYLAWJ8106006;     ogUtMcQkpUWWSYZoRFYLAWJ8106006 = ogUtMcQkpUWWSYZoRFYLAWJ8403040;     ogUtMcQkpUWWSYZoRFYLAWJ8403040 = ogUtMcQkpUWWSYZoRFYLAWJ13552745;     ogUtMcQkpUWWSYZoRFYLAWJ13552745 = ogUtMcQkpUWWSYZoRFYLAWJ4411172;     ogUtMcQkpUWWSYZoRFYLAWJ4411172 = ogUtMcQkpUWWSYZoRFYLAWJ57236730;     ogUtMcQkpUWWSYZoRFYLAWJ57236730 = ogUtMcQkpUWWSYZoRFYLAWJ46234098;     ogUtMcQkpUWWSYZoRFYLAWJ46234098 = ogUtMcQkpUWWSYZoRFYLAWJ957500;     ogUtMcQkpUWWSYZoRFYLAWJ957500 = ogUtMcQkpUWWSYZoRFYLAWJ29666970;     ogUtMcQkpUWWSYZoRFYLAWJ29666970 = ogUtMcQkpUWWSYZoRFYLAWJ59139241;     ogUtMcQkpUWWSYZoRFYLAWJ59139241 = ogUtMcQkpUWWSYZoRFYLAWJ4204002;     ogUtMcQkpUWWSYZoRFYLAWJ4204002 = ogUtMcQkpUWWSYZoRFYLAWJ26509863;     ogUtMcQkpUWWSYZoRFYLAWJ26509863 = ogUtMcQkpUWWSYZoRFYLAWJ10598869;     ogUtMcQkpUWWSYZoRFYLAWJ10598869 = ogUtMcQkpUWWSYZoRFYLAWJ3312774;     ogUtMcQkpUWWSYZoRFYLAWJ3312774 = ogUtMcQkpUWWSYZoRFYLAWJ19968906;     ogUtMcQkpUWWSYZoRFYLAWJ19968906 = ogUtMcQkpUWWSYZoRFYLAWJ52328018;     ogUtMcQkpUWWSYZoRFYLAWJ52328018 = ogUtMcQkpUWWSYZoRFYLAWJ34365924;     ogUtMcQkpUWWSYZoRFYLAWJ34365924 = ogUtMcQkpUWWSYZoRFYLAWJ35960485;     ogUtMcQkpUWWSYZoRFYLAWJ35960485 = ogUtMcQkpUWWSYZoRFYLAWJ94831134;     ogUtMcQkpUWWSYZoRFYLAWJ94831134 = ogUtMcQkpUWWSYZoRFYLAWJ54526051;     ogUtMcQkpUWWSYZoRFYLAWJ54526051 = ogUtMcQkpUWWSYZoRFYLAWJ7288215;     ogUtMcQkpUWWSYZoRFYLAWJ7288215 = ogUtMcQkpUWWSYZoRFYLAWJ4599521;     ogUtMcQkpUWWSYZoRFYLAWJ4599521 = ogUtMcQkpUWWSYZoRFYLAWJ85085090;     ogUtMcQkpUWWSYZoRFYLAWJ85085090 = ogUtMcQkpUWWSYZoRFYLAWJ30427755;     ogUtMcQkpUWWSYZoRFYLAWJ30427755 = ogUtMcQkpUWWSYZoRFYLAWJ42420640;     ogUtMcQkpUWWSYZoRFYLAWJ42420640 = ogUtMcQkpUWWSYZoRFYLAWJ21145560;     ogUtMcQkpUWWSYZoRFYLAWJ21145560 = ogUtMcQkpUWWSYZoRFYLAWJ8407631;     ogUtMcQkpUWWSYZoRFYLAWJ8407631 = ogUtMcQkpUWWSYZoRFYLAWJ11901376;     ogUtMcQkpUWWSYZoRFYLAWJ11901376 = ogUtMcQkpUWWSYZoRFYLAWJ91443077;     ogUtMcQkpUWWSYZoRFYLAWJ91443077 = ogUtMcQkpUWWSYZoRFYLAWJ62082827;     ogUtMcQkpUWWSYZoRFYLAWJ62082827 = ogUtMcQkpUWWSYZoRFYLAWJ54974214;     ogUtMcQkpUWWSYZoRFYLAWJ54974214 = ogUtMcQkpUWWSYZoRFYLAWJ74131086;     ogUtMcQkpUWWSYZoRFYLAWJ74131086 = ogUtMcQkpUWWSYZoRFYLAWJ7669478;     ogUtMcQkpUWWSYZoRFYLAWJ7669478 = ogUtMcQkpUWWSYZoRFYLAWJ4203774;     ogUtMcQkpUWWSYZoRFYLAWJ4203774 = ogUtMcQkpUWWSYZoRFYLAWJ53262872;     ogUtMcQkpUWWSYZoRFYLAWJ53262872 = ogUtMcQkpUWWSYZoRFYLAWJ26522721;     ogUtMcQkpUWWSYZoRFYLAWJ26522721 = ogUtMcQkpUWWSYZoRFYLAWJ4172239;     ogUtMcQkpUWWSYZoRFYLAWJ4172239 = ogUtMcQkpUWWSYZoRFYLAWJ23643850;     ogUtMcQkpUWWSYZoRFYLAWJ23643850 = ogUtMcQkpUWWSYZoRFYLAWJ92858661;     ogUtMcQkpUWWSYZoRFYLAWJ92858661 = ogUtMcQkpUWWSYZoRFYLAWJ70056457;     ogUtMcQkpUWWSYZoRFYLAWJ70056457 = ogUtMcQkpUWWSYZoRFYLAWJ21606958;     ogUtMcQkpUWWSYZoRFYLAWJ21606958 = ogUtMcQkpUWWSYZoRFYLAWJ11243687;     ogUtMcQkpUWWSYZoRFYLAWJ11243687 = ogUtMcQkpUWWSYZoRFYLAWJ31994544;     ogUtMcQkpUWWSYZoRFYLAWJ31994544 = ogUtMcQkpUWWSYZoRFYLAWJ46369417;     ogUtMcQkpUWWSYZoRFYLAWJ46369417 = ogUtMcQkpUWWSYZoRFYLAWJ41536249;     ogUtMcQkpUWWSYZoRFYLAWJ41536249 = ogUtMcQkpUWWSYZoRFYLAWJ78366649;     ogUtMcQkpUWWSYZoRFYLAWJ78366649 = ogUtMcQkpUWWSYZoRFYLAWJ45573946;     ogUtMcQkpUWWSYZoRFYLAWJ45573946 = ogUtMcQkpUWWSYZoRFYLAWJ22356390;     ogUtMcQkpUWWSYZoRFYLAWJ22356390 = ogUtMcQkpUWWSYZoRFYLAWJ32080645;     ogUtMcQkpUWWSYZoRFYLAWJ32080645 = ogUtMcQkpUWWSYZoRFYLAWJ15210467;     ogUtMcQkpUWWSYZoRFYLAWJ15210467 = ogUtMcQkpUWWSYZoRFYLAWJ5039678;     ogUtMcQkpUWWSYZoRFYLAWJ5039678 = ogUtMcQkpUWWSYZoRFYLAWJ83578237;     ogUtMcQkpUWWSYZoRFYLAWJ83578237 = ogUtMcQkpUWWSYZoRFYLAWJ2796339;     ogUtMcQkpUWWSYZoRFYLAWJ2796339 = ogUtMcQkpUWWSYZoRFYLAWJ26035340;     ogUtMcQkpUWWSYZoRFYLAWJ26035340 = ogUtMcQkpUWWSYZoRFYLAWJ42275899;     ogUtMcQkpUWWSYZoRFYLAWJ42275899 = ogUtMcQkpUWWSYZoRFYLAWJ41499064;     ogUtMcQkpUWWSYZoRFYLAWJ41499064 = ogUtMcQkpUWWSYZoRFYLAWJ23020915;     ogUtMcQkpUWWSYZoRFYLAWJ23020915 = ogUtMcQkpUWWSYZoRFYLAWJ77975285;     ogUtMcQkpUWWSYZoRFYLAWJ77975285 = ogUtMcQkpUWWSYZoRFYLAWJ71132104;     ogUtMcQkpUWWSYZoRFYLAWJ71132104 = ogUtMcQkpUWWSYZoRFYLAWJ83265612;     ogUtMcQkpUWWSYZoRFYLAWJ83265612 = ogUtMcQkpUWWSYZoRFYLAWJ48829100;     ogUtMcQkpUWWSYZoRFYLAWJ48829100 = ogUtMcQkpUWWSYZoRFYLAWJ34332722;     ogUtMcQkpUWWSYZoRFYLAWJ34332722 = ogUtMcQkpUWWSYZoRFYLAWJ9514422;     ogUtMcQkpUWWSYZoRFYLAWJ9514422 = ogUtMcQkpUWWSYZoRFYLAWJ67584142;     ogUtMcQkpUWWSYZoRFYLAWJ67584142 = ogUtMcQkpUWWSYZoRFYLAWJ4165027;     ogUtMcQkpUWWSYZoRFYLAWJ4165027 = ogUtMcQkpUWWSYZoRFYLAWJ30072916;     ogUtMcQkpUWWSYZoRFYLAWJ30072916 = ogUtMcQkpUWWSYZoRFYLAWJ18840386;     ogUtMcQkpUWWSYZoRFYLAWJ18840386 = ogUtMcQkpUWWSYZoRFYLAWJ6395096;     ogUtMcQkpUWWSYZoRFYLAWJ6395096 = ogUtMcQkpUWWSYZoRFYLAWJ50049902;     ogUtMcQkpUWWSYZoRFYLAWJ50049902 = ogUtMcQkpUWWSYZoRFYLAWJ93446184;     ogUtMcQkpUWWSYZoRFYLAWJ93446184 = ogUtMcQkpUWWSYZoRFYLAWJ48155780;     ogUtMcQkpUWWSYZoRFYLAWJ48155780 = ogUtMcQkpUWWSYZoRFYLAWJ10722074;     ogUtMcQkpUWWSYZoRFYLAWJ10722074 = ogUtMcQkpUWWSYZoRFYLAWJ43101824;     ogUtMcQkpUWWSYZoRFYLAWJ43101824 = ogUtMcQkpUWWSYZoRFYLAWJ24774678;     ogUtMcQkpUWWSYZoRFYLAWJ24774678 = ogUtMcQkpUWWSYZoRFYLAWJ32919093;     ogUtMcQkpUWWSYZoRFYLAWJ32919093 = ogUtMcQkpUWWSYZoRFYLAWJ96044527;     ogUtMcQkpUWWSYZoRFYLAWJ96044527 = ogUtMcQkpUWWSYZoRFYLAWJ72604977;     ogUtMcQkpUWWSYZoRFYLAWJ72604977 = ogUtMcQkpUWWSYZoRFYLAWJ38715674;     ogUtMcQkpUWWSYZoRFYLAWJ38715674 = ogUtMcQkpUWWSYZoRFYLAWJ88891505;     ogUtMcQkpUWWSYZoRFYLAWJ88891505 = ogUtMcQkpUWWSYZoRFYLAWJ64053990;     ogUtMcQkpUWWSYZoRFYLAWJ64053990 = ogUtMcQkpUWWSYZoRFYLAWJ75571613;     ogUtMcQkpUWWSYZoRFYLAWJ75571613 = ogUtMcQkpUWWSYZoRFYLAWJ86051240;     ogUtMcQkpUWWSYZoRFYLAWJ86051240 = ogUtMcQkpUWWSYZoRFYLAWJ79820730;     ogUtMcQkpUWWSYZoRFYLAWJ79820730 = ogUtMcQkpUWWSYZoRFYLAWJ76232611;     ogUtMcQkpUWWSYZoRFYLAWJ76232611 = ogUtMcQkpUWWSYZoRFYLAWJ57043150;     ogUtMcQkpUWWSYZoRFYLAWJ57043150 = ogUtMcQkpUWWSYZoRFYLAWJ71395977;     ogUtMcQkpUWWSYZoRFYLAWJ71395977 = ogUtMcQkpUWWSYZoRFYLAWJ71334748;     ogUtMcQkpUWWSYZoRFYLAWJ71334748 = ogUtMcQkpUWWSYZoRFYLAWJ81634138;     ogUtMcQkpUWWSYZoRFYLAWJ81634138 = ogUtMcQkpUWWSYZoRFYLAWJ61927875;     ogUtMcQkpUWWSYZoRFYLAWJ61927875 = ogUtMcQkpUWWSYZoRFYLAWJ11763808;     ogUtMcQkpUWWSYZoRFYLAWJ11763808 = ogUtMcQkpUWWSYZoRFYLAWJ3501807;     ogUtMcQkpUWWSYZoRFYLAWJ3501807 = ogUtMcQkpUWWSYZoRFYLAWJ26196953;     ogUtMcQkpUWWSYZoRFYLAWJ26196953 = ogUtMcQkpUWWSYZoRFYLAWJ52511745;     ogUtMcQkpUWWSYZoRFYLAWJ52511745 = ogUtMcQkpUWWSYZoRFYLAWJ9593049;     ogUtMcQkpUWWSYZoRFYLAWJ9593049 = ogUtMcQkpUWWSYZoRFYLAWJ21227357;     ogUtMcQkpUWWSYZoRFYLAWJ21227357 = ogUtMcQkpUWWSYZoRFYLAWJ87274236;     ogUtMcQkpUWWSYZoRFYLAWJ87274236 = ogUtMcQkpUWWSYZoRFYLAWJ1729265;     ogUtMcQkpUWWSYZoRFYLAWJ1729265 = ogUtMcQkpUWWSYZoRFYLAWJ97627472;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void WuacvBZuixYagtWAXRyAXFJkWaWCAaXNhrSBukszz1767484() {     long IBYBtatEtXBloMRkqFVeXuI49362923 = -407740421;    long IBYBtatEtXBloMRkqFVeXuI96235373 = -612651463;    long IBYBtatEtXBloMRkqFVeXuI98364472 = -671262716;    long IBYBtatEtXBloMRkqFVeXuI21173987 = -161480237;    long IBYBtatEtXBloMRkqFVeXuI84829937 = -276683294;    long IBYBtatEtXBloMRkqFVeXuI33286394 = -363655854;    long IBYBtatEtXBloMRkqFVeXuI87329587 = -398232528;    long IBYBtatEtXBloMRkqFVeXuI23202650 = -386178008;    long IBYBtatEtXBloMRkqFVeXuI8534808 = -853355073;    long IBYBtatEtXBloMRkqFVeXuI15031222 = 3594557;    long IBYBtatEtXBloMRkqFVeXuI96250198 = -103484206;    long IBYBtatEtXBloMRkqFVeXuI40023348 = 89297219;    long IBYBtatEtXBloMRkqFVeXuI46320035 = -100635176;    long IBYBtatEtXBloMRkqFVeXuI62971720 = -968845590;    long IBYBtatEtXBloMRkqFVeXuI80525121 = -650370063;    long IBYBtatEtXBloMRkqFVeXuI22326141 = -831762376;    long IBYBtatEtXBloMRkqFVeXuI59283298 = -190235433;    long IBYBtatEtXBloMRkqFVeXuI5651828 = -277942505;    long IBYBtatEtXBloMRkqFVeXuI11901868 = -837357729;    long IBYBtatEtXBloMRkqFVeXuI54095497 = -110636238;    long IBYBtatEtXBloMRkqFVeXuI81707838 = -716708252;    long IBYBtatEtXBloMRkqFVeXuI97250587 = 42469910;    long IBYBtatEtXBloMRkqFVeXuI55875565 = -247777909;    long IBYBtatEtXBloMRkqFVeXuI99938464 = -225472108;    long IBYBtatEtXBloMRkqFVeXuI76015379 = -536385720;    long IBYBtatEtXBloMRkqFVeXuI42790505 = -856470356;    long IBYBtatEtXBloMRkqFVeXuI69256389 = 58738317;    long IBYBtatEtXBloMRkqFVeXuI40549865 = -393942533;    long IBYBtatEtXBloMRkqFVeXuI95895632 = -808351802;    long IBYBtatEtXBloMRkqFVeXuI78392714 = -821587182;    long IBYBtatEtXBloMRkqFVeXuI49120184 = -964285936;    long IBYBtatEtXBloMRkqFVeXuI4472808 = -184753663;    long IBYBtatEtXBloMRkqFVeXuI60176137 = 19711537;    long IBYBtatEtXBloMRkqFVeXuI48997927 = -723129281;    long IBYBtatEtXBloMRkqFVeXuI72336214 = -26669306;    long IBYBtatEtXBloMRkqFVeXuI89369088 = -174544711;    long IBYBtatEtXBloMRkqFVeXuI53852000 = -792644854;    long IBYBtatEtXBloMRkqFVeXuI54096484 = 66292621;    long IBYBtatEtXBloMRkqFVeXuI96297563 = 55002992;    long IBYBtatEtXBloMRkqFVeXuI29254655 = -367423395;    long IBYBtatEtXBloMRkqFVeXuI92327936 = -666109823;    long IBYBtatEtXBloMRkqFVeXuI52884061 = -887562444;    long IBYBtatEtXBloMRkqFVeXuI26639689 = -210795519;    long IBYBtatEtXBloMRkqFVeXuI14542777 = -585273465;    long IBYBtatEtXBloMRkqFVeXuI83272895 = -574053122;    long IBYBtatEtXBloMRkqFVeXuI33688991 = -450195141;    long IBYBtatEtXBloMRkqFVeXuI32535611 = -189678918;    long IBYBtatEtXBloMRkqFVeXuI20520714 = -932837772;    long IBYBtatEtXBloMRkqFVeXuI67385102 = -752790504;    long IBYBtatEtXBloMRkqFVeXuI34230205 = -450766481;    long IBYBtatEtXBloMRkqFVeXuI63036282 = -208734218;    long IBYBtatEtXBloMRkqFVeXuI64060397 = -340710016;    long IBYBtatEtXBloMRkqFVeXuI38449212 = -101168719;    long IBYBtatEtXBloMRkqFVeXuI75098918 = -254414629;    long IBYBtatEtXBloMRkqFVeXuI20059646 = -276841203;    long IBYBtatEtXBloMRkqFVeXuI52112335 = -350210332;    long IBYBtatEtXBloMRkqFVeXuI40359808 = -264873554;    long IBYBtatEtXBloMRkqFVeXuI98426008 = -345790609;    long IBYBtatEtXBloMRkqFVeXuI45158608 = -625094518;    long IBYBtatEtXBloMRkqFVeXuI42039433 = -420212939;    long IBYBtatEtXBloMRkqFVeXuI64030005 = -322394171;    long IBYBtatEtXBloMRkqFVeXuI46779723 = 95710004;    long IBYBtatEtXBloMRkqFVeXuI27307018 = -577826207;    long IBYBtatEtXBloMRkqFVeXuI30142093 = 68232108;    long IBYBtatEtXBloMRkqFVeXuI65911037 = -32119507;    long IBYBtatEtXBloMRkqFVeXuI91777390 = -918730543;    long IBYBtatEtXBloMRkqFVeXuI79847211 = -930414318;    long IBYBtatEtXBloMRkqFVeXuI97322107 = -377505895;    long IBYBtatEtXBloMRkqFVeXuI90635505 = -842176285;    long IBYBtatEtXBloMRkqFVeXuI91156032 = -375825353;    long IBYBtatEtXBloMRkqFVeXuI68474141 = 60882477;    long IBYBtatEtXBloMRkqFVeXuI5186815 = -156528055;    long IBYBtatEtXBloMRkqFVeXuI9354264 = -232945498;    long IBYBtatEtXBloMRkqFVeXuI82647213 = -369934335;    long IBYBtatEtXBloMRkqFVeXuI61767561 = -444526416;    long IBYBtatEtXBloMRkqFVeXuI28823777 = -829145809;    long IBYBtatEtXBloMRkqFVeXuI70610899 = -746734571;    long IBYBtatEtXBloMRkqFVeXuI41332788 = -662504445;    long IBYBtatEtXBloMRkqFVeXuI16665570 = -651418986;    long IBYBtatEtXBloMRkqFVeXuI42326389 = 13809421;    long IBYBtatEtXBloMRkqFVeXuI10254894 = -566791438;    long IBYBtatEtXBloMRkqFVeXuI48735676 = -8423912;    long IBYBtatEtXBloMRkqFVeXuI73164762 = -641152029;    long IBYBtatEtXBloMRkqFVeXuI61665427 = -257585321;    long IBYBtatEtXBloMRkqFVeXuI15356432 = -512852965;    long IBYBtatEtXBloMRkqFVeXuI85059786 = -523575920;    long IBYBtatEtXBloMRkqFVeXuI66023595 = 16415055;    long IBYBtatEtXBloMRkqFVeXuI85077219 = -725873835;    long IBYBtatEtXBloMRkqFVeXuI28938281 = -346288079;    long IBYBtatEtXBloMRkqFVeXuI20223880 = -676458975;    long IBYBtatEtXBloMRkqFVeXuI49009280 = -909671157;    long IBYBtatEtXBloMRkqFVeXuI55425992 = -346854246;    long IBYBtatEtXBloMRkqFVeXuI8937877 = -308612862;    long IBYBtatEtXBloMRkqFVeXuI54258130 = -524784069;    long IBYBtatEtXBloMRkqFVeXuI65224649 = 54970776;    long IBYBtatEtXBloMRkqFVeXuI45548214 = -661819828;    long IBYBtatEtXBloMRkqFVeXuI25577044 = -209736237;    long IBYBtatEtXBloMRkqFVeXuI96497595 = -179027628;    long IBYBtatEtXBloMRkqFVeXuI48631739 = -453153958;    long IBYBtatEtXBloMRkqFVeXuI91495504 = -407740421;     IBYBtatEtXBloMRkqFVeXuI49362923 = IBYBtatEtXBloMRkqFVeXuI96235373;     IBYBtatEtXBloMRkqFVeXuI96235373 = IBYBtatEtXBloMRkqFVeXuI98364472;     IBYBtatEtXBloMRkqFVeXuI98364472 = IBYBtatEtXBloMRkqFVeXuI21173987;     IBYBtatEtXBloMRkqFVeXuI21173987 = IBYBtatEtXBloMRkqFVeXuI84829937;     IBYBtatEtXBloMRkqFVeXuI84829937 = IBYBtatEtXBloMRkqFVeXuI33286394;     IBYBtatEtXBloMRkqFVeXuI33286394 = IBYBtatEtXBloMRkqFVeXuI87329587;     IBYBtatEtXBloMRkqFVeXuI87329587 = IBYBtatEtXBloMRkqFVeXuI23202650;     IBYBtatEtXBloMRkqFVeXuI23202650 = IBYBtatEtXBloMRkqFVeXuI8534808;     IBYBtatEtXBloMRkqFVeXuI8534808 = IBYBtatEtXBloMRkqFVeXuI15031222;     IBYBtatEtXBloMRkqFVeXuI15031222 = IBYBtatEtXBloMRkqFVeXuI96250198;     IBYBtatEtXBloMRkqFVeXuI96250198 = IBYBtatEtXBloMRkqFVeXuI40023348;     IBYBtatEtXBloMRkqFVeXuI40023348 = IBYBtatEtXBloMRkqFVeXuI46320035;     IBYBtatEtXBloMRkqFVeXuI46320035 = IBYBtatEtXBloMRkqFVeXuI62971720;     IBYBtatEtXBloMRkqFVeXuI62971720 = IBYBtatEtXBloMRkqFVeXuI80525121;     IBYBtatEtXBloMRkqFVeXuI80525121 = IBYBtatEtXBloMRkqFVeXuI22326141;     IBYBtatEtXBloMRkqFVeXuI22326141 = IBYBtatEtXBloMRkqFVeXuI59283298;     IBYBtatEtXBloMRkqFVeXuI59283298 = IBYBtatEtXBloMRkqFVeXuI5651828;     IBYBtatEtXBloMRkqFVeXuI5651828 = IBYBtatEtXBloMRkqFVeXuI11901868;     IBYBtatEtXBloMRkqFVeXuI11901868 = IBYBtatEtXBloMRkqFVeXuI54095497;     IBYBtatEtXBloMRkqFVeXuI54095497 = IBYBtatEtXBloMRkqFVeXuI81707838;     IBYBtatEtXBloMRkqFVeXuI81707838 = IBYBtatEtXBloMRkqFVeXuI97250587;     IBYBtatEtXBloMRkqFVeXuI97250587 = IBYBtatEtXBloMRkqFVeXuI55875565;     IBYBtatEtXBloMRkqFVeXuI55875565 = IBYBtatEtXBloMRkqFVeXuI99938464;     IBYBtatEtXBloMRkqFVeXuI99938464 = IBYBtatEtXBloMRkqFVeXuI76015379;     IBYBtatEtXBloMRkqFVeXuI76015379 = IBYBtatEtXBloMRkqFVeXuI42790505;     IBYBtatEtXBloMRkqFVeXuI42790505 = IBYBtatEtXBloMRkqFVeXuI69256389;     IBYBtatEtXBloMRkqFVeXuI69256389 = IBYBtatEtXBloMRkqFVeXuI40549865;     IBYBtatEtXBloMRkqFVeXuI40549865 = IBYBtatEtXBloMRkqFVeXuI95895632;     IBYBtatEtXBloMRkqFVeXuI95895632 = IBYBtatEtXBloMRkqFVeXuI78392714;     IBYBtatEtXBloMRkqFVeXuI78392714 = IBYBtatEtXBloMRkqFVeXuI49120184;     IBYBtatEtXBloMRkqFVeXuI49120184 = IBYBtatEtXBloMRkqFVeXuI4472808;     IBYBtatEtXBloMRkqFVeXuI4472808 = IBYBtatEtXBloMRkqFVeXuI60176137;     IBYBtatEtXBloMRkqFVeXuI60176137 = IBYBtatEtXBloMRkqFVeXuI48997927;     IBYBtatEtXBloMRkqFVeXuI48997927 = IBYBtatEtXBloMRkqFVeXuI72336214;     IBYBtatEtXBloMRkqFVeXuI72336214 = IBYBtatEtXBloMRkqFVeXuI89369088;     IBYBtatEtXBloMRkqFVeXuI89369088 = IBYBtatEtXBloMRkqFVeXuI53852000;     IBYBtatEtXBloMRkqFVeXuI53852000 = IBYBtatEtXBloMRkqFVeXuI54096484;     IBYBtatEtXBloMRkqFVeXuI54096484 = IBYBtatEtXBloMRkqFVeXuI96297563;     IBYBtatEtXBloMRkqFVeXuI96297563 = IBYBtatEtXBloMRkqFVeXuI29254655;     IBYBtatEtXBloMRkqFVeXuI29254655 = IBYBtatEtXBloMRkqFVeXuI92327936;     IBYBtatEtXBloMRkqFVeXuI92327936 = IBYBtatEtXBloMRkqFVeXuI52884061;     IBYBtatEtXBloMRkqFVeXuI52884061 = IBYBtatEtXBloMRkqFVeXuI26639689;     IBYBtatEtXBloMRkqFVeXuI26639689 = IBYBtatEtXBloMRkqFVeXuI14542777;     IBYBtatEtXBloMRkqFVeXuI14542777 = IBYBtatEtXBloMRkqFVeXuI83272895;     IBYBtatEtXBloMRkqFVeXuI83272895 = IBYBtatEtXBloMRkqFVeXuI33688991;     IBYBtatEtXBloMRkqFVeXuI33688991 = IBYBtatEtXBloMRkqFVeXuI32535611;     IBYBtatEtXBloMRkqFVeXuI32535611 = IBYBtatEtXBloMRkqFVeXuI20520714;     IBYBtatEtXBloMRkqFVeXuI20520714 = IBYBtatEtXBloMRkqFVeXuI67385102;     IBYBtatEtXBloMRkqFVeXuI67385102 = IBYBtatEtXBloMRkqFVeXuI34230205;     IBYBtatEtXBloMRkqFVeXuI34230205 = IBYBtatEtXBloMRkqFVeXuI63036282;     IBYBtatEtXBloMRkqFVeXuI63036282 = IBYBtatEtXBloMRkqFVeXuI64060397;     IBYBtatEtXBloMRkqFVeXuI64060397 = IBYBtatEtXBloMRkqFVeXuI38449212;     IBYBtatEtXBloMRkqFVeXuI38449212 = IBYBtatEtXBloMRkqFVeXuI75098918;     IBYBtatEtXBloMRkqFVeXuI75098918 = IBYBtatEtXBloMRkqFVeXuI20059646;     IBYBtatEtXBloMRkqFVeXuI20059646 = IBYBtatEtXBloMRkqFVeXuI52112335;     IBYBtatEtXBloMRkqFVeXuI52112335 = IBYBtatEtXBloMRkqFVeXuI40359808;     IBYBtatEtXBloMRkqFVeXuI40359808 = IBYBtatEtXBloMRkqFVeXuI98426008;     IBYBtatEtXBloMRkqFVeXuI98426008 = IBYBtatEtXBloMRkqFVeXuI45158608;     IBYBtatEtXBloMRkqFVeXuI45158608 = IBYBtatEtXBloMRkqFVeXuI42039433;     IBYBtatEtXBloMRkqFVeXuI42039433 = IBYBtatEtXBloMRkqFVeXuI64030005;     IBYBtatEtXBloMRkqFVeXuI64030005 = IBYBtatEtXBloMRkqFVeXuI46779723;     IBYBtatEtXBloMRkqFVeXuI46779723 = IBYBtatEtXBloMRkqFVeXuI27307018;     IBYBtatEtXBloMRkqFVeXuI27307018 = IBYBtatEtXBloMRkqFVeXuI30142093;     IBYBtatEtXBloMRkqFVeXuI30142093 = IBYBtatEtXBloMRkqFVeXuI65911037;     IBYBtatEtXBloMRkqFVeXuI65911037 = IBYBtatEtXBloMRkqFVeXuI91777390;     IBYBtatEtXBloMRkqFVeXuI91777390 = IBYBtatEtXBloMRkqFVeXuI79847211;     IBYBtatEtXBloMRkqFVeXuI79847211 = IBYBtatEtXBloMRkqFVeXuI97322107;     IBYBtatEtXBloMRkqFVeXuI97322107 = IBYBtatEtXBloMRkqFVeXuI90635505;     IBYBtatEtXBloMRkqFVeXuI90635505 = IBYBtatEtXBloMRkqFVeXuI91156032;     IBYBtatEtXBloMRkqFVeXuI91156032 = IBYBtatEtXBloMRkqFVeXuI68474141;     IBYBtatEtXBloMRkqFVeXuI68474141 = IBYBtatEtXBloMRkqFVeXuI5186815;     IBYBtatEtXBloMRkqFVeXuI5186815 = IBYBtatEtXBloMRkqFVeXuI9354264;     IBYBtatEtXBloMRkqFVeXuI9354264 = IBYBtatEtXBloMRkqFVeXuI82647213;     IBYBtatEtXBloMRkqFVeXuI82647213 = IBYBtatEtXBloMRkqFVeXuI61767561;     IBYBtatEtXBloMRkqFVeXuI61767561 = IBYBtatEtXBloMRkqFVeXuI28823777;     IBYBtatEtXBloMRkqFVeXuI28823777 = IBYBtatEtXBloMRkqFVeXuI70610899;     IBYBtatEtXBloMRkqFVeXuI70610899 = IBYBtatEtXBloMRkqFVeXuI41332788;     IBYBtatEtXBloMRkqFVeXuI41332788 = IBYBtatEtXBloMRkqFVeXuI16665570;     IBYBtatEtXBloMRkqFVeXuI16665570 = IBYBtatEtXBloMRkqFVeXuI42326389;     IBYBtatEtXBloMRkqFVeXuI42326389 = IBYBtatEtXBloMRkqFVeXuI10254894;     IBYBtatEtXBloMRkqFVeXuI10254894 = IBYBtatEtXBloMRkqFVeXuI48735676;     IBYBtatEtXBloMRkqFVeXuI48735676 = IBYBtatEtXBloMRkqFVeXuI73164762;     IBYBtatEtXBloMRkqFVeXuI73164762 = IBYBtatEtXBloMRkqFVeXuI61665427;     IBYBtatEtXBloMRkqFVeXuI61665427 = IBYBtatEtXBloMRkqFVeXuI15356432;     IBYBtatEtXBloMRkqFVeXuI15356432 = IBYBtatEtXBloMRkqFVeXuI85059786;     IBYBtatEtXBloMRkqFVeXuI85059786 = IBYBtatEtXBloMRkqFVeXuI66023595;     IBYBtatEtXBloMRkqFVeXuI66023595 = IBYBtatEtXBloMRkqFVeXuI85077219;     IBYBtatEtXBloMRkqFVeXuI85077219 = IBYBtatEtXBloMRkqFVeXuI28938281;     IBYBtatEtXBloMRkqFVeXuI28938281 = IBYBtatEtXBloMRkqFVeXuI20223880;     IBYBtatEtXBloMRkqFVeXuI20223880 = IBYBtatEtXBloMRkqFVeXuI49009280;     IBYBtatEtXBloMRkqFVeXuI49009280 = IBYBtatEtXBloMRkqFVeXuI55425992;     IBYBtatEtXBloMRkqFVeXuI55425992 = IBYBtatEtXBloMRkqFVeXuI8937877;     IBYBtatEtXBloMRkqFVeXuI8937877 = IBYBtatEtXBloMRkqFVeXuI54258130;     IBYBtatEtXBloMRkqFVeXuI54258130 = IBYBtatEtXBloMRkqFVeXuI65224649;     IBYBtatEtXBloMRkqFVeXuI65224649 = IBYBtatEtXBloMRkqFVeXuI45548214;     IBYBtatEtXBloMRkqFVeXuI45548214 = IBYBtatEtXBloMRkqFVeXuI25577044;     IBYBtatEtXBloMRkqFVeXuI25577044 = IBYBtatEtXBloMRkqFVeXuI96497595;     IBYBtatEtXBloMRkqFVeXuI96497595 = IBYBtatEtXBloMRkqFVeXuI48631739;     IBYBtatEtXBloMRkqFVeXuI48631739 = IBYBtatEtXBloMRkqFVeXuI91495504;     IBYBtatEtXBloMRkqFVeXuI91495504 = IBYBtatEtXBloMRkqFVeXuI49362923;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void NvBLDYUEYHdrqfdgjYnlmibkEgBTevPFySRTAWWgT31753714() {     long FUFvOXjrziWBkEfURGXWAZc71756511 = -169620243;    long FUFvOXjrziWBkEfURGXWAZc42010557 = -518599392;    long FUFvOXjrziWBkEfURGXWAZc25820539 = -953787947;    long FUFvOXjrziWBkEfURGXWAZc51100815 = -347346938;    long FUFvOXjrziWBkEfURGXWAZc74164090 = -399384974;    long FUFvOXjrziWBkEfURGXWAZc13364079 = -524831420;    long FUFvOXjrziWBkEfURGXWAZc10937991 = -515683367;    long FUFvOXjrziWBkEfURGXWAZc29622458 = -52597335;    long FUFvOXjrziWBkEfURGXWAZc22957775 = 76094958;    long FUFvOXjrziWBkEfURGXWAZc10155293 = -102339904;    long FUFvOXjrziWBkEfURGXWAZc13471453 = -140636535;    long FUFvOXjrziWBkEfURGXWAZc81634619 = -425969712;    long FUFvOXjrziWBkEfURGXWAZc81475301 = -697694021;    long FUFvOXjrziWBkEfURGXWAZc51742252 = -51401295;    long FUFvOXjrziWBkEfURGXWAZc72088289 = -315134924;    long FUFvOXjrziWBkEfURGXWAZc92017506 = -880634268;    long FUFvOXjrziWBkEfURGXWAZc53253891 = -647900683;    long FUFvOXjrziWBkEfURGXWAZc88627710 = -332613574;    long FUFvOXjrziWBkEfURGXWAZc32755229 = -354477588;    long FUFvOXjrziWBkEfURGXWAZc60538018 = -851246241;    long FUFvOXjrziWBkEfURGXWAZc2921521 = -997729187;    long FUFvOXjrziWBkEfURGXWAZc82769540 = 47695480;    long FUFvOXjrziWBkEfURGXWAZc22290492 = 35099341;    long FUFvOXjrziWBkEfURGXWAZc82788143 = -908544443;    long FUFvOXjrziWBkEfURGXWAZc83112936 = -831250991;    long FUFvOXjrziWBkEfURGXWAZc14519423 = -292158651;    long FUFvOXjrziWBkEfURGXWAZc46124228 = -498048463;    long FUFvOXjrziWBkEfURGXWAZc11057790 = -673429998;    long FUFvOXjrziWBkEfURGXWAZc90109746 = -506538606;    long FUFvOXjrziWBkEfURGXWAZc11460024 = 33548325;    long FUFvOXjrziWBkEfURGXWAZc59998310 = -658508854;    long FUFvOXjrziWBkEfURGXWAZc77290141 = -445003257;    long FUFvOXjrziWBkEfURGXWAZc55762384 = -307687742;    long FUFvOXjrziWBkEfURGXWAZc8103777 = -70574399;    long FUFvOXjrziWBkEfURGXWAZc66207541 = -931111804;    long FUFvOXjrziWBkEfURGXWAZc88233767 = -410174341;    long FUFvOXjrziWBkEfURGXWAZc35350344 = -425939427;    long FUFvOXjrziWBkEfURGXWAZc37804906 = -906070172;    long FUFvOXjrziWBkEfURGXWAZc9292099 = -733361623;    long FUFvOXjrziWBkEfURGXWAZc77567476 = -894215738;    long FUFvOXjrziWBkEfURGXWAZc33229640 = 18656410;    long FUFvOXjrziWBkEfURGXWAZc55694791 = -451679053;    long FUFvOXjrziWBkEfURGXWAZc71906521 = -639195849;    long FUFvOXjrziWBkEfURGXWAZc54754998 = 74327330;    long FUFvOXjrziWBkEfURGXWAZc67238109 = 90062801;    long FUFvOXjrziWBkEfURGXWAZc1361305 = -820379566;    long FUFvOXjrziWBkEfURGXWAZc17135216 = -286808549;    long FUFvOXjrziWBkEfURGXWAZc89735807 = -80611406;    long FUFvOXjrziWBkEfURGXWAZc43186618 = -38743341;    long FUFvOXjrziWBkEfURGXWAZc11268528 = 94238146;    long FUFvOXjrziWBkEfURGXWAZc58646129 = -985255488;    long FUFvOXjrziWBkEfURGXWAZc23364398 = -389383550;    long FUFvOXjrziWBkEfURGXWAZc41315267 = -981025941;    long FUFvOXjrziWBkEfURGXWAZc25135192 = 1824414;    long FUFvOXjrziWBkEfURGXWAZc28832193 = -660646041;    long FUFvOXjrziWBkEfURGXWAZc88986971 = -117315723;    long FUFvOXjrziWBkEfURGXWAZc19720066 = -453698734;    long FUFvOXjrziWBkEfURGXWAZc43032396 = 54756496;    long FUFvOXjrziWBkEfURGXWAZc67987878 = -516095948;    long FUFvOXjrziWBkEfURGXWAZc59644668 = -7226323;    long FUFvOXjrziWBkEfURGXWAZc67239851 = 73217043;    long FUFvOXjrziWBkEfURGXWAZc99880200 = -842253370;    long FUFvOXjrziWBkEfURGXWAZc39512712 = -546058730;    long FUFvOXjrziWBkEfURGXWAZc11497751 = -957453368;    long FUFvOXjrziWBkEfURGXWAZc50156982 = -443831051;    long FUFvOXjrziWBkEfURGXWAZc36181312 = -695633279;    long FUFvOXjrziWBkEfURGXWAZc25872236 = -18281970;    long FUFvOXjrziWBkEfURGXWAZc73371524 = -527119623;    long FUFvOXjrziWBkEfURGXWAZc85534711 = -120289492;    long FUFvOXjrziWBkEfURGXWAZc83854521 = -904960583;    long FUFvOXjrziWBkEfURGXWAZc56667162 = -354694841;    long FUFvOXjrziWBkEfURGXWAZc15448986 = -741830512;    long FUFvOXjrziWBkEfURGXWAZc79335612 = -599251951;    long FUFvOXjrziWBkEfURGXWAZc55187752 = -460261850;    long FUFvOXjrziWBkEfURGXWAZc27308378 = -769902651;    long FUFvOXjrziWBkEfURGXWAZc47226729 = -446050135;    long FUFvOXjrziWBkEfURGXWAZc10863020 = -313108671;    long FUFvOXjrziWBkEfURGXWAZc67535494 = 60772011;    long FUFvOXjrziWBkEfURGXWAZc15550034 = -898607245;    long FUFvOXjrziWBkEfURGXWAZc81751632 = 89128574;    long FUFvOXjrziWBkEfURGXWAZc97384206 = 94649897;    long FUFvOXjrziWBkEfURGXWAZc56388421 = -317437057;    long FUFvOXjrziWBkEfURGXWAZc67871172 = -534686657;    long FUFvOXjrziWBkEfURGXWAZc78841218 = -500776753;    long FUFvOXjrziWBkEfURGXWAZc52813895 = 18803812;    long FUFvOXjrziWBkEfURGXWAZc36633913 = -169125304;    long FUFvOXjrziWBkEfURGXWAZc35974874 = -463977316;    long FUFvOXjrziWBkEfURGXWAZc30627192 = -209512157;    long FUFvOXjrziWBkEfURGXWAZc79271584 = -409928359;    long FUFvOXjrziWBkEfURGXWAZc77220570 = -713796081;    long FUFvOXjrziWBkEfURGXWAZc68513702 = -956475608;    long FUFvOXjrziWBkEfURGXWAZc92317948 = -380695923;    long FUFvOXjrziWBkEfURGXWAZc69817027 = -289974224;    long FUFvOXjrziWBkEfURGXWAZc49647430 = -626135301;    long FUFvOXjrziWBkEfURGXWAZc10327626 = -867432781;    long FUFvOXjrziWBkEfURGXWAZc33349439 = -139090221;    long FUFvOXjrziWBkEfURGXWAZc16182080 = -905620323;    long FUFvOXjrziWBkEfURGXWAZc60408770 = -681742482;    long FUFvOXjrziWBkEfURGXWAZc4598016 = -481841619;    long FUFvOXjrziWBkEfURGXWAZc31056798 = -169620243;     FUFvOXjrziWBkEfURGXWAZc71756511 = FUFvOXjrziWBkEfURGXWAZc42010557;     FUFvOXjrziWBkEfURGXWAZc42010557 = FUFvOXjrziWBkEfURGXWAZc25820539;     FUFvOXjrziWBkEfURGXWAZc25820539 = FUFvOXjrziWBkEfURGXWAZc51100815;     FUFvOXjrziWBkEfURGXWAZc51100815 = FUFvOXjrziWBkEfURGXWAZc74164090;     FUFvOXjrziWBkEfURGXWAZc74164090 = FUFvOXjrziWBkEfURGXWAZc13364079;     FUFvOXjrziWBkEfURGXWAZc13364079 = FUFvOXjrziWBkEfURGXWAZc10937991;     FUFvOXjrziWBkEfURGXWAZc10937991 = FUFvOXjrziWBkEfURGXWAZc29622458;     FUFvOXjrziWBkEfURGXWAZc29622458 = FUFvOXjrziWBkEfURGXWAZc22957775;     FUFvOXjrziWBkEfURGXWAZc22957775 = FUFvOXjrziWBkEfURGXWAZc10155293;     FUFvOXjrziWBkEfURGXWAZc10155293 = FUFvOXjrziWBkEfURGXWAZc13471453;     FUFvOXjrziWBkEfURGXWAZc13471453 = FUFvOXjrziWBkEfURGXWAZc81634619;     FUFvOXjrziWBkEfURGXWAZc81634619 = FUFvOXjrziWBkEfURGXWAZc81475301;     FUFvOXjrziWBkEfURGXWAZc81475301 = FUFvOXjrziWBkEfURGXWAZc51742252;     FUFvOXjrziWBkEfURGXWAZc51742252 = FUFvOXjrziWBkEfURGXWAZc72088289;     FUFvOXjrziWBkEfURGXWAZc72088289 = FUFvOXjrziWBkEfURGXWAZc92017506;     FUFvOXjrziWBkEfURGXWAZc92017506 = FUFvOXjrziWBkEfURGXWAZc53253891;     FUFvOXjrziWBkEfURGXWAZc53253891 = FUFvOXjrziWBkEfURGXWAZc88627710;     FUFvOXjrziWBkEfURGXWAZc88627710 = FUFvOXjrziWBkEfURGXWAZc32755229;     FUFvOXjrziWBkEfURGXWAZc32755229 = FUFvOXjrziWBkEfURGXWAZc60538018;     FUFvOXjrziWBkEfURGXWAZc60538018 = FUFvOXjrziWBkEfURGXWAZc2921521;     FUFvOXjrziWBkEfURGXWAZc2921521 = FUFvOXjrziWBkEfURGXWAZc82769540;     FUFvOXjrziWBkEfURGXWAZc82769540 = FUFvOXjrziWBkEfURGXWAZc22290492;     FUFvOXjrziWBkEfURGXWAZc22290492 = FUFvOXjrziWBkEfURGXWAZc82788143;     FUFvOXjrziWBkEfURGXWAZc82788143 = FUFvOXjrziWBkEfURGXWAZc83112936;     FUFvOXjrziWBkEfURGXWAZc83112936 = FUFvOXjrziWBkEfURGXWAZc14519423;     FUFvOXjrziWBkEfURGXWAZc14519423 = FUFvOXjrziWBkEfURGXWAZc46124228;     FUFvOXjrziWBkEfURGXWAZc46124228 = FUFvOXjrziWBkEfURGXWAZc11057790;     FUFvOXjrziWBkEfURGXWAZc11057790 = FUFvOXjrziWBkEfURGXWAZc90109746;     FUFvOXjrziWBkEfURGXWAZc90109746 = FUFvOXjrziWBkEfURGXWAZc11460024;     FUFvOXjrziWBkEfURGXWAZc11460024 = FUFvOXjrziWBkEfURGXWAZc59998310;     FUFvOXjrziWBkEfURGXWAZc59998310 = FUFvOXjrziWBkEfURGXWAZc77290141;     FUFvOXjrziWBkEfURGXWAZc77290141 = FUFvOXjrziWBkEfURGXWAZc55762384;     FUFvOXjrziWBkEfURGXWAZc55762384 = FUFvOXjrziWBkEfURGXWAZc8103777;     FUFvOXjrziWBkEfURGXWAZc8103777 = FUFvOXjrziWBkEfURGXWAZc66207541;     FUFvOXjrziWBkEfURGXWAZc66207541 = FUFvOXjrziWBkEfURGXWAZc88233767;     FUFvOXjrziWBkEfURGXWAZc88233767 = FUFvOXjrziWBkEfURGXWAZc35350344;     FUFvOXjrziWBkEfURGXWAZc35350344 = FUFvOXjrziWBkEfURGXWAZc37804906;     FUFvOXjrziWBkEfURGXWAZc37804906 = FUFvOXjrziWBkEfURGXWAZc9292099;     FUFvOXjrziWBkEfURGXWAZc9292099 = FUFvOXjrziWBkEfURGXWAZc77567476;     FUFvOXjrziWBkEfURGXWAZc77567476 = FUFvOXjrziWBkEfURGXWAZc33229640;     FUFvOXjrziWBkEfURGXWAZc33229640 = FUFvOXjrziWBkEfURGXWAZc55694791;     FUFvOXjrziWBkEfURGXWAZc55694791 = FUFvOXjrziWBkEfURGXWAZc71906521;     FUFvOXjrziWBkEfURGXWAZc71906521 = FUFvOXjrziWBkEfURGXWAZc54754998;     FUFvOXjrziWBkEfURGXWAZc54754998 = FUFvOXjrziWBkEfURGXWAZc67238109;     FUFvOXjrziWBkEfURGXWAZc67238109 = FUFvOXjrziWBkEfURGXWAZc1361305;     FUFvOXjrziWBkEfURGXWAZc1361305 = FUFvOXjrziWBkEfURGXWAZc17135216;     FUFvOXjrziWBkEfURGXWAZc17135216 = FUFvOXjrziWBkEfURGXWAZc89735807;     FUFvOXjrziWBkEfURGXWAZc89735807 = FUFvOXjrziWBkEfURGXWAZc43186618;     FUFvOXjrziWBkEfURGXWAZc43186618 = FUFvOXjrziWBkEfURGXWAZc11268528;     FUFvOXjrziWBkEfURGXWAZc11268528 = FUFvOXjrziWBkEfURGXWAZc58646129;     FUFvOXjrziWBkEfURGXWAZc58646129 = FUFvOXjrziWBkEfURGXWAZc23364398;     FUFvOXjrziWBkEfURGXWAZc23364398 = FUFvOXjrziWBkEfURGXWAZc41315267;     FUFvOXjrziWBkEfURGXWAZc41315267 = FUFvOXjrziWBkEfURGXWAZc25135192;     FUFvOXjrziWBkEfURGXWAZc25135192 = FUFvOXjrziWBkEfURGXWAZc28832193;     FUFvOXjrziWBkEfURGXWAZc28832193 = FUFvOXjrziWBkEfURGXWAZc88986971;     FUFvOXjrziWBkEfURGXWAZc88986971 = FUFvOXjrziWBkEfURGXWAZc19720066;     FUFvOXjrziWBkEfURGXWAZc19720066 = FUFvOXjrziWBkEfURGXWAZc43032396;     FUFvOXjrziWBkEfURGXWAZc43032396 = FUFvOXjrziWBkEfURGXWAZc67987878;     FUFvOXjrziWBkEfURGXWAZc67987878 = FUFvOXjrziWBkEfURGXWAZc59644668;     FUFvOXjrziWBkEfURGXWAZc59644668 = FUFvOXjrziWBkEfURGXWAZc67239851;     FUFvOXjrziWBkEfURGXWAZc67239851 = FUFvOXjrziWBkEfURGXWAZc99880200;     FUFvOXjrziWBkEfURGXWAZc99880200 = FUFvOXjrziWBkEfURGXWAZc39512712;     FUFvOXjrziWBkEfURGXWAZc39512712 = FUFvOXjrziWBkEfURGXWAZc11497751;     FUFvOXjrziWBkEfURGXWAZc11497751 = FUFvOXjrziWBkEfURGXWAZc50156982;     FUFvOXjrziWBkEfURGXWAZc50156982 = FUFvOXjrziWBkEfURGXWAZc36181312;     FUFvOXjrziWBkEfURGXWAZc36181312 = FUFvOXjrziWBkEfURGXWAZc25872236;     FUFvOXjrziWBkEfURGXWAZc25872236 = FUFvOXjrziWBkEfURGXWAZc73371524;     FUFvOXjrziWBkEfURGXWAZc73371524 = FUFvOXjrziWBkEfURGXWAZc85534711;     FUFvOXjrziWBkEfURGXWAZc85534711 = FUFvOXjrziWBkEfURGXWAZc83854521;     FUFvOXjrziWBkEfURGXWAZc83854521 = FUFvOXjrziWBkEfURGXWAZc56667162;     FUFvOXjrziWBkEfURGXWAZc56667162 = FUFvOXjrziWBkEfURGXWAZc15448986;     FUFvOXjrziWBkEfURGXWAZc15448986 = FUFvOXjrziWBkEfURGXWAZc79335612;     FUFvOXjrziWBkEfURGXWAZc79335612 = FUFvOXjrziWBkEfURGXWAZc55187752;     FUFvOXjrziWBkEfURGXWAZc55187752 = FUFvOXjrziWBkEfURGXWAZc27308378;     FUFvOXjrziWBkEfURGXWAZc27308378 = FUFvOXjrziWBkEfURGXWAZc47226729;     FUFvOXjrziWBkEfURGXWAZc47226729 = FUFvOXjrziWBkEfURGXWAZc10863020;     FUFvOXjrziWBkEfURGXWAZc10863020 = FUFvOXjrziWBkEfURGXWAZc67535494;     FUFvOXjrziWBkEfURGXWAZc67535494 = FUFvOXjrziWBkEfURGXWAZc15550034;     FUFvOXjrziWBkEfURGXWAZc15550034 = FUFvOXjrziWBkEfURGXWAZc81751632;     FUFvOXjrziWBkEfURGXWAZc81751632 = FUFvOXjrziWBkEfURGXWAZc97384206;     FUFvOXjrziWBkEfURGXWAZc97384206 = FUFvOXjrziWBkEfURGXWAZc56388421;     FUFvOXjrziWBkEfURGXWAZc56388421 = FUFvOXjrziWBkEfURGXWAZc67871172;     FUFvOXjrziWBkEfURGXWAZc67871172 = FUFvOXjrziWBkEfURGXWAZc78841218;     FUFvOXjrziWBkEfURGXWAZc78841218 = FUFvOXjrziWBkEfURGXWAZc52813895;     FUFvOXjrziWBkEfURGXWAZc52813895 = FUFvOXjrziWBkEfURGXWAZc36633913;     FUFvOXjrziWBkEfURGXWAZc36633913 = FUFvOXjrziWBkEfURGXWAZc35974874;     FUFvOXjrziWBkEfURGXWAZc35974874 = FUFvOXjrziWBkEfURGXWAZc30627192;     FUFvOXjrziWBkEfURGXWAZc30627192 = FUFvOXjrziWBkEfURGXWAZc79271584;     FUFvOXjrziWBkEfURGXWAZc79271584 = FUFvOXjrziWBkEfURGXWAZc77220570;     FUFvOXjrziWBkEfURGXWAZc77220570 = FUFvOXjrziWBkEfURGXWAZc68513702;     FUFvOXjrziWBkEfURGXWAZc68513702 = FUFvOXjrziWBkEfURGXWAZc92317948;     FUFvOXjrziWBkEfURGXWAZc92317948 = FUFvOXjrziWBkEfURGXWAZc69817027;     FUFvOXjrziWBkEfURGXWAZc69817027 = FUFvOXjrziWBkEfURGXWAZc49647430;     FUFvOXjrziWBkEfURGXWAZc49647430 = FUFvOXjrziWBkEfURGXWAZc10327626;     FUFvOXjrziWBkEfURGXWAZc10327626 = FUFvOXjrziWBkEfURGXWAZc33349439;     FUFvOXjrziWBkEfURGXWAZc33349439 = FUFvOXjrziWBkEfURGXWAZc16182080;     FUFvOXjrziWBkEfURGXWAZc16182080 = FUFvOXjrziWBkEfURGXWAZc60408770;     FUFvOXjrziWBkEfURGXWAZc60408770 = FUFvOXjrziWBkEfURGXWAZc4598016;     FUFvOXjrziWBkEfURGXWAZc4598016 = FUFvOXjrziWBkEfURGXWAZc31056798;     FUFvOXjrziWBkEfURGXWAZc31056798 = FUFvOXjrziWBkEfURGXWAZc71756511;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void TufIPcZcNLplTuElqrOJAZaTLNpsBFJOnJnrskCeD13982475() {     long nRwOOewIiVfsXetTMwBmhbH23491962 = -285875075;    long nRwOOewIiVfsXetTMwBmhbH57684540 = -595499148;    long nRwOOewIiVfsXetTMwBmhbH74620899 = -751147331;    long nRwOOewIiVfsXetTMwBmhbH26176217 = -163616081;    long nRwOOewIiVfsXetTMwBmhbH50888023 = -107035628;    long nRwOOewIiVfsXetTMwBmhbH38247433 = -683858646;    long nRwOOewIiVfsXetTMwBmhbH84714833 = -338894964;    long nRwOOewIiVfsXetTMwBmhbH48413936 = -176376889;    long nRwOOewIiVfsXetTMwBmhbH74255851 = -814753753;    long nRwOOewIiVfsXetTMwBmhbH78952416 = -643985887;    long nRwOOewIiVfsXetTMwBmhbH8764152 = -102359006;    long nRwOOewIiVfsXetTMwBmhbH91990997 = -360951212;    long nRwOOewIiVfsXetTMwBmhbH68656095 = -306874282;    long nRwOOewIiVfsXetTMwBmhbH10509971 = -778081842;    long nRwOOewIiVfsXetTMwBmhbH26103547 = -892862634;    long nRwOOewIiVfsXetTMwBmhbH3744779 = -592318223;    long nRwOOewIiVfsXetTMwBmhbH9224416 = 84004627;    long nRwOOewIiVfsXetTMwBmhbH74310632 = -795190069;    long nRwOOewIiVfsXetTMwBmhbH92329077 = -882391771;    long nRwOOewIiVfsXetTMwBmhbH80267592 = -561514389;    long nRwOOewIiVfsXetTMwBmhbH48668874 = 19462645;    long nRwOOewIiVfsXetTMwBmhbH85188994 = -125785528;    long nRwOOewIiVfsXetTMwBmhbH23640006 = -673138106;    long nRwOOewIiVfsXetTMwBmhbH75438393 = -780136394;    long nRwOOewIiVfsXetTMwBmhbH54528795 = -776905428;    long nRwOOewIiVfsXetTMwBmhbH72224836 = -637768431;    long nRwOOewIiVfsXetTMwBmhbH84952862 = -960457181;    long nRwOOewIiVfsXetTMwBmhbH9187015 = 43239316;    long nRwOOewIiVfsXetTMwBmhbH64859819 = -556437508;    long nRwOOewIiVfsXetTMwBmhbH81445107 = -428352471;    long nRwOOewIiVfsXetTMwBmhbH97217118 = -991391320;    long nRwOOewIiVfsXetTMwBmhbH90319871 = -768777448;    long nRwOOewIiVfsXetTMwBmhbH53855694 = -890069628;    long nRwOOewIiVfsXetTMwBmhbH2127490 = -831171565;    long nRwOOewIiVfsXetTMwBmhbH64412669 = -47921447;    long nRwOOewIiVfsXetTMwBmhbH69933378 = -646343170;    long nRwOOewIiVfsXetTMwBmhbH84998570 = 29705829;    long nRwOOewIiVfsXetTMwBmhbH38638518 = -989582536;    long nRwOOewIiVfsXetTMwBmhbH79066940 = -78679018;    long nRwOOewIiVfsXetTMwBmhbH2649893 = -412831405;    long nRwOOewIiVfsXetTMwBmhbH1913727 = -100502378;    long nRwOOewIiVfsXetTMwBmhbH15720192 = -440198674;    long nRwOOewIiVfsXetTMwBmhbH28489753 = -539972381;    long nRwOOewIiVfsXetTMwBmhbH47690817 = -951061348;    long nRwOOewIiVfsXetTMwBmhbH39267317 = -510434282;    long nRwOOewIiVfsXetTMwBmhbH3055752 = -144271506;    long nRwOOewIiVfsXetTMwBmhbH3301411 = -749149002;    long nRwOOewIiVfsXetTMwBmhbH68720272 = -485016102;    long nRwOOewIiVfsXetTMwBmhbH32205071 = -2696071;    long nRwOOewIiVfsXetTMwBmhbH99924787 = -864773234;    long nRwOOewIiVfsXetTMwBmhbH99326020 = -693759644;    long nRwOOewIiVfsXetTMwBmhbH55344150 = -850983110;    long nRwOOewIiVfsXetTMwBmhbH64554013 = -725139129;    long nRwOOewIiVfsXetTMwBmhbH95194432 = -712974898;    long nRwOOewIiVfsXetTMwBmhbH65313601 = -690409241;    long nRwOOewIiVfsXetTMwBmhbH38302968 = -60089548;    long nRwOOewIiVfsXetTMwBmhbH34044534 = -922361042;    long nRwOOewIiVfsXetTMwBmhbH99182505 = -971010938;    long nRwOOewIiVfsXetTMwBmhbH71647421 = -386710653;    long nRwOOewIiVfsXetTMwBmhbH78663186 = -469267198;    long nRwOOewIiVfsXetTMwBmhbH53294571 = -723401466;    long nRwOOewIiVfsXetTMwBmhbH75527819 = -282134280;    long nRwOOewIiVfsXetTMwBmhbH83554117 = -619939382;    long nRwOOewIiVfsXetTMwBmhbH92810743 = -286401282;    long nRwOOewIiVfsXetTMwBmhbH81735297 = -652594567;    long nRwOOewIiVfsXetTMwBmhbH18444281 = -333581559;    long nRwOOewIiVfsXetTMwBmhbH38135304 = -470881584;    long nRwOOewIiVfsXetTMwBmhbH66528605 = -475702718;    long nRwOOewIiVfsXetTMwBmhbH46097302 = -630160396;    long nRwOOewIiVfsXetTMwBmhbH56170169 = -146519465;    long nRwOOewIiVfsXetTMwBmhbH18746208 = -522024053;    long nRwOOewIiVfsXetTMwBmhbH70585898 = 73587163;    long nRwOOewIiVfsXetTMwBmhbH95243692 = -616511051;    long nRwOOewIiVfsXetTMwBmhbH89679185 = -369560367;    long nRwOOewIiVfsXetTMwBmhbH78353865 = -361012012;    long nRwOOewIiVfsXetTMwBmhbH32948682 = -540338681;    long nRwOOewIiVfsXetTMwBmhbH56699241 = -585813147;    long nRwOOewIiVfsXetTMwBmhbH75949189 = -722076759;    long nRwOOewIiVfsXetTMwBmhbH36171077 = -169702113;    long nRwOOewIiVfsXetTMwBmhbH51473044 = -532633922;    long nRwOOewIiVfsXetTMwBmhbH68923426 = -888619429;    long nRwOOewIiVfsXetTMwBmhbH16232591 = -375441079;    long nRwOOewIiVfsXetTMwBmhbH76981944 = -954064614;    long nRwOOewIiVfsXetTMwBmhbH64935032 = -691664274;    long nRwOOewIiVfsXetTMwBmhbH82119086 = -734592828;    long nRwOOewIiVfsXetTMwBmhbH41872969 = -40408210;    long nRwOOewIiVfsXetTMwBmhbH25765858 = 56361680;    long nRwOOewIiVfsXetTMwBmhbH58661261 = -77094731;    long nRwOOewIiVfsXetTMwBmhbH36813888 = -40762324;    long nRwOOewIiVfsXetTMwBmhbH26109701 = -987831899;    long nRwOOewIiVfsXetTMwBmhbH35888844 = -723982128;    long nRwOOewIiVfsXetTMwBmhbH85816065 = 716766;    long nRwOOewIiVfsXetTMwBmhbH66991096 = -502871883;    long nRwOOewIiVfsXetTMwBmhbH403755 = -609411821;    long nRwOOewIiVfsXetTMwBmhbH49355322 = -689429939;    long nRwOOewIiVfsXetTMwBmhbH26385908 = -818368099;    long nRwOOewIiVfsXetTMwBmhbH32166075 = -820259293;    long nRwOOewIiVfsXetTMwBmhbH35679009 = -153571099;    long nRwOOewIiVfsXetTMwBmhbH65955519 = -198466781;    long nRwOOewIiVfsXetTMwBmhbH20823037 = -285875075;     nRwOOewIiVfsXetTMwBmhbH23491962 = nRwOOewIiVfsXetTMwBmhbH57684540;     nRwOOewIiVfsXetTMwBmhbH57684540 = nRwOOewIiVfsXetTMwBmhbH74620899;     nRwOOewIiVfsXetTMwBmhbH74620899 = nRwOOewIiVfsXetTMwBmhbH26176217;     nRwOOewIiVfsXetTMwBmhbH26176217 = nRwOOewIiVfsXetTMwBmhbH50888023;     nRwOOewIiVfsXetTMwBmhbH50888023 = nRwOOewIiVfsXetTMwBmhbH38247433;     nRwOOewIiVfsXetTMwBmhbH38247433 = nRwOOewIiVfsXetTMwBmhbH84714833;     nRwOOewIiVfsXetTMwBmhbH84714833 = nRwOOewIiVfsXetTMwBmhbH48413936;     nRwOOewIiVfsXetTMwBmhbH48413936 = nRwOOewIiVfsXetTMwBmhbH74255851;     nRwOOewIiVfsXetTMwBmhbH74255851 = nRwOOewIiVfsXetTMwBmhbH78952416;     nRwOOewIiVfsXetTMwBmhbH78952416 = nRwOOewIiVfsXetTMwBmhbH8764152;     nRwOOewIiVfsXetTMwBmhbH8764152 = nRwOOewIiVfsXetTMwBmhbH91990997;     nRwOOewIiVfsXetTMwBmhbH91990997 = nRwOOewIiVfsXetTMwBmhbH68656095;     nRwOOewIiVfsXetTMwBmhbH68656095 = nRwOOewIiVfsXetTMwBmhbH10509971;     nRwOOewIiVfsXetTMwBmhbH10509971 = nRwOOewIiVfsXetTMwBmhbH26103547;     nRwOOewIiVfsXetTMwBmhbH26103547 = nRwOOewIiVfsXetTMwBmhbH3744779;     nRwOOewIiVfsXetTMwBmhbH3744779 = nRwOOewIiVfsXetTMwBmhbH9224416;     nRwOOewIiVfsXetTMwBmhbH9224416 = nRwOOewIiVfsXetTMwBmhbH74310632;     nRwOOewIiVfsXetTMwBmhbH74310632 = nRwOOewIiVfsXetTMwBmhbH92329077;     nRwOOewIiVfsXetTMwBmhbH92329077 = nRwOOewIiVfsXetTMwBmhbH80267592;     nRwOOewIiVfsXetTMwBmhbH80267592 = nRwOOewIiVfsXetTMwBmhbH48668874;     nRwOOewIiVfsXetTMwBmhbH48668874 = nRwOOewIiVfsXetTMwBmhbH85188994;     nRwOOewIiVfsXetTMwBmhbH85188994 = nRwOOewIiVfsXetTMwBmhbH23640006;     nRwOOewIiVfsXetTMwBmhbH23640006 = nRwOOewIiVfsXetTMwBmhbH75438393;     nRwOOewIiVfsXetTMwBmhbH75438393 = nRwOOewIiVfsXetTMwBmhbH54528795;     nRwOOewIiVfsXetTMwBmhbH54528795 = nRwOOewIiVfsXetTMwBmhbH72224836;     nRwOOewIiVfsXetTMwBmhbH72224836 = nRwOOewIiVfsXetTMwBmhbH84952862;     nRwOOewIiVfsXetTMwBmhbH84952862 = nRwOOewIiVfsXetTMwBmhbH9187015;     nRwOOewIiVfsXetTMwBmhbH9187015 = nRwOOewIiVfsXetTMwBmhbH64859819;     nRwOOewIiVfsXetTMwBmhbH64859819 = nRwOOewIiVfsXetTMwBmhbH81445107;     nRwOOewIiVfsXetTMwBmhbH81445107 = nRwOOewIiVfsXetTMwBmhbH97217118;     nRwOOewIiVfsXetTMwBmhbH97217118 = nRwOOewIiVfsXetTMwBmhbH90319871;     nRwOOewIiVfsXetTMwBmhbH90319871 = nRwOOewIiVfsXetTMwBmhbH53855694;     nRwOOewIiVfsXetTMwBmhbH53855694 = nRwOOewIiVfsXetTMwBmhbH2127490;     nRwOOewIiVfsXetTMwBmhbH2127490 = nRwOOewIiVfsXetTMwBmhbH64412669;     nRwOOewIiVfsXetTMwBmhbH64412669 = nRwOOewIiVfsXetTMwBmhbH69933378;     nRwOOewIiVfsXetTMwBmhbH69933378 = nRwOOewIiVfsXetTMwBmhbH84998570;     nRwOOewIiVfsXetTMwBmhbH84998570 = nRwOOewIiVfsXetTMwBmhbH38638518;     nRwOOewIiVfsXetTMwBmhbH38638518 = nRwOOewIiVfsXetTMwBmhbH79066940;     nRwOOewIiVfsXetTMwBmhbH79066940 = nRwOOewIiVfsXetTMwBmhbH2649893;     nRwOOewIiVfsXetTMwBmhbH2649893 = nRwOOewIiVfsXetTMwBmhbH1913727;     nRwOOewIiVfsXetTMwBmhbH1913727 = nRwOOewIiVfsXetTMwBmhbH15720192;     nRwOOewIiVfsXetTMwBmhbH15720192 = nRwOOewIiVfsXetTMwBmhbH28489753;     nRwOOewIiVfsXetTMwBmhbH28489753 = nRwOOewIiVfsXetTMwBmhbH47690817;     nRwOOewIiVfsXetTMwBmhbH47690817 = nRwOOewIiVfsXetTMwBmhbH39267317;     nRwOOewIiVfsXetTMwBmhbH39267317 = nRwOOewIiVfsXetTMwBmhbH3055752;     nRwOOewIiVfsXetTMwBmhbH3055752 = nRwOOewIiVfsXetTMwBmhbH3301411;     nRwOOewIiVfsXetTMwBmhbH3301411 = nRwOOewIiVfsXetTMwBmhbH68720272;     nRwOOewIiVfsXetTMwBmhbH68720272 = nRwOOewIiVfsXetTMwBmhbH32205071;     nRwOOewIiVfsXetTMwBmhbH32205071 = nRwOOewIiVfsXetTMwBmhbH99924787;     nRwOOewIiVfsXetTMwBmhbH99924787 = nRwOOewIiVfsXetTMwBmhbH99326020;     nRwOOewIiVfsXetTMwBmhbH99326020 = nRwOOewIiVfsXetTMwBmhbH55344150;     nRwOOewIiVfsXetTMwBmhbH55344150 = nRwOOewIiVfsXetTMwBmhbH64554013;     nRwOOewIiVfsXetTMwBmhbH64554013 = nRwOOewIiVfsXetTMwBmhbH95194432;     nRwOOewIiVfsXetTMwBmhbH95194432 = nRwOOewIiVfsXetTMwBmhbH65313601;     nRwOOewIiVfsXetTMwBmhbH65313601 = nRwOOewIiVfsXetTMwBmhbH38302968;     nRwOOewIiVfsXetTMwBmhbH38302968 = nRwOOewIiVfsXetTMwBmhbH34044534;     nRwOOewIiVfsXetTMwBmhbH34044534 = nRwOOewIiVfsXetTMwBmhbH99182505;     nRwOOewIiVfsXetTMwBmhbH99182505 = nRwOOewIiVfsXetTMwBmhbH71647421;     nRwOOewIiVfsXetTMwBmhbH71647421 = nRwOOewIiVfsXetTMwBmhbH78663186;     nRwOOewIiVfsXetTMwBmhbH78663186 = nRwOOewIiVfsXetTMwBmhbH53294571;     nRwOOewIiVfsXetTMwBmhbH53294571 = nRwOOewIiVfsXetTMwBmhbH75527819;     nRwOOewIiVfsXetTMwBmhbH75527819 = nRwOOewIiVfsXetTMwBmhbH83554117;     nRwOOewIiVfsXetTMwBmhbH83554117 = nRwOOewIiVfsXetTMwBmhbH92810743;     nRwOOewIiVfsXetTMwBmhbH92810743 = nRwOOewIiVfsXetTMwBmhbH81735297;     nRwOOewIiVfsXetTMwBmhbH81735297 = nRwOOewIiVfsXetTMwBmhbH18444281;     nRwOOewIiVfsXetTMwBmhbH18444281 = nRwOOewIiVfsXetTMwBmhbH38135304;     nRwOOewIiVfsXetTMwBmhbH38135304 = nRwOOewIiVfsXetTMwBmhbH66528605;     nRwOOewIiVfsXetTMwBmhbH66528605 = nRwOOewIiVfsXetTMwBmhbH46097302;     nRwOOewIiVfsXetTMwBmhbH46097302 = nRwOOewIiVfsXetTMwBmhbH56170169;     nRwOOewIiVfsXetTMwBmhbH56170169 = nRwOOewIiVfsXetTMwBmhbH18746208;     nRwOOewIiVfsXetTMwBmhbH18746208 = nRwOOewIiVfsXetTMwBmhbH70585898;     nRwOOewIiVfsXetTMwBmhbH70585898 = nRwOOewIiVfsXetTMwBmhbH95243692;     nRwOOewIiVfsXetTMwBmhbH95243692 = nRwOOewIiVfsXetTMwBmhbH89679185;     nRwOOewIiVfsXetTMwBmhbH89679185 = nRwOOewIiVfsXetTMwBmhbH78353865;     nRwOOewIiVfsXetTMwBmhbH78353865 = nRwOOewIiVfsXetTMwBmhbH32948682;     nRwOOewIiVfsXetTMwBmhbH32948682 = nRwOOewIiVfsXetTMwBmhbH56699241;     nRwOOewIiVfsXetTMwBmhbH56699241 = nRwOOewIiVfsXetTMwBmhbH75949189;     nRwOOewIiVfsXetTMwBmhbH75949189 = nRwOOewIiVfsXetTMwBmhbH36171077;     nRwOOewIiVfsXetTMwBmhbH36171077 = nRwOOewIiVfsXetTMwBmhbH51473044;     nRwOOewIiVfsXetTMwBmhbH51473044 = nRwOOewIiVfsXetTMwBmhbH68923426;     nRwOOewIiVfsXetTMwBmhbH68923426 = nRwOOewIiVfsXetTMwBmhbH16232591;     nRwOOewIiVfsXetTMwBmhbH16232591 = nRwOOewIiVfsXetTMwBmhbH76981944;     nRwOOewIiVfsXetTMwBmhbH76981944 = nRwOOewIiVfsXetTMwBmhbH64935032;     nRwOOewIiVfsXetTMwBmhbH64935032 = nRwOOewIiVfsXetTMwBmhbH82119086;     nRwOOewIiVfsXetTMwBmhbH82119086 = nRwOOewIiVfsXetTMwBmhbH41872969;     nRwOOewIiVfsXetTMwBmhbH41872969 = nRwOOewIiVfsXetTMwBmhbH25765858;     nRwOOewIiVfsXetTMwBmhbH25765858 = nRwOOewIiVfsXetTMwBmhbH58661261;     nRwOOewIiVfsXetTMwBmhbH58661261 = nRwOOewIiVfsXetTMwBmhbH36813888;     nRwOOewIiVfsXetTMwBmhbH36813888 = nRwOOewIiVfsXetTMwBmhbH26109701;     nRwOOewIiVfsXetTMwBmhbH26109701 = nRwOOewIiVfsXetTMwBmhbH35888844;     nRwOOewIiVfsXetTMwBmhbH35888844 = nRwOOewIiVfsXetTMwBmhbH85816065;     nRwOOewIiVfsXetTMwBmhbH85816065 = nRwOOewIiVfsXetTMwBmhbH66991096;     nRwOOewIiVfsXetTMwBmhbH66991096 = nRwOOewIiVfsXetTMwBmhbH403755;     nRwOOewIiVfsXetTMwBmhbH403755 = nRwOOewIiVfsXetTMwBmhbH49355322;     nRwOOewIiVfsXetTMwBmhbH49355322 = nRwOOewIiVfsXetTMwBmhbH26385908;     nRwOOewIiVfsXetTMwBmhbH26385908 = nRwOOewIiVfsXetTMwBmhbH32166075;     nRwOOewIiVfsXetTMwBmhbH32166075 = nRwOOewIiVfsXetTMwBmhbH35679009;     nRwOOewIiVfsXetTMwBmhbH35679009 = nRwOOewIiVfsXetTMwBmhbH65955519;     nRwOOewIiVfsXetTMwBmhbH65955519 = nRwOOewIiVfsXetTMwBmhbH20823037;     nRwOOewIiVfsXetTMwBmhbH20823037 = nRwOOewIiVfsXetTMwBmhbH23491962;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void VnfAozonbhxHsNPKrxCOkzbBTdJvLuNIXuFlyGoNx43968705() {     long eTcEntfzWZgYrvWMehLptbg45885551 = -47754897;    long eTcEntfzWZgYrvWMehLptbg3459725 = -501447077;    long eTcEntfzWZgYrvWMehLptbg2076966 = 66327438;    long eTcEntfzWZgYrvWMehLptbg56103044 = -349482782;    long eTcEntfzWZgYrvWMehLptbg40222175 = -229737308;    long eTcEntfzWZgYrvWMehLptbg18325118 = -845034212;    long eTcEntfzWZgYrvWMehLptbg8323237 = -456345803;    long eTcEntfzWZgYrvWMehLptbg54833744 = -942796216;    long eTcEntfzWZgYrvWMehLptbg88678818 = -985303722;    long eTcEntfzWZgYrvWMehLptbg74076487 = -749920349;    long eTcEntfzWZgYrvWMehLptbg25985406 = -139511335;    long eTcEntfzWZgYrvWMehLptbg33602269 = -876218143;    long eTcEntfzWZgYrvWMehLptbg3811362 = -903933127;    long eTcEntfzWZgYrvWMehLptbg99280502 = -960637548;    long eTcEntfzWZgYrvWMehLptbg17666715 = -557627495;    long eTcEntfzWZgYrvWMehLptbg73436143 = -641190115;    long eTcEntfzWZgYrvWMehLptbg3195008 = -373660623;    long eTcEntfzWZgYrvWMehLptbg57286516 = -849861138;    long eTcEntfzWZgYrvWMehLptbg13182439 = -399511629;    long eTcEntfzWZgYrvWMehLptbg86710112 = -202124392;    long eTcEntfzWZgYrvWMehLptbg69882556 = -261558290;    long eTcEntfzWZgYrvWMehLptbg70707946 = -120559958;    long eTcEntfzWZgYrvWMehLptbg90054932 = -390260856;    long eTcEntfzWZgYrvWMehLptbg58288072 = -363208729;    long eTcEntfzWZgYrvWMehLptbg61626352 = 28229301;    long eTcEntfzWZgYrvWMehLptbg43953754 = -73456726;    long eTcEntfzWZgYrvWMehLptbg61820701 = -417243961;    long eTcEntfzWZgYrvWMehLptbg79694939 = -236248149;    long eTcEntfzWZgYrvWMehLptbg59073933 = -254624312;    long eTcEntfzWZgYrvWMehLptbg14512417 = -673216964;    long eTcEntfzWZgYrvWMehLptbg8095246 = -685614238;    long eTcEntfzWZgYrvWMehLptbg63137205 = 70972958;    long eTcEntfzWZgYrvWMehLptbg49441941 = -117468907;    long eTcEntfzWZgYrvWMehLptbg61233339 = -178616682;    long eTcEntfzWZgYrvWMehLptbg58283996 = -952363944;    long eTcEntfzWZgYrvWMehLptbg68798057 = -881972800;    long eTcEntfzWZgYrvWMehLptbg66496915 = -703588744;    long eTcEntfzWZgYrvWMehLptbg22346939 = -861945329;    long eTcEntfzWZgYrvWMehLptbg92061475 = -867043634;    long eTcEntfzWZgYrvWMehLptbg50962714 = -939623748;    long eTcEntfzWZgYrvWMehLptbg42815430 = -515736146;    long eTcEntfzWZgYrvWMehLptbg18530922 = -4315283;    long eTcEntfzWZgYrvWMehLptbg73756585 = -968372710;    long eTcEntfzWZgYrvWMehLptbg87903037 = -291460553;    long eTcEntfzWZgYrvWMehLptbg23232532 = -946318358;    long eTcEntfzWZgYrvWMehLptbg70728065 = -514455931;    long eTcEntfzWZgYrvWMehLptbg87901015 = -846278633;    long eTcEntfzWZgYrvWMehLptbg37935365 = -732789737;    long eTcEntfzWZgYrvWMehLptbg8006587 = -388648908;    long eTcEntfzWZgYrvWMehLptbg76963110 = -319768607;    long eTcEntfzWZgYrvWMehLptbg94935867 = -370280913;    long eTcEntfzWZgYrvWMehLptbg14648150 = -899656644;    long eTcEntfzWZgYrvWMehLptbg67420068 = -504996351;    long eTcEntfzWZgYrvWMehLptbg45230707 = -456735856;    long eTcEntfzWZgYrvWMehLptbg74086148 = 25785921;    long eTcEntfzWZgYrvWMehLptbg75177604 = -927194940;    long eTcEntfzWZgYrvWMehLptbg13404792 = -11186222;    long eTcEntfzWZgYrvWMehLptbg43788893 = -570463833;    long eTcEntfzWZgYrvWMehLptbg94476692 = -277712083;    long eTcEntfzWZgYrvWMehLptbg96268420 = -56280582;    long eTcEntfzWZgYrvWMehLptbg56504416 = -327790252;    long eTcEntfzWZgYrvWMehLptbg28628297 = -120097654;    long eTcEntfzWZgYrvWMehLptbg95759811 = -588171905;    long eTcEntfzWZgYrvWMehLptbg74166401 = -212086759;    long eTcEntfzWZgYrvWMehLptbg65981242 = 35693888;    long eTcEntfzWZgYrvWMehLptbg62848201 = -110484294;    long eTcEntfzWZgYrvWMehLptbg84160328 = -658749236;    long eTcEntfzWZgYrvWMehLptbg42578022 = -625316446;    long eTcEntfzWZgYrvWMehLptbg40996507 = 91726396;    long eTcEntfzWZgYrvWMehLptbg48868657 = -675654696;    long eTcEntfzWZgYrvWMehLptbg6939229 = -937601371;    long eTcEntfzWZgYrvWMehLptbg80848068 = -511715294;    long eTcEntfzWZgYrvWMehLptbg65225041 = -982817504;    long eTcEntfzWZgYrvWMehLptbg62219724 = -459887882;    long eTcEntfzWZgYrvWMehLptbg43894682 = -686388247;    long eTcEntfzWZgYrvWMehLptbg51351635 = -157243007;    long eTcEntfzWZgYrvWMehLptbg96951361 = -152187248;    long eTcEntfzWZgYrvWMehLptbg2151896 = 1199697;    long eTcEntfzWZgYrvWMehLptbg35055541 = -416890371;    long eTcEntfzWZgYrvWMehLptbg90898287 = -457314769;    long eTcEntfzWZgYrvWMehLptbg56052738 = -227178094;    long eTcEntfzWZgYrvWMehLptbg23885336 = -684454224;    long eTcEntfzWZgYrvWMehLptbg71688353 = -847599242;    long eTcEntfzWZgYrvWMehLptbg82110823 = -934855706;    long eTcEntfzWZgYrvWMehLptbg19576549 = -202936051;    long eTcEntfzWZgYrvWMehLptbg93447095 = -785957594;    long eTcEntfzWZgYrvWMehLptbg95717136 = -424030691;    long eTcEntfzWZgYrvWMehLptbg4211234 = -660733052;    long eTcEntfzWZgYrvWMehLptbg87147190 = -104402604;    long eTcEntfzWZgYrvWMehLptbg83106391 = 74830995;    long eTcEntfzWZgYrvWMehLptbg55393266 = -770786579;    long eTcEntfzWZgYrvWMehLptbg22708022 = -33124912;    long eTcEntfzWZgYrvWMehLptbg27870247 = -484233246;    long eTcEntfzWZgYrvWMehLptbg95793054 = -710763052;    long eTcEntfzWZgYrvWMehLptbg94458298 = -511833496;    long eTcEntfzWZgYrvWMehLptbg14187134 = -295638492;    long eTcEntfzWZgYrvWMehLptbg22771111 = -416143378;    long eTcEntfzWZgYrvWMehLptbg99590183 = -656285952;    long eTcEntfzWZgYrvWMehLptbg21921796 = -227154442;    long eTcEntfzWZgYrvWMehLptbg60384330 = -47754897;     eTcEntfzWZgYrvWMehLptbg45885551 = eTcEntfzWZgYrvWMehLptbg3459725;     eTcEntfzWZgYrvWMehLptbg3459725 = eTcEntfzWZgYrvWMehLptbg2076966;     eTcEntfzWZgYrvWMehLptbg2076966 = eTcEntfzWZgYrvWMehLptbg56103044;     eTcEntfzWZgYrvWMehLptbg56103044 = eTcEntfzWZgYrvWMehLptbg40222175;     eTcEntfzWZgYrvWMehLptbg40222175 = eTcEntfzWZgYrvWMehLptbg18325118;     eTcEntfzWZgYrvWMehLptbg18325118 = eTcEntfzWZgYrvWMehLptbg8323237;     eTcEntfzWZgYrvWMehLptbg8323237 = eTcEntfzWZgYrvWMehLptbg54833744;     eTcEntfzWZgYrvWMehLptbg54833744 = eTcEntfzWZgYrvWMehLptbg88678818;     eTcEntfzWZgYrvWMehLptbg88678818 = eTcEntfzWZgYrvWMehLptbg74076487;     eTcEntfzWZgYrvWMehLptbg74076487 = eTcEntfzWZgYrvWMehLptbg25985406;     eTcEntfzWZgYrvWMehLptbg25985406 = eTcEntfzWZgYrvWMehLptbg33602269;     eTcEntfzWZgYrvWMehLptbg33602269 = eTcEntfzWZgYrvWMehLptbg3811362;     eTcEntfzWZgYrvWMehLptbg3811362 = eTcEntfzWZgYrvWMehLptbg99280502;     eTcEntfzWZgYrvWMehLptbg99280502 = eTcEntfzWZgYrvWMehLptbg17666715;     eTcEntfzWZgYrvWMehLptbg17666715 = eTcEntfzWZgYrvWMehLptbg73436143;     eTcEntfzWZgYrvWMehLptbg73436143 = eTcEntfzWZgYrvWMehLptbg3195008;     eTcEntfzWZgYrvWMehLptbg3195008 = eTcEntfzWZgYrvWMehLptbg57286516;     eTcEntfzWZgYrvWMehLptbg57286516 = eTcEntfzWZgYrvWMehLptbg13182439;     eTcEntfzWZgYrvWMehLptbg13182439 = eTcEntfzWZgYrvWMehLptbg86710112;     eTcEntfzWZgYrvWMehLptbg86710112 = eTcEntfzWZgYrvWMehLptbg69882556;     eTcEntfzWZgYrvWMehLptbg69882556 = eTcEntfzWZgYrvWMehLptbg70707946;     eTcEntfzWZgYrvWMehLptbg70707946 = eTcEntfzWZgYrvWMehLptbg90054932;     eTcEntfzWZgYrvWMehLptbg90054932 = eTcEntfzWZgYrvWMehLptbg58288072;     eTcEntfzWZgYrvWMehLptbg58288072 = eTcEntfzWZgYrvWMehLptbg61626352;     eTcEntfzWZgYrvWMehLptbg61626352 = eTcEntfzWZgYrvWMehLptbg43953754;     eTcEntfzWZgYrvWMehLptbg43953754 = eTcEntfzWZgYrvWMehLptbg61820701;     eTcEntfzWZgYrvWMehLptbg61820701 = eTcEntfzWZgYrvWMehLptbg79694939;     eTcEntfzWZgYrvWMehLptbg79694939 = eTcEntfzWZgYrvWMehLptbg59073933;     eTcEntfzWZgYrvWMehLptbg59073933 = eTcEntfzWZgYrvWMehLptbg14512417;     eTcEntfzWZgYrvWMehLptbg14512417 = eTcEntfzWZgYrvWMehLptbg8095246;     eTcEntfzWZgYrvWMehLptbg8095246 = eTcEntfzWZgYrvWMehLptbg63137205;     eTcEntfzWZgYrvWMehLptbg63137205 = eTcEntfzWZgYrvWMehLptbg49441941;     eTcEntfzWZgYrvWMehLptbg49441941 = eTcEntfzWZgYrvWMehLptbg61233339;     eTcEntfzWZgYrvWMehLptbg61233339 = eTcEntfzWZgYrvWMehLptbg58283996;     eTcEntfzWZgYrvWMehLptbg58283996 = eTcEntfzWZgYrvWMehLptbg68798057;     eTcEntfzWZgYrvWMehLptbg68798057 = eTcEntfzWZgYrvWMehLptbg66496915;     eTcEntfzWZgYrvWMehLptbg66496915 = eTcEntfzWZgYrvWMehLptbg22346939;     eTcEntfzWZgYrvWMehLptbg22346939 = eTcEntfzWZgYrvWMehLptbg92061475;     eTcEntfzWZgYrvWMehLptbg92061475 = eTcEntfzWZgYrvWMehLptbg50962714;     eTcEntfzWZgYrvWMehLptbg50962714 = eTcEntfzWZgYrvWMehLptbg42815430;     eTcEntfzWZgYrvWMehLptbg42815430 = eTcEntfzWZgYrvWMehLptbg18530922;     eTcEntfzWZgYrvWMehLptbg18530922 = eTcEntfzWZgYrvWMehLptbg73756585;     eTcEntfzWZgYrvWMehLptbg73756585 = eTcEntfzWZgYrvWMehLptbg87903037;     eTcEntfzWZgYrvWMehLptbg87903037 = eTcEntfzWZgYrvWMehLptbg23232532;     eTcEntfzWZgYrvWMehLptbg23232532 = eTcEntfzWZgYrvWMehLptbg70728065;     eTcEntfzWZgYrvWMehLptbg70728065 = eTcEntfzWZgYrvWMehLptbg87901015;     eTcEntfzWZgYrvWMehLptbg87901015 = eTcEntfzWZgYrvWMehLptbg37935365;     eTcEntfzWZgYrvWMehLptbg37935365 = eTcEntfzWZgYrvWMehLptbg8006587;     eTcEntfzWZgYrvWMehLptbg8006587 = eTcEntfzWZgYrvWMehLptbg76963110;     eTcEntfzWZgYrvWMehLptbg76963110 = eTcEntfzWZgYrvWMehLptbg94935867;     eTcEntfzWZgYrvWMehLptbg94935867 = eTcEntfzWZgYrvWMehLptbg14648150;     eTcEntfzWZgYrvWMehLptbg14648150 = eTcEntfzWZgYrvWMehLptbg67420068;     eTcEntfzWZgYrvWMehLptbg67420068 = eTcEntfzWZgYrvWMehLptbg45230707;     eTcEntfzWZgYrvWMehLptbg45230707 = eTcEntfzWZgYrvWMehLptbg74086148;     eTcEntfzWZgYrvWMehLptbg74086148 = eTcEntfzWZgYrvWMehLptbg75177604;     eTcEntfzWZgYrvWMehLptbg75177604 = eTcEntfzWZgYrvWMehLptbg13404792;     eTcEntfzWZgYrvWMehLptbg13404792 = eTcEntfzWZgYrvWMehLptbg43788893;     eTcEntfzWZgYrvWMehLptbg43788893 = eTcEntfzWZgYrvWMehLptbg94476692;     eTcEntfzWZgYrvWMehLptbg94476692 = eTcEntfzWZgYrvWMehLptbg96268420;     eTcEntfzWZgYrvWMehLptbg96268420 = eTcEntfzWZgYrvWMehLptbg56504416;     eTcEntfzWZgYrvWMehLptbg56504416 = eTcEntfzWZgYrvWMehLptbg28628297;     eTcEntfzWZgYrvWMehLptbg28628297 = eTcEntfzWZgYrvWMehLptbg95759811;     eTcEntfzWZgYrvWMehLptbg95759811 = eTcEntfzWZgYrvWMehLptbg74166401;     eTcEntfzWZgYrvWMehLptbg74166401 = eTcEntfzWZgYrvWMehLptbg65981242;     eTcEntfzWZgYrvWMehLptbg65981242 = eTcEntfzWZgYrvWMehLptbg62848201;     eTcEntfzWZgYrvWMehLptbg62848201 = eTcEntfzWZgYrvWMehLptbg84160328;     eTcEntfzWZgYrvWMehLptbg84160328 = eTcEntfzWZgYrvWMehLptbg42578022;     eTcEntfzWZgYrvWMehLptbg42578022 = eTcEntfzWZgYrvWMehLptbg40996507;     eTcEntfzWZgYrvWMehLptbg40996507 = eTcEntfzWZgYrvWMehLptbg48868657;     eTcEntfzWZgYrvWMehLptbg48868657 = eTcEntfzWZgYrvWMehLptbg6939229;     eTcEntfzWZgYrvWMehLptbg6939229 = eTcEntfzWZgYrvWMehLptbg80848068;     eTcEntfzWZgYrvWMehLptbg80848068 = eTcEntfzWZgYrvWMehLptbg65225041;     eTcEntfzWZgYrvWMehLptbg65225041 = eTcEntfzWZgYrvWMehLptbg62219724;     eTcEntfzWZgYrvWMehLptbg62219724 = eTcEntfzWZgYrvWMehLptbg43894682;     eTcEntfzWZgYrvWMehLptbg43894682 = eTcEntfzWZgYrvWMehLptbg51351635;     eTcEntfzWZgYrvWMehLptbg51351635 = eTcEntfzWZgYrvWMehLptbg96951361;     eTcEntfzWZgYrvWMehLptbg96951361 = eTcEntfzWZgYrvWMehLptbg2151896;     eTcEntfzWZgYrvWMehLptbg2151896 = eTcEntfzWZgYrvWMehLptbg35055541;     eTcEntfzWZgYrvWMehLptbg35055541 = eTcEntfzWZgYrvWMehLptbg90898287;     eTcEntfzWZgYrvWMehLptbg90898287 = eTcEntfzWZgYrvWMehLptbg56052738;     eTcEntfzWZgYrvWMehLptbg56052738 = eTcEntfzWZgYrvWMehLptbg23885336;     eTcEntfzWZgYrvWMehLptbg23885336 = eTcEntfzWZgYrvWMehLptbg71688353;     eTcEntfzWZgYrvWMehLptbg71688353 = eTcEntfzWZgYrvWMehLptbg82110823;     eTcEntfzWZgYrvWMehLptbg82110823 = eTcEntfzWZgYrvWMehLptbg19576549;     eTcEntfzWZgYrvWMehLptbg19576549 = eTcEntfzWZgYrvWMehLptbg93447095;     eTcEntfzWZgYrvWMehLptbg93447095 = eTcEntfzWZgYrvWMehLptbg95717136;     eTcEntfzWZgYrvWMehLptbg95717136 = eTcEntfzWZgYrvWMehLptbg4211234;     eTcEntfzWZgYrvWMehLptbg4211234 = eTcEntfzWZgYrvWMehLptbg87147190;     eTcEntfzWZgYrvWMehLptbg87147190 = eTcEntfzWZgYrvWMehLptbg83106391;     eTcEntfzWZgYrvWMehLptbg83106391 = eTcEntfzWZgYrvWMehLptbg55393266;     eTcEntfzWZgYrvWMehLptbg55393266 = eTcEntfzWZgYrvWMehLptbg22708022;     eTcEntfzWZgYrvWMehLptbg22708022 = eTcEntfzWZgYrvWMehLptbg27870247;     eTcEntfzWZgYrvWMehLptbg27870247 = eTcEntfzWZgYrvWMehLptbg95793054;     eTcEntfzWZgYrvWMehLptbg95793054 = eTcEntfzWZgYrvWMehLptbg94458298;     eTcEntfzWZgYrvWMehLptbg94458298 = eTcEntfzWZgYrvWMehLptbg14187134;     eTcEntfzWZgYrvWMehLptbg14187134 = eTcEntfzWZgYrvWMehLptbg22771111;     eTcEntfzWZgYrvWMehLptbg22771111 = eTcEntfzWZgYrvWMehLptbg99590183;     eTcEntfzWZgYrvWMehLptbg99590183 = eTcEntfzWZgYrvWMehLptbg21921796;     eTcEntfzWZgYrvWMehLptbg21921796 = eTcEntfzWZgYrvWMehLptbg60384330;     eTcEntfzWZgYrvWMehLptbg60384330 = eTcEntfzWZgYrvWMehLptbg45885551;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void KsxhvqpRYXUXARuVSSGybFRXeCYVHgnZzHSfIvekyUMrIhdFfqIVKWKEbZCsSTKrjuXszPNXoWAHsZOxY15631153() {     int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW46768803 = -644119889;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW88743399 = -161376874;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW52299222 = -235223938;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW94541027 = -603722514;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW16516300 = -867945333;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW83015344 = -455038218;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW63807850 = -694955976;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW92378916 = -151085065;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW1072781 = -438786053;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW94632707 = -935387081;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW86580172 = -509537814;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW95095805 = -941462884;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW13852984 = -133331949;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW9958960 = -229734944;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW93344831 = -456436153;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW71659046 = -968519307;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW66493664 = -769283587;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW70043168 = -540208689;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW58110880 = -197962810;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW64385047 = -179326783;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW59788744 = -288103329;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW7729740 = -300512154;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW78330366 = -787636829;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW99842655 = 85349916;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW86959858 = -396452298;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW90999014 = -175157908;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW17236298 = -209078790;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW48879371 = -90294746;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW4839370 = -598109149;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW71554750 = 74431218;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW30685254 = -695434023;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW56735030 = -882393768;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW78045759 = 53800463;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW75194824 = -149264313;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW25164925 = -942752301;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW74444946 = 98503157;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW24564984 = 27312760;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW1086453 = -362780631;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW56429987 = -628910964;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW43677197 = -922300637;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW90818980 = -322295245;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW9820238 = -32515046;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW13278148 = -973151279;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW73238889 = -851736343;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW26174095 = -543077719;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW49402784 = -354186076;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW14896625 = 26524546;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW54319131 = -741706946;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW54925112 = -103524119;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW59099032 = -174601041;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW14949192 = -395920898;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW41344455 = -114703714;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW91607767 = -880675909;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW24585517 = -618467433;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW55842409 = -652278189;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW39039064 = -243607735;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW10413034 = -373740045;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW52456566 = -220573854;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW7581170 = -107270216;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW25517285 = -592787426;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW65779047 = -145959428;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW14928479 = -504661231;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW87539546 = -552975917;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW29518031 = -413217272;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW63947454 = -139953059;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW29845142 = -627144046;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW17050047 = -895263348;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW38658159 = -984067636;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW84794035 = -286982644;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW18899886 = -454939310;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW47094063 = -895832068;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW65407211 = -306502957;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW13613181 = -911297725;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW14433683 = -275662174;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW73566067 = -857031538;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW49968507 = -155588284;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW94451592 = -327360876;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW5091478 = -935900487;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW73668561 = -371572365;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW37557074 = 57733778;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW76102389 = -101682454;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW62917166 = -467371845;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW93954259 = -986770627;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW45740337 = -323508108;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW56605559 = -529647884;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW89340798 = -480730310;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW65127263 = 98282140;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW53460243 = -327732105;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW19352416 = -496986125;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW86125860 = -599144567;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW64031913 = -527756799;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW72108418 = -752113386;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW93505282 = -155510415;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW30912703 = 63876462;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW77898150 = -676341209;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW75890501 = -817634015;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW22280691 = -479539130;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW83760116 = -459934008;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW9291435 = -611783285;    int SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW96328953 = -644119889;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW46768803 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW88743399;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW88743399 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW52299222;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW52299222 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW94541027;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW94541027 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW16516300;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW16516300 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW83015344;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW83015344 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW63807850;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW63807850 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW92378916;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW92378916 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW1072781;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW1072781 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW94632707;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW94632707 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW86580172;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW86580172 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW95095805;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW95095805 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW13852984;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW13852984 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW9958960;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW9958960 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW93344831;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW93344831 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW71659046;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW71659046 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW66493664;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW66493664 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW70043168;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW70043168 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW58110880;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW58110880 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW64385047;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW64385047 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW59788744;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW59788744 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW7729740;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW7729740 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW78330366;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW78330366 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW99842655;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW99842655 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW86959858;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW86959858 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW90999014;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW90999014 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW17236298;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW17236298 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW48879371;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW48879371 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW4839370;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW4839370 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW71554750;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW71554750 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW30685254;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW30685254 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW56735030;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW56735030 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW78045759;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW78045759 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW75194824;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW75194824 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW25164925;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW25164925 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW74444946;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW74444946 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW24564984;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW24564984 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW1086453;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW1086453 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW56429987;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW56429987 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW43677197;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW43677197 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW90818980;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW90818980 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW9820238;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW9820238 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW13278148;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW13278148 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW73238889;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW73238889 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW26174095;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW26174095 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW49402784;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW49402784 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW14896625;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW14896625 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW54319131;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW54319131 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW54925112;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW54925112 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW59099032;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW59099032 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW14949192;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW14949192 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW41344455;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW41344455 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW91607767;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW91607767 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW24585517;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW24585517 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW55842409;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW55842409 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW39039064;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW39039064 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW10413034;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW10413034 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW52456566;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW52456566 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW7581170;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW7581170 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW25517285;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW25517285 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW65779047;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW65779047 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW14928479;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW14928479 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW87539546;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW87539546 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW29518031;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW29518031 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW63947454;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW63947454 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW29845142;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW29845142 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW17050047;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW17050047 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW38658159;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW38658159 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW84794035;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW84794035 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW18899886;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW18899886 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW47094063;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW47094063 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW65407211;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW65407211 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW13613181;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW13613181 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW14433683;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW14433683 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW73566067;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW73566067 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW49968507;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW49968507 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW94451592;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW94451592 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW5091478;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW5091478 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW73668561;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW73668561 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW37557074;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW37557074 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW76102389;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW76102389 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW62917166;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW62917166 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW93954259;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW93954259 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW45740337;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW45740337 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW56605559;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW56605559 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW89340798;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW89340798 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW65127263;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW65127263 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW53460243;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW53460243 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW19352416;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW19352416 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW86125860;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW86125860 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW64031913;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW64031913 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW72108418;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW72108418 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW93505282;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW93505282 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW30912703;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW30912703 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW77898150;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW77898150 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW75890501;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW75890501 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW22280691;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW22280691 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW83760116;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW83760116 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW9291435;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW9291435 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW96328953;     SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW96328953 = SpRYROcwNEjslSeKVHNJkGQckhnWDLBKFUzdsSRgvwmKdfDEW46768803;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void xVZrdLlhhTpwDPRxaBtMnUTdHMIoRmgrINAYgvYIuuKbUZdeQjbPtpVdBwjQCwQvnxnqOtQfdlStJsIij97859914() {     int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU98504253 = -760374721;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU4417383 = -238276629;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU1099582 = -32583322;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU69616429 = -419991656;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU93240231 = -575595987;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU7898699 = -614065444;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU37584694 = -518167572;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU11170395 = -274864619;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU52370857 = -229634764;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU63429832 = -377033063;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU81872871 = -471260285;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU5452184 = -876444385;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU1033778 = -842512210;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU68726678 = -956415491;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU47360089 = 65836138;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU83386318 = -680203262;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU22464189 = -37378277;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU55726090 = 97214816;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU17684729 = -725876993;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU84114621 = -989594931;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU5536098 = -370911497;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU10149193 = -473993162;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU79679881 = -395874277;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU92492906 = -886242035;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU58375716 = -342106735;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU48704428 = -520767687;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU56064932 = -671487508;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU47008596 = -473625432;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU79589442 = -648008051;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU41539834 = -387469578;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU67904062 = 71683511;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU69764760 = -106167960;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU76139068 = -528581423;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU69218537 = -909861479;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU23370053 = -59561944;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU56144556 = -137665672;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU74213210 = -617041984;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU1920065 = -446292996;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU26204830 = 25771641;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU68759614 = -440916303;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU59503067 = -441454033;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU69845637 = -21034667;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU69861379 = -873927811;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU66174708 = -777125021;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU98203302 = -43574803;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU51097231 = -778078017;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU1062820 = -435815908;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU33303596 = -46111642;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU43943565 = -67476848;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU47755292 = -33612421;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU55629083 = -104425054;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU73324208 = -576303274;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU14846514 = -624789097;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU94644757 = -233266745;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU92323817 = -682041390;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU88355060 = -186381560;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU24737502 = -842402353;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU8606675 = -146341287;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU11240714 = 22115078;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU44535804 = 45171699;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU51833767 = -942577937;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU90576097 = 55457859;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU31580952 = -626856569;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU10831024 = -842165187;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU95525769 = -348716575;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU12108111 = -265092325;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU29313115 = -247862962;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU31815240 = -932650731;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU45356625 = -796853547;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU91215533 = -796498191;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU9173109 = 36838721;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU20544124 = -591085282;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU29521260 = -928556825;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU48925115 = -184960690;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU24611554 = -448140899;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU35690460 = -249876830;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU40287814 = -600065352;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU13505173 = -618749256;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU94289603 = -742667233;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU7278486 = -564028718;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU47641609 = 15048221;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU22761336 = -525375867;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU3065032 = -306148584;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU31834151 = -514395630;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU85910750 = -183044525;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU94579854 = -352013216;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU54918247 = -481378863;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU81494311 = -195314679;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU76894719 = -127820090;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU35014992 = -873180385;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU31407055 = -295263320;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU65606535 = -370700697;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU90679351 = -368408074;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU81669026 = 80599941;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU16925847 = -498338367;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU68926970 = -396911892;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU38264686 = -394178099;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU59030355 = 68237375;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU70648938 = -328408447;    int eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU86095192 = -760374721;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU98504253 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU4417383;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU4417383 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU1099582;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU1099582 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU69616429;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU69616429 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU93240231;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU93240231 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU7898699;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU7898699 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU37584694;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU37584694 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU11170395;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU11170395 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU52370857;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU52370857 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU63429832;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU63429832 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU81872871;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU81872871 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU5452184;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU5452184 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU1033778;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU1033778 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU68726678;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU68726678 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU47360089;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU47360089 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU83386318;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU83386318 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU22464189;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU22464189 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU55726090;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU55726090 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU17684729;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU17684729 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU84114621;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU84114621 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU5536098;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU5536098 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU10149193;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU10149193 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU79679881;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU79679881 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU92492906;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU92492906 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU58375716;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU58375716 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU48704428;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU48704428 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU56064932;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU56064932 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU47008596;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU47008596 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU79589442;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU79589442 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU41539834;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU41539834 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU67904062;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU67904062 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU69764760;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU69764760 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU76139068;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU76139068 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU69218537;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU69218537 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU23370053;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU23370053 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU56144556;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU56144556 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU74213210;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU74213210 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU1920065;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU1920065 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU26204830;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU26204830 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU68759614;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU68759614 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU59503067;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU59503067 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU69845637;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU69845637 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU69861379;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU69861379 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU66174708;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU66174708 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU98203302;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU98203302 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU51097231;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU51097231 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU1062820;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU1062820 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU33303596;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU33303596 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU43943565;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU43943565 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU47755292;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU47755292 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU55629083;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU55629083 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU73324208;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU73324208 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU14846514;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU14846514 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU94644757;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU94644757 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU92323817;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU92323817 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU88355060;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU88355060 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU24737502;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU24737502 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU8606675;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU8606675 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU11240714;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU11240714 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU44535804;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU44535804 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU51833767;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU51833767 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU90576097;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU90576097 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU31580952;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU31580952 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU10831024;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU10831024 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU95525769;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU95525769 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU12108111;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU12108111 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU29313115;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU29313115 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU31815240;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU31815240 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU45356625;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU45356625 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU91215533;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU91215533 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU9173109;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU9173109 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU20544124;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU20544124 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU29521260;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU29521260 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU48925115;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU48925115 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU24611554;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU24611554 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU35690460;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU35690460 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU40287814;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU40287814 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU13505173;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU13505173 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU94289603;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU94289603 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU7278486;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU7278486 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU47641609;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU47641609 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU22761336;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU22761336 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU3065032;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU3065032 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU31834151;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU31834151 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU85910750;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU85910750 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU94579854;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU94579854 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU54918247;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU54918247 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU81494311;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU81494311 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU76894719;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU76894719 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU35014992;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU35014992 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU31407055;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU31407055 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU65606535;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU65606535 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU90679351;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU90679351 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU81669026;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU81669026 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU16925847;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU16925847 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU68926970;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU68926970 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU38264686;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU38264686 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU59030355;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU59030355 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU70648938;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU70648938 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU86095192;     eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU86095192 = eXiLQxTsXWkLHFxdPoWmnPXSwmIXbTJnBhYYijWzUxqWgTVfU98504253;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void NvibbsxsfbkoLAHgXPRlKHbxdPtfzUcyeoIoCcraqTulSUzFCbziwiJFUlxLySsLymJXsTeuYqvqNpeJP27193579() {     float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX57821138 = -419774712;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX25197226 = -244162350;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX45923359 = -31941782;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX31136487 = -381520440;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX31093446 = -985022314;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX92740702 = -148076102;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX69101931 = -666282333;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX33003038 = 4220562;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX74494473 = -406283918;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX32894411 = -563627014;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX13694705 = -122633339;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX13117014 = 70055391;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX38852264 = -697519726;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX12354265 = -299181332;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX1343100 = -895016061;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX94715706 = -349527828;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX52311766 = -660059722;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX87168597 = -908574591;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX19590594 = 24977745;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX79291528 = -365296660;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX74298092 = -218994832;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX89784038 = -444391524;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX6521549 = -170663816;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX90787008 = -983173015;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX39327587 = -279566322;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX85468726 = -92927846;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX97267803 = -305176425;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX9252191 = -278520417;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX93536737 = -875909908;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX60298314 = -274696297;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX29549271 = 7805002;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX50843159 = -989383815;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX54635293 = -564186382;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX58176776 = -699250933;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX39430819 = -171146057;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX77262403 = -258949682;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX33695476 = -468328502;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX90477443 = -200072689;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX33602132 = -672273792;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX51891287 = -520743894;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX86602284 = -831624476;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX61072878 = -993858738;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX1507545 = -406025629;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX85123634 = -278278798;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX63148864 = 7964254;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX11229475 = -325601408;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX49388002 = -438329897;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX60928738 = -615464691;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX80306111 = -137232399;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX62381838 = 70130099;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX39281950 = 54337702;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX83904435 = -853753054;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX58992084 = 35447498;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX46663433 = -735139900;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX52895486 = -677734655;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX68037099 = -975383189;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX18675678 = 26501465;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX55136351 = -48768768;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX91808900 = -1954119;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX45624719 = -792094469;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX95472899 = -842899678;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX59849741 = -287761917;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX39466300 = -119869530;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX14196159 = -31587621;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX3345140 = -471432016;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX62851545 = -133249525;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX58481721 = -365758228;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX80675488 = -998268794;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX72923445 = -28035276;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX24080697 = -536066379;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX61020230 = -881199326;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX61834323 = -359987034;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX53566466 = -136300799;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX67699306 = -454278362;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX92689244 = -533672184;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX13225215 = -225136094;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX88276493 = 61634105;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX21397915 = -892385019;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX27638144 = -891137269;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX28098112 = -953964915;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX36080725 = -654597949;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX36339065 = -689711734;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX28946079 = -41288019;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX31154900 = -846040007;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX21016364 = -229033999;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX45644836 = -138441944;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX91851075 = -924831314;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX7971860 = -829046483;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX5281290 = 78483722;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX71393719 = -195762868;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX58586726 = -185451148;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX78559125 = -319559735;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX98668543 = -98118570;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX87977412 = -880179324;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX56418388 = -677844217;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX26752544 = -443862560;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX21606578 = -773989208;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX87311385 = -274438008;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX81778494 = -806846782;    float ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX297320 = -419774712;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX57821138 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX25197226;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX25197226 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX45923359;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX45923359 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX31136487;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX31136487 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX31093446;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX31093446 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX92740702;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX92740702 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX69101931;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX69101931 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX33003038;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX33003038 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX74494473;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX74494473 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX32894411;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX32894411 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX13694705;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX13694705 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX13117014;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX13117014 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX38852264;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX38852264 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX12354265;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX12354265 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX1343100;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX1343100 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX94715706;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX94715706 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX52311766;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX52311766 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX87168597;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX87168597 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX19590594;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX19590594 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX79291528;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX79291528 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX74298092;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX74298092 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX89784038;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX89784038 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX6521549;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX6521549 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX90787008;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX90787008 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX39327587;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX39327587 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX85468726;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX85468726 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX97267803;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX97267803 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX9252191;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX9252191 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX93536737;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX93536737 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX60298314;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX60298314 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX29549271;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX29549271 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX50843159;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX50843159 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX54635293;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX54635293 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX58176776;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX58176776 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX39430819;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX39430819 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX77262403;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX77262403 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX33695476;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX33695476 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX90477443;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX90477443 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX33602132;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX33602132 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX51891287;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX51891287 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX86602284;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX86602284 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX61072878;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX61072878 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX1507545;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX1507545 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX85123634;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX85123634 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX63148864;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX63148864 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX11229475;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX11229475 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX49388002;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX49388002 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX60928738;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX60928738 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX80306111;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX80306111 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX62381838;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX62381838 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX39281950;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX39281950 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX83904435;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX83904435 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX58992084;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX58992084 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX46663433;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX46663433 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX52895486;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX52895486 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX68037099;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX68037099 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX18675678;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX18675678 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX55136351;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX55136351 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX91808900;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX91808900 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX45624719;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX45624719 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX95472899;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX95472899 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX59849741;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX59849741 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX39466300;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX39466300 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX14196159;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX14196159 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX3345140;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX3345140 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX62851545;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX62851545 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX58481721;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX58481721 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX80675488;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX80675488 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX72923445;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX72923445 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX24080697;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX24080697 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX61020230;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX61020230 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX61834323;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX61834323 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX53566466;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX53566466 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX67699306;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX67699306 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX92689244;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX92689244 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX13225215;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX13225215 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX88276493;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX88276493 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX21397915;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX21397915 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX27638144;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX27638144 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX28098112;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX28098112 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX36080725;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX36080725 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX36339065;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX36339065 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX28946079;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX28946079 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX31154900;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX31154900 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX21016364;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX21016364 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX45644836;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX45644836 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX91851075;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX91851075 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX7971860;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX7971860 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX5281290;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX5281290 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX71393719;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX71393719 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX58586726;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX58586726 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX78559125;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX78559125 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX98668543;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX98668543 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX87977412;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX87977412 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX56418388;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX56418388 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX26752544;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX26752544 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX21606578;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX21606578 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX87311385;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX87311385 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX81778494;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX81778494 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX297320;     ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX297320 = ocXUuBveCUQffcXajngKcMjxEKFnSseGnwKpUrDkOspyNPsOX57821138;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void dfPumneHAaoltRTgiyXdeqGGlpVblCEJLgUuIDUDSZhCzLmJazSztySnZIJwRDWyWeZNxYYfeUKEIDGZD9422340() {     float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv9556588 = -536029545;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv40871209 = -321062106;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv94723718 = -929301166;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv6211889 = -197789583;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv7817379 = -692672968;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv17624057 = -307103328;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv42878775 = -489493930;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv51794516 = -119558992;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv25792550 = -197132628;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv1691535 = -5272996;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv8987404 = -84355811;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv23473392 = -964926110;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv26033058 = -306699987;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv71121983 = 74138121;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv55358357 = -372743770;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv6442979 = -61211783;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv8282292 = 71845588;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv72851519 = -271151086;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv79164442 = -502936439;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv99021102 = -75564809;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv20045446 = -301803000;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv92203492 = -617872532;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv7871063 = -878901264;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv83437258 = -854764966;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv10743445 = -225220759;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv43174141 = -438537625;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv36096438 = -767585142;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv7381416 = -661851103;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv68286810 = -925808810;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv30283398 = -736597093;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv66768080 = -325077464;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv63872889 = -213158007;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv52728602 = -46568268;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv52200488 = -359848098;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv37635947 = -387955700;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv58962013 = -495118511;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv83343702 = -12683246;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv91311055 = -283585053;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv3376975 = -17591187;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv76973704 = -39359561;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv55286372 = -950783264;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv21098279 = -982378360;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv58090777 = -306802161;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv78059452 = -203667475;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv35178072 = -592532829;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv12923922 = -749493348;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv35554197 = -900670351;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv39913203 = 80130614;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv69324564 = -101185128;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv51038097 = -888881282;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv79961842 = -754166454;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv15884189 = -215352615;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv82230830 = -808665690;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv16722674 = -349939212;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv89376894 = -707497856;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv17353096 = -918157014;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv33000146 = -442160843;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv11286460 = 25463799;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv95468443 = -972568824;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv64643238 = -154135344;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv81527618 = -539518187;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv35497360 = -827642827;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv83507705 = -193750183;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv95509152 = -460535536;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv34923455 = -680195532;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv45114514 = -871197805;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv70744789 = -818357842;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv73832569 = -946851889;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv33486036 = -537906180;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv96396344 = -877625260;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv23099277 = 51471462;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv16971236 = -644569359;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv69474545 = -153559899;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv2190739 = -363576878;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv43734731 = -124781545;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv98947166 = -319424641;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv34112715 = -211070371;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv29811610 = -575233789;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv48259186 = -162232137;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv97819523 = -475727411;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv7619944 = -537867274;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv96183235 = -747715756;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv38056852 = -460665975;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv17248714 = 63072471;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv50321556 = -982430639;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv50883892 = -9724850;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv81642059 = -404492317;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv36005929 = -696629057;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv62823593 = -652350243;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv20282851 = -469798687;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv25961868 = 47042331;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv72057242 = 61852955;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv95842612 = -311016229;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv38733737 = -863455844;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv95446085 = -499841375;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv19789013 = -23140437;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv37590573 = -688628178;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv62581625 = -846266625;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv43135998 = -523471944;    float MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv90063558 = -536029545;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv9556588 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv40871209;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv40871209 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv94723718;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv94723718 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv6211889;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv6211889 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv7817379;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv7817379 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv17624057;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv17624057 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv42878775;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv42878775 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv51794516;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv51794516 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv25792550;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv25792550 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv1691535;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv1691535 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv8987404;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv8987404 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv23473392;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv23473392 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv26033058;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv26033058 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv71121983;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv71121983 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv55358357;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv55358357 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv6442979;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv6442979 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv8282292;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv8282292 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv72851519;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv72851519 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv79164442;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv79164442 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv99021102;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv99021102 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv20045446;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv20045446 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv92203492;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv92203492 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv7871063;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv7871063 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv83437258;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv83437258 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv10743445;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv10743445 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv43174141;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv43174141 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv36096438;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv36096438 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv7381416;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv7381416 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv68286810;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv68286810 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv30283398;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv30283398 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv66768080;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv66768080 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv63872889;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv63872889 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv52728602;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv52728602 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv52200488;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv52200488 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv37635947;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv37635947 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv58962013;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv58962013 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv83343702;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv83343702 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv91311055;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv91311055 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv3376975;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv3376975 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv76973704;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv76973704 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv55286372;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv55286372 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv21098279;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv21098279 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv58090777;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv58090777 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv78059452;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv78059452 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv35178072;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv35178072 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv12923922;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv12923922 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv35554197;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv35554197 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv39913203;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv39913203 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv69324564;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv69324564 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv51038097;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv51038097 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv79961842;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv79961842 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv15884189;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv15884189 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv82230830;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv82230830 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv16722674;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv16722674 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv89376894;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv89376894 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv17353096;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv17353096 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv33000146;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv33000146 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv11286460;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv11286460 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv95468443;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv95468443 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv64643238;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv64643238 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv81527618;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv81527618 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv35497360;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv35497360 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv83507705;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv83507705 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv95509152;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv95509152 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv34923455;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv34923455 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv45114514;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv45114514 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv70744789;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv70744789 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv73832569;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv73832569 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv33486036;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv33486036 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv96396344;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv96396344 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv23099277;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv23099277 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv16971236;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv16971236 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv69474545;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv69474545 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv2190739;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv2190739 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv43734731;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv43734731 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv98947166;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv98947166 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv34112715;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv34112715 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv29811610;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv29811610 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv48259186;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv48259186 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv97819523;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv97819523 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv7619944;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv7619944 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv96183235;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv96183235 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv38056852;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv38056852 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv17248714;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv17248714 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv50321556;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv50321556 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv50883892;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv50883892 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv81642059;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv81642059 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv36005929;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv36005929 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv62823593;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv62823593 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv20282851;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv20282851 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv25961868;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv25961868 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv72057242;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv72057242 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv95842612;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv95842612 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv38733737;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv38733737 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv95446085;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv95446085 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv19789013;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv19789013 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv37590573;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv37590573 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv62581625;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv62581625 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv43135998;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv43135998 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv90063558;     MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv90063558 = MAljEQNOhVztXlPCjgVlZLBbnVYoNeVCjtFClPRNMyQDZlGiv9556588;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void xJuHlNwEAouQcruxtdkHNiYKpFIrtIDzLkWmZwLccVbobUFGaQiMXqNOlkSfEEKrluErVHXwSHfrHkiUA39408570() {     float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI31950177 = -297909367;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI86646392 = -227010035;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI22179785 = -111826397;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI36138716 = -383656284;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI97151530 = -815374648;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI97701741 = -468278894;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI66487178 = -606944769;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI58214324 = -885978319;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI40215517 = -367682597;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI96815605 = -111207458;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI26208658 = -121508140;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI65084663 = -380193040;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI61188324 = -903758832;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI59892515 = -108417585;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI46921525 = -37508632;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI76134343 = -110083675;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI2252884 = -385819662;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI55827403 = -325822155;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI17804 = -20056297;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI5463624 = -816174811;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI41259128 = -582823935;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI77722444 = -612646962;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI74285989 = -596024014;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI66286937 = -437837301;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI17841002 = -520086030;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI14903058 = -974225920;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI12964277 = -224371922;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI77889340 = -941338568;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI62500924 = -623995614;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI63350707 = -981461586;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI77646206 = -19300382;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI36690223 = -473407600;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI48314850 = -373967547;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI11306339 = -807293216;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI31507274 = -192398198;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI57826693 = -730748141;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI64842046 = -745977819;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI75019477 = -155947846;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI16371509 = -805955803;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI25286526 = -566151904;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI96188074 = -266017032;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI23909009 = -546494968;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI3357609 = -735202490;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI18271674 = -644066681;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI19143287 = 71583095;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI80596235 = -19677773;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI20153802 = -997799982;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI9128297 = -167643021;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI45126080 = -487137965;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI28076420 = -343876654;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI75571689 = -430687724;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI75188188 = -264026148;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI85096885 = -588522912;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI66758948 = -93700169;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI98149441 = 8697307;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI54227732 = -685262405;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI12360404 = -630986022;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI55892848 = -673989097;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI18297714 = -863570255;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI82248472 = -841148728;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI84737464 = -143906973;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI88597837 = -665606201;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI95713399 = -161982705;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI76864809 = -386221012;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI19169399 = 8092923;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI89518434 = -648100541;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI16769814 = 93774506;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI49881986 = 3534383;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI28385242 = -916019387;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI89094832 = -306760491;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI11292297 = -364105857;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI27233407 = -129871817;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI39455894 = -519866352;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI74731278 = -453904394;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI9275549 = -450157780;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI17350120 = 63671033;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI74364835 = -877444472;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI56014316 = -951957333;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI47143651 = -409420396;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI37244767 = -400408258;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI94749256 = -976425939;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI3835981 = 43271098;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI32763261 = -354200604;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI34424505 = -180118960;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI87779018 = -450773862;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI2458019 = -755274234;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI51593338 = -884884688;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI81555901 = -180267378;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI13156897 = -715990523;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI77279541 = -507135793;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI45466290 = 237881;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI8949199 = 28011277;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI56721763 = -292377592;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI34123037 = -964807075;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI40549061 = -322244932;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI7590238 = -600410831;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI28195609 = -284512263;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI26492800 = -248981479;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI99102274 = -552159605;    float BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI29624852 = -297909367;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI31950177 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI86646392;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI86646392 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI22179785;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI22179785 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI36138716;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI36138716 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI97151530;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI97151530 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI97701741;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI97701741 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI66487178;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI66487178 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI58214324;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI58214324 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI40215517;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI40215517 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI96815605;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI96815605 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI26208658;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI26208658 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI65084663;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI65084663 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI61188324;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI61188324 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI59892515;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI59892515 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI46921525;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI46921525 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI76134343;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI76134343 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI2252884;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI2252884 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI55827403;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI55827403 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI17804;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI17804 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI5463624;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI5463624 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI41259128;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI41259128 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI77722444;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI77722444 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI74285989;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI74285989 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI66286937;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI66286937 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI17841002;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI17841002 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI14903058;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI14903058 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI12964277;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI12964277 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI77889340;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI77889340 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI62500924;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI62500924 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI63350707;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI63350707 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI77646206;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI77646206 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI36690223;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI36690223 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI48314850;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI48314850 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI11306339;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI11306339 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI31507274;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI31507274 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI57826693;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI57826693 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI64842046;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI64842046 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI75019477;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI75019477 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI16371509;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI16371509 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI25286526;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI25286526 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI96188074;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI96188074 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI23909009;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI23909009 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI3357609;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI3357609 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI18271674;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI18271674 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI19143287;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI19143287 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI80596235;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI80596235 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI20153802;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI20153802 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI9128297;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI9128297 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI45126080;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI45126080 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI28076420;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI28076420 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI75571689;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI75571689 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI75188188;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI75188188 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI85096885;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI85096885 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI66758948;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI66758948 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI98149441;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI98149441 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI54227732;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI54227732 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI12360404;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI12360404 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI55892848;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI55892848 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI18297714;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI18297714 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI82248472;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI82248472 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI84737464;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI84737464 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI88597837;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI88597837 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI95713399;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI95713399 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI76864809;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI76864809 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI19169399;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI19169399 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI89518434;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI89518434 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI16769814;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI16769814 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI49881986;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI49881986 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI28385242;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI28385242 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI89094832;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI89094832 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI11292297;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI11292297 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI27233407;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI27233407 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI39455894;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI39455894 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI74731278;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI74731278 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI9275549;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI9275549 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI17350120;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI17350120 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI74364835;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI74364835 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI56014316;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI56014316 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI47143651;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI47143651 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI37244767;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI37244767 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI94749256;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI94749256 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI3835981;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI3835981 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI32763261;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI32763261 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI34424505;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI34424505 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI87779018;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI87779018 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI2458019;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI2458019 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI51593338;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI51593338 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI81555901;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI81555901 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI13156897;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI13156897 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI77279541;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI77279541 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI45466290;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI45466290 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI8949199;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI8949199 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI56721763;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI56721763 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI34123037;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI34123037 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI40549061;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI40549061 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI7590238;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI7590238 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI28195609;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI28195609 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI26492800;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI26492800 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI99102274;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI99102274 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI29624852;     BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI29624852 = BQdaqcVWHBpegXXKjChQOlTsluPLWHAByfCohRuSjUNFiSljI31950177;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void KonliwwJWLualeCYLyaLqWlxZOUCjWuMWGqbuSSsOcQkcADogBhtykooDpMTcuazQiEeoaesgiwOFAVZK15750888() {     long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc64210985 = -973557129;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc87868828 = -900626920;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc55456365 = -214685780;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc77646829 = -203891994;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc82269048 = -365108207;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc31798454 = -436254164;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc63979478 = -791386602;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc80969619 = -620127225;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc13566961 = -243985999;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc84323519 = -284074265;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc87598698 = -709712383;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc86238105 = -51350199;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc89850372 = -110240292;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc64088414 = -637965457;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc85582430 = -279865402;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc96210514 = -791371347;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc8114055 = -401754240;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc40448107 = -334715553;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc80385043 = -788747986;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc16655659 = -420930955;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc54219833 = -869886151;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc43456081 = -784316639;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc44340895 = -365644685;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc84865627 = -553805782;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc6496061 = -598134211;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc84415087 = -442246409;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc38086362 = -222429421;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc60630415 = -669902964;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc8184488 = -206053685;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc24718807 = 72644939;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc18473609 = -873949990;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc94864499 = -624654535;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc20384479 = -603085882;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc46856381 = -39968908;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc72140104 = -605818959;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc46288555 = -743114107;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc58048190 = -963109866;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc4288295 = -157514074;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc54146623 = -399539789;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc960099 = -797668160;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc11245773 = 36666578;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc57772936 = -489910446;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc49090960 = -147307479;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc87053852 = -777347141;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc95162135 = -725050427;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc68257523 = -818282963;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc52027908 = -927727735;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc63340512 = -997521759;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc11667331 = -915317;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc95879759 = -28900576;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc55075382 = -411381956;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc5266338 = -730418598;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc13958834 = -548581147;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc74138431 = -245825696;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc61531054 = -3406537;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc20754905 = -89240490;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc43527934 = -434982236;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc70590737 = -660879998;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc71150769 = -605757784;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc97853961 = -922861799;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc93712091 = -113824744;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc3349064 = -21483639;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc72785132 = -314073540;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc88848153 = -216630938;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc65849911 = -410124276;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc92734198 = 14942151;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc65853626 = -448264317;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc42993992 = 29728616;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc91948309 = 67853502;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc39293875 = -536751295;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc38162324 = -828261482;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc3825761 = -144240167;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc86301483 = -935175765;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc79424944 = -991079827;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc5409886 = -357597534;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc96446896 = -279975705;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc94365121 = -537009161;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc57287042 = -588297544;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc89703491 = -828755356;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc38238538 = -779851248;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc32387180 = -514518675;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc74745850 = -224907663;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc48963085 = -568987647;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc12304728 = -77153110;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc69643425 = -515973105;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc13207271 = -43531393;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc80905666 = 23926612;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc46246048 = -257260186;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc85325326 = 63437629;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc51385199 = -416578470;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc2760622 = -208131872;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc87457452 = -202229869;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc33137526 = -551756291;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc56292662 = -476677991;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc7248007 = -583843417;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc7896710 = -941849784;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc84987804 = -75836907;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc60242806 = -930676541;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc21203941 = -267222866;    long gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc2427938 = -973557129;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc64210985 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc87868828;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc87868828 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc55456365;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc55456365 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc77646829;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc77646829 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc82269048;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc82269048 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc31798454;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc31798454 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc63979478;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc63979478 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc80969619;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc80969619 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc13566961;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc13566961 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc84323519;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc84323519 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc87598698;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc87598698 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc86238105;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc86238105 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc89850372;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc89850372 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc64088414;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc64088414 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc85582430;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc85582430 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc96210514;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc96210514 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc8114055;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc8114055 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc40448107;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc40448107 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc80385043;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc80385043 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc16655659;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc16655659 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc54219833;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc54219833 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc43456081;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc43456081 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc44340895;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc44340895 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc84865627;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc84865627 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc6496061;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc6496061 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc84415087;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc84415087 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc38086362;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc38086362 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc60630415;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc60630415 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc8184488;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc8184488 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc24718807;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc24718807 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc18473609;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc18473609 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc94864499;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc94864499 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc20384479;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc20384479 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc46856381;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc46856381 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc72140104;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc72140104 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc46288555;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc46288555 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc58048190;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc58048190 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc4288295;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc4288295 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc54146623;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc54146623 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc960099;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc960099 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc11245773;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc11245773 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc57772936;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc57772936 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc49090960;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc49090960 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc87053852;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc87053852 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc95162135;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc95162135 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc68257523;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc68257523 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc52027908;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc52027908 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc63340512;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc63340512 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc11667331;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc11667331 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc95879759;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc95879759 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc55075382;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc55075382 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc5266338;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc5266338 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc13958834;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc13958834 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc74138431;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc74138431 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc61531054;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc61531054 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc20754905;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc20754905 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc43527934;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc43527934 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc70590737;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc70590737 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc71150769;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc71150769 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc97853961;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc97853961 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc93712091;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc93712091 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc3349064;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc3349064 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc72785132;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc72785132 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc88848153;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc88848153 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc65849911;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc65849911 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc92734198;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc92734198 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc65853626;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc65853626 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc42993992;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc42993992 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc91948309;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc91948309 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc39293875;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc39293875 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc38162324;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc38162324 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc3825761;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc3825761 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc86301483;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc86301483 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc79424944;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc79424944 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc5409886;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc5409886 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc96446896;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc96446896 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc94365121;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc94365121 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc57287042;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc57287042 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc89703491;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc89703491 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc38238538;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc38238538 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc32387180;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc32387180 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc74745850;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc74745850 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc48963085;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc48963085 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc12304728;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc12304728 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc69643425;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc69643425 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc13207271;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc13207271 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc80905666;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc80905666 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc46246048;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc46246048 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc85325326;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc85325326 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc51385199;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc51385199 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc2760622;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc2760622 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc87457452;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc87457452 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc33137526;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc33137526 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc56292662;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc56292662 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc7248007;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc7248007 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc7896710;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc7896710 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc84987804;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc84987804 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc60242806;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc60242806 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc21203941;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc21203941 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc2427938;     gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc2427938 = gVhoBNlRCXFGyQUBQUuwZAFXpMQoaiDUmJwYsLPUTMmDZlhSc64210985;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void yyUSMiECISVpKffOVAtaEnLKaFoHzHClsvCLOmyNquGcFeYcPYTLSYJLmJsGuwCBPjwOdUAiCfkJgjFvh45737117() {     long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq86604574 = -735436951;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq33644012 = -806574849;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq82912431 = -497211010;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq7573658 = -389758695;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq71603201 = -487809887;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq11876139 = -597429731;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq87587881 = -908837441;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq87389427 = -286546552;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq27989928 = -414535968;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq79447590 = -390008727;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq4819953 = -746864712;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq27849377 = -566617129;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq25005640 = -707299137;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq52858946 = -820521163;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq77145599 = 55369737;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq65901879 = -840243239;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq2084648 = -859419490;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq23423990 = -389386622;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq1238405 = -305867845;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq23098179 = -61540957;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq75433516 = -50907086;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq28975034 = -779091070;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq10755822 = -82767435;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq67715306 = -136878117;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq13593618 = -892999482;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq56144005 = -977934705;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq14954201 = -779216201;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq31138341 = -949390429;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq2398602 = 95759510;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq57786116 = -172219554;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq29351735 = -568172907;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq67681833 = -884904128;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq15970727 = -930485161;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq5962231 = -487414026;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq66011430 = -410261457;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq45153235 = -978743738;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq39546534 = -596404439;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq87996716 = -29876867;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq67141158 = -87904405;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq49272921 = -224460503;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq52147476 = -378567190;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq60583667 = -54027055;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq94357791 = -575707808;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq27266073 = -117746347;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq79127350 = -60934503;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq35929837 = -88467388;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq36627513 = 75142635;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq32555606 = -145295393;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq87468846 = -386868154;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq72918082 = -583895949;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq50685229 = -87903226;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq64570338 = -779092131;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq16824889 = -328438369;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq24174706 = 10413346;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq70303601 = -387211375;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq57629541 = -956345881;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq22888191 = -623807415;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq15197126 = -260332894;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq93980039 = -496759214;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq15459196 = -509875183;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq96921937 = -818213530;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq56449541 = -959447013;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq84990826 = -282306063;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq70203811 = -142316414;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq50095856 = -821835820;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq37138119 = -861960585;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq11878651 = -636131969;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq19043409 = -119885112;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq86847515 = -310259706;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq31992364 = 34113474;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq26355345 = -143838800;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq14087932 = -729542624;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq56282832 = -201482218;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq51965484 = 18592658;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq70950703 = -682973768;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq14849849 = -996880031;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq34617242 = -103383262;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq83489748 = -965021088;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq88587956 = 24056386;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq77663781 = -704532095;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq19516492 = -953077340;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq82398595 = -533920808;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq43669495 = -462522275;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq29480519 = -320344541;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq7100888 = 15683672;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq64781397 = -789080777;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq50856945 = -456465759;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq91796020 = -840898508;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq35658630 = -202651;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq8381890 = -453915576;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq22265044 = -254936323;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq24349409 = -236071546;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq94016676 = -533117654;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq51681962 = -578029222;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq52350983 = -406246974;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq95697935 = -419120177;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq75592840 = -771720993;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq24153981 = -333391394;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq77170217 = -295910527;    long MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq41989231 = -735436951;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq86604574 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq33644012;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq33644012 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq82912431;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq82912431 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq7573658;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq7573658 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq71603201;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq71603201 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq11876139;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq11876139 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq87587881;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq87587881 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq87389427;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq87389427 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq27989928;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq27989928 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq79447590;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq79447590 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq4819953;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq4819953 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq27849377;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq27849377 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq25005640;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq25005640 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq52858946;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq52858946 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq77145599;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq77145599 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq65901879;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq65901879 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq2084648;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq2084648 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq23423990;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq23423990 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq1238405;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq1238405 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq23098179;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq23098179 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq75433516;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq75433516 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq28975034;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq28975034 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq10755822;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq10755822 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq67715306;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq67715306 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq13593618;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq13593618 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq56144005;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq56144005 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq14954201;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq14954201 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq31138341;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq31138341 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq2398602;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq2398602 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq57786116;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq57786116 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq29351735;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq29351735 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq67681833;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq67681833 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq15970727;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq15970727 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq5962231;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq5962231 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq66011430;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq66011430 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq45153235;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq45153235 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq39546534;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq39546534 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq87996716;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq87996716 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq67141158;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq67141158 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq49272921;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq49272921 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq52147476;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq52147476 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq60583667;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq60583667 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq94357791;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq94357791 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq27266073;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq27266073 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq79127350;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq79127350 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq35929837;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq35929837 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq36627513;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq36627513 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq32555606;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq32555606 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq87468846;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq87468846 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq72918082;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq72918082 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq50685229;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq50685229 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq64570338;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq64570338 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq16824889;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq16824889 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq24174706;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq24174706 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq70303601;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq70303601 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq57629541;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq57629541 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq22888191;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq22888191 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq15197126;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq15197126 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq93980039;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq93980039 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq15459196;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq15459196 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq96921937;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq96921937 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq56449541;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq56449541 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq84990826;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq84990826 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq70203811;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq70203811 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq50095856;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq50095856 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq37138119;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq37138119 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq11878651;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq11878651 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq19043409;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq19043409 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq86847515;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq86847515 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq31992364;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq31992364 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq26355345;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq26355345 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq14087932;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq14087932 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq56282832;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq56282832 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq51965484;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq51965484 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq70950703;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq70950703 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq14849849;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq14849849 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq34617242;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq34617242 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq83489748;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq83489748 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq88587956;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq88587956 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq77663781;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq77663781 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq19516492;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq19516492 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq82398595;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq82398595 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq43669495;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq43669495 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq29480519;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq29480519 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq7100888;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq7100888 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq64781397;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq64781397 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq50856945;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq50856945 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq91796020;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq91796020 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq35658630;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq35658630 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq8381890;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq8381890 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq22265044;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq22265044 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq24349409;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq24349409 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq94016676;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq94016676 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq51681962;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq51681962 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq52350983;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq52350983 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq95697935;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq95697935 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq75592840;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq75592840 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq24153981;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq24153981 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq77170217;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq77170217 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq41989231;     MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq41989231 = MsbnrTUmrYFurSurFMViJzvXlImnzeDExYiEbNYQbclvunKMq86604574;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void ANQnUUaJCqjMKTijtuCHJTSLTCSDvkrkQCYERxsnYWCpnhuEfhYugMtgvEUSCXOSyzwIueSvCOimRcXlI27965879() {     long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh38340025 = -851691783;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh49317995 = -883474605;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh31712791 = -294570394;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh82649059 = -206027838;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh48327134 = -195460541;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh36759493 = -756456957;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh61364725 = -732049037;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh6180906 = -410326106;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh79288004 = -205384678;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh48244715 = -931654710;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh112652 = -708587183;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh38205755 = -501598630;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh12186433 = -316479398;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh11626665 = -447201710;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh31160857 = -522357973;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh77629151 = -551927195;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh58055172 = -127514180;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh9106913 = -851963117;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh60812254 = -833782028;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh42827753 = -871809106;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh21180869 = -133715254;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh31394487 = -952572077;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh12105336 = -791004882;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh60365556 = -8470068;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh85009476 = -838653919;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh13849420 = -223544484;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh53782836 = -141624919;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh29267566 = -232721115;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh77148674 = 45860608;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh27771200 = -634120350;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh66570543 = -901055374;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh80711563 = -108678320;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh14064036 = -412867047;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh99985943 = -148011191;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh64216558 = -627071100;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh26852845 = -114912566;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh89194760 = -140759183;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh88830328 = -113389231;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh36916000 = -533221800;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh74355337 = -843076170;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh20831563 = -497725977;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh20609067 = -42546677;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh50941024 = -476484340;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh20201892 = -43135024;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh51156558 = -661431586;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh37624284 = -512359328;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh22793708 = -387197819;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh11540070 = -549700089;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh76487299 = -350820883;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh61574342 = -442907329;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh91365120 = -896407382;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh96550090 = -140691692;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh40063635 = -72551557;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh94233946 = -704385966;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh6785010 = -416974576;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh6945538 = -899119706;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh37212660 = 7530277;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh71347235 = -186100327;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh97639582 = -367373919;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh34477714 = -971916058;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh82976657 = -514832039;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh32097159 = -399327923;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh29032231 = -356186715;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh51516804 = -571264329;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh81674171 = 69400664;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh19401088 = -499908864;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh24141719 = 11268417;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh12200490 = -68468207;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh47410106 = -820130610;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh4308012 = -307445407;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh88434391 = -311168012;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh69224844 = 85875050;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh72190912 = -218741318;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh86456917 = -990705859;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh21996190 = -274083129;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh571802 = 8831423;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh80453463 = -376087738;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh91903443 = -647869858;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh9208999 = -347038482;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh47385193 = -226294591;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh91055711 = -836346665;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh42242766 = -591924830;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh52780267 = -881900232;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh15574333 = -511232063;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh36406080 = -737712969;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh70020453 = -660363683;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh40647929 = 63873237;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh19830090 = -708481082;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh93200933 = -731036616;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh57271021 = -727951394;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh89640185 = -22442844;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh17847526 = -954658857;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh91190745 = -746015312;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh2438286 = -561305742;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh91378679 = -228244131;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh88734403 = 1601945;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh91576835 = -686359962;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh99424219 = -905220011;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh38527721 = -12535688;    long NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh31755470 = -851691783;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh38340025 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh49317995;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh49317995 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh31712791;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh31712791 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh82649059;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh82649059 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh48327134;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh48327134 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh36759493;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh36759493 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh61364725;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh61364725 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh6180906;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh6180906 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh79288004;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh79288004 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh48244715;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh48244715 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh112652;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh112652 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh38205755;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh38205755 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh12186433;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh12186433 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh11626665;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh11626665 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh31160857;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh31160857 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh77629151;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh77629151 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh58055172;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh58055172 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh9106913;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh9106913 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh60812254;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh60812254 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh42827753;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh42827753 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh21180869;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh21180869 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh31394487;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh31394487 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh12105336;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh12105336 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh60365556;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh60365556 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh85009476;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh85009476 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh13849420;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh13849420 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh53782836;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh53782836 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh29267566;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh29267566 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh77148674;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh77148674 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh27771200;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh27771200 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh66570543;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh66570543 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh80711563;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh80711563 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh14064036;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh14064036 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh99985943;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh99985943 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh64216558;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh64216558 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh26852845;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh26852845 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh89194760;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh89194760 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh88830328;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh88830328 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh36916000;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh36916000 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh74355337;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh74355337 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh20831563;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh20831563 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh20609067;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh20609067 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh50941024;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh50941024 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh20201892;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh20201892 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh51156558;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh51156558 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh37624284;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh37624284 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh22793708;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh22793708 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh11540070;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh11540070 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh76487299;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh76487299 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh61574342;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh61574342 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh91365120;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh91365120 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh96550090;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh96550090 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh40063635;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh40063635 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh94233946;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh94233946 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh6785010;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh6785010 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh6945538;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh6945538 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh37212660;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh37212660 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh71347235;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh71347235 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh97639582;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh97639582 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh34477714;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh34477714 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh82976657;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh82976657 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh32097159;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh32097159 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh29032231;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh29032231 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh51516804;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh51516804 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh81674171;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh81674171 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh19401088;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh19401088 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh24141719;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh24141719 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh12200490;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh12200490 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh47410106;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh47410106 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh4308012;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh4308012 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh88434391;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh88434391 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh69224844;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh69224844 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh72190912;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh72190912 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh86456917;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh86456917 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh21996190;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh21996190 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh571802;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh571802 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh80453463;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh80453463 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh91903443;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh91903443 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh9208999;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh9208999 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh47385193;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh47385193 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh91055711;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh91055711 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh42242766;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh42242766 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh52780267;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh52780267 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh15574333;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh15574333 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh36406080;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh36406080 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh70020453;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh70020453 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh40647929;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh40647929 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh19830090;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh19830090 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh93200933;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh93200933 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh57271021;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh57271021 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh89640185;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh89640185 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh17847526;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh17847526 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh91190745;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh91190745 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh2438286;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh2438286 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh91378679;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh91378679 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh88734403;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh88734403 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh91576835;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh91576835 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh99424219;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh99424219 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh38527721;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh38527721 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh31755470;     NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh31755470 = NXOLxEDIsIMdakBIkrolmJAPcsReGPShiJpzAGBuszCWFRbdh38340025;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void XDLEidHTRKIYZwXlrswMhNKaFDtsKAKQUHMtZkgaLmDMDZnrRdVfgEsJslyekPIRArESkdMGMWAvJyXgQ42692578() {     double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE26719558 = -296110399;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE59270631 = -156042489;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE5703252 = -833980545;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE54961988 = 13123030;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE130116 = -698755142;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE53572050 = 35929741;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE77209157 = -304321731;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE11392580 = 44695405;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE46596902 = -746309228;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE77822410 = -699295277;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE16532831 = -634360995;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE87609319 = -133292399;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE69094371 = -232437328;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE10505185 = -872699887;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE4271162 = -364498697;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE45569579 = -848015498;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE43789157 = -255090229;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE10030636 = -702111252;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE22902268 = -203747248;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE66551512 = -130462057;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE2777411 = -898648332;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE39075081 = -79673501;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE8531434 = -467403579;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE2024093 = -926513407;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE35253513 = -908224669;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE78939605 = -143168814;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE84809304 = 34855308;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE16264885 = -424972717;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE35794882 = -972062589;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE63732469 = -578626849;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE91287325 = 77747388;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE40315498 = -421416630;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE24481508 = -759112698;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE30295841 = -538058216;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE95734531 = -514396486;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE73333573 = -46363204;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE85677496 = -561613755;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE84709938 = -987645799;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE89472969 = -767558929;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE44562625 = -820673727;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE44594567 = -513330287;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE90199036 = -207656412;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE84670513 = -379611348;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE36583836 = -306517312;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE68123359 = -176648412;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE27117775 = -518169467;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE15521941 = -865580954;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE29863331 = -412284020;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE23039682 = -884394258;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE87277978 = -318185837;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE53254649 = -824756534;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE83801145 = -37274024;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE73311953 = -676385878;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE45019742 = -219001675;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE39915167 = -90385382;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE87644477 = -116436899;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE50739197 = -688638910;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE3679159 = -907467139;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE19708476 = -78652302;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE21190511 = -455586328;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE68762746 = -998925567;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE60944273 = -879349015;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE75597698 = 16757993;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE82864433 = -67682379;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE86535084 = -677042666;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE76217333 = -112944366;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE63127811 = -374179701;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE38798530 = -694379113;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE14770654 = -258303401;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE30937588 = -218135493;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE59892082 = -186401743;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE59079218 = -267444431;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE20557667 = -934552324;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE78339643 = -383073521;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE21956945 = -617131770;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE12578374 = -590991920;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE54404568 = -700062153;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE71947597 = -60886268;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE33900734 = -649864995;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE8135738 = -290055203;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE63417664 = -277587861;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE54945973 = -552860673;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE93225202 = -540578459;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE48516903 = -553876752;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE10477820 = -753870316;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE7486181 = -884978588;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE67003545 = -745030752;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE79461766 = -440111024;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE90380673 = -347672834;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE8090054 = -297959588;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE22594376 = -357724294;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE81998338 = -654146617;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE65001463 = -808993498;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE68282459 = -211972601;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE75799878 = -821748160;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE83650294 = -633981273;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE14601339 = -124414405;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE1806080 = -211928970;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE50048752 = -629474646;    double CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE91906026 = -296110399;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE26719558 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE59270631;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE59270631 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE5703252;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE5703252 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE54961988;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE54961988 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE130116;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE130116 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE53572050;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE53572050 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE77209157;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE77209157 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE11392580;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE11392580 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE46596902;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE46596902 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE77822410;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE77822410 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE16532831;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE16532831 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE87609319;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE87609319 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE69094371;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE69094371 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE10505185;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE10505185 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE4271162;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE4271162 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE45569579;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE45569579 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE43789157;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE43789157 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE10030636;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE10030636 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE22902268;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE22902268 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE66551512;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE66551512 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE2777411;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE2777411 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE39075081;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE39075081 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE8531434;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE8531434 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE2024093;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE2024093 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE35253513;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE35253513 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE78939605;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE78939605 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE84809304;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE84809304 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE16264885;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE16264885 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE35794882;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE35794882 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE63732469;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE63732469 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE91287325;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE91287325 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE40315498;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE40315498 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE24481508;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE24481508 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE30295841;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE30295841 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE95734531;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE95734531 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE73333573;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE73333573 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE85677496;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE85677496 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE84709938;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE84709938 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE89472969;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE89472969 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE44562625;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE44562625 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE44594567;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE44594567 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE90199036;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE90199036 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE84670513;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE84670513 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE36583836;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE36583836 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE68123359;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE68123359 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE27117775;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE27117775 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE15521941;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE15521941 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE29863331;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE29863331 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE23039682;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE23039682 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE87277978;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE87277978 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE53254649;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE53254649 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE83801145;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE83801145 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE73311953;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE73311953 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE45019742;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE45019742 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE39915167;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE39915167 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE87644477;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE87644477 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE50739197;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE50739197 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE3679159;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE3679159 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE19708476;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE19708476 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE21190511;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE21190511 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE68762746;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE68762746 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE60944273;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE60944273 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE75597698;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE75597698 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE82864433;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE82864433 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE86535084;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE86535084 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE76217333;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE76217333 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE63127811;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE63127811 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE38798530;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE38798530 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE14770654;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE14770654 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE30937588;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE30937588 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE59892082;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE59892082 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE59079218;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE59079218 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE20557667;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE20557667 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE78339643;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE78339643 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE21956945;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE21956945 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE12578374;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE12578374 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE54404568;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE54404568 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE71947597;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE71947597 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE33900734;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE33900734 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE8135738;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE8135738 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE63417664;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE63417664 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE54945973;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE54945973 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE93225202;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE93225202 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE48516903;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE48516903 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE10477820;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE10477820 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE7486181;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE7486181 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE67003545;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE67003545 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE79461766;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE79461766 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE90380673;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE90380673 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE8090054;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE8090054 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE22594376;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE22594376 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE81998338;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE81998338 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE65001463;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE65001463 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE68282459;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE68282459 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE75799878;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE75799878 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE83650294;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE83650294 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE14601339;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE14601339 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE1806080;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE1806080 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE50048752;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE50048752 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE91906026;     CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE91906026 = CbhfekQODAnlBqvemMLUVHnROTJDxzuOSOhoalVGoDgcYVLfE26719558;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void UpevbcVLQATjzhYGVpSfuVPjhJOTIIVppEGcSEaImxBzGgCdONYgVGByauNRNBDHedtvbwoQOKtwTQcAG24921339() {     double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI78455008 = -412365232;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI74944613 = -232942244;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI54503611 = -631339929;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI30037390 = -903146113;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI76854048 = -406405795;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI78455404 = -123097486;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI50986001 = -127533327;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI30184058 = -79084150;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI97894979 = -537157938;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI46619534 = -140941260;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI11825530 = -596083467;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI97965697 = -68273899;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI56275165 = -941617589;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI69272903 = -499380434;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI58286419 = -942226407;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI57296851 = -559699454;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI99759681 = -623184919;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI95713557 = -64687747;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI82476117 = -731661431;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI86281086 = -940730206;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI48524763 = -981456500;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI41494534 = -253154508;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI9880948 = -75641027;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI94674343 = -798105358;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI6669372 = -853879106;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI36645019 = -488778593;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI23637939 = -427553410;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI14394110 = -808303403;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI10544955 = 78038509;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI33717553 = 59472355;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI28506134 = -255135078;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI53345228 = -745190822;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI22574818 = -241494584;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI24319554 = -198655381;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI93939659 = -731206129;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI55033184 = -282532032;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI35325723 = -105968499;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI85543550 = 28841837;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI59247811 = -112876324;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI69645041 = -339289394;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI13278655 = -632489075;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI50224437 = -196176034;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI41253745 = -280387880;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI29519655 = -231905989;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI40152567 = -777145495;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI28812222 = -942061407;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI1688135 = -227921408;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI8847796 = -816688716;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI12058135 = -848346987;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI75934238 = -177197218;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI93934541 = -533260689;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI15780898 = -498873584;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI96550699 = -420499066;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI15078983 = -933800987;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI76396575 = -120148583;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI36960474 = -59210724;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI65063666 = -57301218;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI59829268 = -833234572;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI23368019 = 50732993;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI40209029 = -917627203;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI54817465 = -695544076;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI36591892 = -319229925;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI19639104 = -57122659;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI64177426 = -496630294;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI18113400 = -885806182;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI58480302 = -850892645;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI75390879 = -826779315;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI31955612 = -642962208;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI75333244 = -768174305;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI3253236 = -559694375;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI21971129 = -353730955;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI14216131 = -552026756;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI36465746 = -951811424;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI12831077 = -292372038;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI73002431 = -208241131;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI98300326 = -685280467;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI240790 = -972766629;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI80361293 = -843735038;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI54521776 = 79040137;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI77857149 = -911817699;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI34956884 = -160857186;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI14790143 = -610864695;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI2335975 = -959956416;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI34610717 = -744764274;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI39783011 = -407266956;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI12725237 = -756261495;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI56794529 = -224691756;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI7495835 = -307693598;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI47922978 = 21493201;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI56979185 = -571995406;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI89969517 = -125230815;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI75496455 = -272733928;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI62175532 = 78108843;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI19038783 = -195249121;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI14827576 = -643745318;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI76686763 = -213259150;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI30585334 = -39053375;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI77076318 = -783757587;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI11406256 = -346099808;    double lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI81672265 = -412365232;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI78455008 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI74944613;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI74944613 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI54503611;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI54503611 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI30037390;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI30037390 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI76854048;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI76854048 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI78455404;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI78455404 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI50986001;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI50986001 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI30184058;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI30184058 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI97894979;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI97894979 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI46619534;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI46619534 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI11825530;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI11825530 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI97965697;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI97965697 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI56275165;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI56275165 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI69272903;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI69272903 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI58286419;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI58286419 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI57296851;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI57296851 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI99759681;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI99759681 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI95713557;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI95713557 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI82476117;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI82476117 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI86281086;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI86281086 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI48524763;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI48524763 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI41494534;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI41494534 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI9880948;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI9880948 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI94674343;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI94674343 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI6669372;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI6669372 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI36645019;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI36645019 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI23637939;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI23637939 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI14394110;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI14394110 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI10544955;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI10544955 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI33717553;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI33717553 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI28506134;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI28506134 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI53345228;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI53345228 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI22574818;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI22574818 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI24319554;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI24319554 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI93939659;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI93939659 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI55033184;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI55033184 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI35325723;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI35325723 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI85543550;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI85543550 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI59247811;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI59247811 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI69645041;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI69645041 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI13278655;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI13278655 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI50224437;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI50224437 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI41253745;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI41253745 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI29519655;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI29519655 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI40152567;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI40152567 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI28812222;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI28812222 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI1688135;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI1688135 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI8847796;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI8847796 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI12058135;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI12058135 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI75934238;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI75934238 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI93934541;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI93934541 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI15780898;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI15780898 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI96550699;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI96550699 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI15078983;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI15078983 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI76396575;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI76396575 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI36960474;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI36960474 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI65063666;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI65063666 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI59829268;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI59829268 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI23368019;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI23368019 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI40209029;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI40209029 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI54817465;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI54817465 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI36591892;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI36591892 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI19639104;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI19639104 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI64177426;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI64177426 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI18113400;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI18113400 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI58480302;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI58480302 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI75390879;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI75390879 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI31955612;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI31955612 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI75333244;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI75333244 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI3253236;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI3253236 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI21971129;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI21971129 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI14216131;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI14216131 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI36465746;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI36465746 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI12831077;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI12831077 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI73002431;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI73002431 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI98300326;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI98300326 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI240790;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI240790 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI80361293;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI80361293 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI54521776;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI54521776 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI77857149;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI77857149 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI34956884;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI34956884 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI14790143;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI14790143 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI2335975;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI2335975 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI34610717;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI34610717 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI39783011;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI39783011 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI12725237;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI12725237 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI56794529;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI56794529 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI7495835;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI7495835 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI47922978;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI47922978 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI56979185;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI56979185 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI89969517;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI89969517 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI75496455;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI75496455 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI62175532;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI62175532 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI19038783;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI19038783 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI14827576;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI14827576 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI76686763;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI76686763 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI30585334;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI30585334 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI77076318;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI77076318 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI11406256;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI11406256 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI81672265;     lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI81672265 = lFukpUjCHCXrJukutUcnHCRYHRLNEfJRNKcwIXpJKsTtRZEPI78455008;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void hNlMHpkeLQvSioAnzvPCwNCQhkqKajnbiWINGShduULvicwUqacgylXTKVfWzaDbcTkLgnhgOlIbCGiEn54907569() {     double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp848598 = -174245053;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp20719798 = -138890173;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp81959677 = -913865160;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp59964218 = 10987186;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp66188200 = -529107475;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp58533089 = -284273052;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp74594403 = -244984167;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp36603866 = -845503477;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp12317946 = -707707908;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp41743605 = -246875721;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp29046784 = -633235796;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp39576969 = -583540830;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp91430431 = -438676434;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp58043435 = -681936139;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp49849587 = -606991268;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp26988217 = -608571345;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp93730274 = 19149831;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp78689441 = -119358816;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp3329479 = -248781289;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp92723606 = -581340208;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp69738446 = -162477435;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp27013487 = -247928938;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp76295874 = -892763777;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp77524022 = -381177693;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp13766929 = -48744377;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp8373937 = 75533111;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp505778 = -984340190;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp84902034 = 12209132;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp4759069 = -720148295;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp66784862 = -185392138;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp39384261 = 50642004;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp26162562 = 94559585;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp18161065 = -568893863;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp83425403 = -646100499;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp87810986 = -535648627;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp53897863 = -518161663;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp16824068 = -839263073;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp69251972 = -943520956;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp72242346 = -901240939;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp17957863 = -866081737;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp54180358 = 52277157;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp53035167 = -860292642;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp86520577 = -708788210;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp69731875 = -672305194;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp24117781 = -113029571;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp96484535 = -212245832;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp86287739 = -325051038;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp78062889 = 35537650;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp87859649 = -134299824;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp52972560 = -732192590;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp89544388 = -209781959;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp75084898 = -547547118;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp99416754 = -200356288;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp65115257 = -677561945;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp85169122 = -503953421;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp73835110 = -926316115;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp44423923 = -246126397;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp4435656 = -432687468;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp46197289 = -940268437;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp57814263 = -504640587;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp58027311 = -299932862;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp89692369 = -157193299;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp31844798 = -25355182;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp45533084 = -422315770;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp2359344 = -197517726;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp2884223 = -627795381;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp21415904 = 85353033;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp8005029 = -792575936;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp70232449 = -46287513;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp95951723 = 11170394;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp10164150 = -769308273;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp24478302 = -37329213;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp6447095 = -218117877;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp85371615 = -382699553;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp38543249 = -533617366;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp16703280 = -302184793;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp40492910 = -539140729;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp6563999 = -120458583;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp53406241 = -168148122;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp17282393 = -836498546;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp22086197 = -599415851;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp22442888 = -919877840;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp97042384 = -853491045;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp51786508 = -987955705;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp77240474 = -975610179;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp64299363 = -401810878;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp26745808 = -705084127;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp53045808 = -891331919;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp98256280 = -42147079;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp13975876 = -609332512;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp9473940 = -172035266;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp12388412 = -306575606;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp23054683 = 96747480;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp14428083 = -296600353;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp59930551 = -466148875;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp64487988 = -790529544;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp21190370 = -734937461;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp40987493 = -186472440;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp67372531 = -374787469;    double VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp21233559 = -174245053;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp848598 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp20719798;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp20719798 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp81959677;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp81959677 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp59964218;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp59964218 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp66188200;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp66188200 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp58533089;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp58533089 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp74594403;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp74594403 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp36603866;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp36603866 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp12317946;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp12317946 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp41743605;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp41743605 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp29046784;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp29046784 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp39576969;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp39576969 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp91430431;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp91430431 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp58043435;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp58043435 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp49849587;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp49849587 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp26988217;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp26988217 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp93730274;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp93730274 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp78689441;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp78689441 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp3329479;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp3329479 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp92723606;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp92723606 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp69738446;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp69738446 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp27013487;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp27013487 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp76295874;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp76295874 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp77524022;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp77524022 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp13766929;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp13766929 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp8373937;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp8373937 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp505778;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp505778 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp84902034;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp84902034 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp4759069;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp4759069 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp66784862;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp66784862 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp39384261;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp39384261 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp26162562;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp26162562 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp18161065;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp18161065 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp83425403;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp83425403 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp87810986;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp87810986 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp53897863;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp53897863 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp16824068;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp16824068 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp69251972;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp69251972 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp72242346;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp72242346 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp17957863;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp17957863 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp54180358;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp54180358 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp53035167;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp53035167 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp86520577;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp86520577 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp69731875;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp69731875 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp24117781;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp24117781 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp96484535;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp96484535 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp86287739;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp86287739 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp78062889;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp78062889 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp87859649;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp87859649 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp52972560;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp52972560 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp89544388;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp89544388 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp75084898;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp75084898 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp99416754;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp99416754 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp65115257;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp65115257 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp85169122;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp85169122 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp73835110;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp73835110 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp44423923;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp44423923 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp4435656;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp4435656 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp46197289;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp46197289 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp57814263;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp57814263 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp58027311;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp58027311 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp89692369;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp89692369 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp31844798;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp31844798 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp45533084;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp45533084 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp2359344;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp2359344 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp2884223;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp2884223 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp21415904;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp21415904 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp8005029;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp8005029 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp70232449;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp70232449 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp95951723;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp95951723 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp10164150;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp10164150 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp24478302;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp24478302 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp6447095;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp6447095 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp85371615;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp85371615 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp38543249;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp38543249 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp16703280;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp16703280 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp40492910;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp40492910 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp6563999;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp6563999 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp53406241;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp53406241 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp17282393;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp17282393 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp22086197;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp22086197 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp22442888;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp22442888 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp97042384;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp97042384 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp51786508;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp51786508 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp77240474;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp77240474 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp64299363;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp64299363 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp26745808;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp26745808 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp53045808;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp53045808 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp98256280;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp98256280 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp13975876;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp13975876 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp9473940;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp9473940 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp12388412;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp12388412 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp23054683;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp23054683 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp14428083;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp14428083 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp59930551;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp59930551 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp64487988;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp64487988 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp21190370;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp21190370 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp40987493;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp40987493 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp67372531;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp67372531 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp21233559;     VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp21233559 = VTAHGdxzoCknKeTQjSOslnCtvSNcvREnaieGDUWqmMslwtDHp848598;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void RmWoWDzKjVaoOoodnNwkAZBigvbUkRivWfvwQLZKvSjRdkKmsPjJmxIsloIbbeaRmfSjssNbomphqkEwk37136331() {     double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ52584048 = -290499886;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ36393781 = -215789929;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ30760038 = -711224544;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ35039620 = -905281956;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ42912133 = -236758129;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ83416443 = -443300278;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ48371247 = -68195763;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ55395344 = -969283031;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ63616023 = -498556618;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ10540729 = -788521704;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ24339483 = -594958267;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ49933347 = -518522331;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ78611225 = -47856695;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ16811154 = -308616686;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ3864845 = -84718978;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ38715489 = -320255301;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ49700799 = -348944859;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ64372363 = -581935311;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ62903327 = -776695473;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ12453181 = -291608357;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ15485799 = -245285603;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ29432941 = -421409946;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ77645389 = -501001224;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ70174272 = -252769644;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ85182787 = 5601186;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ66079350 = -270076668;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ39334412 = -346748908;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ83031259 = -371121554;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ79509141 = -770047197;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ36769946 = -647292934;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ76603069 = -282240462;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ39192292 = -229214607;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ16254375 = -51275749;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ77449115 = -306697665;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ86016114 = -752458270;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ35597473 = -754330491;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ66472294 = -383617817;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ70085584 = 72966679;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ42017189 = -246558334;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ43040279 = -384697403;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ22864445 = -66881630;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ13060568 = -848812264;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ43103809 = -609564741;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ62667694 = -597693872;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ96146989 = -713526654;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ98178982 = -636137772;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ72453934 = -787391492;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ57047354 = -368867046;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ76878102 = -98252553;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ41628820 = -591203971;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ30224281 = 81713885;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ7064651 = 90853322;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ22655500 = 55530524;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ35174498 = -292361257;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ21650532 = -533716622;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ23151107 = -869089940;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ58748392 = -714788705;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ60585765 = -358454901;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ49856833 = -810883143;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ76832782 = -966681462;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ44082031 = 3448629;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ65339988 = -697074209;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ75886202 = -99235834;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ26846077 = -851263685;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ33937659 = -406281242;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ85147191 = -265743661;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ33678973 = -367246582;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ1162110 = -741159031;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ30795040 = -556158417;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ68267371 = -330388487;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ72243195 = -936637485;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ79615214 = -321911539;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ22355175 = -235376977;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ19863049 = -291998070;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ89588735 = -124726727;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ2425232 = -396473339;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ86329131 = -811845205;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ14977695 = -903307353;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ74027283 = -539242990;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ87003804 = -358261042;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ93625416 = -482685176;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ82287058 = -977881862;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ6153157 = -172869001;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ37880322 = -78843227;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ6545666 = -629006819;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ69538419 = -273093785;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ16536792 = -184745131;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ81079876 = -758914493;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ55798584 = -772981044;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ62865007 = -883368330;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ76849081 = 60458214;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ5886529 = 74837084;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ20228752 = -116150178;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ65184406 = -279876873;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ98958248 = -288146033;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ57524457 = -369807422;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ37174365 = -649576430;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ16257732 = -758301057;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ28730035 = -91412630;    double pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ10999798 = -290499886;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ52584048 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ36393781;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ36393781 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ30760038;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ30760038 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ35039620;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ35039620 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ42912133;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ42912133 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ83416443;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ83416443 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ48371247;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ48371247 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ55395344;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ55395344 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ63616023;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ63616023 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ10540729;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ10540729 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ24339483;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ24339483 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ49933347;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ49933347 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ78611225;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ78611225 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ16811154;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ16811154 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ3864845;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ3864845 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ38715489;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ38715489 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ49700799;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ49700799 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ64372363;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ64372363 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ62903327;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ62903327 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ12453181;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ12453181 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ15485799;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ15485799 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ29432941;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ29432941 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ77645389;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ77645389 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ70174272;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ70174272 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ85182787;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ85182787 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ66079350;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ66079350 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ39334412;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ39334412 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ83031259;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ83031259 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ79509141;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ79509141 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ36769946;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ36769946 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ76603069;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ76603069 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ39192292;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ39192292 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ16254375;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ16254375 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ77449115;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ77449115 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ86016114;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ86016114 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ35597473;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ35597473 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ66472294;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ66472294 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ70085584;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ70085584 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ42017189;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ42017189 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ43040279;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ43040279 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ22864445;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ22864445 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ13060568;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ13060568 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ43103809;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ43103809 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ62667694;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ62667694 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ96146989;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ96146989 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ98178982;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ98178982 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ72453934;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ72453934 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ57047354;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ57047354 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ76878102;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ76878102 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ41628820;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ41628820 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ30224281;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ30224281 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ7064651;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ7064651 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ22655500;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ22655500 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ35174498;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ35174498 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ21650532;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ21650532 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ23151107;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ23151107 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ58748392;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ58748392 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ60585765;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ60585765 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ49856833;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ49856833 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ76832782;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ76832782 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ44082031;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ44082031 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ65339988;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ65339988 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ75886202;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ75886202 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ26846077;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ26846077 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ33937659;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ33937659 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ85147191;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ85147191 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ33678973;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ33678973 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ1162110;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ1162110 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ30795040;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ30795040 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ68267371;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ68267371 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ72243195;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ72243195 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ79615214;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ79615214 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ22355175;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ22355175 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ19863049;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ19863049 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ89588735;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ89588735 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ2425232;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ2425232 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ86329131;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ86329131 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ14977695;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ14977695 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ74027283;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ74027283 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ87003804;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ87003804 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ93625416;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ93625416 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ82287058;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ82287058 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ6153157;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ6153157 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ37880322;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ37880322 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ6545666;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ6545666 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ69538419;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ69538419 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ16536792;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ16536792 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ81079876;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ81079876 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ55798584;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ55798584 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ62865007;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ62865007 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ76849081;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ76849081 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ5886529;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ5886529 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ20228752;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ20228752 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ65184406;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ65184406 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ98958248;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ98958248 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ57524457;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ57524457 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ37174365;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ37174365 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ16257732;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ16257732 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ28730035;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ28730035 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ10999798;     pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ10999798 = pcUiYJZWDKbDxiQsReyRbuzBHVzHbBAjMqlCFiNWsMohmYqDZ52584048;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void vZSAdRjxZfIZMOpEIapuHshGLVJyaagdLLCZSZdOGwcYyvTGTMecVaBDrLoHHkWzyeOBLPlixaoLQIIPCDfOwEHkJzhHlVGVZcZT4097733() {     double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN42703885 = -221780228;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN58091162 = -633311224;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN27565949 = -805147619;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN93618055 = -911994609;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN64808970 = -646436892;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN99008279 = -35366198;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN11582022 = -510277702;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN77487957 = -309908087;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN70167874 = -220095326;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN11435913 = 4796900;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN20811908 = 37149503;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN98974531 = -833588828;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN48810271 = -381751030;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN9074228 = -651930622;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN47111325 = -532552772;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN37459778 = -353430822;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN49515739 = -429904670;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN8728609 = -321856225;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN44245988 = -761088175;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN51851192 = -451511118;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN83077625 = -760177069;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN5810789 = -164498465;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN47762204 = -266418987;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN21745478 = -581714542;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN60510664 = 35396389;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN1444393 = -54156331;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN31523329 = -407077614;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN41605160 = 60021400;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN53396586 = 21683440;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN60648896 = -197126699;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN13479151 = -996000240;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN23283063 = -21860788;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN10675839 = -553445125;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN1570598 = -174830555;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN3970687 = -662107856;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN31656670 = -37125647;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN78647230 = 912901;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN64360547 = -888355244;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN87863802 = -666701796;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN59425313 = -998836863;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN24419786 = -960686804;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN53402691 = -857097559;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN63204010 = -544120591;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN52561534 = -18741504;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN72129459 = -199296012;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN59045945 = -931806349;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN80575017 = -817154614;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN22817394 = 95715345;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN23455146 = -97955761;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN90954648 = -635225194;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN72849174 = -971223167;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN65385015 = -255719259;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN47556304 = -648376479;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN98331830 = -947836390;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN21020107 = -419216171;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN36893097 = 42718236;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN10328959 = -266892238;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN5820471 = -123433078;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN33107391 = -847390998;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN63364578 = -492280562;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN67484951 = -628288584;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN69976862 = -470299103;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN24091372 = -231591527;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN9518979 = 77031373;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN97956761 = 797140;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN97528844 = -940989709;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN88298692 = -180143704;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN47239674 = -106920476;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN5103541 = -989822767;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN15454656 = -395427125;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN58812548 = -254343723;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN85155191 = -541549427;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN20864806 = -655154429;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN84820675 = -762251313;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN27431406 = -490824314;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN29674934 = -903079510;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN42606778 = -620377874;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN95200669 = -147677483;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN49616019 = -282418530;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN1464720 = -32797263;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN20869376 = -237001717;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN8705935 = -402792960;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN18150014 = -842022840;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN62441937 = -343091366;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN87799721 = -225903532;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN48094136 = -640280982;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN75726759 = -373484309;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN12344008 = -605608736;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN80550490 = -755614385;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN67077590 = -604826092;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN21327712 = -770233410;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN72826759 = -875654022;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN31253157 = 59035754;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN24499225 = -74421234;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN91940362 = -270548279;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN54442924 = -390387702;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN29311320 = -525506032;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN53685031 = -521151964;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN54604772 = 80461356;    double hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN74600614 = -221780228;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN42703885 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN58091162;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN58091162 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN27565949;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN27565949 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN93618055;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN93618055 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN64808970;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN64808970 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN99008279;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN99008279 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN11582022;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN11582022 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN77487957;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN77487957 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN70167874;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN70167874 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN11435913;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN11435913 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN20811908;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN20811908 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN98974531;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN98974531 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN48810271;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN48810271 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN9074228;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN9074228 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN47111325;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN47111325 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN37459778;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN37459778 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN49515739;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN49515739 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN8728609;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN8728609 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN44245988;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN44245988 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN51851192;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN51851192 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN83077625;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN83077625 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN5810789;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN5810789 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN47762204;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN47762204 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN21745478;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN21745478 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN60510664;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN60510664 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN1444393;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN1444393 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN31523329;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN31523329 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN41605160;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN41605160 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN53396586;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN53396586 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN60648896;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN60648896 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN13479151;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN13479151 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN23283063;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN23283063 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN10675839;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN10675839 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN1570598;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN1570598 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN3970687;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN3970687 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN31656670;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN31656670 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN78647230;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN78647230 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN64360547;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN64360547 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN87863802;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN87863802 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN59425313;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN59425313 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN24419786;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN24419786 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN53402691;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN53402691 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN63204010;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN63204010 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN52561534;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN52561534 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN72129459;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN72129459 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN59045945;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN59045945 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN80575017;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN80575017 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN22817394;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN22817394 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN23455146;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN23455146 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN90954648;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN90954648 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN72849174;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN72849174 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN65385015;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN65385015 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN47556304;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN47556304 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN98331830;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN98331830 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN21020107;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN21020107 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN36893097;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN36893097 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN10328959;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN10328959 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN5820471;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN5820471 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN33107391;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN33107391 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN63364578;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN63364578 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN67484951;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN67484951 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN69976862;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN69976862 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN24091372;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN24091372 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN9518979;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN9518979 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN97956761;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN97956761 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN97528844;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN97528844 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN88298692;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN88298692 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN47239674;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN47239674 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN5103541;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN5103541 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN15454656;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN15454656 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN58812548;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN58812548 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN85155191;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN85155191 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN20864806;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN20864806 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN84820675;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN84820675 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN27431406;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN27431406 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN29674934;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN29674934 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN42606778;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN42606778 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN95200669;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN95200669 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN49616019;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN49616019 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN1464720;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN1464720 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN20869376;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN20869376 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN8705935;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN8705935 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN18150014;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN18150014 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN62441937;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN62441937 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN87799721;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN87799721 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN48094136;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN48094136 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN75726759;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN75726759 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN12344008;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN12344008 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN80550490;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN80550490 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN67077590;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN67077590 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN21327712;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN21327712 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN72826759;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN72826759 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN31253157;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN31253157 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN24499225;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN24499225 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN91940362;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN91940362 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN54442924;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN54442924 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN29311320;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN29311320 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN53685031;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN53685031 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN54604772;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN54604772 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN74600614;     hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN74600614 = hRuDavfvmpmjDZFEFHDuXdrMiexbTSlnipikIbnBYLxTMyDLPCQSZfvDZhVwxDbUDyAOqUveTBVLfXzjamLRCTNDtfLbFrDUkdQN42703885;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void ptfrSdokzDtcopBRVSETCbeYtJCdnaNBCQwGNNuHThSRCtscnMbybJyNOHxIaLxYqsZXsuEHXxzVJNVzRaqayPZsSjsGQmhIkubK31684161() {     int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp40687604 = -879300044;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp96334251 = -762790587;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp61916281 = -647287925;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp80456917 = -414778581;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp16855051 = 85205632;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp69991167 = -576948159;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp14100767 = -56597398;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp97007352 = -28876305;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp97865010 = -276634787;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp28238731 = -433093932;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp37126262 = -890826658;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp65184701 = -340955894;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp86656630 = -451814385;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp24021312 = -145833;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp11064300 = -113828952;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp33948776 = -863897453;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp1394878 = -161178787;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp70569996 = -320000938;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp86242868 = -47695191;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp15399857 = -157542157;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp45548506 = -70048004;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp59110648 = 78488088;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp90282130 = -508415461;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp23571618 = -662945464;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp76179344 = -881944635;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp15231889 = -773140722;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp13112891 = -304077744;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp49459241 = -542403057;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp95979077 = -253244479;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp64971293 = -594327223;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp21344403 = -728550263;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp44747436 = -812039894;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp13359821 = -902207379;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp14051391 = -495909345;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp87478473 = -973500821;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp3192058 = 94474316;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp75834934 = -863153583;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp21203396 = -612985852;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp65296718 = -553893671;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp37617140 = -913525760;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp21581020 = -510022838;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp10949766 = -784908610;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp87458541 = -31779611;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp44143110 = -159832976;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp35062010 = 55743346;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp62797604 = -590504808;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp94169731 = -35792639;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp68607573 = -713670119;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp61074189 = -85761928;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp56768899 = -247975055;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp18650741 = -112486784;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp91037151 = -470862661;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp36909701 = -252091744;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp59579311 = -332721240;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp86135655 = -360436967;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp81576956 = -857788133;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp6052121 = -154375126;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp38344664 = -984342461;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp4277573 = -532833946;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp1623162 = -141653647;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp56878276 = -172870415;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp64641525 = -514194342;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp1028275 = -775631827;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp32893718 = -682307564;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp6894328 = -704543670;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp92378825 = 21213235;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp51824881 = -438748515;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp72605239 = -955905041;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp36542839 = -26645012;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp7872243 = -108303269;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp58113841 = 99256130;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp80191482 = -548192935;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp5273279 = -766107267;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp48625729 = -134169431;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp93818837 = -647519320;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp34598740 = -285139394;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp71652106 = -889732301;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp46139020 = -248582485;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp88509607 = -618688811;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp13381740 = -191439828;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp21062158 = -637348084;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp44505318 = -590407625;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp88385051 = -356641129;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp39210178 = 94730576;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp46320553 = -381840440;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp30307252 = -157687602;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp7837735 = -459948150;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp53780509 = -469486139;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp27915736 = -35472378;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp5901518 = -15712689;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp97139936 = -751150558;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp37490271 = -878811122;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp16925823 = 19848093;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp63673556 = -312240025;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp80738863 = -640655346;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp56939494 = -995828497;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp9921491 = 90723216;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp54564824 = -349472047;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp37248782 = -455289307;    int UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp42683185 = -879300044;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp40687604 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp96334251;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp96334251 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp61916281;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp61916281 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp80456917;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp80456917 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp16855051;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp16855051 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp69991167;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp69991167 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp14100767;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp14100767 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp97007352;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp97007352 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp97865010;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp97865010 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp28238731;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp28238731 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp37126262;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp37126262 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp65184701;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp65184701 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp86656630;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp86656630 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp24021312;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp24021312 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp11064300;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp11064300 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp33948776;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp33948776 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp1394878;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp1394878 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp70569996;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp70569996 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp86242868;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp86242868 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp15399857;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp15399857 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp45548506;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp45548506 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp59110648;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp59110648 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp90282130;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp90282130 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp23571618;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp23571618 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp76179344;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp76179344 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp15231889;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp15231889 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp13112891;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp13112891 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp49459241;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp49459241 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp95979077;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp95979077 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp64971293;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp64971293 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp21344403;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp21344403 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp44747436;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp44747436 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp13359821;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp13359821 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp14051391;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp14051391 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp87478473;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp87478473 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp3192058;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp3192058 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp75834934;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp75834934 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp21203396;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp21203396 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp65296718;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp65296718 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp37617140;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp37617140 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp21581020;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp21581020 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp10949766;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp10949766 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp87458541;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp87458541 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp44143110;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp44143110 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp35062010;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp35062010 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp62797604;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp62797604 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp94169731;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp94169731 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp68607573;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp68607573 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp61074189;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp61074189 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp56768899;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp56768899 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp18650741;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp18650741 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp91037151;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp91037151 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp36909701;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp36909701 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp59579311;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp59579311 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp86135655;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp86135655 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp81576956;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp81576956 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp6052121;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp6052121 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp38344664;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp38344664 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp4277573;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp4277573 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp1623162;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp1623162 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp56878276;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp56878276 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp64641525;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp64641525 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp1028275;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp1028275 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp32893718;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp32893718 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp6894328;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp6894328 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp92378825;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp92378825 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp51824881;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp51824881 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp72605239;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp72605239 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp36542839;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp36542839 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp7872243;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp7872243 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp58113841;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp58113841 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp80191482;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp80191482 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp5273279;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp5273279 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp48625729;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp48625729 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp93818837;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp93818837 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp34598740;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp34598740 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp71652106;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp71652106 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp46139020;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp46139020 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp88509607;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp88509607 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp13381740;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp13381740 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp21062158;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp21062158 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp44505318;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp44505318 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp88385051;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp88385051 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp39210178;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp39210178 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp46320553;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp46320553 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp30307252;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp30307252 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp7837735;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp7837735 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp53780509;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp53780509 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp27915736;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp27915736 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp5901518;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp5901518 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp97139936;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp97139936 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp37490271;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp37490271 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp16925823;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp16925823 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp63673556;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp63673556 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp80738863;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp80738863 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp56939494;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp56939494 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp9921491;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp9921491 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp54564824;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp54564824 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp37248782;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp37248782 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp42683185;     UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp42683185 = UUksIUbdKdEBlyqAUWZbShEJCxrlQqlOlLfwqxSenwiperVSvgoNUArmPaqKcqNTspPZSuKXDvnWyPeKcZpjCXulUsgPGIBxiPxp40687604;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void YAdVIikHLIxJYdHpErxVdLnunoBLSLbxUIQsuBuidLPgKTCNRpgjrYeNMjiTgZpAgzoPMOvCxOsRwGkTlntdesGweDgLSaCEWOzL47393624() {     long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC37482973 = -961195048;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC22856925 = -498450990;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC59119597 = 58391153;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC34821537 = -234404049;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC54527402 = -927284404;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC2670440 = 17991655;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC69482997 = -100849964;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC26845137 = -922968388;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC52439013 = -478252852;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC97483446 = -578080613;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC80655172 = -536495244;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC61672 = -983470643;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC8936947 = -227941814;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC28920567 = -898483347;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC36702798 = -915473559;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC45048193 = -42169169;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC7272873 = -569753383;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC78431041 = -652537890;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC86488047 = -17805726;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC4828436 = 52238313;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC25091772 = -410301905;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC99719025 = -516537179;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC26690053 = 638210;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC92007470 = -149009864;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC85259141 = -262701471;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC90619823 = -460790333;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC48035983 = -796650815;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC26875416 = -710162266;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC7672873 = 92721938;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC96895852 = -281144902;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC77001252 = -318312619;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC49822552 = -482137176;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC58663862 = -85673953;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC20135845 = -640572956;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC44660888 = -595135257;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC82921265 = -883092091;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC31570629 = -215242968;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC69174489 = -627159178;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC7994868 = -109282797;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC20892073 = -189211157;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC91042776 = -526084213;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC41146228 = -227570880;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC4091875 = -449834068;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC32025849 = -345745470;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC95082452 = -287638416;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC44925532 = -62231036;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC34396467 = 36985347;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC80477057 = -885783620;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC23381164 = -599566261;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC20088073 = -128997047;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC30643080 = -897459466;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC52177086 = -5748512;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC72598849 = -348158434;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC61217218 = -825258119;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC22301852 = -882949943;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC37763948 = -344657870;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC96166872 = -399089201;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC67112126 = -792598983;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC49562395 = -971702579;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC63907578 = -366494072;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC54634456 = -185357530;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC42607581 = -390687699;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC19172265 = -915690326;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC55543161 = -97107950;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC20482195 = -159767995;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC30832621 = 45641931;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC41397809 = -797796691;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC88801102 = -587368858;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC84259679 = -203348091;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC53781532 = 67618531;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC13477564 = -826926201;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC38098384 = -942594205;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC70436174 = -443255093;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC65595975 = -828594570;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC13785660 = -421677474;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC83945543 = -82731026;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC95627151 = 33296888;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC94664203 = -653616321;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC96925017 = -861371449;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC40333609 = -100470435;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC56223356 = -397775680;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC67558926 = -910867196;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC3494253 = -10596005;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC87584800 = -778281015;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC66252773 = -383685437;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC24824166 = -212564107;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC77223703 = -33978743;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC97446643 = -260415834;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC97833992 = -757623014;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC6896940 = -150477388;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC86754393 = -384002891;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC64458503 = -422643986;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC19612094 = -655456600;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC44087289 = -742788726;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC66257617 = 96146373;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC48435196 = -35396515;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC21973964 = -311880554;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC48548713 = -252726118;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC11543655 = -85977475;    long enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC64249832 = -961195048;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC37482973 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC22856925;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC22856925 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC59119597;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC59119597 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC34821537;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC34821537 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC54527402;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC54527402 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC2670440;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC2670440 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC69482997;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC69482997 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC26845137;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC26845137 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC52439013;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC52439013 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC97483446;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC97483446 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC80655172;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC80655172 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC61672;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC61672 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC8936947;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC8936947 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC28920567;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC28920567 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC36702798;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC36702798 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC45048193;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC45048193 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC7272873;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC7272873 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC78431041;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC78431041 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC86488047;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC86488047 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC4828436;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC4828436 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC25091772;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC25091772 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC99719025;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC99719025 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC26690053;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC26690053 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC92007470;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC92007470 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC85259141;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC85259141 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC90619823;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC90619823 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC48035983;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC48035983 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC26875416;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC26875416 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC7672873;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC7672873 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC96895852;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC96895852 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC77001252;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC77001252 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC49822552;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC49822552 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC58663862;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC58663862 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC20135845;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC20135845 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC44660888;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC44660888 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC82921265;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC82921265 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC31570629;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC31570629 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC69174489;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC69174489 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC7994868;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC7994868 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC20892073;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC20892073 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC91042776;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC91042776 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC41146228;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC41146228 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC4091875;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC4091875 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC32025849;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC32025849 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC95082452;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC95082452 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC44925532;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC44925532 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC34396467;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC34396467 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC80477057;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC80477057 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC23381164;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC23381164 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC20088073;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC20088073 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC30643080;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC30643080 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC52177086;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC52177086 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC72598849;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC72598849 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC61217218;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC61217218 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC22301852;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC22301852 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC37763948;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC37763948 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC96166872;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC96166872 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC67112126;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC67112126 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC49562395;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC49562395 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC63907578;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC63907578 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC54634456;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC54634456 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC42607581;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC42607581 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC19172265;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC19172265 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC55543161;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC55543161 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC20482195;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC20482195 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC30832621;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC30832621 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC41397809;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC41397809 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC88801102;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC88801102 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC84259679;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC84259679 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC53781532;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC53781532 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC13477564;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC13477564 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC38098384;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC38098384 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC70436174;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC70436174 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC65595975;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC65595975 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC13785660;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC13785660 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC83945543;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC83945543 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC95627151;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC95627151 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC94664203;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC94664203 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC96925017;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC96925017 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC40333609;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC40333609 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC56223356;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC56223356 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC67558926;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC67558926 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC3494253;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC3494253 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC87584800;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC87584800 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC66252773;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC66252773 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC24824166;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC24824166 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC77223703;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC77223703 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC97446643;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC97446643 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC97833992;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC97833992 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC6896940;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC6896940 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC86754393;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC86754393 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC64458503;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC64458503 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC19612094;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC19612094 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC44087289;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC44087289 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC66257617;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC66257617 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC48435196;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC48435196 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC21973964;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC21973964 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC48548713;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC48548713 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC11543655;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC11543655 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC64249832;     enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC64249832 = enBDtelcfMQFzOisfMWosskJikjXMovhHZpymqjAGeQRmaMDsJYJsKSmCrUJuOPrRjyZZjFpcViNbSXIXgeDPloxGDvvVaGrPZAC37482973;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void pyszJyyxpqqPPzAxfxLfyhiJtNykSdiGVXwHpQAhaKUAFAgWfHtrwQdIQjGwzOfMIjusDsIPwdFoNhDshcELjqKEtorFKEhLfIsW73570842() {     float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD47074216 = -819344532;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD28292012 = -340552719;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD22105894 = -258596230;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD19507191 = -697420549;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD72450705 = -629057922;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD26451635 = -714842627;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD93251981 = -583969901;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD79580959 = -505312751;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD78307580 = -521159903;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD77987596 = -521944620;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD21190558 = -357641738;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD45451631 = -330100664;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD53581196 = -425364188;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD52677571 = -511506483;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD17889685 = -580034720;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD22725858 = -922138798;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD85123546 = -912680590;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD85349772 = -494677711;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD7251454 = -70412056;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD88800867 = -519188678;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD65304958 = -576172510;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD1930824 = 33567031;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD46540675 = -382875250;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD39475291 = -174038493;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD7569163 = -863859450;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD72465288 = 23437750;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD39042240 = -371730597;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD18539229 = -138269098;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD16966051 = -456423413;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD17436722 = -84701675;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD26975080 = -703851872;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD81130705 = -643221494;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD21835218 = -492078987;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD2872415 = -324968187;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD61366777 = -437830686;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD93632304 = -979572982;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD56158332 = -857761637;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD69973086 = -568058577;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD3498008 = -87500376;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD72622397 = -445165869;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD40152341 = -235703733;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD498655 = -377856360;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD15183637 = -52626588;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD25689278 = -437383541;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD9084308 = -363901036;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD40039637 = -439208698;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD10658534 = -765830787;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD58711137 = -850107865;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD51764604 = -281326777;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD289533 = -140518173;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD41073857 = -367483945;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD19672683 = 11398922;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD79600624 = -232147394;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD92179444 = -659366963;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD8265884 = -664558488;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD45143393 = -752911563;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD81751337 = -957677469;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD82630602 = 15442263;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD11938028 = -833561099;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD99985416 = -552495673;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD87409394 = -243112030;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD74712753 = -345700803;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD62614908 = 51110662;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD60870859 = -336458229;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD51012517 = -818092748;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD40059853 = -714420244;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD23616413 = -838021678;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD50708781 = -396002;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD91310794 = 26324202;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD24257381 = -600461738;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD66567525 = 35622838;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD15150460 = -244622014;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD81851764 = -307177335;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD34629056 = -625246187;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD48648527 = -183484945;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD64806303 = -98316151;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD86747187 = -913806382;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD20851398 = -945491710;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD30390984 = -810137458;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD67529526 = -324650753;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD61806754 = -210731463;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD80331103 = -521622732;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD66774625 = -856942321;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD16676519 = -215905241;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD76362864 = -717217730;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD7302397 = -615250794;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD1530081 = -311074101;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD29655774 = -832712025;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD94606530 = -660409699;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD16223385 = -684919123;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD11880968 = 78104486;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD73527729 = -773203900;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD58035059 = -734497478;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD3512592 = -535004703;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD85213002 = -102053840;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD65439588 = -890002930;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD37883747 = -328967023;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD54312777 = -716168359;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD74676760 = -619290794;    float GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD69024455 = -819344532;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD47074216 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD28292012;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD28292012 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD22105894;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD22105894 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD19507191;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD19507191 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD72450705;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD72450705 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD26451635;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD26451635 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD93251981;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD93251981 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD79580959;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD79580959 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD78307580;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD78307580 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD77987596;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD77987596 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD21190558;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD21190558 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD45451631;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD45451631 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD53581196;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD53581196 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD52677571;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD52677571 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD17889685;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD17889685 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD22725858;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD22725858 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD85123546;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD85123546 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD85349772;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD85349772 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD7251454;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD7251454 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD88800867;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD88800867 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD65304958;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD65304958 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD1930824;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD1930824 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD46540675;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD46540675 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD39475291;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD39475291 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD7569163;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD7569163 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD72465288;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD72465288 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD39042240;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD39042240 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD18539229;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD18539229 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD16966051;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD16966051 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD17436722;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD17436722 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD26975080;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD26975080 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD81130705;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD81130705 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD21835218;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD21835218 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD2872415;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD2872415 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD61366777;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD61366777 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD93632304;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD93632304 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD56158332;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD56158332 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD69973086;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD69973086 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD3498008;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD3498008 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD72622397;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD72622397 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD40152341;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD40152341 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD498655;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD498655 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD15183637;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD15183637 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD25689278;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD25689278 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD9084308;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD9084308 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD40039637;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD40039637 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD10658534;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD10658534 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD58711137;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD58711137 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD51764604;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD51764604 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD289533;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD289533 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD41073857;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD41073857 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD19672683;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD19672683 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD79600624;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD79600624 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD92179444;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD92179444 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD8265884;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD8265884 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD45143393;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD45143393 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD81751337;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD81751337 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD82630602;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD82630602 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD11938028;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD11938028 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD99985416;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD99985416 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD87409394;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD87409394 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD74712753;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD74712753 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD62614908;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD62614908 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD60870859;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD60870859 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD51012517;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD51012517 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD40059853;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD40059853 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD23616413;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD23616413 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD50708781;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD50708781 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD91310794;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD91310794 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD24257381;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD24257381 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD66567525;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD66567525 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD15150460;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD15150460 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD81851764;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD81851764 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD34629056;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD34629056 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD48648527;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD48648527 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD64806303;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD64806303 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD86747187;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD86747187 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD20851398;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD20851398 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD30390984;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD30390984 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD67529526;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD67529526 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD61806754;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD61806754 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD80331103;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD80331103 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD66774625;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD66774625 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD16676519;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD16676519 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD76362864;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD76362864 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD7302397;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD7302397 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD1530081;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD1530081 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD29655774;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD29655774 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD94606530;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD94606530 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD16223385;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD16223385 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD11880968;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD11880968 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD73527729;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD73527729 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD58035059;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD58035059 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD3512592;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD3512592 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD85213002;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD85213002 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD65439588;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD65439588 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD37883747;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD37883747 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD54312777;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD54312777 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD74676760;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD74676760 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD69024455;     GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD69024455 = GnTmzeuSLpuifNOXJTcRZpyPBCEswtJEphltISMEvrsEtIZwpKCLfawQpElwaCWSfpsycVOrHYViwtVscIClrxZPkUEEhPetUaYD47074216;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void jEutAzyRuBfiYuPiMKwmHuwmhKKQMMWJBTZxQwV49823387() {     int MLEPHMBzNkbaDHeYpH12672878 = -330682244;    int MLEPHMBzNkbaDHeYpH92590922 = -992078824;    int MLEPHMBzNkbaDHeYpH77245011 = -861722551;    int MLEPHMBzNkbaDHeYpH40616181 = -490435417;    int MLEPHMBzNkbaDHeYpH25440325 = -502350721;    int MLEPHMBzNkbaDHeYpH84584207 = -200279973;    int MLEPHMBzNkbaDHeYpH33878736 = 78156137;    int MLEPHMBzNkbaDHeYpH9582658 = -308769040;    int MLEPHMBzNkbaDHeYpH32054099 = -258264179;    int MLEPHMBzNkbaDHeYpH89815559 = -808495800;    int MLEPHMBzNkbaDHeYpH70502377 = -917734602;    int MLEPHMBzNkbaDHeYpH38389270 = -333636259;    int MLEPHMBzNkbaDHeYpH3649059 = 68562111;    int MLEPHMBzNkbaDHeYpH83311811 = -623879175;    int MLEPHMBzNkbaDHeYpH9269277 = 52949323;    int MLEPHMBzNkbaDHeYpH29718904 = -235457024;    int MLEPHMBzNkbaDHeYpH2346171 = -907608243;    int MLEPHMBzNkbaDHeYpH3966578 = -151170064;    int MLEPHMBzNkbaDHeYpH70341886 = -668774855;    int MLEPHMBzNkbaDHeYpH31739819 = 47448136;    int MLEPHMBzNkbaDHeYpH24334201 = -343441807;    int MLEPHMBzNkbaDHeYpH84349533 = -927642986;    int MLEPHMBzNkbaDHeYpH2456629 = -775116589;    int MLEPHMBzNkbaDHeYpH33295681 = -614415664;    int MLEPHMBzNkbaDHeYpH85824012 = -8915264;    int MLEPHMBzNkbaDHeYpH64869838 = -651870096;    int MLEPHMBzNkbaDHeYpH61335886 = -439614187;    int MLEPHMBzNkbaDHeYpH13210168 = -782694518;    int MLEPHMBzNkbaDHeYpH43183008 = -461427614;    int MLEPHMBzNkbaDHeYpH86946813 = -708590815;    int MLEPHMBzNkbaDHeYpH37091381 = -359526375;    int MLEPHMBzNkbaDHeYpH10840896 = -973081960;    int MLEPHMBzNkbaDHeYpH34011693 = -896829999;    int MLEPHMBzNkbaDHeYpH4347149 = -780215131;    int MLEPHMBzNkbaDHeYpH88291016 = -342724724;    int MLEPHMBzNkbaDHeYpH54652479 = -294595142;    int MLEPHMBzNkbaDHeYpH21010031 = -547088894;    int MLEPHMBzNkbaDHeYpH3097088 = -274602094;    int MLEPHMBzNkbaDHeYpH22391011 = -516083074;    int MLEPHMBzNkbaDHeYpH22314541 = -534765026;    int MLEPHMBzNkbaDHeYpH62958321 = -345638319;    int MLEPHMBzNkbaDHeYpH16254488 = -591512866;    int MLEPHMBzNkbaDHeYpH63504862 = -665939491;    int MLEPHMBzNkbaDHeYpH72900858 = -324066608;    int MLEPHMBzNkbaDHeYpH86488359 = -422620993;    int MLEPHMBzNkbaDHeYpH65224645 = -956663702;    int MLEPHMBzNkbaDHeYpH22017 = -120894416;    int MLEPHMBzNkbaDHeYpH7591472 = -844766727;    int MLEPHMBzNkbaDHeYpH940851 = -272923568;    int MLEPHMBzNkbaDHeYpH53949716 = -674814564;    int MLEPHMBzNkbaDHeYpH71950903 = -627204470;    int MLEPHMBzNkbaDHeYpH79589761 = -200426718;    int MLEPHMBzNkbaDHeYpH10866524 = -28851806;    int MLEPHMBzNkbaDHeYpH36212027 = -725504656;    int MLEPHMBzNkbaDHeYpH25489186 = -261462532;    int MLEPHMBzNkbaDHeYpH28323344 = -403039259;    int MLEPHMBzNkbaDHeYpH90134293 = -116962235;    int MLEPHMBzNkbaDHeYpH43949331 = -147306887;    int MLEPHMBzNkbaDHeYpH54792169 = -381520154;    int MLEPHMBzNkbaDHeYpH60570487 = -850480625;    int MLEPHMBzNkbaDHeYpH23248321 = -760665786;    int MLEPHMBzNkbaDHeYpH20668568 = -139149346;    int MLEPHMBzNkbaDHeYpH66399649 = -847341427;    int MLEPHMBzNkbaDHeYpH45107286 = -549673365;    int MLEPHMBzNkbaDHeYpH52724178 = -348969426;    int MLEPHMBzNkbaDHeYpH59661481 = -944652643;    int MLEPHMBzNkbaDHeYpH4377577 = -436806260;    int MLEPHMBzNkbaDHeYpH99301909 = -151222758;    int MLEPHMBzNkbaDHeYpH95020794 = -181154451;    int MLEPHMBzNkbaDHeYpH54616798 = -652455535;    int MLEPHMBzNkbaDHeYpH8708873 = -688368130;    int MLEPHMBzNkbaDHeYpH99249082 = -533006149;    int MLEPHMBzNkbaDHeYpH81575567 = -635086991;    int MLEPHMBzNkbaDHeYpH48027345 = -34009829;    int MLEPHMBzNkbaDHeYpH68781497 = -606913546;    int MLEPHMBzNkbaDHeYpH8079714 = -751928941;    int MLEPHMBzNkbaDHeYpH20844671 = -161703496;    int MLEPHMBzNkbaDHeYpH29555771 = -351049981;    int MLEPHMBzNkbaDHeYpH46807321 = -91794672;    int MLEPHMBzNkbaDHeYpH20599367 = -52251563;    int MLEPHMBzNkbaDHeYpH64847821 = -430975681;    int MLEPHMBzNkbaDHeYpH53744414 = -594847461;    int MLEPHMBzNkbaDHeYpH12269318 = -409770951;    int MLEPHMBzNkbaDHeYpH89233291 = -786613050;    int MLEPHMBzNkbaDHeYpH14995910 = 18613655;    int MLEPHMBzNkbaDHeYpH57501620 = -59099657;    int MLEPHMBzNkbaDHeYpH99974372 = -844230155;    int MLEPHMBzNkbaDHeYpH97799666 = -71325344;    int MLEPHMBzNkbaDHeYpH78857963 = -418752600;    int MLEPHMBzNkbaDHeYpH59967673 = -939685466;    int MLEPHMBzNkbaDHeYpH64518185 = -77632907;    int MLEPHMBzNkbaDHeYpH77060699 = -299782007;    int MLEPHMBzNkbaDHeYpH48304918 = -893081941;    int MLEPHMBzNkbaDHeYpH61820523 = -665602449;    int MLEPHMBzNkbaDHeYpH99066219 = -774099240;    int MLEPHMBzNkbaDHeYpH42289753 = -106488974;    int MLEPHMBzNkbaDHeYpH49854838 = -744171440;    int MLEPHMBzNkbaDHeYpH18397577 = -16266127;    int MLEPHMBzNkbaDHeYpH20176680 = -975097183;    int MLEPHMBzNkbaDHeYpH26826879 = -330682244;     MLEPHMBzNkbaDHeYpH12672878 = MLEPHMBzNkbaDHeYpH92590922;     MLEPHMBzNkbaDHeYpH92590922 = MLEPHMBzNkbaDHeYpH77245011;     MLEPHMBzNkbaDHeYpH77245011 = MLEPHMBzNkbaDHeYpH40616181;     MLEPHMBzNkbaDHeYpH40616181 = MLEPHMBzNkbaDHeYpH25440325;     MLEPHMBzNkbaDHeYpH25440325 = MLEPHMBzNkbaDHeYpH84584207;     MLEPHMBzNkbaDHeYpH84584207 = MLEPHMBzNkbaDHeYpH33878736;     MLEPHMBzNkbaDHeYpH33878736 = MLEPHMBzNkbaDHeYpH9582658;     MLEPHMBzNkbaDHeYpH9582658 = MLEPHMBzNkbaDHeYpH32054099;     MLEPHMBzNkbaDHeYpH32054099 = MLEPHMBzNkbaDHeYpH89815559;     MLEPHMBzNkbaDHeYpH89815559 = MLEPHMBzNkbaDHeYpH70502377;     MLEPHMBzNkbaDHeYpH70502377 = MLEPHMBzNkbaDHeYpH38389270;     MLEPHMBzNkbaDHeYpH38389270 = MLEPHMBzNkbaDHeYpH3649059;     MLEPHMBzNkbaDHeYpH3649059 = MLEPHMBzNkbaDHeYpH83311811;     MLEPHMBzNkbaDHeYpH83311811 = MLEPHMBzNkbaDHeYpH9269277;     MLEPHMBzNkbaDHeYpH9269277 = MLEPHMBzNkbaDHeYpH29718904;     MLEPHMBzNkbaDHeYpH29718904 = MLEPHMBzNkbaDHeYpH2346171;     MLEPHMBzNkbaDHeYpH2346171 = MLEPHMBzNkbaDHeYpH3966578;     MLEPHMBzNkbaDHeYpH3966578 = MLEPHMBzNkbaDHeYpH70341886;     MLEPHMBzNkbaDHeYpH70341886 = MLEPHMBzNkbaDHeYpH31739819;     MLEPHMBzNkbaDHeYpH31739819 = MLEPHMBzNkbaDHeYpH24334201;     MLEPHMBzNkbaDHeYpH24334201 = MLEPHMBzNkbaDHeYpH84349533;     MLEPHMBzNkbaDHeYpH84349533 = MLEPHMBzNkbaDHeYpH2456629;     MLEPHMBzNkbaDHeYpH2456629 = MLEPHMBzNkbaDHeYpH33295681;     MLEPHMBzNkbaDHeYpH33295681 = MLEPHMBzNkbaDHeYpH85824012;     MLEPHMBzNkbaDHeYpH85824012 = MLEPHMBzNkbaDHeYpH64869838;     MLEPHMBzNkbaDHeYpH64869838 = MLEPHMBzNkbaDHeYpH61335886;     MLEPHMBzNkbaDHeYpH61335886 = MLEPHMBzNkbaDHeYpH13210168;     MLEPHMBzNkbaDHeYpH13210168 = MLEPHMBzNkbaDHeYpH43183008;     MLEPHMBzNkbaDHeYpH43183008 = MLEPHMBzNkbaDHeYpH86946813;     MLEPHMBzNkbaDHeYpH86946813 = MLEPHMBzNkbaDHeYpH37091381;     MLEPHMBzNkbaDHeYpH37091381 = MLEPHMBzNkbaDHeYpH10840896;     MLEPHMBzNkbaDHeYpH10840896 = MLEPHMBzNkbaDHeYpH34011693;     MLEPHMBzNkbaDHeYpH34011693 = MLEPHMBzNkbaDHeYpH4347149;     MLEPHMBzNkbaDHeYpH4347149 = MLEPHMBzNkbaDHeYpH88291016;     MLEPHMBzNkbaDHeYpH88291016 = MLEPHMBzNkbaDHeYpH54652479;     MLEPHMBzNkbaDHeYpH54652479 = MLEPHMBzNkbaDHeYpH21010031;     MLEPHMBzNkbaDHeYpH21010031 = MLEPHMBzNkbaDHeYpH3097088;     MLEPHMBzNkbaDHeYpH3097088 = MLEPHMBzNkbaDHeYpH22391011;     MLEPHMBzNkbaDHeYpH22391011 = MLEPHMBzNkbaDHeYpH22314541;     MLEPHMBzNkbaDHeYpH22314541 = MLEPHMBzNkbaDHeYpH62958321;     MLEPHMBzNkbaDHeYpH62958321 = MLEPHMBzNkbaDHeYpH16254488;     MLEPHMBzNkbaDHeYpH16254488 = MLEPHMBzNkbaDHeYpH63504862;     MLEPHMBzNkbaDHeYpH63504862 = MLEPHMBzNkbaDHeYpH72900858;     MLEPHMBzNkbaDHeYpH72900858 = MLEPHMBzNkbaDHeYpH86488359;     MLEPHMBzNkbaDHeYpH86488359 = MLEPHMBzNkbaDHeYpH65224645;     MLEPHMBzNkbaDHeYpH65224645 = MLEPHMBzNkbaDHeYpH22017;     MLEPHMBzNkbaDHeYpH22017 = MLEPHMBzNkbaDHeYpH7591472;     MLEPHMBzNkbaDHeYpH7591472 = MLEPHMBzNkbaDHeYpH940851;     MLEPHMBzNkbaDHeYpH940851 = MLEPHMBzNkbaDHeYpH53949716;     MLEPHMBzNkbaDHeYpH53949716 = MLEPHMBzNkbaDHeYpH71950903;     MLEPHMBzNkbaDHeYpH71950903 = MLEPHMBzNkbaDHeYpH79589761;     MLEPHMBzNkbaDHeYpH79589761 = MLEPHMBzNkbaDHeYpH10866524;     MLEPHMBzNkbaDHeYpH10866524 = MLEPHMBzNkbaDHeYpH36212027;     MLEPHMBzNkbaDHeYpH36212027 = MLEPHMBzNkbaDHeYpH25489186;     MLEPHMBzNkbaDHeYpH25489186 = MLEPHMBzNkbaDHeYpH28323344;     MLEPHMBzNkbaDHeYpH28323344 = MLEPHMBzNkbaDHeYpH90134293;     MLEPHMBzNkbaDHeYpH90134293 = MLEPHMBzNkbaDHeYpH43949331;     MLEPHMBzNkbaDHeYpH43949331 = MLEPHMBzNkbaDHeYpH54792169;     MLEPHMBzNkbaDHeYpH54792169 = MLEPHMBzNkbaDHeYpH60570487;     MLEPHMBzNkbaDHeYpH60570487 = MLEPHMBzNkbaDHeYpH23248321;     MLEPHMBzNkbaDHeYpH23248321 = MLEPHMBzNkbaDHeYpH20668568;     MLEPHMBzNkbaDHeYpH20668568 = MLEPHMBzNkbaDHeYpH66399649;     MLEPHMBzNkbaDHeYpH66399649 = MLEPHMBzNkbaDHeYpH45107286;     MLEPHMBzNkbaDHeYpH45107286 = MLEPHMBzNkbaDHeYpH52724178;     MLEPHMBzNkbaDHeYpH52724178 = MLEPHMBzNkbaDHeYpH59661481;     MLEPHMBzNkbaDHeYpH59661481 = MLEPHMBzNkbaDHeYpH4377577;     MLEPHMBzNkbaDHeYpH4377577 = MLEPHMBzNkbaDHeYpH99301909;     MLEPHMBzNkbaDHeYpH99301909 = MLEPHMBzNkbaDHeYpH95020794;     MLEPHMBzNkbaDHeYpH95020794 = MLEPHMBzNkbaDHeYpH54616798;     MLEPHMBzNkbaDHeYpH54616798 = MLEPHMBzNkbaDHeYpH8708873;     MLEPHMBzNkbaDHeYpH8708873 = MLEPHMBzNkbaDHeYpH99249082;     MLEPHMBzNkbaDHeYpH99249082 = MLEPHMBzNkbaDHeYpH81575567;     MLEPHMBzNkbaDHeYpH81575567 = MLEPHMBzNkbaDHeYpH48027345;     MLEPHMBzNkbaDHeYpH48027345 = MLEPHMBzNkbaDHeYpH68781497;     MLEPHMBzNkbaDHeYpH68781497 = MLEPHMBzNkbaDHeYpH8079714;     MLEPHMBzNkbaDHeYpH8079714 = MLEPHMBzNkbaDHeYpH20844671;     MLEPHMBzNkbaDHeYpH20844671 = MLEPHMBzNkbaDHeYpH29555771;     MLEPHMBzNkbaDHeYpH29555771 = MLEPHMBzNkbaDHeYpH46807321;     MLEPHMBzNkbaDHeYpH46807321 = MLEPHMBzNkbaDHeYpH20599367;     MLEPHMBzNkbaDHeYpH20599367 = MLEPHMBzNkbaDHeYpH64847821;     MLEPHMBzNkbaDHeYpH64847821 = MLEPHMBzNkbaDHeYpH53744414;     MLEPHMBzNkbaDHeYpH53744414 = MLEPHMBzNkbaDHeYpH12269318;     MLEPHMBzNkbaDHeYpH12269318 = MLEPHMBzNkbaDHeYpH89233291;     MLEPHMBzNkbaDHeYpH89233291 = MLEPHMBzNkbaDHeYpH14995910;     MLEPHMBzNkbaDHeYpH14995910 = MLEPHMBzNkbaDHeYpH57501620;     MLEPHMBzNkbaDHeYpH57501620 = MLEPHMBzNkbaDHeYpH99974372;     MLEPHMBzNkbaDHeYpH99974372 = MLEPHMBzNkbaDHeYpH97799666;     MLEPHMBzNkbaDHeYpH97799666 = MLEPHMBzNkbaDHeYpH78857963;     MLEPHMBzNkbaDHeYpH78857963 = MLEPHMBzNkbaDHeYpH59967673;     MLEPHMBzNkbaDHeYpH59967673 = MLEPHMBzNkbaDHeYpH64518185;     MLEPHMBzNkbaDHeYpH64518185 = MLEPHMBzNkbaDHeYpH77060699;     MLEPHMBzNkbaDHeYpH77060699 = MLEPHMBzNkbaDHeYpH48304918;     MLEPHMBzNkbaDHeYpH48304918 = MLEPHMBzNkbaDHeYpH61820523;     MLEPHMBzNkbaDHeYpH61820523 = MLEPHMBzNkbaDHeYpH99066219;     MLEPHMBzNkbaDHeYpH99066219 = MLEPHMBzNkbaDHeYpH42289753;     MLEPHMBzNkbaDHeYpH42289753 = MLEPHMBzNkbaDHeYpH49854838;     MLEPHMBzNkbaDHeYpH49854838 = MLEPHMBzNkbaDHeYpH18397577;     MLEPHMBzNkbaDHeYpH18397577 = MLEPHMBzNkbaDHeYpH20176680;     MLEPHMBzNkbaDHeYpH20176680 = MLEPHMBzNkbaDHeYpH26826879;     MLEPHMBzNkbaDHeYpH26826879 = MLEPHMBzNkbaDHeYpH12672878;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void QFWicRhbsWVJXCqOvfoepRcBKgXUuIdzBRGjvUa24418469() {     float ydsobntENApwGdGDyd83600521 = -904449832;    float ydsobntENApwGdGDyd11276605 = -689289349;    float ydsobntENApwGdGDyd48147 = -807363780;    float ydsobntENApwGdGDyd7443100 = -951926315;    float ydsobntENApwGdGDyd24750711 = -11015430;    float ydsobntENApwGdGDyd4821803 = -75826546;    float ydsobntENApwGdGDyd2372545 = -604490631;    float ydsobntENApwGdGDyd30024703 = -40971345;    float ydsobntENApwGdGDyd10979064 = -14457888;    float ydsobntENApwGdGDyd24661713 = -132659489;    float ydsobntENApwGdGDyd16384939 = -582541953;    float ydsobntENApwGdGDyd18088052 = -458660258;    float ydsobntENApwGdGDyd32338979 = -452975187;    float ydsobntENApwGdGDyd58827208 = -58876416;    float ydsobntENApwGdGDyd57900146 = 90168571;    float ydsobntENApwGdGDyd34954685 = -657886762;    float ydsobntENApwGdGDyd30238903 = -32135494;    float ydsobntENApwGdGDyd18986162 = -252418768;    float ydsobntENApwGdGDyd90800141 = -374928297;    float ydsobntENApwGdGDyd11303612 = -987637319;    float ydsobntENApwGdGDyd31003791 = -92291624;    float ydsobntENApwGdGDyd23748185 = -885927749;    float ydsobntENApwGdGDyd88189793 = 88055806;    float ydsobntENApwGdGDyd55406408 = -714684089;    float ydsobntENApwGdGDyd9195881 = 33155119;    float ydsobntENApwGdGDyd11405066 = -166714817;    float ydsobntENApwGdGDyd26844662 = -700982899;    float ydsobntENApwGdGDyd41561731 = -208788384;    float ydsobntENApwGdGDyd17501767 = -90511746;    float ydsobntENApwGdGDyd33878830 = -164458096;    float ydsobntENApwGdGDyd24138827 = -882847497;    float ydsobntENApwGdGDyd9401147 = 68707854;    float ydsobntENApwGdGDyd30269080 = -339105630;    float ydsobntENApwGdGDyd63419746 = -544580159;    float ydsobntENApwGdGDyd96370867 = -955954338;    float ydsobntENApwGdGDyd93531881 = -54077134;    float ydsobntENApwGdGDyd51921612 = -677000907;    float ydsobntENApwGdGDyd651375 = -247019238;    float ydsobntENApwGdGDyd30201739 = -398813502;    float ydsobntENApwGdGDyd93048265 = -601142588;    float ydsobntENApwGdGDyd48078035 = -302120300;    float ydsobntENApwGdGDyd16438250 = -589915324;    float ydsobntENApwGdGDyd1846580 = -33605682;    float ydsobntENApwGdGDyd14315687 = 2715237;    float ydsobntENApwGdGDyd60494198 = 84245787;    float ydsobntENApwGdGDyd96505350 = -766443961;    float ydsobntENApwGdGDyd97165655 = -366946204;    float ydsobntENApwGdGDyd79968724 = -814677880;    float ydsobntENApwGdGDyd68738599 = -804751536;    float ydsobntENApwGdGDyd72940760 = -76330866;    float ydsobntENApwGdGDyd13603297 = 92074926;    float ydsobntENApwGdGDyd24739820 = -604512788;    float ydsobntENApwGdGDyd84936298 = -252861901;    float ydsobntENApwGdGDyd52820314 = -860641878;    float ydsobntENApwGdGDyd93414678 = -219093907;    float ydsobntENApwGdGDyd59852337 = 81477917;    float ydsobntENApwGdGDyd23086811 = -677345155;    float ydsobntENApwGdGDyd44641739 = 7320308;    float ydsobntENApwGdGDyd98247219 = -885081434;    float ydsobntENApwGdGDyd13345645 = -844300613;    float ydsobntENApwGdGDyd77977141 = -374843647;    float ydsobntENApwGdGDyd60810814 = -295702247;    float ydsobntENApwGdGDyd12522937 = -950459599;    float ydsobntENApwGdGDyd77100233 = -849999793;    float ydsobntENApwGdGDyd522887 = -249811993;    float ydsobntENApwGdGDyd6983792 = -551249807;    float ydsobntENApwGdGDyd87818971 = -19554628;    float ydsobntENApwGdGDyd68919232 = -908395028;    float ydsobntENApwGdGDyd62456341 = -102922079;    float ydsobntENApwGdGDyd64368264 = -855754295;    float ydsobntENApwGdGDyd83033072 = -980885855;    float ydsobntENApwGdGDyd29587528 = -785116256;    float ydsobntENApwGdGDyd88784422 = -853605267;    float ydsobntENApwGdGDyd97751875 = -773785709;    float ydsobntENApwGdGDyd63225576 = -585517020;    float ydsobntENApwGdGDyd14565541 = -502376300;    float ydsobntENApwGdGDyd21901605 = -752322068;    float ydsobntENApwGdGDyd73874107 = -914659432;    float ydsobntENApwGdGDyd94912210 = -698929876;    float ydsobntENApwGdGDyd12690530 = -200400921;    float ydsobntENApwGdGDyd14239411 = -799768614;    float ydsobntENApwGdGDyd46875938 = -886305020;    float ydsobntENApwGdGDyd72823131 = -404036849;    float ydsobntENApwGdGDyd44561006 = 85819120;    float ydsobntENApwGdGDyd20275534 = -156533022;    float ydsobntENApwGdGDyd99399006 = -178334709;    float ydsobntENApwGdGDyd24464849 = -678430246;    float ydsobntENApwGdGDyd77448766 = -478463752;    float ydsobntENApwGdGDyd70005068 = -225486253;    float ydsobntENApwGdGDyd36518531 = -937432256;    float ydsobntENApwGdGDyd70445071 = -376731980;    float ydsobntENApwGdGDyd7279874 = -584321215;    float ydsobntENApwGdGDyd2404156 = -361937804;    float ydsobntENApwGdGDyd16856094 = -554512890;    float ydsobntENApwGdGDyd15071125 = -126298942;    float ydsobntENApwGdGDyd87267221 = 93581947;    float ydsobntENApwGdGDyd3915314 = -639455726;    float ydsobntENApwGdGDyd24746346 = -183605889;    float ydsobntENApwGdGDyd13792801 = -747472770;    float ydsobntENApwGdGDyd53510406 = -904449832;     ydsobntENApwGdGDyd83600521 = ydsobntENApwGdGDyd11276605;     ydsobntENApwGdGDyd11276605 = ydsobntENApwGdGDyd48147;     ydsobntENApwGdGDyd48147 = ydsobntENApwGdGDyd7443100;     ydsobntENApwGdGDyd7443100 = ydsobntENApwGdGDyd24750711;     ydsobntENApwGdGDyd24750711 = ydsobntENApwGdGDyd4821803;     ydsobntENApwGdGDyd4821803 = ydsobntENApwGdGDyd2372545;     ydsobntENApwGdGDyd2372545 = ydsobntENApwGdGDyd30024703;     ydsobntENApwGdGDyd30024703 = ydsobntENApwGdGDyd10979064;     ydsobntENApwGdGDyd10979064 = ydsobntENApwGdGDyd24661713;     ydsobntENApwGdGDyd24661713 = ydsobntENApwGdGDyd16384939;     ydsobntENApwGdGDyd16384939 = ydsobntENApwGdGDyd18088052;     ydsobntENApwGdGDyd18088052 = ydsobntENApwGdGDyd32338979;     ydsobntENApwGdGDyd32338979 = ydsobntENApwGdGDyd58827208;     ydsobntENApwGdGDyd58827208 = ydsobntENApwGdGDyd57900146;     ydsobntENApwGdGDyd57900146 = ydsobntENApwGdGDyd34954685;     ydsobntENApwGdGDyd34954685 = ydsobntENApwGdGDyd30238903;     ydsobntENApwGdGDyd30238903 = ydsobntENApwGdGDyd18986162;     ydsobntENApwGdGDyd18986162 = ydsobntENApwGdGDyd90800141;     ydsobntENApwGdGDyd90800141 = ydsobntENApwGdGDyd11303612;     ydsobntENApwGdGDyd11303612 = ydsobntENApwGdGDyd31003791;     ydsobntENApwGdGDyd31003791 = ydsobntENApwGdGDyd23748185;     ydsobntENApwGdGDyd23748185 = ydsobntENApwGdGDyd88189793;     ydsobntENApwGdGDyd88189793 = ydsobntENApwGdGDyd55406408;     ydsobntENApwGdGDyd55406408 = ydsobntENApwGdGDyd9195881;     ydsobntENApwGdGDyd9195881 = ydsobntENApwGdGDyd11405066;     ydsobntENApwGdGDyd11405066 = ydsobntENApwGdGDyd26844662;     ydsobntENApwGdGDyd26844662 = ydsobntENApwGdGDyd41561731;     ydsobntENApwGdGDyd41561731 = ydsobntENApwGdGDyd17501767;     ydsobntENApwGdGDyd17501767 = ydsobntENApwGdGDyd33878830;     ydsobntENApwGdGDyd33878830 = ydsobntENApwGdGDyd24138827;     ydsobntENApwGdGDyd24138827 = ydsobntENApwGdGDyd9401147;     ydsobntENApwGdGDyd9401147 = ydsobntENApwGdGDyd30269080;     ydsobntENApwGdGDyd30269080 = ydsobntENApwGdGDyd63419746;     ydsobntENApwGdGDyd63419746 = ydsobntENApwGdGDyd96370867;     ydsobntENApwGdGDyd96370867 = ydsobntENApwGdGDyd93531881;     ydsobntENApwGdGDyd93531881 = ydsobntENApwGdGDyd51921612;     ydsobntENApwGdGDyd51921612 = ydsobntENApwGdGDyd651375;     ydsobntENApwGdGDyd651375 = ydsobntENApwGdGDyd30201739;     ydsobntENApwGdGDyd30201739 = ydsobntENApwGdGDyd93048265;     ydsobntENApwGdGDyd93048265 = ydsobntENApwGdGDyd48078035;     ydsobntENApwGdGDyd48078035 = ydsobntENApwGdGDyd16438250;     ydsobntENApwGdGDyd16438250 = ydsobntENApwGdGDyd1846580;     ydsobntENApwGdGDyd1846580 = ydsobntENApwGdGDyd14315687;     ydsobntENApwGdGDyd14315687 = ydsobntENApwGdGDyd60494198;     ydsobntENApwGdGDyd60494198 = ydsobntENApwGdGDyd96505350;     ydsobntENApwGdGDyd96505350 = ydsobntENApwGdGDyd97165655;     ydsobntENApwGdGDyd97165655 = ydsobntENApwGdGDyd79968724;     ydsobntENApwGdGDyd79968724 = ydsobntENApwGdGDyd68738599;     ydsobntENApwGdGDyd68738599 = ydsobntENApwGdGDyd72940760;     ydsobntENApwGdGDyd72940760 = ydsobntENApwGdGDyd13603297;     ydsobntENApwGdGDyd13603297 = ydsobntENApwGdGDyd24739820;     ydsobntENApwGdGDyd24739820 = ydsobntENApwGdGDyd84936298;     ydsobntENApwGdGDyd84936298 = ydsobntENApwGdGDyd52820314;     ydsobntENApwGdGDyd52820314 = ydsobntENApwGdGDyd93414678;     ydsobntENApwGdGDyd93414678 = ydsobntENApwGdGDyd59852337;     ydsobntENApwGdGDyd59852337 = ydsobntENApwGdGDyd23086811;     ydsobntENApwGdGDyd23086811 = ydsobntENApwGdGDyd44641739;     ydsobntENApwGdGDyd44641739 = ydsobntENApwGdGDyd98247219;     ydsobntENApwGdGDyd98247219 = ydsobntENApwGdGDyd13345645;     ydsobntENApwGdGDyd13345645 = ydsobntENApwGdGDyd77977141;     ydsobntENApwGdGDyd77977141 = ydsobntENApwGdGDyd60810814;     ydsobntENApwGdGDyd60810814 = ydsobntENApwGdGDyd12522937;     ydsobntENApwGdGDyd12522937 = ydsobntENApwGdGDyd77100233;     ydsobntENApwGdGDyd77100233 = ydsobntENApwGdGDyd522887;     ydsobntENApwGdGDyd522887 = ydsobntENApwGdGDyd6983792;     ydsobntENApwGdGDyd6983792 = ydsobntENApwGdGDyd87818971;     ydsobntENApwGdGDyd87818971 = ydsobntENApwGdGDyd68919232;     ydsobntENApwGdGDyd68919232 = ydsobntENApwGdGDyd62456341;     ydsobntENApwGdGDyd62456341 = ydsobntENApwGdGDyd64368264;     ydsobntENApwGdGDyd64368264 = ydsobntENApwGdGDyd83033072;     ydsobntENApwGdGDyd83033072 = ydsobntENApwGdGDyd29587528;     ydsobntENApwGdGDyd29587528 = ydsobntENApwGdGDyd88784422;     ydsobntENApwGdGDyd88784422 = ydsobntENApwGdGDyd97751875;     ydsobntENApwGdGDyd97751875 = ydsobntENApwGdGDyd63225576;     ydsobntENApwGdGDyd63225576 = ydsobntENApwGdGDyd14565541;     ydsobntENApwGdGDyd14565541 = ydsobntENApwGdGDyd21901605;     ydsobntENApwGdGDyd21901605 = ydsobntENApwGdGDyd73874107;     ydsobntENApwGdGDyd73874107 = ydsobntENApwGdGDyd94912210;     ydsobntENApwGdGDyd94912210 = ydsobntENApwGdGDyd12690530;     ydsobntENApwGdGDyd12690530 = ydsobntENApwGdGDyd14239411;     ydsobntENApwGdGDyd14239411 = ydsobntENApwGdGDyd46875938;     ydsobntENApwGdGDyd46875938 = ydsobntENApwGdGDyd72823131;     ydsobntENApwGdGDyd72823131 = ydsobntENApwGdGDyd44561006;     ydsobntENApwGdGDyd44561006 = ydsobntENApwGdGDyd20275534;     ydsobntENApwGdGDyd20275534 = ydsobntENApwGdGDyd99399006;     ydsobntENApwGdGDyd99399006 = ydsobntENApwGdGDyd24464849;     ydsobntENApwGdGDyd24464849 = ydsobntENApwGdGDyd77448766;     ydsobntENApwGdGDyd77448766 = ydsobntENApwGdGDyd70005068;     ydsobntENApwGdGDyd70005068 = ydsobntENApwGdGDyd36518531;     ydsobntENApwGdGDyd36518531 = ydsobntENApwGdGDyd70445071;     ydsobntENApwGdGDyd70445071 = ydsobntENApwGdGDyd7279874;     ydsobntENApwGdGDyd7279874 = ydsobntENApwGdGDyd2404156;     ydsobntENApwGdGDyd2404156 = ydsobntENApwGdGDyd16856094;     ydsobntENApwGdGDyd16856094 = ydsobntENApwGdGDyd15071125;     ydsobntENApwGdGDyd15071125 = ydsobntENApwGdGDyd87267221;     ydsobntENApwGdGDyd87267221 = ydsobntENApwGdGDyd3915314;     ydsobntENApwGdGDyd3915314 = ydsobntENApwGdGDyd24746346;     ydsobntENApwGdGDyd24746346 = ydsobntENApwGdGDyd13792801;     ydsobntENApwGdGDyd13792801 = ydsobntENApwGdGDyd53510406;     ydsobntENApwGdGDyd53510406 = ydsobntENApwGdGDyd83600521;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void KJympfNNEYBXCltkUcVbqZXTzqZMEdqZlllZTEH32486423() {     long LFLmXbmuqOaKboThlm71986525 = -476344306;    long LFLmXbmuqOaKboThlm82656923 = 80737892;    long LFLmXbmuqOaKboThlm72725395 = -289645317;    long LFLmXbmuqOaKboThlm94676168 = -912234617;    long LFLmXbmuqOaKboThlm67713590 = -45954708;    long LFLmXbmuqOaKboThlm86828927 = -684007036;    long LFLmXbmuqOaKboThlm49669642 = -472226858;    long LFLmXbmuqOaKboThlm66022326 = -981772517;    long LFLmXbmuqOaKboThlm95547797 = -841736368;    long LFLmXbmuqOaKboThlm57599895 = -263493186;    long LFLmXbmuqOaKboThlm12484513 = -548843693;    long LFLmXbmuqOaKboThlm53199939 = -354875665;    long LFLmXbmuqOaKboThlm57394003 = -347274642;    long LFLmXbmuqOaKboThlm3861508 = -139221542;    long LFLmXbmuqOaKboThlm85838341 = -889259301;    long LFLmXbmuqOaKboThlm28330565 = -621179414;    long LFLmXbmuqOaKboThlm60120127 = -340096972;    long LFLmXbmuqOaKboThlm96909351 = -805495282;    long LFLmXbmuqOaKboThlm32461885 = -226911250;    long LFLmXbmuqOaKboThlm62953608 = -734265818;    long LFLmXbmuqOaKboThlm32930908 = -46758328;    long LFLmXbmuqOaKboThlm53132512 = -603037290;    long LFLmXbmuqOaKboThlm47737495 = -229385049;    long LFLmXbmuqOaKboThlm53414837 = -651806905;    long LFLmXbmuqOaKboThlm30997227 = -709721778;    long LFLmXbmuqOaKboThlm59921174 = -178133219;    long LFLmXbmuqOaKboThlm87649548 = -223702960;    long LFLmXbmuqOaKboThlm93155524 = -892072998;    long LFLmXbmuqOaKboThlm63469526 = -462364628;    long LFLmXbmuqOaKboThlm93750228 = -433533221;    long LFLmXbmuqOaKboThlm15442930 = -616951500;    long LFLmXbmuqOaKboThlm84281223 = -952208695;    long LFLmXbmuqOaKboThlm55234129 = -483407066;    long LFLmXbmuqOaKboThlm93446806 = 42054549;    long LFLmXbmuqOaKboThlm45530802 = -583965799;    long LFLmXbmuqOaKboThlm97184420 = 94237974;    long LFLmXbmuqOaKboThlm36462981 = -998202101;    long LFLmXbmuqOaKboThlm26613306 = -26013127;    long LFLmXbmuqOaKboThlm47445111 = 79530785;    long LFLmXbmuqOaKboThlm91382660 = -969308460;    long LFLmXbmuqOaKboThlm83985372 = -229780711;    long LFLmXbmuqOaKboThlm330559 = -561232977;    long LFLmXbmuqOaKboThlm75292708 = -477602436;    long LFLmXbmuqOaKboThlm71465733 = -703702607;    long LFLmXbmuqOaKboThlm93442946 = -57711637;    long LFLmXbmuqOaKboThlm45570873 = -960209428;    long LFLmXbmuqOaKboThlm62196096 = -364048717;    long LFLmXbmuqOaKboThlm22908405 = -68500455;    long LFLmXbmuqOaKboThlm96632592 = -674561050;    long LFLmXbmuqOaKboThlm78598974 = -364584488;    long LFLmXbmuqOaKboThlm62233455 = -257719219;    long LFLmXbmuqOaKboThlm97443617 = -118949372;    long LFLmXbmuqOaKboThlm42736269 = -964642214;    long LFLmXbmuqOaKboThlm93355838 = -943337736;    long LFLmXbmuqOaKboThlm99555514 = -135605436;    long LFLmXbmuqOaKboThlm18854014 = -873307017;    long LFLmXbmuqOaKboThlm34919429 = -689877059;    long LFLmXbmuqOaKboThlm19310559 = -637838413;    long LFLmXbmuqOaKboThlm63678941 = -102512839;    long LFLmXbmuqOaKboThlm7792416 = -867821490;    long LFLmXbmuqOaKboThlm99179378 = -360304077;    long LFLmXbmuqOaKboThlm56514117 = -580153861;    long LFLmXbmuqOaKboThlm2552800 = -419407889;    long LFLmXbmuqOaKboThlm1797569 = -308203147;    long LFLmXbmuqOaKboThlm42156965 = -646541686;    long LFLmXbmuqOaKboThlm28203289 = -596634998;    long LFLmXbmuqOaKboThlm97965809 = -871468599;    long LFLmXbmuqOaKboThlm63947196 = -289329192;    long LFLmXbmuqOaKboThlm58330706 = -555255743;    long LFLmXbmuqOaKboThlm88653921 = -883497276;    long LFLmXbmuqOaKboThlm91867584 = -622977314;    long LFLmXbmuqOaKboThlm33506822 = -214083846;    long LFLmXbmuqOaKboThlm49464241 = -785026068;    long LFLmXbmuqOaKboThlm41079225 = -257602791;    long LFLmXbmuqOaKboThlm78968235 = -404485108;    long LFLmXbmuqOaKboThlm32600350 = -485525351;    long LFLmXbmuqOaKboThlm77839804 = -25434854;    long LFLmXbmuqOaKboThlm76271762 = -525682443;    long LFLmXbmuqOaKboThlm59971890 = -494095268;    long LFLmXbmuqOaKboThlm85426354 = -749512350;    long LFLmXbmuqOaKboThlm97725078 = -814084503;    long LFLmXbmuqOaKboThlm64741144 = -55202506;    long LFLmXbmuqOaKboThlm96522932 = -117511949;    long LFLmXbmuqOaKboThlm84870552 = 2219859;    long LFLmXbmuqOaKboThlm31516773 = -75814003;    long LFLmXbmuqOaKboThlm17999312 = -398002128;    long LFLmXbmuqOaKboThlm41544955 = -987566482;    long LFLmXbmuqOaKboThlm61878291 = -540069330;    long LFLmXbmuqOaKboThlm93891291 = -822340016;    long LFLmXbmuqOaKboThlm26676789 = -710658783;    long LFLmXbmuqOaKboThlm62264992 = -215884968;    long LFLmXbmuqOaKboThlm17152422 = -260363689;    long LFLmXbmuqOaKboThlm62934364 = -923500288;    long LFLmXbmuqOaKboThlm39652696 = -52647726;    long LFLmXbmuqOaKboThlm92203281 = -509004383;    long LFLmXbmuqOaKboThlm27471256 = -649626851;    long LFLmXbmuqOaKboThlm97777758 = -41825089;    long LFLmXbmuqOaKboThlm73495139 = -69399289;    long LFLmXbmuqOaKboThlm29308768 = 42839079;    long LFLmXbmuqOaKboThlm65239658 = -476344306;     LFLmXbmuqOaKboThlm71986525 = LFLmXbmuqOaKboThlm82656923;     LFLmXbmuqOaKboThlm82656923 = LFLmXbmuqOaKboThlm72725395;     LFLmXbmuqOaKboThlm72725395 = LFLmXbmuqOaKboThlm94676168;     LFLmXbmuqOaKboThlm94676168 = LFLmXbmuqOaKboThlm67713590;     LFLmXbmuqOaKboThlm67713590 = LFLmXbmuqOaKboThlm86828927;     LFLmXbmuqOaKboThlm86828927 = LFLmXbmuqOaKboThlm49669642;     LFLmXbmuqOaKboThlm49669642 = LFLmXbmuqOaKboThlm66022326;     LFLmXbmuqOaKboThlm66022326 = LFLmXbmuqOaKboThlm95547797;     LFLmXbmuqOaKboThlm95547797 = LFLmXbmuqOaKboThlm57599895;     LFLmXbmuqOaKboThlm57599895 = LFLmXbmuqOaKboThlm12484513;     LFLmXbmuqOaKboThlm12484513 = LFLmXbmuqOaKboThlm53199939;     LFLmXbmuqOaKboThlm53199939 = LFLmXbmuqOaKboThlm57394003;     LFLmXbmuqOaKboThlm57394003 = LFLmXbmuqOaKboThlm3861508;     LFLmXbmuqOaKboThlm3861508 = LFLmXbmuqOaKboThlm85838341;     LFLmXbmuqOaKboThlm85838341 = LFLmXbmuqOaKboThlm28330565;     LFLmXbmuqOaKboThlm28330565 = LFLmXbmuqOaKboThlm60120127;     LFLmXbmuqOaKboThlm60120127 = LFLmXbmuqOaKboThlm96909351;     LFLmXbmuqOaKboThlm96909351 = LFLmXbmuqOaKboThlm32461885;     LFLmXbmuqOaKboThlm32461885 = LFLmXbmuqOaKboThlm62953608;     LFLmXbmuqOaKboThlm62953608 = LFLmXbmuqOaKboThlm32930908;     LFLmXbmuqOaKboThlm32930908 = LFLmXbmuqOaKboThlm53132512;     LFLmXbmuqOaKboThlm53132512 = LFLmXbmuqOaKboThlm47737495;     LFLmXbmuqOaKboThlm47737495 = LFLmXbmuqOaKboThlm53414837;     LFLmXbmuqOaKboThlm53414837 = LFLmXbmuqOaKboThlm30997227;     LFLmXbmuqOaKboThlm30997227 = LFLmXbmuqOaKboThlm59921174;     LFLmXbmuqOaKboThlm59921174 = LFLmXbmuqOaKboThlm87649548;     LFLmXbmuqOaKboThlm87649548 = LFLmXbmuqOaKboThlm93155524;     LFLmXbmuqOaKboThlm93155524 = LFLmXbmuqOaKboThlm63469526;     LFLmXbmuqOaKboThlm63469526 = LFLmXbmuqOaKboThlm93750228;     LFLmXbmuqOaKboThlm93750228 = LFLmXbmuqOaKboThlm15442930;     LFLmXbmuqOaKboThlm15442930 = LFLmXbmuqOaKboThlm84281223;     LFLmXbmuqOaKboThlm84281223 = LFLmXbmuqOaKboThlm55234129;     LFLmXbmuqOaKboThlm55234129 = LFLmXbmuqOaKboThlm93446806;     LFLmXbmuqOaKboThlm93446806 = LFLmXbmuqOaKboThlm45530802;     LFLmXbmuqOaKboThlm45530802 = LFLmXbmuqOaKboThlm97184420;     LFLmXbmuqOaKboThlm97184420 = LFLmXbmuqOaKboThlm36462981;     LFLmXbmuqOaKboThlm36462981 = LFLmXbmuqOaKboThlm26613306;     LFLmXbmuqOaKboThlm26613306 = LFLmXbmuqOaKboThlm47445111;     LFLmXbmuqOaKboThlm47445111 = LFLmXbmuqOaKboThlm91382660;     LFLmXbmuqOaKboThlm91382660 = LFLmXbmuqOaKboThlm83985372;     LFLmXbmuqOaKboThlm83985372 = LFLmXbmuqOaKboThlm330559;     LFLmXbmuqOaKboThlm330559 = LFLmXbmuqOaKboThlm75292708;     LFLmXbmuqOaKboThlm75292708 = LFLmXbmuqOaKboThlm71465733;     LFLmXbmuqOaKboThlm71465733 = LFLmXbmuqOaKboThlm93442946;     LFLmXbmuqOaKboThlm93442946 = LFLmXbmuqOaKboThlm45570873;     LFLmXbmuqOaKboThlm45570873 = LFLmXbmuqOaKboThlm62196096;     LFLmXbmuqOaKboThlm62196096 = LFLmXbmuqOaKboThlm22908405;     LFLmXbmuqOaKboThlm22908405 = LFLmXbmuqOaKboThlm96632592;     LFLmXbmuqOaKboThlm96632592 = LFLmXbmuqOaKboThlm78598974;     LFLmXbmuqOaKboThlm78598974 = LFLmXbmuqOaKboThlm62233455;     LFLmXbmuqOaKboThlm62233455 = LFLmXbmuqOaKboThlm97443617;     LFLmXbmuqOaKboThlm97443617 = LFLmXbmuqOaKboThlm42736269;     LFLmXbmuqOaKboThlm42736269 = LFLmXbmuqOaKboThlm93355838;     LFLmXbmuqOaKboThlm93355838 = LFLmXbmuqOaKboThlm99555514;     LFLmXbmuqOaKboThlm99555514 = LFLmXbmuqOaKboThlm18854014;     LFLmXbmuqOaKboThlm18854014 = LFLmXbmuqOaKboThlm34919429;     LFLmXbmuqOaKboThlm34919429 = LFLmXbmuqOaKboThlm19310559;     LFLmXbmuqOaKboThlm19310559 = LFLmXbmuqOaKboThlm63678941;     LFLmXbmuqOaKboThlm63678941 = LFLmXbmuqOaKboThlm7792416;     LFLmXbmuqOaKboThlm7792416 = LFLmXbmuqOaKboThlm99179378;     LFLmXbmuqOaKboThlm99179378 = LFLmXbmuqOaKboThlm56514117;     LFLmXbmuqOaKboThlm56514117 = LFLmXbmuqOaKboThlm2552800;     LFLmXbmuqOaKboThlm2552800 = LFLmXbmuqOaKboThlm1797569;     LFLmXbmuqOaKboThlm1797569 = LFLmXbmuqOaKboThlm42156965;     LFLmXbmuqOaKboThlm42156965 = LFLmXbmuqOaKboThlm28203289;     LFLmXbmuqOaKboThlm28203289 = LFLmXbmuqOaKboThlm97965809;     LFLmXbmuqOaKboThlm97965809 = LFLmXbmuqOaKboThlm63947196;     LFLmXbmuqOaKboThlm63947196 = LFLmXbmuqOaKboThlm58330706;     LFLmXbmuqOaKboThlm58330706 = LFLmXbmuqOaKboThlm88653921;     LFLmXbmuqOaKboThlm88653921 = LFLmXbmuqOaKboThlm91867584;     LFLmXbmuqOaKboThlm91867584 = LFLmXbmuqOaKboThlm33506822;     LFLmXbmuqOaKboThlm33506822 = LFLmXbmuqOaKboThlm49464241;     LFLmXbmuqOaKboThlm49464241 = LFLmXbmuqOaKboThlm41079225;     LFLmXbmuqOaKboThlm41079225 = LFLmXbmuqOaKboThlm78968235;     LFLmXbmuqOaKboThlm78968235 = LFLmXbmuqOaKboThlm32600350;     LFLmXbmuqOaKboThlm32600350 = LFLmXbmuqOaKboThlm77839804;     LFLmXbmuqOaKboThlm77839804 = LFLmXbmuqOaKboThlm76271762;     LFLmXbmuqOaKboThlm76271762 = LFLmXbmuqOaKboThlm59971890;     LFLmXbmuqOaKboThlm59971890 = LFLmXbmuqOaKboThlm85426354;     LFLmXbmuqOaKboThlm85426354 = LFLmXbmuqOaKboThlm97725078;     LFLmXbmuqOaKboThlm97725078 = LFLmXbmuqOaKboThlm64741144;     LFLmXbmuqOaKboThlm64741144 = LFLmXbmuqOaKboThlm96522932;     LFLmXbmuqOaKboThlm96522932 = LFLmXbmuqOaKboThlm84870552;     LFLmXbmuqOaKboThlm84870552 = LFLmXbmuqOaKboThlm31516773;     LFLmXbmuqOaKboThlm31516773 = LFLmXbmuqOaKboThlm17999312;     LFLmXbmuqOaKboThlm17999312 = LFLmXbmuqOaKboThlm41544955;     LFLmXbmuqOaKboThlm41544955 = LFLmXbmuqOaKboThlm61878291;     LFLmXbmuqOaKboThlm61878291 = LFLmXbmuqOaKboThlm93891291;     LFLmXbmuqOaKboThlm93891291 = LFLmXbmuqOaKboThlm26676789;     LFLmXbmuqOaKboThlm26676789 = LFLmXbmuqOaKboThlm62264992;     LFLmXbmuqOaKboThlm62264992 = LFLmXbmuqOaKboThlm17152422;     LFLmXbmuqOaKboThlm17152422 = LFLmXbmuqOaKboThlm62934364;     LFLmXbmuqOaKboThlm62934364 = LFLmXbmuqOaKboThlm39652696;     LFLmXbmuqOaKboThlm39652696 = LFLmXbmuqOaKboThlm92203281;     LFLmXbmuqOaKboThlm92203281 = LFLmXbmuqOaKboThlm27471256;     LFLmXbmuqOaKboThlm27471256 = LFLmXbmuqOaKboThlm97777758;     LFLmXbmuqOaKboThlm97777758 = LFLmXbmuqOaKboThlm73495139;     LFLmXbmuqOaKboThlm73495139 = LFLmXbmuqOaKboThlm29308768;     LFLmXbmuqOaKboThlm29308768 = LFLmXbmuqOaKboThlm65239658;     LFLmXbmuqOaKboThlm65239658 = LFLmXbmuqOaKboThlm71986525;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void NtTDbAiuzPWXhpkryASlxoFIxnnHHJvlWYYxWxB14715185() {     long CUfiWjJkVMhsrlxRYo23721976 = -592599139;    long CUfiWjJkVMhsrlxRYo98330906 = 3838137;    long CUfiWjJkVMhsrlxRYo21525755 = -87004702;    long CUfiWjJkVMhsrlxRYo69751570 = -728503759;    long CUfiWjJkVMhsrlxRYo44437523 = -853605362;    long CUfiWjJkVMhsrlxRYo11712282 = -843034263;    long CUfiWjJkVMhsrlxRYo23446485 = -295438454;    long CUfiWjJkVMhsrlxRYo84813804 = -5552071;    long CUfiWjJkVMhsrlxRYo46845874 = -632585078;    long CUfiWjJkVMhsrlxRYo26397019 = -805139168;    long CUfiWjJkVMhsrlxRYo7777212 = -510566164;    long CUfiWjJkVMhsrlxRYo63556316 = -289857165;    long CUfiWjJkVMhsrlxRYo44574796 = 43545097;    long CUfiWjJkVMhsrlxRYo62629226 = -865902089;    long CUfiWjJkVMhsrlxRYo39853599 = -366987011;    long CUfiWjJkVMhsrlxRYo40057837 = -332863370;    long CUfiWjJkVMhsrlxRYo16090653 = -708191662;    long CUfiWjJkVMhsrlxRYo82592274 = -168071777;    long CUfiWjJkVMhsrlxRYo92035734 = -754825433;    long CUfiWjJkVMhsrlxRYo82683181 = -444533967;    long CUfiWjJkVMhsrlxRYo78678261 = -129566496;    long CUfiWjJkVMhsrlxRYo55551966 = -776518297;    long CUfiWjJkVMhsrlxRYo49087009 = -937622497;    long CUfiWjJkVMhsrlxRYo46065087 = -523398856;    long CUfiWjJkVMhsrlxRYo2413086 = -655376215;    long CUfiWjJkVMhsrlxRYo17626589 = -523742998;    long CUfiWjJkVMhsrlxRYo26478183 = -686111678;    long CUfiWjJkVMhsrlxRYo91284749 = -175403684;    long CUfiWjJkVMhsrlxRYo38219600 = -512263530;    long CUfiWjJkVMhsrlxRYo63735312 = -895434017;    long CUfiWjJkVMhsrlxRYo52661738 = -949833967;    long CUfiWjJkVMhsrlxRYo97310953 = -175982887;    long CUfiWjJkVMhsrlxRYo53327439 = 34211048;    long CUfiWjJkVMhsrlxRYo87470518 = -718542617;    long CUfiWjJkVMhsrlxRYo43735930 = -800775442;    long CUfiWjJkVMhsrlxRYo78884030 = -141930854;    long CUfiWjJkVMhsrlxRYo86111207 = -542556845;    long CUfiWjJkVMhsrlxRYo27446918 = -109525491;    long CUfiWjJkVMhsrlxRYo17219953 = -365786610;    long CUfiWjJkVMhsrlxRYo16465077 = -487924126;    long CUfiWjJkVMhsrlxRYo52669459 = -348939499;    long CUfiWjJkVMhsrlxRYo60355958 = -549752599;    long CUfiWjJkVMhsrlxRYo31875941 = -378378968;    long CUfiWjJkVMhsrlxRYo64401551 = -629091284;    long CUfiWjJkVMhsrlxRYo65472155 = -658208720;    long CUfiWjJkVMhsrlxRYo47265320 = -284101369;    long CUfiWjJkVMhsrlxRYo48362290 = -826389170;    long CUfiWjJkVMhsrlxRYo1892870 = -472905150;    long CUfiWjJkVMhsrlxRYo85651045 = -638513779;    long CUfiWjJkVMhsrlxRYo67255233 = -223595868;    long CUfiWjJkVMhsrlxRYo2913348 = 33776625;    long CUfiWjJkVMhsrlxRYo29423371 = -580548932;    long CUfiWjJkVMhsrlxRYo65975015 = -708755402;    long CUfiWjJkVMhsrlxRYo63415079 = -558137048;    long CUfiWjJkVMhsrlxRYo36036924 = -165368637;    long CUfiWjJkVMhsrlxRYo68170010 = -816080842;    long CUfiWjJkVMhsrlxRYo49243897 = -58539367;    long CUfiWjJkVMhsrlxRYo75460668 = -563605846;    long CUfiWjJkVMhsrlxRYo67338485 = 26872455;    long CUfiWjJkVMhsrlxRYo26810934 = -229862364;    long CUfiWjJkVMhsrlxRYo85234098 = -56922585;    long CUfiWjJkVMhsrlxRYo32161736 = -20034771;    long CUfiWjJkVMhsrlxRYo46594205 = -493288542;    long CUfiWjJkVMhsrlxRYo83110561 = -737151062;    long CUfiWjJkVMhsrlxRYo73735280 = -855305202;    long CUfiWjJkVMhsrlxRYo10466258 = -234583278;    long CUfiWjJkVMhsrlxRYo10228878 = -224068214;    long CUfiWjJkVMhsrlxRYo57104277 = -237912287;    long CUfiWjJkVMhsrlxRYo18893297 = 34873353;    long CUfiWjJkVMhsrlxRYo60969568 = -125056157;    long CUfiWjJkVMhsrlxRYo53946630 = -790306525;    long CUfiWjJkVMhsrlxRYo88643735 = -498666172;    long CUfiWjJkVMhsrlxRYo65372321 = -802285167;    long CUfiWjJkVMhsrlxRYo75570657 = -166901308;    long CUfiWjJkVMhsrlxRYo30013723 = 4405531;    long CUfiWjJkVMhsrlxRYo18322303 = -579813898;    long CUfiWjJkVMhsrlxRYo23676026 = -298139330;    long CUfiWjJkVMhsrlxRYo84685457 = -208531213;    long CUfiWjJkVMhsrlxRYo80592932 = -865190136;    long CUfiWjJkVMhsrlxRYo55147765 = -271274847;    long CUfiWjJkVMhsrlxRYo69264298 = -697353829;    long CUfiWjJkVMhsrlxRYo24585314 = -113206528;    long CUfiWjJkVMhsrlxRYo5633705 = -536889906;    long CUfiWjJkVMhsrlxRYo70964366 = -188667662;    long CUfiWjJkVMhsrlxRYo60821965 = -829210643;    long CUfiWjJkVMhsrlxRYo23238368 = -269285035;    long CUfiWjJkVMhsrlxRYo31335939 = -467227485;    long CUfiWjJkVMhsrlxRYo89912359 = -407651904;    long CUfiWjJkVMhsrlxRYo51433595 = -453173981;    long CUfiWjJkVMhsrlxRYo75565919 = -984694601;    long CUfiWjJkVMhsrlxRYo29640134 = 16608512;    long CUfiWjJkVMhsrlxRYo10650539 = -978950999;    long CUfiWjJkVMhsrlxRYo60108433 = -36397947;    long CUfiWjJkVMhsrlxRYo90409019 = -35924246;    long CUfiWjJkVMhsrlxRYo31230979 = -331001541;    long CUfiWjJkVMhsrlxRYo20507724 = -228904729;    long CUfiWjJkVMhsrlxRYo13761754 = 43535942;    long CUfiWjJkVMhsrlxRYo48765379 = -641227906;    long CUfiWjJkVMhsrlxRYo90666271 = -773786083;    long CUfiWjJkVMhsrlxRYo55005897 = -592599139;     CUfiWjJkVMhsrlxRYo23721976 = CUfiWjJkVMhsrlxRYo98330906;     CUfiWjJkVMhsrlxRYo98330906 = CUfiWjJkVMhsrlxRYo21525755;     CUfiWjJkVMhsrlxRYo21525755 = CUfiWjJkVMhsrlxRYo69751570;     CUfiWjJkVMhsrlxRYo69751570 = CUfiWjJkVMhsrlxRYo44437523;     CUfiWjJkVMhsrlxRYo44437523 = CUfiWjJkVMhsrlxRYo11712282;     CUfiWjJkVMhsrlxRYo11712282 = CUfiWjJkVMhsrlxRYo23446485;     CUfiWjJkVMhsrlxRYo23446485 = CUfiWjJkVMhsrlxRYo84813804;     CUfiWjJkVMhsrlxRYo84813804 = CUfiWjJkVMhsrlxRYo46845874;     CUfiWjJkVMhsrlxRYo46845874 = CUfiWjJkVMhsrlxRYo26397019;     CUfiWjJkVMhsrlxRYo26397019 = CUfiWjJkVMhsrlxRYo7777212;     CUfiWjJkVMhsrlxRYo7777212 = CUfiWjJkVMhsrlxRYo63556316;     CUfiWjJkVMhsrlxRYo63556316 = CUfiWjJkVMhsrlxRYo44574796;     CUfiWjJkVMhsrlxRYo44574796 = CUfiWjJkVMhsrlxRYo62629226;     CUfiWjJkVMhsrlxRYo62629226 = CUfiWjJkVMhsrlxRYo39853599;     CUfiWjJkVMhsrlxRYo39853599 = CUfiWjJkVMhsrlxRYo40057837;     CUfiWjJkVMhsrlxRYo40057837 = CUfiWjJkVMhsrlxRYo16090653;     CUfiWjJkVMhsrlxRYo16090653 = CUfiWjJkVMhsrlxRYo82592274;     CUfiWjJkVMhsrlxRYo82592274 = CUfiWjJkVMhsrlxRYo92035734;     CUfiWjJkVMhsrlxRYo92035734 = CUfiWjJkVMhsrlxRYo82683181;     CUfiWjJkVMhsrlxRYo82683181 = CUfiWjJkVMhsrlxRYo78678261;     CUfiWjJkVMhsrlxRYo78678261 = CUfiWjJkVMhsrlxRYo55551966;     CUfiWjJkVMhsrlxRYo55551966 = CUfiWjJkVMhsrlxRYo49087009;     CUfiWjJkVMhsrlxRYo49087009 = CUfiWjJkVMhsrlxRYo46065087;     CUfiWjJkVMhsrlxRYo46065087 = CUfiWjJkVMhsrlxRYo2413086;     CUfiWjJkVMhsrlxRYo2413086 = CUfiWjJkVMhsrlxRYo17626589;     CUfiWjJkVMhsrlxRYo17626589 = CUfiWjJkVMhsrlxRYo26478183;     CUfiWjJkVMhsrlxRYo26478183 = CUfiWjJkVMhsrlxRYo91284749;     CUfiWjJkVMhsrlxRYo91284749 = CUfiWjJkVMhsrlxRYo38219600;     CUfiWjJkVMhsrlxRYo38219600 = CUfiWjJkVMhsrlxRYo63735312;     CUfiWjJkVMhsrlxRYo63735312 = CUfiWjJkVMhsrlxRYo52661738;     CUfiWjJkVMhsrlxRYo52661738 = CUfiWjJkVMhsrlxRYo97310953;     CUfiWjJkVMhsrlxRYo97310953 = CUfiWjJkVMhsrlxRYo53327439;     CUfiWjJkVMhsrlxRYo53327439 = CUfiWjJkVMhsrlxRYo87470518;     CUfiWjJkVMhsrlxRYo87470518 = CUfiWjJkVMhsrlxRYo43735930;     CUfiWjJkVMhsrlxRYo43735930 = CUfiWjJkVMhsrlxRYo78884030;     CUfiWjJkVMhsrlxRYo78884030 = CUfiWjJkVMhsrlxRYo86111207;     CUfiWjJkVMhsrlxRYo86111207 = CUfiWjJkVMhsrlxRYo27446918;     CUfiWjJkVMhsrlxRYo27446918 = CUfiWjJkVMhsrlxRYo17219953;     CUfiWjJkVMhsrlxRYo17219953 = CUfiWjJkVMhsrlxRYo16465077;     CUfiWjJkVMhsrlxRYo16465077 = CUfiWjJkVMhsrlxRYo52669459;     CUfiWjJkVMhsrlxRYo52669459 = CUfiWjJkVMhsrlxRYo60355958;     CUfiWjJkVMhsrlxRYo60355958 = CUfiWjJkVMhsrlxRYo31875941;     CUfiWjJkVMhsrlxRYo31875941 = CUfiWjJkVMhsrlxRYo64401551;     CUfiWjJkVMhsrlxRYo64401551 = CUfiWjJkVMhsrlxRYo65472155;     CUfiWjJkVMhsrlxRYo65472155 = CUfiWjJkVMhsrlxRYo47265320;     CUfiWjJkVMhsrlxRYo47265320 = CUfiWjJkVMhsrlxRYo48362290;     CUfiWjJkVMhsrlxRYo48362290 = CUfiWjJkVMhsrlxRYo1892870;     CUfiWjJkVMhsrlxRYo1892870 = CUfiWjJkVMhsrlxRYo85651045;     CUfiWjJkVMhsrlxRYo85651045 = CUfiWjJkVMhsrlxRYo67255233;     CUfiWjJkVMhsrlxRYo67255233 = CUfiWjJkVMhsrlxRYo2913348;     CUfiWjJkVMhsrlxRYo2913348 = CUfiWjJkVMhsrlxRYo29423371;     CUfiWjJkVMhsrlxRYo29423371 = CUfiWjJkVMhsrlxRYo65975015;     CUfiWjJkVMhsrlxRYo65975015 = CUfiWjJkVMhsrlxRYo63415079;     CUfiWjJkVMhsrlxRYo63415079 = CUfiWjJkVMhsrlxRYo36036924;     CUfiWjJkVMhsrlxRYo36036924 = CUfiWjJkVMhsrlxRYo68170010;     CUfiWjJkVMhsrlxRYo68170010 = CUfiWjJkVMhsrlxRYo49243897;     CUfiWjJkVMhsrlxRYo49243897 = CUfiWjJkVMhsrlxRYo75460668;     CUfiWjJkVMhsrlxRYo75460668 = CUfiWjJkVMhsrlxRYo67338485;     CUfiWjJkVMhsrlxRYo67338485 = CUfiWjJkVMhsrlxRYo26810934;     CUfiWjJkVMhsrlxRYo26810934 = CUfiWjJkVMhsrlxRYo85234098;     CUfiWjJkVMhsrlxRYo85234098 = CUfiWjJkVMhsrlxRYo32161736;     CUfiWjJkVMhsrlxRYo32161736 = CUfiWjJkVMhsrlxRYo46594205;     CUfiWjJkVMhsrlxRYo46594205 = CUfiWjJkVMhsrlxRYo83110561;     CUfiWjJkVMhsrlxRYo83110561 = CUfiWjJkVMhsrlxRYo73735280;     CUfiWjJkVMhsrlxRYo73735280 = CUfiWjJkVMhsrlxRYo10466258;     CUfiWjJkVMhsrlxRYo10466258 = CUfiWjJkVMhsrlxRYo10228878;     CUfiWjJkVMhsrlxRYo10228878 = CUfiWjJkVMhsrlxRYo57104277;     CUfiWjJkVMhsrlxRYo57104277 = CUfiWjJkVMhsrlxRYo18893297;     CUfiWjJkVMhsrlxRYo18893297 = CUfiWjJkVMhsrlxRYo60969568;     CUfiWjJkVMhsrlxRYo60969568 = CUfiWjJkVMhsrlxRYo53946630;     CUfiWjJkVMhsrlxRYo53946630 = CUfiWjJkVMhsrlxRYo88643735;     CUfiWjJkVMhsrlxRYo88643735 = CUfiWjJkVMhsrlxRYo65372321;     CUfiWjJkVMhsrlxRYo65372321 = CUfiWjJkVMhsrlxRYo75570657;     CUfiWjJkVMhsrlxRYo75570657 = CUfiWjJkVMhsrlxRYo30013723;     CUfiWjJkVMhsrlxRYo30013723 = CUfiWjJkVMhsrlxRYo18322303;     CUfiWjJkVMhsrlxRYo18322303 = CUfiWjJkVMhsrlxRYo23676026;     CUfiWjJkVMhsrlxRYo23676026 = CUfiWjJkVMhsrlxRYo84685457;     CUfiWjJkVMhsrlxRYo84685457 = CUfiWjJkVMhsrlxRYo80592932;     CUfiWjJkVMhsrlxRYo80592932 = CUfiWjJkVMhsrlxRYo55147765;     CUfiWjJkVMhsrlxRYo55147765 = CUfiWjJkVMhsrlxRYo69264298;     CUfiWjJkVMhsrlxRYo69264298 = CUfiWjJkVMhsrlxRYo24585314;     CUfiWjJkVMhsrlxRYo24585314 = CUfiWjJkVMhsrlxRYo5633705;     CUfiWjJkVMhsrlxRYo5633705 = CUfiWjJkVMhsrlxRYo70964366;     CUfiWjJkVMhsrlxRYo70964366 = CUfiWjJkVMhsrlxRYo60821965;     CUfiWjJkVMhsrlxRYo60821965 = CUfiWjJkVMhsrlxRYo23238368;     CUfiWjJkVMhsrlxRYo23238368 = CUfiWjJkVMhsrlxRYo31335939;     CUfiWjJkVMhsrlxRYo31335939 = CUfiWjJkVMhsrlxRYo89912359;     CUfiWjJkVMhsrlxRYo89912359 = CUfiWjJkVMhsrlxRYo51433595;     CUfiWjJkVMhsrlxRYo51433595 = CUfiWjJkVMhsrlxRYo75565919;     CUfiWjJkVMhsrlxRYo75565919 = CUfiWjJkVMhsrlxRYo29640134;     CUfiWjJkVMhsrlxRYo29640134 = CUfiWjJkVMhsrlxRYo10650539;     CUfiWjJkVMhsrlxRYo10650539 = CUfiWjJkVMhsrlxRYo60108433;     CUfiWjJkVMhsrlxRYo60108433 = CUfiWjJkVMhsrlxRYo90409019;     CUfiWjJkVMhsrlxRYo90409019 = CUfiWjJkVMhsrlxRYo31230979;     CUfiWjJkVMhsrlxRYo31230979 = CUfiWjJkVMhsrlxRYo20507724;     CUfiWjJkVMhsrlxRYo20507724 = CUfiWjJkVMhsrlxRYo13761754;     CUfiWjJkVMhsrlxRYo13761754 = CUfiWjJkVMhsrlxRYo48765379;     CUfiWjJkVMhsrlxRYo48765379 = CUfiWjJkVMhsrlxRYo90666271;     CUfiWjJkVMhsrlxRYo90666271 = CUfiWjJkVMhsrlxRYo55005897;     CUfiWjJkVMhsrlxRYo55005897 = CUfiWjJkVMhsrlxRYo23721976;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void xjGPuQpibVainIXVVWGvbkxbFECQSxIciZHIICK26277610() {     double thFjMyNBGapdVoSENm34774311 = -368253962;    double thFjMyNBGapdVoSENm34784733 = -78947340;    double thFjMyNBGapdVoSENm15149892 = -983722546;    double thFjMyNBGapdVoSENm6347029 = -506301686;    double thFjMyNBGapdVoSENm59014669 = -970682343;    double thFjMyNBGapdVoSENm21437640 = -536072147;    double thFjMyNBGapdVoSENm28740566 = -266764812;    double thFjMyNBGapdVoSENm25437927 = -950246444;    double thFjMyNBGapdVoSENm20267567 = -600082943;    double thFjMyNBGapdVoSENm64658721 = -433379101;    double thFjMyNBGapdVoSENm34891744 = -123661690;    double thFjMyNBGapdVoSENm81577524 = -378338890;    double thFjMyNBGapdVoSENm69574077 = -520642681;    double thFjMyNBGapdVoSENm65024531 = -935348477;    double thFjMyNBGapdVoSENm47851867 = -805566919;    double thFjMyNBGapdVoSENm63114496 = -813871891;    double thFjMyNBGapdVoSENm1908756 = -598967797;    double thFjMyNBGapdVoSENm99717703 = -536437679;    double thFjMyNBGapdVoSENm53515448 = -531884879;    double thFjMyNBGapdVoSENm97589663 = -630503845;    double thFjMyNBGapdVoSENm93187608 = -60457999;    double thFjMyNBGapdVoSENm37606265 = -920397667;    double thFjMyNBGapdVoSENm77278191 = -320649484;    double thFjMyNBGapdVoSENm37009439 = -491921787;    double thFjMyNBGapdVoSENm54780814 = -538490239;    double thFjMyNBGapdVoSENm12096301 = -441512936;    double thFjMyNBGapdVoSENm6509690 = -782209312;    double thFjMyNBGapdVoSENm51657568 = -363629356;    double thFjMyNBGapdVoSENm26916968 = -790064290;    double thFjMyNBGapdVoSENm52478876 = -144561532;    double thFjMyNBGapdVoSENm51525756 = -246594941;    double thFjMyNBGapdVoSENm91419083 = -282972934;    double thFjMyNBGapdVoSENm29916973 = -583775796;    double thFjMyNBGapdVoSENm70452470 = -168529236;    double thFjMyNBGapdVoSENm58001824 = -29169198;    double thFjMyNBGapdVoSENm81701488 = -499383693;    double thFjMyNBGapdVoSENm95241699 = 61801893;    double thFjMyNBGapdVoSENm16837909 = 53182452;    double thFjMyNBGapdVoSENm94392097 = -409149438;    double thFjMyNBGapdVoSENm24679167 = -86367384;    double thFjMyNBGapdVoSENm48452764 = -858268730;    double thFjMyNBGapdVoSENm11608599 = -411096291;    double thFjMyNBGapdVoSENm20105338 = -911253317;    double thFjMyNBGapdVoSENm76286296 = -55633739;    double thFjMyNBGapdVoSENm2446925 = -107166747;    double thFjMyNBGapdVoSENm9092011 = -255516700;    double thFjMyNBGapdVoSENm82853667 = -191243614;    double thFjMyNBGapdVoSENm8502476 = -346662895;    double thFjMyNBGapdVoSENm11032045 = -672222059;    double thFjMyNBGapdVoSENm70538039 = 21135271;    double thFjMyNBGapdVoSENm27246107 = -615964775;    double thFjMyNBGapdVoSENm71983350 = -219598273;    double thFjMyNBGapdVoSENm33359332 = -892631995;    double thFjMyNBGapdVoSENm85492996 = -674809515;    double thFjMyNBGapdVoSENm33090001 = -190825103;    double thFjMyNBGapdVoSENm97168045 = -447856296;    double thFjMyNBGapdVoSENm57506541 = -758297857;    double thFjMyNBGapdVoSENm78140453 = -391800760;    double thFjMyNBGapdVoSENm51566215 = -967811447;    double thFjMyNBGapdVoSENm46918368 = -429169407;    double thFjMyNBGapdVoSENm14927951 = -753862835;    double thFjMyNBGapdVoSENm77082997 = -903135457;    double thFjMyNBGapdVoSENm98520958 = -60182155;    double thFjMyNBGapdVoSENm67788690 = -355521411;    double thFjMyNBGapdVoSENm13132965 = -86784160;    double thFjMyNBGapdVoSENm43472661 = -840688757;    double thFjMyNBGapdVoSENm51660552 = -794563094;    double thFjMyNBGapdVoSENm99121607 = -252113445;    double thFjMyNBGapdVoSENm7022708 = -806179280;    double thFjMyNBGapdVoSENm66150379 = -206183226;    double thFjMyNBGapdVoSENm67872797 = -775673784;    double thFjMyNBGapdVoSENm85070847 = -552150249;    double thFjMyNBGapdVoSENm5325607 = -27288241;    double thFjMyNBGapdVoSENm28836281 = -345517496;    double thFjMyNBGapdVoSENm49136900 = -772235115;    double thFjMyNBGapdVoSENm81579009 = -649361708;    double thFjMyNBGapdVoSENm17500927 = 90855650;    double thFjMyNBGapdVoSENm991896 = -165015745;    double thFjMyNBGapdVoSENm34562515 = -284755040;    double thFjMyNBGapdVoSENm45688804 = -182973540;    double thFjMyNBGapdVoSENm29242634 = -150269323;    double thFjMyNBGapdVoSENm98007213 = -335546418;    double thFjMyNBGapdVoSENm40625524 = -691407297;    double thFjMyNBGapdVoSENm56378929 = -711199561;    double thFjMyNBGapdVoSENm25232770 = -528596757;    double thFjMyNBGapdVoSENm79542405 = 73003331;    double thFjMyNBGapdVoSENm58059751 = -390340939;    double thFjMyNBGapdVoSENm44423977 = -908966281;    double thFjMyNBGapdVoSENm37362469 = -977704134;    double thFjMyNBGapdVoSENm60833778 = -581312903;    double thFjMyNBGapdVoSENm24194947 = -741085837;    double thFjMyNBGapdVoSENm17101246 = -546397348;    double thFjMyNBGapdVoSENm65271693 = 20993898;    double thFjMyNBGapdVoSENm47473729 = -979980031;    double thFjMyNBGapdVoSENm9751217 = -332504549;    double thFjMyNBGapdVoSENm71369766 = -955133274;    double thFjMyNBGapdVoSENm13087641 = -250914136;    double thFjMyNBGapdVoSENm52316648 = -455731907;    double thFjMyNBGapdVoSENm63153331 = -968849580;    double thFjMyNBGapdVoSENm58974263 = -368253962;     thFjMyNBGapdVoSENm34774311 = thFjMyNBGapdVoSENm34784733;     thFjMyNBGapdVoSENm34784733 = thFjMyNBGapdVoSENm15149892;     thFjMyNBGapdVoSENm15149892 = thFjMyNBGapdVoSENm6347029;     thFjMyNBGapdVoSENm6347029 = thFjMyNBGapdVoSENm59014669;     thFjMyNBGapdVoSENm59014669 = thFjMyNBGapdVoSENm21437640;     thFjMyNBGapdVoSENm21437640 = thFjMyNBGapdVoSENm28740566;     thFjMyNBGapdVoSENm28740566 = thFjMyNBGapdVoSENm25437927;     thFjMyNBGapdVoSENm25437927 = thFjMyNBGapdVoSENm20267567;     thFjMyNBGapdVoSENm20267567 = thFjMyNBGapdVoSENm64658721;     thFjMyNBGapdVoSENm64658721 = thFjMyNBGapdVoSENm34891744;     thFjMyNBGapdVoSENm34891744 = thFjMyNBGapdVoSENm81577524;     thFjMyNBGapdVoSENm81577524 = thFjMyNBGapdVoSENm69574077;     thFjMyNBGapdVoSENm69574077 = thFjMyNBGapdVoSENm65024531;     thFjMyNBGapdVoSENm65024531 = thFjMyNBGapdVoSENm47851867;     thFjMyNBGapdVoSENm47851867 = thFjMyNBGapdVoSENm63114496;     thFjMyNBGapdVoSENm63114496 = thFjMyNBGapdVoSENm1908756;     thFjMyNBGapdVoSENm1908756 = thFjMyNBGapdVoSENm99717703;     thFjMyNBGapdVoSENm99717703 = thFjMyNBGapdVoSENm53515448;     thFjMyNBGapdVoSENm53515448 = thFjMyNBGapdVoSENm97589663;     thFjMyNBGapdVoSENm97589663 = thFjMyNBGapdVoSENm93187608;     thFjMyNBGapdVoSENm93187608 = thFjMyNBGapdVoSENm37606265;     thFjMyNBGapdVoSENm37606265 = thFjMyNBGapdVoSENm77278191;     thFjMyNBGapdVoSENm77278191 = thFjMyNBGapdVoSENm37009439;     thFjMyNBGapdVoSENm37009439 = thFjMyNBGapdVoSENm54780814;     thFjMyNBGapdVoSENm54780814 = thFjMyNBGapdVoSENm12096301;     thFjMyNBGapdVoSENm12096301 = thFjMyNBGapdVoSENm6509690;     thFjMyNBGapdVoSENm6509690 = thFjMyNBGapdVoSENm51657568;     thFjMyNBGapdVoSENm51657568 = thFjMyNBGapdVoSENm26916968;     thFjMyNBGapdVoSENm26916968 = thFjMyNBGapdVoSENm52478876;     thFjMyNBGapdVoSENm52478876 = thFjMyNBGapdVoSENm51525756;     thFjMyNBGapdVoSENm51525756 = thFjMyNBGapdVoSENm91419083;     thFjMyNBGapdVoSENm91419083 = thFjMyNBGapdVoSENm29916973;     thFjMyNBGapdVoSENm29916973 = thFjMyNBGapdVoSENm70452470;     thFjMyNBGapdVoSENm70452470 = thFjMyNBGapdVoSENm58001824;     thFjMyNBGapdVoSENm58001824 = thFjMyNBGapdVoSENm81701488;     thFjMyNBGapdVoSENm81701488 = thFjMyNBGapdVoSENm95241699;     thFjMyNBGapdVoSENm95241699 = thFjMyNBGapdVoSENm16837909;     thFjMyNBGapdVoSENm16837909 = thFjMyNBGapdVoSENm94392097;     thFjMyNBGapdVoSENm94392097 = thFjMyNBGapdVoSENm24679167;     thFjMyNBGapdVoSENm24679167 = thFjMyNBGapdVoSENm48452764;     thFjMyNBGapdVoSENm48452764 = thFjMyNBGapdVoSENm11608599;     thFjMyNBGapdVoSENm11608599 = thFjMyNBGapdVoSENm20105338;     thFjMyNBGapdVoSENm20105338 = thFjMyNBGapdVoSENm76286296;     thFjMyNBGapdVoSENm76286296 = thFjMyNBGapdVoSENm2446925;     thFjMyNBGapdVoSENm2446925 = thFjMyNBGapdVoSENm9092011;     thFjMyNBGapdVoSENm9092011 = thFjMyNBGapdVoSENm82853667;     thFjMyNBGapdVoSENm82853667 = thFjMyNBGapdVoSENm8502476;     thFjMyNBGapdVoSENm8502476 = thFjMyNBGapdVoSENm11032045;     thFjMyNBGapdVoSENm11032045 = thFjMyNBGapdVoSENm70538039;     thFjMyNBGapdVoSENm70538039 = thFjMyNBGapdVoSENm27246107;     thFjMyNBGapdVoSENm27246107 = thFjMyNBGapdVoSENm71983350;     thFjMyNBGapdVoSENm71983350 = thFjMyNBGapdVoSENm33359332;     thFjMyNBGapdVoSENm33359332 = thFjMyNBGapdVoSENm85492996;     thFjMyNBGapdVoSENm85492996 = thFjMyNBGapdVoSENm33090001;     thFjMyNBGapdVoSENm33090001 = thFjMyNBGapdVoSENm97168045;     thFjMyNBGapdVoSENm97168045 = thFjMyNBGapdVoSENm57506541;     thFjMyNBGapdVoSENm57506541 = thFjMyNBGapdVoSENm78140453;     thFjMyNBGapdVoSENm78140453 = thFjMyNBGapdVoSENm51566215;     thFjMyNBGapdVoSENm51566215 = thFjMyNBGapdVoSENm46918368;     thFjMyNBGapdVoSENm46918368 = thFjMyNBGapdVoSENm14927951;     thFjMyNBGapdVoSENm14927951 = thFjMyNBGapdVoSENm77082997;     thFjMyNBGapdVoSENm77082997 = thFjMyNBGapdVoSENm98520958;     thFjMyNBGapdVoSENm98520958 = thFjMyNBGapdVoSENm67788690;     thFjMyNBGapdVoSENm67788690 = thFjMyNBGapdVoSENm13132965;     thFjMyNBGapdVoSENm13132965 = thFjMyNBGapdVoSENm43472661;     thFjMyNBGapdVoSENm43472661 = thFjMyNBGapdVoSENm51660552;     thFjMyNBGapdVoSENm51660552 = thFjMyNBGapdVoSENm99121607;     thFjMyNBGapdVoSENm99121607 = thFjMyNBGapdVoSENm7022708;     thFjMyNBGapdVoSENm7022708 = thFjMyNBGapdVoSENm66150379;     thFjMyNBGapdVoSENm66150379 = thFjMyNBGapdVoSENm67872797;     thFjMyNBGapdVoSENm67872797 = thFjMyNBGapdVoSENm85070847;     thFjMyNBGapdVoSENm85070847 = thFjMyNBGapdVoSENm5325607;     thFjMyNBGapdVoSENm5325607 = thFjMyNBGapdVoSENm28836281;     thFjMyNBGapdVoSENm28836281 = thFjMyNBGapdVoSENm49136900;     thFjMyNBGapdVoSENm49136900 = thFjMyNBGapdVoSENm81579009;     thFjMyNBGapdVoSENm81579009 = thFjMyNBGapdVoSENm17500927;     thFjMyNBGapdVoSENm17500927 = thFjMyNBGapdVoSENm991896;     thFjMyNBGapdVoSENm991896 = thFjMyNBGapdVoSENm34562515;     thFjMyNBGapdVoSENm34562515 = thFjMyNBGapdVoSENm45688804;     thFjMyNBGapdVoSENm45688804 = thFjMyNBGapdVoSENm29242634;     thFjMyNBGapdVoSENm29242634 = thFjMyNBGapdVoSENm98007213;     thFjMyNBGapdVoSENm98007213 = thFjMyNBGapdVoSENm40625524;     thFjMyNBGapdVoSENm40625524 = thFjMyNBGapdVoSENm56378929;     thFjMyNBGapdVoSENm56378929 = thFjMyNBGapdVoSENm25232770;     thFjMyNBGapdVoSENm25232770 = thFjMyNBGapdVoSENm79542405;     thFjMyNBGapdVoSENm79542405 = thFjMyNBGapdVoSENm58059751;     thFjMyNBGapdVoSENm58059751 = thFjMyNBGapdVoSENm44423977;     thFjMyNBGapdVoSENm44423977 = thFjMyNBGapdVoSENm37362469;     thFjMyNBGapdVoSENm37362469 = thFjMyNBGapdVoSENm60833778;     thFjMyNBGapdVoSENm60833778 = thFjMyNBGapdVoSENm24194947;     thFjMyNBGapdVoSENm24194947 = thFjMyNBGapdVoSENm17101246;     thFjMyNBGapdVoSENm17101246 = thFjMyNBGapdVoSENm65271693;     thFjMyNBGapdVoSENm65271693 = thFjMyNBGapdVoSENm47473729;     thFjMyNBGapdVoSENm47473729 = thFjMyNBGapdVoSENm9751217;     thFjMyNBGapdVoSENm9751217 = thFjMyNBGapdVoSENm71369766;     thFjMyNBGapdVoSENm71369766 = thFjMyNBGapdVoSENm13087641;     thFjMyNBGapdVoSENm13087641 = thFjMyNBGapdVoSENm52316648;     thFjMyNBGapdVoSENm52316648 = thFjMyNBGapdVoSENm63153331;     thFjMyNBGapdVoSENm63153331 = thFjMyNBGapdVoSENm58974263;     thFjMyNBGapdVoSENm58974263 = thFjMyNBGapdVoSENm34774311;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void WOXBRNbcBxaOYGjHRbnIJkPJqKUaFtbkOzizADf56263840() {     double xEBEdCCTFipzirvUlz57167899 = -130133784;    double xEBEdCCTFipzirvUlz80559916 = 15104731;    double xEBEdCCTFipzirvUlz42605959 = -166247776;    double xEBEdCCTFipzirvUlz36273857 = -692168388;    double xEBEdCCTFipzirvUlz48348821 = 6615977;    double xEBEdCCTFipzirvUlz1515325 = -697247713;    double xEBEdCCTFipzirvUlz52348969 = -384215651;    double xEBEdCCTFipzirvUlz31857735 = -616665771;    double xEBEdCCTFipzirvUlz34690534 = -770632912;    double xEBEdCCTFipzirvUlz59782792 = -539313562;    double xEBEdCCTFipzirvUlz52112998 = -160814019;    double xEBEdCCTFipzirvUlz23188797 = -893605821;    double xEBEdCCTFipzirvUlz4729344 = -17701526;    double xEBEdCCTFipzirvUlz53795064 = -17904183;    double xEBEdCCTFipzirvUlz39415035 = -470331780;    double xEBEdCCTFipzirvUlz32805862 = -862743783;    double xEBEdCCTFipzirvUlz95879347 = 43366953;    double xEBEdCCTFipzirvUlz82693587 = -591108748;    double xEBEdCCTFipzirvUlz74368809 = -49004737;    double xEBEdCCTFipzirvUlz4032184 = -271113847;    double xEBEdCCTFipzirvUlz14401292 = -341478934;    double xEBEdCCTFipzirvUlz23125218 = -915172097;    double xEBEdCCTFipzirvUlz43693118 = -37772234;    double xEBEdCCTFipzirvUlz19859118 = -74994121;    double xEBEdCCTFipzirvUlz61878371 = -833355511;    double xEBEdCCTFipzirvUlz83825218 = -977201232;    double xEBEdCCTFipzirvUlz83377528 = -238996092;    double xEBEdCCTFipzirvUlz22165494 = -643116821;    double xEBEdCCTFipzirvUlz21131082 = -488251094;    double xEBEdCCTFipzirvUlz85546186 = -389426025;    double xEBEdCCTFipzirvUlz62403882 = 59182141;    double xEBEdCCTFipzirvUlz64236416 = -543222527;    double xEBEdCCTFipzirvUlz25503220 = -911175075;    double xEBEdCCTFipzirvUlz29558320 = -615974354;    double xEBEdCCTFipzirvUlz51873151 = -933611696;    double xEBEdCCTFipzirvUlz80566167 = -735013324;    double xEBEdCCTFipzirvUlz76740043 = -671492680;    double xEBEdCCTFipzirvUlz546330 = -919180341;    double xEBEdCCTFipzirvUlz7386633 = -97514054;    double xEBEdCCTFipzirvUlz72991989 = -613159727;    double xEBEdCCTFipzirvUlz89354466 = -173502498;    double xEBEdCCTFipzirvUlz14419330 = 24787100;    double xEBEdCCTFipzirvUlz65372170 = -239653647;    double xEBEdCCTFipzirvUlz16498517 = -496032944;    double xEBEdCCTFipzirvUlz86412138 = -543050823;    double xEBEdCCTFipzirvUlz76764324 = -625701125;    double xEBEdCCTFipzirvUlz67453272 = -288373244;    double xEBEdCCTFipzirvUlz77717569 = -594436530;    double xEBEdCCTFipzirvUlz86833559 = 41825104;    double xEBEdCCTFipzirvUlz47576362 = -533860102;    double xEBEdCCTFipzirvUlz22855953 = -292486045;    double xEBEdCCTFipzirvUlz31287351 = -268271807;    double xEBEdCCTFipzirvUlz36225387 = -672489217;    double xEBEdCCTFipzirvUlz35529270 = -418570473;    double xEBEdCCTFipzirvUlz41862548 = -574629940;    double xEBEdCCTFipzirvUlz34042682 = -214961688;    double xEBEdCCTFipzirvUlz36866799 = -947123036;    double xEBEdCCTFipzirvUlz22746841 = 8746345;    double xEBEdCCTFipzirvUlz74395485 = -858812877;    double xEBEdCCTFipzirvUlz64523602 = -16182791;    double xEBEdCCTFipzirvUlz18137797 = -358251621;    double xEBEdCCTFipzirvUlz30183475 = -741098831;    double xEBEdCCTFipzirvUlz10726653 = -28414678;    double xEBEdCCTFipzirvUlz49144348 = -281206887;    double xEBEdCCTFipzirvUlz97378909 = -498495704;    double xEBEdCCTFipzirvUlz87876581 = -617591493;    double xEBEdCCTFipzirvUlz97685576 = -982430746;    double xEBEdCCTFipzirvUlz75171023 = -401727173;    double xEBEdCCTFipzirvUlz1921913 = -84292487;    double xEBEdCCTFipzirvUlz58848868 = -735318457;    double xEBEdCCTFipzirvUlz56065818 = -91251103;    double xEBEdCCTFipzirvUlz95333017 = -37452706;    double xEBEdCCTFipzirvUlz75306955 = -393594695;    double xEBEdCCTFipzirvUlz1376821 = -435845011;    double xEBEdCCTFipzirvUlz14677717 = 2388650;    double xEBEdCCTFipzirvUlz99981962 = -266266034;    double xEBEdCCTFipzirvUlz57753047 = -575518450;    double xEBEdCCTFipzirvUlz27194601 = -541739290;    double xEBEdCCTFipzirvUlz33446980 = -531943299;    double xEBEdCCTFipzirvUlz85114047 = -107654386;    double xEBEdCCTFipzirvUlz16371947 = -588827988;    double xEBEdCCTFipzirvUlz5659959 = -644559563;    double xEBEdCCTFipzirvUlz35331934 = -584941925;    double xEBEdCCTFipzirvUlz73554720 = -954390992;    double xEBEdCCTFipzirvUlz62690233 = 3060019;    double xEBEdCCTFipzirvUlz31116532 = -672546053;    double xEBEdCCTFipzirvUlz28011030 = -870733310;    double xEBEdCCTFipzirvUlz89973949 = -392604603;    double xEBEdCCTFipzirvUlz87695772 = 58655586;    double xEBEdCCTFipzirvUlz17830469 = -618650009;    double xEBEdCCTFipzirvUlz43699369 = -787890288;    double xEBEdCCTFipzirvUlz53993203 = -580239026;    double xEBEdCCTFipzirvUlz26150845 = 39632536;    double xEBEdCCTFipzirvUlz42863030 = 18668737;    double xEBEdCCTFipzirvUlz54854192 = -154908106;    double xEBEdCCTFipzirvUlz59170992 = -432403667;    double xEBEdCCTFipzirvUlz3692677 = -946798222;    double xEBEdCCTFipzirvUlz16227823 = -958446760;    double xEBEdCCTFipzirvUlz19119608 = -997537241;    double xEBEdCCTFipzirvUlz98535557 = -130133784;     xEBEdCCTFipzirvUlz57167899 = xEBEdCCTFipzirvUlz80559916;     xEBEdCCTFipzirvUlz80559916 = xEBEdCCTFipzirvUlz42605959;     xEBEdCCTFipzirvUlz42605959 = xEBEdCCTFipzirvUlz36273857;     xEBEdCCTFipzirvUlz36273857 = xEBEdCCTFipzirvUlz48348821;     xEBEdCCTFipzirvUlz48348821 = xEBEdCCTFipzirvUlz1515325;     xEBEdCCTFipzirvUlz1515325 = xEBEdCCTFipzirvUlz52348969;     xEBEdCCTFipzirvUlz52348969 = xEBEdCCTFipzirvUlz31857735;     xEBEdCCTFipzirvUlz31857735 = xEBEdCCTFipzirvUlz34690534;     xEBEdCCTFipzirvUlz34690534 = xEBEdCCTFipzirvUlz59782792;     xEBEdCCTFipzirvUlz59782792 = xEBEdCCTFipzirvUlz52112998;     xEBEdCCTFipzirvUlz52112998 = xEBEdCCTFipzirvUlz23188797;     xEBEdCCTFipzirvUlz23188797 = xEBEdCCTFipzirvUlz4729344;     xEBEdCCTFipzirvUlz4729344 = xEBEdCCTFipzirvUlz53795064;     xEBEdCCTFipzirvUlz53795064 = xEBEdCCTFipzirvUlz39415035;     xEBEdCCTFipzirvUlz39415035 = xEBEdCCTFipzirvUlz32805862;     xEBEdCCTFipzirvUlz32805862 = xEBEdCCTFipzirvUlz95879347;     xEBEdCCTFipzirvUlz95879347 = xEBEdCCTFipzirvUlz82693587;     xEBEdCCTFipzirvUlz82693587 = xEBEdCCTFipzirvUlz74368809;     xEBEdCCTFipzirvUlz74368809 = xEBEdCCTFipzirvUlz4032184;     xEBEdCCTFipzirvUlz4032184 = xEBEdCCTFipzirvUlz14401292;     xEBEdCCTFipzirvUlz14401292 = xEBEdCCTFipzirvUlz23125218;     xEBEdCCTFipzirvUlz23125218 = xEBEdCCTFipzirvUlz43693118;     xEBEdCCTFipzirvUlz43693118 = xEBEdCCTFipzirvUlz19859118;     xEBEdCCTFipzirvUlz19859118 = xEBEdCCTFipzirvUlz61878371;     xEBEdCCTFipzirvUlz61878371 = xEBEdCCTFipzirvUlz83825218;     xEBEdCCTFipzirvUlz83825218 = xEBEdCCTFipzirvUlz83377528;     xEBEdCCTFipzirvUlz83377528 = xEBEdCCTFipzirvUlz22165494;     xEBEdCCTFipzirvUlz22165494 = xEBEdCCTFipzirvUlz21131082;     xEBEdCCTFipzirvUlz21131082 = xEBEdCCTFipzirvUlz85546186;     xEBEdCCTFipzirvUlz85546186 = xEBEdCCTFipzirvUlz62403882;     xEBEdCCTFipzirvUlz62403882 = xEBEdCCTFipzirvUlz64236416;     xEBEdCCTFipzirvUlz64236416 = xEBEdCCTFipzirvUlz25503220;     xEBEdCCTFipzirvUlz25503220 = xEBEdCCTFipzirvUlz29558320;     xEBEdCCTFipzirvUlz29558320 = xEBEdCCTFipzirvUlz51873151;     xEBEdCCTFipzirvUlz51873151 = xEBEdCCTFipzirvUlz80566167;     xEBEdCCTFipzirvUlz80566167 = xEBEdCCTFipzirvUlz76740043;     xEBEdCCTFipzirvUlz76740043 = xEBEdCCTFipzirvUlz546330;     xEBEdCCTFipzirvUlz546330 = xEBEdCCTFipzirvUlz7386633;     xEBEdCCTFipzirvUlz7386633 = xEBEdCCTFipzirvUlz72991989;     xEBEdCCTFipzirvUlz72991989 = xEBEdCCTFipzirvUlz89354466;     xEBEdCCTFipzirvUlz89354466 = xEBEdCCTFipzirvUlz14419330;     xEBEdCCTFipzirvUlz14419330 = xEBEdCCTFipzirvUlz65372170;     xEBEdCCTFipzirvUlz65372170 = xEBEdCCTFipzirvUlz16498517;     xEBEdCCTFipzirvUlz16498517 = xEBEdCCTFipzirvUlz86412138;     xEBEdCCTFipzirvUlz86412138 = xEBEdCCTFipzirvUlz76764324;     xEBEdCCTFipzirvUlz76764324 = xEBEdCCTFipzirvUlz67453272;     xEBEdCCTFipzirvUlz67453272 = xEBEdCCTFipzirvUlz77717569;     xEBEdCCTFipzirvUlz77717569 = xEBEdCCTFipzirvUlz86833559;     xEBEdCCTFipzirvUlz86833559 = xEBEdCCTFipzirvUlz47576362;     xEBEdCCTFipzirvUlz47576362 = xEBEdCCTFipzirvUlz22855953;     xEBEdCCTFipzirvUlz22855953 = xEBEdCCTFipzirvUlz31287351;     xEBEdCCTFipzirvUlz31287351 = xEBEdCCTFipzirvUlz36225387;     xEBEdCCTFipzirvUlz36225387 = xEBEdCCTFipzirvUlz35529270;     xEBEdCCTFipzirvUlz35529270 = xEBEdCCTFipzirvUlz41862548;     xEBEdCCTFipzirvUlz41862548 = xEBEdCCTFipzirvUlz34042682;     xEBEdCCTFipzirvUlz34042682 = xEBEdCCTFipzirvUlz36866799;     xEBEdCCTFipzirvUlz36866799 = xEBEdCCTFipzirvUlz22746841;     xEBEdCCTFipzirvUlz22746841 = xEBEdCCTFipzirvUlz74395485;     xEBEdCCTFipzirvUlz74395485 = xEBEdCCTFipzirvUlz64523602;     xEBEdCCTFipzirvUlz64523602 = xEBEdCCTFipzirvUlz18137797;     xEBEdCCTFipzirvUlz18137797 = xEBEdCCTFipzirvUlz30183475;     xEBEdCCTFipzirvUlz30183475 = xEBEdCCTFipzirvUlz10726653;     xEBEdCCTFipzirvUlz10726653 = xEBEdCCTFipzirvUlz49144348;     xEBEdCCTFipzirvUlz49144348 = xEBEdCCTFipzirvUlz97378909;     xEBEdCCTFipzirvUlz97378909 = xEBEdCCTFipzirvUlz87876581;     xEBEdCCTFipzirvUlz87876581 = xEBEdCCTFipzirvUlz97685576;     xEBEdCCTFipzirvUlz97685576 = xEBEdCCTFipzirvUlz75171023;     xEBEdCCTFipzirvUlz75171023 = xEBEdCCTFipzirvUlz1921913;     xEBEdCCTFipzirvUlz1921913 = xEBEdCCTFipzirvUlz58848868;     xEBEdCCTFipzirvUlz58848868 = xEBEdCCTFipzirvUlz56065818;     xEBEdCCTFipzirvUlz56065818 = xEBEdCCTFipzirvUlz95333017;     xEBEdCCTFipzirvUlz95333017 = xEBEdCCTFipzirvUlz75306955;     xEBEdCCTFipzirvUlz75306955 = xEBEdCCTFipzirvUlz1376821;     xEBEdCCTFipzirvUlz1376821 = xEBEdCCTFipzirvUlz14677717;     xEBEdCCTFipzirvUlz14677717 = xEBEdCCTFipzirvUlz99981962;     xEBEdCCTFipzirvUlz99981962 = xEBEdCCTFipzirvUlz57753047;     xEBEdCCTFipzirvUlz57753047 = xEBEdCCTFipzirvUlz27194601;     xEBEdCCTFipzirvUlz27194601 = xEBEdCCTFipzirvUlz33446980;     xEBEdCCTFipzirvUlz33446980 = xEBEdCCTFipzirvUlz85114047;     xEBEdCCTFipzirvUlz85114047 = xEBEdCCTFipzirvUlz16371947;     xEBEdCCTFipzirvUlz16371947 = xEBEdCCTFipzirvUlz5659959;     xEBEdCCTFipzirvUlz5659959 = xEBEdCCTFipzirvUlz35331934;     xEBEdCCTFipzirvUlz35331934 = xEBEdCCTFipzirvUlz73554720;     xEBEdCCTFipzirvUlz73554720 = xEBEdCCTFipzirvUlz62690233;     xEBEdCCTFipzirvUlz62690233 = xEBEdCCTFipzirvUlz31116532;     xEBEdCCTFipzirvUlz31116532 = xEBEdCCTFipzirvUlz28011030;     xEBEdCCTFipzirvUlz28011030 = xEBEdCCTFipzirvUlz89973949;     xEBEdCCTFipzirvUlz89973949 = xEBEdCCTFipzirvUlz87695772;     xEBEdCCTFipzirvUlz87695772 = xEBEdCCTFipzirvUlz17830469;     xEBEdCCTFipzirvUlz17830469 = xEBEdCCTFipzirvUlz43699369;     xEBEdCCTFipzirvUlz43699369 = xEBEdCCTFipzirvUlz53993203;     xEBEdCCTFipzirvUlz53993203 = xEBEdCCTFipzirvUlz26150845;     xEBEdCCTFipzirvUlz26150845 = xEBEdCCTFipzirvUlz42863030;     xEBEdCCTFipzirvUlz42863030 = xEBEdCCTFipzirvUlz54854192;     xEBEdCCTFipzirvUlz54854192 = xEBEdCCTFipzirvUlz59170992;     xEBEdCCTFipzirvUlz59170992 = xEBEdCCTFipzirvUlz3692677;     xEBEdCCTFipzirvUlz3692677 = xEBEdCCTFipzirvUlz16227823;     xEBEdCCTFipzirvUlz16227823 = xEBEdCCTFipzirvUlz19119608;     xEBEdCCTFipzirvUlz19119608 = xEBEdCCTFipzirvUlz98535557;     xEBEdCCTFipzirvUlz98535557 = xEBEdCCTFipzirvUlz57167899;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void unkRxxvHfKywoqicfuASydBYojGBdObqqdFSVwT38492601() {     double PsedGNkYRzOnpjbrQm8903350 = -246388617;    double PsedGNkYRzOnpjbrQm96233899 = -61795025;    double PsedGNkYRzOnpjbrQm91406318 = 36392840;    double PsedGNkYRzOnpjbrQm11349259 = -508437530;    double PsedGNkYRzOnpjbrQm25072754 = -801034677;    double PsedGNkYRzOnpjbrQm26398679 = -856274940;    double PsedGNkYRzOnpjbrQm26125812 = -207427247;    double PsedGNkYRzOnpjbrQm50649213 = -740445326;    double PsedGNkYRzOnpjbrQm85988610 = -561481622;    double PsedGNkYRzOnpjbrQm28579916 = 19040455;    double PsedGNkYRzOnpjbrQm47405697 = -122536491;    double PsedGNkYRzOnpjbrQm33545174 = -828587321;    double PsedGNkYRzOnpjbrQm91910137 = -726881787;    double PsedGNkYRzOnpjbrQm12562783 = -744584730;    double PsedGNkYRzOnpjbrQm93430292 = 51940510;    double PsedGNkYRzOnpjbrQm44533134 = -574427738;    double PsedGNkYRzOnpjbrQm51849873 = -324727737;    double PsedGNkYRzOnpjbrQm68376509 = 46314757;    double PsedGNkYRzOnpjbrQm33942659 = -576918921;    double PsedGNkYRzOnpjbrQm23761758 = 18618004;    double PsedGNkYRzOnpjbrQm60148645 = -424287102;    double PsedGNkYRzOnpjbrQm25544671 = 11346896;    double PsedGNkYRzOnpjbrQm45042632 = -746009681;    double PsedGNkYRzOnpjbrQm12509369 = 53413928;    double PsedGNkYRzOnpjbrQm33294230 = -779009948;    double PsedGNkYRzOnpjbrQm41530632 = -222811011;    double PsedGNkYRzOnpjbrQm22206163 = -701404810;    double PsedGNkYRzOnpjbrQm20294719 = 73552493;    double PsedGNkYRzOnpjbrQm95881154 = -538149996;    double PsedGNkYRzOnpjbrQm55531270 = -851326821;    double PsedGNkYRzOnpjbrQm99622691 = -273700325;    double PsedGNkYRzOnpjbrQm77266146 = -866996718;    double PsedGNkYRzOnpjbrQm23596529 = -393556961;    double PsedGNkYRzOnpjbrQm23582033 = -276571519;    double PsedGNkYRzOnpjbrQm50078279 = -50421339;    double PsedGNkYRzOnpjbrQm62265777 = -971182152;    double PsedGNkYRzOnpjbrQm26388270 = -215847424;    double PsedGNkYRzOnpjbrQm1379942 = 97307294;    double PsedGNkYRzOnpjbrQm77161474 = -542831449;    double PsedGNkYRzOnpjbrQm98074405 = -131775394;    double PsedGNkYRzOnpjbrQm58038554 = -292661285;    double PsedGNkYRzOnpjbrQm74444729 = 36267479;    double PsedGNkYRzOnpjbrQm21955402 = -140430178;    double PsedGNkYRzOnpjbrQm9434336 = -421421622;    double PsedGNkYRzOnpjbrQm58441346 = -43547906;    double PsedGNkYRzOnpjbrQm78458771 = 50406934;    double PsedGNkYRzOnpjbrQm53619466 = -750713698;    double PsedGNkYRzOnpjbrQm56702034 = -998841225;    double PsedGNkYRzOnpjbrQm75852012 = 77872375;    double PsedGNkYRzOnpjbrQm36232621 = -392871482;    double PsedGNkYRzOnpjbrQm63535845 = -990201;    double PsedGNkYRzOnpjbrQm63267103 = -729871367;    double PsedGNkYRzOnpjbrQm59464133 = -416602405;    double PsedGNkYRzOnpjbrQm5588511 = -33369785;    double PsedGNkYRzOnpjbrQm78343956 = -604393141;    double PsedGNkYRzOnpjbrQm83358679 = -157735513;    double PsedGNkYRzOnpjbrQm51191267 = -315785344;    double PsedGNkYRzOnpjbrQm78896950 = 82978911;    double PsedGNkYRzOnpjbrQm78055028 = -729427583;    double PsedGNkYRzOnpjbrQm83542121 = -478223666;    double PsedGNkYRzOnpjbrQm4192517 = -54870130;    double PsedGNkYRzOnpjbrQm5831094 = -180979741;    double PsedGNkYRzOnpjbrQm54768058 = -102295330;    double PsedGNkYRzOnpjbrQm30457341 = -710154802;    double PsedGNkYRzOnpjbrQm28957225 = -707259220;    double PsedGNkYRzOnpjbrQm70139550 = -255539773;    double PsedGNkYRzOnpjbrQm9948646 = -335030360;    double PsedGNkYRzOnpjbrQm68328105 = -350310268;    double PsedGNkYRzOnpjbrQm62484503 = -594163391;    double PsedGNkYRzOnpjbrQm31164515 = 23122662;    double PsedGNkYRzOnpjbrQm18144864 = -258580315;    double PsedGNkYRzOnpjbrQm50469931 = -322035032;    double PsedGNkYRzOnpjbrQm91215034 = -410853794;    double PsedGNkYRzOnpjbrQm35868253 = -345143528;    double PsedGNkYRzOnpjbrQm65723204 = -688720711;    double PsedGNkYRzOnpjbrQm85703915 = -360554581;    double PsedGNkYRzOnpjbrQm3589269 = -848222926;    double PsedGNkYRzOnpjbrQm35608296 = -224588060;    double PsedGNkYRzOnpjbrQm54068022 = -903038167;    double PsedGNkYRzOnpjbrQm54835459 = -729416883;    double PsedGNkYRzOnpjbrQm87911165 = -472097314;    double PsedGNkYRzOnpjbrQm65504129 = -702563585;    double PsedGNkYRzOnpjbrQm44442706 = 95680118;    double PsedGNkYRzOnpjbrQm59648534 = -45278514;    double PsedGNkYRzOnpjbrQm91995424 = -750336621;    double PsedGNkYRzOnpjbrQm36355588 = -543828959;    double PsedGNkYRzOnpjbrQm17802014 = -350394314;    double PsedGNkYRzOnpjbrQm18008019 = -260187177;    double PsedGNkYRzOnpjbrQm45238076 = -672178379;    double PsedGNkYRzOnpjbrQm66719600 = -892685827;    double PsedGNkYRzOnpjbrQm11074511 = -555396808;    double PsedGNkYRzOnpjbrQm47491320 = -198826336;    double PsedGNkYRzOnpjbrQm23324914 = -173265123;    double PsedGNkYRzOnpjbrQm93619353 = 35392217;    double PsedGNkYRzOnpjbrQm93881889 = 23094736;    double PsedGNkYRzOnpjbrQm52207460 = -11681545;    double PsedGNkYRzOnpjbrQm19676672 = -861437192;    double PsedGNkYRzOnpjbrQm91498061 = -430275377;    double PsedGNkYRzOnpjbrQm80477111 = -714162402;    double PsedGNkYRzOnpjbrQm88301796 = -246388617;     PsedGNkYRzOnpjbrQm8903350 = PsedGNkYRzOnpjbrQm96233899;     PsedGNkYRzOnpjbrQm96233899 = PsedGNkYRzOnpjbrQm91406318;     PsedGNkYRzOnpjbrQm91406318 = PsedGNkYRzOnpjbrQm11349259;     PsedGNkYRzOnpjbrQm11349259 = PsedGNkYRzOnpjbrQm25072754;     PsedGNkYRzOnpjbrQm25072754 = PsedGNkYRzOnpjbrQm26398679;     PsedGNkYRzOnpjbrQm26398679 = PsedGNkYRzOnpjbrQm26125812;     PsedGNkYRzOnpjbrQm26125812 = PsedGNkYRzOnpjbrQm50649213;     PsedGNkYRzOnpjbrQm50649213 = PsedGNkYRzOnpjbrQm85988610;     PsedGNkYRzOnpjbrQm85988610 = PsedGNkYRzOnpjbrQm28579916;     PsedGNkYRzOnpjbrQm28579916 = PsedGNkYRzOnpjbrQm47405697;     PsedGNkYRzOnpjbrQm47405697 = PsedGNkYRzOnpjbrQm33545174;     PsedGNkYRzOnpjbrQm33545174 = PsedGNkYRzOnpjbrQm91910137;     PsedGNkYRzOnpjbrQm91910137 = PsedGNkYRzOnpjbrQm12562783;     PsedGNkYRzOnpjbrQm12562783 = PsedGNkYRzOnpjbrQm93430292;     PsedGNkYRzOnpjbrQm93430292 = PsedGNkYRzOnpjbrQm44533134;     PsedGNkYRzOnpjbrQm44533134 = PsedGNkYRzOnpjbrQm51849873;     PsedGNkYRzOnpjbrQm51849873 = PsedGNkYRzOnpjbrQm68376509;     PsedGNkYRzOnpjbrQm68376509 = PsedGNkYRzOnpjbrQm33942659;     PsedGNkYRzOnpjbrQm33942659 = PsedGNkYRzOnpjbrQm23761758;     PsedGNkYRzOnpjbrQm23761758 = PsedGNkYRzOnpjbrQm60148645;     PsedGNkYRzOnpjbrQm60148645 = PsedGNkYRzOnpjbrQm25544671;     PsedGNkYRzOnpjbrQm25544671 = PsedGNkYRzOnpjbrQm45042632;     PsedGNkYRzOnpjbrQm45042632 = PsedGNkYRzOnpjbrQm12509369;     PsedGNkYRzOnpjbrQm12509369 = PsedGNkYRzOnpjbrQm33294230;     PsedGNkYRzOnpjbrQm33294230 = PsedGNkYRzOnpjbrQm41530632;     PsedGNkYRzOnpjbrQm41530632 = PsedGNkYRzOnpjbrQm22206163;     PsedGNkYRzOnpjbrQm22206163 = PsedGNkYRzOnpjbrQm20294719;     PsedGNkYRzOnpjbrQm20294719 = PsedGNkYRzOnpjbrQm95881154;     PsedGNkYRzOnpjbrQm95881154 = PsedGNkYRzOnpjbrQm55531270;     PsedGNkYRzOnpjbrQm55531270 = PsedGNkYRzOnpjbrQm99622691;     PsedGNkYRzOnpjbrQm99622691 = PsedGNkYRzOnpjbrQm77266146;     PsedGNkYRzOnpjbrQm77266146 = PsedGNkYRzOnpjbrQm23596529;     PsedGNkYRzOnpjbrQm23596529 = PsedGNkYRzOnpjbrQm23582033;     PsedGNkYRzOnpjbrQm23582033 = PsedGNkYRzOnpjbrQm50078279;     PsedGNkYRzOnpjbrQm50078279 = PsedGNkYRzOnpjbrQm62265777;     PsedGNkYRzOnpjbrQm62265777 = PsedGNkYRzOnpjbrQm26388270;     PsedGNkYRzOnpjbrQm26388270 = PsedGNkYRzOnpjbrQm1379942;     PsedGNkYRzOnpjbrQm1379942 = PsedGNkYRzOnpjbrQm77161474;     PsedGNkYRzOnpjbrQm77161474 = PsedGNkYRzOnpjbrQm98074405;     PsedGNkYRzOnpjbrQm98074405 = PsedGNkYRzOnpjbrQm58038554;     PsedGNkYRzOnpjbrQm58038554 = PsedGNkYRzOnpjbrQm74444729;     PsedGNkYRzOnpjbrQm74444729 = PsedGNkYRzOnpjbrQm21955402;     PsedGNkYRzOnpjbrQm21955402 = PsedGNkYRzOnpjbrQm9434336;     PsedGNkYRzOnpjbrQm9434336 = PsedGNkYRzOnpjbrQm58441346;     PsedGNkYRzOnpjbrQm58441346 = PsedGNkYRzOnpjbrQm78458771;     PsedGNkYRzOnpjbrQm78458771 = PsedGNkYRzOnpjbrQm53619466;     PsedGNkYRzOnpjbrQm53619466 = PsedGNkYRzOnpjbrQm56702034;     PsedGNkYRzOnpjbrQm56702034 = PsedGNkYRzOnpjbrQm75852012;     PsedGNkYRzOnpjbrQm75852012 = PsedGNkYRzOnpjbrQm36232621;     PsedGNkYRzOnpjbrQm36232621 = PsedGNkYRzOnpjbrQm63535845;     PsedGNkYRzOnpjbrQm63535845 = PsedGNkYRzOnpjbrQm63267103;     PsedGNkYRzOnpjbrQm63267103 = PsedGNkYRzOnpjbrQm59464133;     PsedGNkYRzOnpjbrQm59464133 = PsedGNkYRzOnpjbrQm5588511;     PsedGNkYRzOnpjbrQm5588511 = PsedGNkYRzOnpjbrQm78343956;     PsedGNkYRzOnpjbrQm78343956 = PsedGNkYRzOnpjbrQm83358679;     PsedGNkYRzOnpjbrQm83358679 = PsedGNkYRzOnpjbrQm51191267;     PsedGNkYRzOnpjbrQm51191267 = PsedGNkYRzOnpjbrQm78896950;     PsedGNkYRzOnpjbrQm78896950 = PsedGNkYRzOnpjbrQm78055028;     PsedGNkYRzOnpjbrQm78055028 = PsedGNkYRzOnpjbrQm83542121;     PsedGNkYRzOnpjbrQm83542121 = PsedGNkYRzOnpjbrQm4192517;     PsedGNkYRzOnpjbrQm4192517 = PsedGNkYRzOnpjbrQm5831094;     PsedGNkYRzOnpjbrQm5831094 = PsedGNkYRzOnpjbrQm54768058;     PsedGNkYRzOnpjbrQm54768058 = PsedGNkYRzOnpjbrQm30457341;     PsedGNkYRzOnpjbrQm30457341 = PsedGNkYRzOnpjbrQm28957225;     PsedGNkYRzOnpjbrQm28957225 = PsedGNkYRzOnpjbrQm70139550;     PsedGNkYRzOnpjbrQm70139550 = PsedGNkYRzOnpjbrQm9948646;     PsedGNkYRzOnpjbrQm9948646 = PsedGNkYRzOnpjbrQm68328105;     PsedGNkYRzOnpjbrQm68328105 = PsedGNkYRzOnpjbrQm62484503;     PsedGNkYRzOnpjbrQm62484503 = PsedGNkYRzOnpjbrQm31164515;     PsedGNkYRzOnpjbrQm31164515 = PsedGNkYRzOnpjbrQm18144864;     PsedGNkYRzOnpjbrQm18144864 = PsedGNkYRzOnpjbrQm50469931;     PsedGNkYRzOnpjbrQm50469931 = PsedGNkYRzOnpjbrQm91215034;     PsedGNkYRzOnpjbrQm91215034 = PsedGNkYRzOnpjbrQm35868253;     PsedGNkYRzOnpjbrQm35868253 = PsedGNkYRzOnpjbrQm65723204;     PsedGNkYRzOnpjbrQm65723204 = PsedGNkYRzOnpjbrQm85703915;     PsedGNkYRzOnpjbrQm85703915 = PsedGNkYRzOnpjbrQm3589269;     PsedGNkYRzOnpjbrQm3589269 = PsedGNkYRzOnpjbrQm35608296;     PsedGNkYRzOnpjbrQm35608296 = PsedGNkYRzOnpjbrQm54068022;     PsedGNkYRzOnpjbrQm54068022 = PsedGNkYRzOnpjbrQm54835459;     PsedGNkYRzOnpjbrQm54835459 = PsedGNkYRzOnpjbrQm87911165;     PsedGNkYRzOnpjbrQm87911165 = PsedGNkYRzOnpjbrQm65504129;     PsedGNkYRzOnpjbrQm65504129 = PsedGNkYRzOnpjbrQm44442706;     PsedGNkYRzOnpjbrQm44442706 = PsedGNkYRzOnpjbrQm59648534;     PsedGNkYRzOnpjbrQm59648534 = PsedGNkYRzOnpjbrQm91995424;     PsedGNkYRzOnpjbrQm91995424 = PsedGNkYRzOnpjbrQm36355588;     PsedGNkYRzOnpjbrQm36355588 = PsedGNkYRzOnpjbrQm17802014;     PsedGNkYRzOnpjbrQm17802014 = PsedGNkYRzOnpjbrQm18008019;     PsedGNkYRzOnpjbrQm18008019 = PsedGNkYRzOnpjbrQm45238076;     PsedGNkYRzOnpjbrQm45238076 = PsedGNkYRzOnpjbrQm66719600;     PsedGNkYRzOnpjbrQm66719600 = PsedGNkYRzOnpjbrQm11074511;     PsedGNkYRzOnpjbrQm11074511 = PsedGNkYRzOnpjbrQm47491320;     PsedGNkYRzOnpjbrQm47491320 = PsedGNkYRzOnpjbrQm23324914;     PsedGNkYRzOnpjbrQm23324914 = PsedGNkYRzOnpjbrQm93619353;     PsedGNkYRzOnpjbrQm93619353 = PsedGNkYRzOnpjbrQm93881889;     PsedGNkYRzOnpjbrQm93881889 = PsedGNkYRzOnpjbrQm52207460;     PsedGNkYRzOnpjbrQm52207460 = PsedGNkYRzOnpjbrQm19676672;     PsedGNkYRzOnpjbrQm19676672 = PsedGNkYRzOnpjbrQm91498061;     PsedGNkYRzOnpjbrQm91498061 = PsedGNkYRzOnpjbrQm80477111;     PsedGNkYRzOnpjbrQm80477111 = PsedGNkYRzOnpjbrQm88301796;     PsedGNkYRzOnpjbrQm88301796 = PsedGNkYRzOnpjbrQm8903350;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void hVCyktNiKOVIWKrFnvPHywShArqLxQEdbqwQMpa68478831() {     double rQcSuSBpZrYZgZGHlC31296939 = -8268438;    double rQcSuSBpZrYZgZGHlC42009083 = 32257046;    double rQcSuSBpZrYZgZGHlC18862385 = -246132391;    double rQcSuSBpZrYZgZGHlC41276086 = -694304232;    double rQcSuSBpZrYZgZGHlC14406906 = -923736357;    double rQcSuSBpZrYZgZGHlC6476364 = 82549494;    double rQcSuSBpZrYZgZGHlC49734215 = -324878086;    double rQcSuSBpZrYZgZGHlC57069021 = -406864653;    double rQcSuSBpZrYZgZGHlC411578 = -732031591;    double rQcSuSBpZrYZgZGHlC23703987 = -86894007;    double rQcSuSBpZrYZgZGHlC64626951 = -159688819;    double rQcSuSBpZrYZgZGHlC75156446 = -243854252;    double rQcSuSBpZrYZgZGHlC27065404 = -223940632;    double rQcSuSBpZrYZgZGHlC1333315 = -927140435;    double rQcSuSBpZrYZgZGHlC84993461 = -712824351;    double rQcSuSBpZrYZgZGHlC14224500 = -623299630;    double rQcSuSBpZrYZgZGHlC45820465 = -782392987;    double rQcSuSBpZrYZgZGHlC51352393 = -8356312;    double rQcSuSBpZrYZgZGHlC54796019 = -94038779;    double rQcSuSBpZrYZgZGHlC30204278 = -721991998;    double rQcSuSBpZrYZgZGHlC81362327 = -705308037;    double rQcSuSBpZrYZgZGHlC11063624 = 16572466;    double rQcSuSBpZrYZgZGHlC11457559 = -463132431;    double rQcSuSBpZrYZgZGHlC95359047 = -629658407;    double rQcSuSBpZrYZgZGHlC40391787 = 26124781;    double rQcSuSBpZrYZgZGHlC13259550 = -758499307;    double rQcSuSBpZrYZgZGHlC99074001 = -158191590;    double rQcSuSBpZrYZgZGHlC90802643 = -205934972;    double rQcSuSBpZrYZgZGHlC90095268 = -236336800;    double rQcSuSBpZrYZgZGHlC88598579 = 3808686;    double rQcSuSBpZrYZgZGHlC10500818 = 32076757;    double rQcSuSBpZrYZgZGHlC50083480 = -27246312;    double rQcSuSBpZrYZgZGHlC19182777 = -720956240;    double rQcSuSBpZrYZgZGHlC82687882 = -724016637;    double rQcSuSBpZrYZgZGHlC43949606 = -954863837;    double rQcSuSBpZrYZgZGHlC61130457 = -106811782;    double rQcSuSBpZrYZgZGHlC7886615 = -949141998;    double rQcSuSBpZrYZgZGHlC85088363 = -875055499;    double rQcSuSBpZrYZgZGHlC90156009 = -231196064;    double rQcSuSBpZrYZgZGHlC46387227 = -658567737;    double rQcSuSBpZrYZgZGHlC98940257 = -707895053;    double rQcSuSBpZrYZgZGHlC77255459 = -627849130;    double rQcSuSBpZrYZgZGHlC67222234 = -568830508;    double rQcSuSBpZrYZgZGHlC49646557 = -861820827;    double rQcSuSBpZrYZgZGHlC42406561 = -479431982;    double rQcSuSBpZrYZgZGHlC46131085 = -319777490;    double rQcSuSBpZrYZgZGHlC38219071 = -847843329;    double rQcSuSBpZrYZgZGHlC25917128 = -146614860;    double rQcSuSBpZrYZgZGHlC51653528 = -308080462;    double rQcSuSBpZrYZgZGHlC13270944 = -947866855;    double rQcSuSBpZrYZgZGHlC59145692 = -777511471;    double rQcSuSBpZrYZgZGHlC22571103 = -778544901;    double rQcSuSBpZrYZgZGHlC62330187 = -196459627;    double rQcSuSBpZrYZgZGHlC55624785 = -877130742;    double rQcSuSBpZrYZgZGHlC87116503 = -988197979;    double rQcSuSBpZrYZgZGHlC20233315 = 75159096;    double rQcSuSBpZrYZgZGHlC30551525 = -504610524;    double rQcSuSBpZrYZgZGHlC23503338 = -616473984;    double rQcSuSBpZrYZgZGHlC884300 = -620429013;    double rQcSuSBpZrYZgZGHlC1147356 = -65237051;    double rQcSuSBpZrYZgZGHlC7402362 = -759258916;    double rQcSuSBpZrYZgZGHlC58931571 = -18943115;    double rQcSuSBpZrYZgZGHlC66973752 = -70527853;    double rQcSuSBpZrYZgZGHlC11812999 = -635840278;    double rQcSuSBpZrYZgZGHlC13203170 = -18970764;    double rQcSuSBpZrYZgZGHlC14543471 = -32442508;    double rQcSuSBpZrYZgZGHlC55973670 = -522898012;    double rQcSuSBpZrYZgZGHlC44377522 = -499923996;    double rQcSuSBpZrYZgZGHlC57383708 = -972276599;    double rQcSuSBpZrYZgZGHlC23863004 = -506012569;    double rQcSuSBpZrYZgZGHlC6337885 = -674157633;    double rQcSuSBpZrYZgZGHlC60732101 = -907337489;    double rQcSuSBpZrYZgZGHlC61196383 = -777160248;    double rQcSuSBpZrYZgZGHlC8408793 = -435471043;    double rQcSuSBpZrYZgZGHlC31264021 = 85903054;    double rQcSuSBpZrYZgZGHlC4106868 = 22541093;    double rQcSuSBpZrYZgZGHlC43841390 = -414597027;    double rQcSuSBpZrYZgZGHlC61811002 = -601311604;    double rQcSuSBpZrYZgZGHlC52952486 = -50226425;    double rQcSuSBpZrYZgZGHlC94260702 = -654097729;    double rQcSuSBpZrYZgZGHlC75040478 = -910655979;    double rQcSuSBpZrYZgZGHlC73156874 = 88423270;    double rQcSuSBpZrYZgZGHlC39149116 = -897854510;    double rQcSuSBpZrYZgZGHlC76824325 = -288469946;    double rQcSuSBpZrYZgZGHlC29452887 = -218679844;    double rQcSuSBpZrYZgZGHlC87929714 = -189378343;    double rQcSuSBpZrYZgZGHlC87753292 = -830786685;    double rQcSuSBpZrYZgZGHlC63557991 = -843825498;    double rQcSuSBpZrYZgZGHlC95571378 = -735818659;    double rQcSuSBpZrYZgZGHlC23716291 = -930022933;    double rQcSuSBpZrYZgZGHlC30578933 = -602201259;    double rQcSuSBpZrYZgZGHlC84383276 = -232668014;    double rQcSuSBpZrYZgZGHlC84204064 = -154626486;    double rQcSuSBpZrYZgZGHlC89008653 = -65959014;    double rQcSuSBpZrYZgZGHlC38984865 = -899308821;    double rQcSuSBpZrYZgZGHlC40008686 = -588951939;    double rQcSuSBpZrYZgZGHlC10281708 = -457321277;    double rQcSuSBpZrYZgZGHlC55409236 = -932990231;    double rQcSuSBpZrYZgZGHlC36443387 = -742850063;    double rQcSuSBpZrYZgZGHlC27863090 = -8268438;     rQcSuSBpZrYZgZGHlC31296939 = rQcSuSBpZrYZgZGHlC42009083;     rQcSuSBpZrYZgZGHlC42009083 = rQcSuSBpZrYZgZGHlC18862385;     rQcSuSBpZrYZgZGHlC18862385 = rQcSuSBpZrYZgZGHlC41276086;     rQcSuSBpZrYZgZGHlC41276086 = rQcSuSBpZrYZgZGHlC14406906;     rQcSuSBpZrYZgZGHlC14406906 = rQcSuSBpZrYZgZGHlC6476364;     rQcSuSBpZrYZgZGHlC6476364 = rQcSuSBpZrYZgZGHlC49734215;     rQcSuSBpZrYZgZGHlC49734215 = rQcSuSBpZrYZgZGHlC57069021;     rQcSuSBpZrYZgZGHlC57069021 = rQcSuSBpZrYZgZGHlC411578;     rQcSuSBpZrYZgZGHlC411578 = rQcSuSBpZrYZgZGHlC23703987;     rQcSuSBpZrYZgZGHlC23703987 = rQcSuSBpZrYZgZGHlC64626951;     rQcSuSBpZrYZgZGHlC64626951 = rQcSuSBpZrYZgZGHlC75156446;     rQcSuSBpZrYZgZGHlC75156446 = rQcSuSBpZrYZgZGHlC27065404;     rQcSuSBpZrYZgZGHlC27065404 = rQcSuSBpZrYZgZGHlC1333315;     rQcSuSBpZrYZgZGHlC1333315 = rQcSuSBpZrYZgZGHlC84993461;     rQcSuSBpZrYZgZGHlC84993461 = rQcSuSBpZrYZgZGHlC14224500;     rQcSuSBpZrYZgZGHlC14224500 = rQcSuSBpZrYZgZGHlC45820465;     rQcSuSBpZrYZgZGHlC45820465 = rQcSuSBpZrYZgZGHlC51352393;     rQcSuSBpZrYZgZGHlC51352393 = rQcSuSBpZrYZgZGHlC54796019;     rQcSuSBpZrYZgZGHlC54796019 = rQcSuSBpZrYZgZGHlC30204278;     rQcSuSBpZrYZgZGHlC30204278 = rQcSuSBpZrYZgZGHlC81362327;     rQcSuSBpZrYZgZGHlC81362327 = rQcSuSBpZrYZgZGHlC11063624;     rQcSuSBpZrYZgZGHlC11063624 = rQcSuSBpZrYZgZGHlC11457559;     rQcSuSBpZrYZgZGHlC11457559 = rQcSuSBpZrYZgZGHlC95359047;     rQcSuSBpZrYZgZGHlC95359047 = rQcSuSBpZrYZgZGHlC40391787;     rQcSuSBpZrYZgZGHlC40391787 = rQcSuSBpZrYZgZGHlC13259550;     rQcSuSBpZrYZgZGHlC13259550 = rQcSuSBpZrYZgZGHlC99074001;     rQcSuSBpZrYZgZGHlC99074001 = rQcSuSBpZrYZgZGHlC90802643;     rQcSuSBpZrYZgZGHlC90802643 = rQcSuSBpZrYZgZGHlC90095268;     rQcSuSBpZrYZgZGHlC90095268 = rQcSuSBpZrYZgZGHlC88598579;     rQcSuSBpZrYZgZGHlC88598579 = rQcSuSBpZrYZgZGHlC10500818;     rQcSuSBpZrYZgZGHlC10500818 = rQcSuSBpZrYZgZGHlC50083480;     rQcSuSBpZrYZgZGHlC50083480 = rQcSuSBpZrYZgZGHlC19182777;     rQcSuSBpZrYZgZGHlC19182777 = rQcSuSBpZrYZgZGHlC82687882;     rQcSuSBpZrYZgZGHlC82687882 = rQcSuSBpZrYZgZGHlC43949606;     rQcSuSBpZrYZgZGHlC43949606 = rQcSuSBpZrYZgZGHlC61130457;     rQcSuSBpZrYZgZGHlC61130457 = rQcSuSBpZrYZgZGHlC7886615;     rQcSuSBpZrYZgZGHlC7886615 = rQcSuSBpZrYZgZGHlC85088363;     rQcSuSBpZrYZgZGHlC85088363 = rQcSuSBpZrYZgZGHlC90156009;     rQcSuSBpZrYZgZGHlC90156009 = rQcSuSBpZrYZgZGHlC46387227;     rQcSuSBpZrYZgZGHlC46387227 = rQcSuSBpZrYZgZGHlC98940257;     rQcSuSBpZrYZgZGHlC98940257 = rQcSuSBpZrYZgZGHlC77255459;     rQcSuSBpZrYZgZGHlC77255459 = rQcSuSBpZrYZgZGHlC67222234;     rQcSuSBpZrYZgZGHlC67222234 = rQcSuSBpZrYZgZGHlC49646557;     rQcSuSBpZrYZgZGHlC49646557 = rQcSuSBpZrYZgZGHlC42406561;     rQcSuSBpZrYZgZGHlC42406561 = rQcSuSBpZrYZgZGHlC46131085;     rQcSuSBpZrYZgZGHlC46131085 = rQcSuSBpZrYZgZGHlC38219071;     rQcSuSBpZrYZgZGHlC38219071 = rQcSuSBpZrYZgZGHlC25917128;     rQcSuSBpZrYZgZGHlC25917128 = rQcSuSBpZrYZgZGHlC51653528;     rQcSuSBpZrYZgZGHlC51653528 = rQcSuSBpZrYZgZGHlC13270944;     rQcSuSBpZrYZgZGHlC13270944 = rQcSuSBpZrYZgZGHlC59145692;     rQcSuSBpZrYZgZGHlC59145692 = rQcSuSBpZrYZgZGHlC22571103;     rQcSuSBpZrYZgZGHlC22571103 = rQcSuSBpZrYZgZGHlC62330187;     rQcSuSBpZrYZgZGHlC62330187 = rQcSuSBpZrYZgZGHlC55624785;     rQcSuSBpZrYZgZGHlC55624785 = rQcSuSBpZrYZgZGHlC87116503;     rQcSuSBpZrYZgZGHlC87116503 = rQcSuSBpZrYZgZGHlC20233315;     rQcSuSBpZrYZgZGHlC20233315 = rQcSuSBpZrYZgZGHlC30551525;     rQcSuSBpZrYZgZGHlC30551525 = rQcSuSBpZrYZgZGHlC23503338;     rQcSuSBpZrYZgZGHlC23503338 = rQcSuSBpZrYZgZGHlC884300;     rQcSuSBpZrYZgZGHlC884300 = rQcSuSBpZrYZgZGHlC1147356;     rQcSuSBpZrYZgZGHlC1147356 = rQcSuSBpZrYZgZGHlC7402362;     rQcSuSBpZrYZgZGHlC7402362 = rQcSuSBpZrYZgZGHlC58931571;     rQcSuSBpZrYZgZGHlC58931571 = rQcSuSBpZrYZgZGHlC66973752;     rQcSuSBpZrYZgZGHlC66973752 = rQcSuSBpZrYZgZGHlC11812999;     rQcSuSBpZrYZgZGHlC11812999 = rQcSuSBpZrYZgZGHlC13203170;     rQcSuSBpZrYZgZGHlC13203170 = rQcSuSBpZrYZgZGHlC14543471;     rQcSuSBpZrYZgZGHlC14543471 = rQcSuSBpZrYZgZGHlC55973670;     rQcSuSBpZrYZgZGHlC55973670 = rQcSuSBpZrYZgZGHlC44377522;     rQcSuSBpZrYZgZGHlC44377522 = rQcSuSBpZrYZgZGHlC57383708;     rQcSuSBpZrYZgZGHlC57383708 = rQcSuSBpZrYZgZGHlC23863004;     rQcSuSBpZrYZgZGHlC23863004 = rQcSuSBpZrYZgZGHlC6337885;     rQcSuSBpZrYZgZGHlC6337885 = rQcSuSBpZrYZgZGHlC60732101;     rQcSuSBpZrYZgZGHlC60732101 = rQcSuSBpZrYZgZGHlC61196383;     rQcSuSBpZrYZgZGHlC61196383 = rQcSuSBpZrYZgZGHlC8408793;     rQcSuSBpZrYZgZGHlC8408793 = rQcSuSBpZrYZgZGHlC31264021;     rQcSuSBpZrYZgZGHlC31264021 = rQcSuSBpZrYZgZGHlC4106868;     rQcSuSBpZrYZgZGHlC4106868 = rQcSuSBpZrYZgZGHlC43841390;     rQcSuSBpZrYZgZGHlC43841390 = rQcSuSBpZrYZgZGHlC61811002;     rQcSuSBpZrYZgZGHlC61811002 = rQcSuSBpZrYZgZGHlC52952486;     rQcSuSBpZrYZgZGHlC52952486 = rQcSuSBpZrYZgZGHlC94260702;     rQcSuSBpZrYZgZGHlC94260702 = rQcSuSBpZrYZgZGHlC75040478;     rQcSuSBpZrYZgZGHlC75040478 = rQcSuSBpZrYZgZGHlC73156874;     rQcSuSBpZrYZgZGHlC73156874 = rQcSuSBpZrYZgZGHlC39149116;     rQcSuSBpZrYZgZGHlC39149116 = rQcSuSBpZrYZgZGHlC76824325;     rQcSuSBpZrYZgZGHlC76824325 = rQcSuSBpZrYZgZGHlC29452887;     rQcSuSBpZrYZgZGHlC29452887 = rQcSuSBpZrYZgZGHlC87929714;     rQcSuSBpZrYZgZGHlC87929714 = rQcSuSBpZrYZgZGHlC87753292;     rQcSuSBpZrYZgZGHlC87753292 = rQcSuSBpZrYZgZGHlC63557991;     rQcSuSBpZrYZgZGHlC63557991 = rQcSuSBpZrYZgZGHlC95571378;     rQcSuSBpZrYZgZGHlC95571378 = rQcSuSBpZrYZgZGHlC23716291;     rQcSuSBpZrYZgZGHlC23716291 = rQcSuSBpZrYZgZGHlC30578933;     rQcSuSBpZrYZgZGHlC30578933 = rQcSuSBpZrYZgZGHlC84383276;     rQcSuSBpZrYZgZGHlC84383276 = rQcSuSBpZrYZgZGHlC84204064;     rQcSuSBpZrYZgZGHlC84204064 = rQcSuSBpZrYZgZGHlC89008653;     rQcSuSBpZrYZgZGHlC89008653 = rQcSuSBpZrYZgZGHlC38984865;     rQcSuSBpZrYZgZGHlC38984865 = rQcSuSBpZrYZgZGHlC40008686;     rQcSuSBpZrYZgZGHlC40008686 = rQcSuSBpZrYZgZGHlC10281708;     rQcSuSBpZrYZgZGHlC10281708 = rQcSuSBpZrYZgZGHlC55409236;     rQcSuSBpZrYZgZGHlC55409236 = rQcSuSBpZrYZgZGHlC36443387;     rQcSuSBpZrYZgZGHlC36443387 = rQcSuSBpZrYZgZGHlC27863090;     rQcSuSBpZrYZgZGHlC27863090 = rQcSuSBpZrYZgZGHlC31296939;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void CKJjtQyEbmZEDYZWkmZssmrKkAKnfZvOTyFBIpo8940646() {     int ZUjCxaKtpOJdKmqhQS94087959 = -513916024;    int ZUjCxaKtpOJdKmqhQS24850734 = -106130624;    int ZUjCxaKtpOJdKmqhQS10630276 = -411645312;    int ZUjCxaKtpOJdKmqhQS60407016 = -928100886;    int ZUjCxaKtpOJdKmqhQS1287934 = -514286331;    int ZUjCxaKtpOJdKmqhQS23682360 = 80200790;    int ZUjCxaKtpOJdKmqhQS44531471 = -817147807;    int ZUjCxaKtpOJdKmqhQS81877595 = -523249922;    int ZUjCxaKtpOJdKmqhQS83761264 = -83555131;    int ZUjCxaKtpOJdKmqhQS32443057 = -988376486;    int ZUjCxaKtpOJdKmqhQS76873879 = -854770781;    int ZUjCxaKtpOJdKmqhQS96388193 = -399578296;    int ZUjCxaKtpOJdKmqhQS23319022 = -936479434;    int ZUjCxaKtpOJdKmqhQS85574227 = -450690845;    int ZUjCxaKtpOJdKmqhQS24420932 = -647775543;    int ZUjCxaKtpOJdKmqhQS61726157 = -99594281;    int ZUjCxaKtpOJdKmqhQS59682713 = -31456526;    int ZUjCxaKtpOJdKmqhQS92660478 = -90762897;    int ZUjCxaKtpOJdKmqhQS15635448 = -90021275;    int ZUjCxaKtpOJdKmqhQS28803452 = -312217799;    int ZUjCxaKtpOJdKmqhQS1784317 = -863774521;    int ZUjCxaKtpOJdKmqhQS6389244 = -595791970;    int ZUjCxaKtpOJdKmqhQS22559057 = -874917944;    int ZUjCxaKtpOJdKmqhQS57128595 = -529313028;    int ZUjCxaKtpOJdKmqhQS99954028 = -139296753;    int ZUjCxaKtpOJdKmqhQS7147638 = 32223940;    int ZUjCxaKtpOJdKmqhQS32823351 = -566298085;    int ZUjCxaKtpOJdKmqhQS31602925 = -473007835;    int ZUjCxaKtpOJdKmqhQS47203487 = -791001304;    int ZUjCxaKtpOJdKmqhQS59282292 = -969503938;    int ZUjCxaKtpOJdKmqhQS29877305 = -504020067;    int ZUjCxaKtpOJdKmqhQS64859411 = -262099669;    int ZUjCxaKtpOJdKmqhQS51139408 = -170352862;    int ZUjCxaKtpOJdKmqhQS59552127 = -446259556;    int ZUjCxaKtpOJdKmqhQS15241610 = -270410274;    int ZUjCxaKtpOJdKmqhQS24233430 = -110550577;    int ZUjCxaKtpOJdKmqhQS10694649 = -389311314;    int ZUjCxaKtpOJdKmqhQS40354127 = -798228581;    int ZUjCxaKtpOJdKmqhQS19446198 = -913535579;    int ZUjCxaKtpOJdKmqhQS93747287 = -520910818;    int ZUjCxaKtpOJdKmqhQS69479814 = -742411122;    int ZUjCxaKtpOJdKmqhQS95684670 = -380816403;    int ZUjCxaKtpOJdKmqhQS31893184 = -722916262;    int ZUjCxaKtpOJdKmqhQS74851171 = -435269738;    int ZUjCxaKtpOJdKmqhQS9401512 = -842257391;    int ZUjCxaKtpOJdKmqhQS89438237 = -259062427;    int ZUjCxaKtpOJdKmqhQS45027746 = -434397914;    int ZUjCxaKtpOJdKmqhQS23819408 = -670396622;    int ZUjCxaKtpOJdKmqhQS6723786 = 26140459;    int ZUjCxaKtpOJdKmqhQS95187296 = -768634653;    int ZUjCxaKtpOJdKmqhQS17528658 = -246479524;    int ZUjCxaKtpOJdKmqhQS89837207 = -138120928;    int ZUjCxaKtpOJdKmqhQS65229076 = -728422403;    int ZUjCxaKtpOJdKmqhQS42636808 = -892642596;    int ZUjCxaKtpOJdKmqhQS7156330 = -64968007;    int ZUjCxaKtpOJdKmqhQS87698715 = -918124055;    int ZUjCxaKtpOJdKmqhQS2291678 = -231212680;    int ZUjCxaKtpOJdKmqhQS53501680 = -882332285;    int ZUjCxaKtpOJdKmqhQS60452987 = -688804133;    int ZUjCxaKtpOJdKmqhQS94140296 = -446510272;    int ZUjCxaKtpOJdKmqhQS90859008 = -353501125;    int ZUjCxaKtpOJdKmqhQS12928547 = -244139972;    int ZUjCxaKtpOJdKmqhQS34674109 = -732248618;    int ZUjCxaKtpOJdKmqhQS24478973 = -114051193;    int ZUjCxaKtpOJdKmqhQS2565753 = -384356420;    int ZUjCxaKtpOJdKmqhQS12014469 = -492671112;    int ZUjCxaKtpOJdKmqhQS45248785 = -129225434;    int ZUjCxaKtpOJdKmqhQS63766894 = -390219878;    int ZUjCxaKtpOJdKmqhQS70332618 = -80280572;    int ZUjCxaKtpOJdKmqhQS187503 = -437224967;    int ZUjCxaKtpOJdKmqhQS51031509 = -710282968;    int ZUjCxaKtpOJdKmqhQS19328587 = -233227946;    int ZUjCxaKtpOJdKmqhQS73214280 = -177227319;    int ZUjCxaKtpOJdKmqhQS21888161 = -569110457;    int ZUjCxaKtpOJdKmqhQS59323637 = -569806677;    int ZUjCxaKtpOJdKmqhQS6099647 = -382958118;    int ZUjCxaKtpOJdKmqhQS74496059 = -872875708;    int ZUjCxaKtpOJdKmqhQS47707886 = -339648207;    int ZUjCxaKtpOJdKmqhQS47727084 = -687055637;    int ZUjCxaKtpOJdKmqhQS10515792 = -880234327;    int ZUjCxaKtpOJdKmqhQS62119891 = -533378146;    int ZUjCxaKtpOJdKmqhQS9003944 = -895901464;    int ZUjCxaKtpOJdKmqhQS24879140 = -399148295;    int ZUjCxaKtpOJdKmqhQS52016190 = 77633349;    int ZUjCxaKtpOJdKmqhQS41753634 = -623024415;    int ZUjCxaKtpOJdKmqhQS40040098 = -265899140;    int ZUjCxaKtpOJdKmqhQS99630334 = -533677266;    int ZUjCxaKtpOJdKmqhQS8502601 = -277710267;    int ZUjCxaKtpOJdKmqhQS52395798 = -281291550;    int ZUjCxaKtpOJdKmqhQS27542894 = -352286220;    int ZUjCxaKtpOJdKmqhQS21941753 = -879337897;    int ZUjCxaKtpOJdKmqhQS57192968 = -506979030;    int ZUjCxaKtpOJdKmqhQS79901139 = -9424449;    int ZUjCxaKtpOJdKmqhQS25305902 = -367025308;    int ZUjCxaKtpOJdKmqhQS2888279 = -67409693;    int ZUjCxaKtpOJdKmqhQS56551268 = -398271151;    int ZUjCxaKtpOJdKmqhQS61010561 = -648567785;    int ZUjCxaKtpOJdKmqhQS7414212 = -508865069;    int ZUjCxaKtpOJdKmqhQS72285419 = 49086682;    int ZUjCxaKtpOJdKmqhQS97387043 = -513916024;     ZUjCxaKtpOJdKmqhQS94087959 = ZUjCxaKtpOJdKmqhQS24850734;     ZUjCxaKtpOJdKmqhQS24850734 = ZUjCxaKtpOJdKmqhQS10630276;     ZUjCxaKtpOJdKmqhQS10630276 = ZUjCxaKtpOJdKmqhQS60407016;     ZUjCxaKtpOJdKmqhQS60407016 = ZUjCxaKtpOJdKmqhQS1287934;     ZUjCxaKtpOJdKmqhQS1287934 = ZUjCxaKtpOJdKmqhQS23682360;     ZUjCxaKtpOJdKmqhQS23682360 = ZUjCxaKtpOJdKmqhQS44531471;     ZUjCxaKtpOJdKmqhQS44531471 = ZUjCxaKtpOJdKmqhQS81877595;     ZUjCxaKtpOJdKmqhQS81877595 = ZUjCxaKtpOJdKmqhQS83761264;     ZUjCxaKtpOJdKmqhQS83761264 = ZUjCxaKtpOJdKmqhQS32443057;     ZUjCxaKtpOJdKmqhQS32443057 = ZUjCxaKtpOJdKmqhQS76873879;     ZUjCxaKtpOJdKmqhQS76873879 = ZUjCxaKtpOJdKmqhQS96388193;     ZUjCxaKtpOJdKmqhQS96388193 = ZUjCxaKtpOJdKmqhQS23319022;     ZUjCxaKtpOJdKmqhQS23319022 = ZUjCxaKtpOJdKmqhQS85574227;     ZUjCxaKtpOJdKmqhQS85574227 = ZUjCxaKtpOJdKmqhQS24420932;     ZUjCxaKtpOJdKmqhQS24420932 = ZUjCxaKtpOJdKmqhQS61726157;     ZUjCxaKtpOJdKmqhQS61726157 = ZUjCxaKtpOJdKmqhQS59682713;     ZUjCxaKtpOJdKmqhQS59682713 = ZUjCxaKtpOJdKmqhQS92660478;     ZUjCxaKtpOJdKmqhQS92660478 = ZUjCxaKtpOJdKmqhQS15635448;     ZUjCxaKtpOJdKmqhQS15635448 = ZUjCxaKtpOJdKmqhQS28803452;     ZUjCxaKtpOJdKmqhQS28803452 = ZUjCxaKtpOJdKmqhQS1784317;     ZUjCxaKtpOJdKmqhQS1784317 = ZUjCxaKtpOJdKmqhQS6389244;     ZUjCxaKtpOJdKmqhQS6389244 = ZUjCxaKtpOJdKmqhQS22559057;     ZUjCxaKtpOJdKmqhQS22559057 = ZUjCxaKtpOJdKmqhQS57128595;     ZUjCxaKtpOJdKmqhQS57128595 = ZUjCxaKtpOJdKmqhQS99954028;     ZUjCxaKtpOJdKmqhQS99954028 = ZUjCxaKtpOJdKmqhQS7147638;     ZUjCxaKtpOJdKmqhQS7147638 = ZUjCxaKtpOJdKmqhQS32823351;     ZUjCxaKtpOJdKmqhQS32823351 = ZUjCxaKtpOJdKmqhQS31602925;     ZUjCxaKtpOJdKmqhQS31602925 = ZUjCxaKtpOJdKmqhQS47203487;     ZUjCxaKtpOJdKmqhQS47203487 = ZUjCxaKtpOJdKmqhQS59282292;     ZUjCxaKtpOJdKmqhQS59282292 = ZUjCxaKtpOJdKmqhQS29877305;     ZUjCxaKtpOJdKmqhQS29877305 = ZUjCxaKtpOJdKmqhQS64859411;     ZUjCxaKtpOJdKmqhQS64859411 = ZUjCxaKtpOJdKmqhQS51139408;     ZUjCxaKtpOJdKmqhQS51139408 = ZUjCxaKtpOJdKmqhQS59552127;     ZUjCxaKtpOJdKmqhQS59552127 = ZUjCxaKtpOJdKmqhQS15241610;     ZUjCxaKtpOJdKmqhQS15241610 = ZUjCxaKtpOJdKmqhQS24233430;     ZUjCxaKtpOJdKmqhQS24233430 = ZUjCxaKtpOJdKmqhQS10694649;     ZUjCxaKtpOJdKmqhQS10694649 = ZUjCxaKtpOJdKmqhQS40354127;     ZUjCxaKtpOJdKmqhQS40354127 = ZUjCxaKtpOJdKmqhQS19446198;     ZUjCxaKtpOJdKmqhQS19446198 = ZUjCxaKtpOJdKmqhQS93747287;     ZUjCxaKtpOJdKmqhQS93747287 = ZUjCxaKtpOJdKmqhQS69479814;     ZUjCxaKtpOJdKmqhQS69479814 = ZUjCxaKtpOJdKmqhQS95684670;     ZUjCxaKtpOJdKmqhQS95684670 = ZUjCxaKtpOJdKmqhQS31893184;     ZUjCxaKtpOJdKmqhQS31893184 = ZUjCxaKtpOJdKmqhQS74851171;     ZUjCxaKtpOJdKmqhQS74851171 = ZUjCxaKtpOJdKmqhQS9401512;     ZUjCxaKtpOJdKmqhQS9401512 = ZUjCxaKtpOJdKmqhQS89438237;     ZUjCxaKtpOJdKmqhQS89438237 = ZUjCxaKtpOJdKmqhQS45027746;     ZUjCxaKtpOJdKmqhQS45027746 = ZUjCxaKtpOJdKmqhQS23819408;     ZUjCxaKtpOJdKmqhQS23819408 = ZUjCxaKtpOJdKmqhQS6723786;     ZUjCxaKtpOJdKmqhQS6723786 = ZUjCxaKtpOJdKmqhQS95187296;     ZUjCxaKtpOJdKmqhQS95187296 = ZUjCxaKtpOJdKmqhQS17528658;     ZUjCxaKtpOJdKmqhQS17528658 = ZUjCxaKtpOJdKmqhQS89837207;     ZUjCxaKtpOJdKmqhQS89837207 = ZUjCxaKtpOJdKmqhQS65229076;     ZUjCxaKtpOJdKmqhQS65229076 = ZUjCxaKtpOJdKmqhQS42636808;     ZUjCxaKtpOJdKmqhQS42636808 = ZUjCxaKtpOJdKmqhQS7156330;     ZUjCxaKtpOJdKmqhQS7156330 = ZUjCxaKtpOJdKmqhQS87698715;     ZUjCxaKtpOJdKmqhQS87698715 = ZUjCxaKtpOJdKmqhQS2291678;     ZUjCxaKtpOJdKmqhQS2291678 = ZUjCxaKtpOJdKmqhQS53501680;     ZUjCxaKtpOJdKmqhQS53501680 = ZUjCxaKtpOJdKmqhQS60452987;     ZUjCxaKtpOJdKmqhQS60452987 = ZUjCxaKtpOJdKmqhQS94140296;     ZUjCxaKtpOJdKmqhQS94140296 = ZUjCxaKtpOJdKmqhQS90859008;     ZUjCxaKtpOJdKmqhQS90859008 = ZUjCxaKtpOJdKmqhQS12928547;     ZUjCxaKtpOJdKmqhQS12928547 = ZUjCxaKtpOJdKmqhQS34674109;     ZUjCxaKtpOJdKmqhQS34674109 = ZUjCxaKtpOJdKmqhQS24478973;     ZUjCxaKtpOJdKmqhQS24478973 = ZUjCxaKtpOJdKmqhQS2565753;     ZUjCxaKtpOJdKmqhQS2565753 = ZUjCxaKtpOJdKmqhQS12014469;     ZUjCxaKtpOJdKmqhQS12014469 = ZUjCxaKtpOJdKmqhQS45248785;     ZUjCxaKtpOJdKmqhQS45248785 = ZUjCxaKtpOJdKmqhQS63766894;     ZUjCxaKtpOJdKmqhQS63766894 = ZUjCxaKtpOJdKmqhQS70332618;     ZUjCxaKtpOJdKmqhQS70332618 = ZUjCxaKtpOJdKmqhQS187503;     ZUjCxaKtpOJdKmqhQS187503 = ZUjCxaKtpOJdKmqhQS51031509;     ZUjCxaKtpOJdKmqhQS51031509 = ZUjCxaKtpOJdKmqhQS19328587;     ZUjCxaKtpOJdKmqhQS19328587 = ZUjCxaKtpOJdKmqhQS73214280;     ZUjCxaKtpOJdKmqhQS73214280 = ZUjCxaKtpOJdKmqhQS21888161;     ZUjCxaKtpOJdKmqhQS21888161 = ZUjCxaKtpOJdKmqhQS59323637;     ZUjCxaKtpOJdKmqhQS59323637 = ZUjCxaKtpOJdKmqhQS6099647;     ZUjCxaKtpOJdKmqhQS6099647 = ZUjCxaKtpOJdKmqhQS74496059;     ZUjCxaKtpOJdKmqhQS74496059 = ZUjCxaKtpOJdKmqhQS47707886;     ZUjCxaKtpOJdKmqhQS47707886 = ZUjCxaKtpOJdKmqhQS47727084;     ZUjCxaKtpOJdKmqhQS47727084 = ZUjCxaKtpOJdKmqhQS10515792;     ZUjCxaKtpOJdKmqhQS10515792 = ZUjCxaKtpOJdKmqhQS62119891;     ZUjCxaKtpOJdKmqhQS62119891 = ZUjCxaKtpOJdKmqhQS9003944;     ZUjCxaKtpOJdKmqhQS9003944 = ZUjCxaKtpOJdKmqhQS24879140;     ZUjCxaKtpOJdKmqhQS24879140 = ZUjCxaKtpOJdKmqhQS52016190;     ZUjCxaKtpOJdKmqhQS52016190 = ZUjCxaKtpOJdKmqhQS41753634;     ZUjCxaKtpOJdKmqhQS41753634 = ZUjCxaKtpOJdKmqhQS40040098;     ZUjCxaKtpOJdKmqhQS40040098 = ZUjCxaKtpOJdKmqhQS99630334;     ZUjCxaKtpOJdKmqhQS99630334 = ZUjCxaKtpOJdKmqhQS8502601;     ZUjCxaKtpOJdKmqhQS8502601 = ZUjCxaKtpOJdKmqhQS52395798;     ZUjCxaKtpOJdKmqhQS52395798 = ZUjCxaKtpOJdKmqhQS27542894;     ZUjCxaKtpOJdKmqhQS27542894 = ZUjCxaKtpOJdKmqhQS21941753;     ZUjCxaKtpOJdKmqhQS21941753 = ZUjCxaKtpOJdKmqhQS57192968;     ZUjCxaKtpOJdKmqhQS57192968 = ZUjCxaKtpOJdKmqhQS79901139;     ZUjCxaKtpOJdKmqhQS79901139 = ZUjCxaKtpOJdKmqhQS25305902;     ZUjCxaKtpOJdKmqhQS25305902 = ZUjCxaKtpOJdKmqhQS2888279;     ZUjCxaKtpOJdKmqhQS2888279 = ZUjCxaKtpOJdKmqhQS56551268;     ZUjCxaKtpOJdKmqhQS56551268 = ZUjCxaKtpOJdKmqhQS61010561;     ZUjCxaKtpOJdKmqhQS61010561 = ZUjCxaKtpOJdKmqhQS7414212;     ZUjCxaKtpOJdKmqhQS7414212 = ZUjCxaKtpOJdKmqhQS72285419;     ZUjCxaKtpOJdKmqhQS72285419 = ZUjCxaKtpOJdKmqhQS97387043;     ZUjCxaKtpOJdKmqhQS97387043 = ZUjCxaKtpOJdKmqhQS94087959;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void DaDXzLBnGVjubndvFRiXnTxULnioZhUIhoGojQn91169407() {     int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi45823410 = -630170857;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi40524717 = -183030379;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi59430635 = -209004697;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi35482418 = -744370028;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi78011866 = -221936985;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi48565714 = -78826437;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi18308315 = -640359403;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi669074 = -647029476;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi35059341 = -974403842;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi1240181 = -430022469;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi72166578 = -816493252;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi6744572 = -334559796;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi10499815 = -545659695;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi44341947 = -77371392;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi78436190 = -125503253;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi73453430 = -911278237;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi15653238 = -399551216;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi78343400 = -553339392;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi75209297 = -617935458;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi48533026 = -22485948;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi47531669 = -946582689;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi8808697 = -769272978;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi23908572 = -483155391;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi49778846 = -400904979;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi71369887 = -84951190;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi64853051 = -313385839;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi71651986 = 71293197;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi29732150 = -856338521;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi21953560 = -840900206;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi29267376 = -331404734;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi67096113 = -836902534;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi77889141 = -585873861;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi49232718 = -752734748;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi53575840 = -106856722;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi13446738 = -487219917;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi5933040 = -346719405;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi60342875 = 66333942;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi41187739 = -881740945;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi89221040 = -258852974;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi18829704 = -39526484;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi38163902 = -861569910;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi55710070 = -369336024;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi88476415 = -623692794;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi67786989 = -360658415;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi81430719 = -342754474;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi91132684 = -682954367;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi31193941 = -896738368;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi2803873 = 25198682;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi95742238 = 62187730;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi83843556 = -627646034;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi58208550 = 45016320;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi21816960 = -599720488;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi88467822 = -472535591;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi12696049 = -507441908;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi43637738 = -94731208;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi37014713 = -860897880;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi16616146 = -699874988;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi9651790 = -808099719;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi64112530 = -559418838;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi13158815 = -908551147;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi76913728 = -50119634;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi88576164 = -784020882;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi78715513 = -806129270;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi5791966 = -542999108;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi34144068 = -593119936;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi94277437 = -130619392;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi57511853 = -581825048;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi56923975 = -338802974;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi30895209 = -590151475;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi72503150 = -778783848;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi13110555 = -877612179;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi74465499 = -517810271;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi89122359 = -194486418;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi56379593 = -478408974;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi10369125 = -160916038;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi91821598 = -477246665;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi20332281 = -45580184;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi56121582 = -22496977;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi68348126 = 41849495;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi80237202 = -401996824;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi33659111 = -416647471;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi68848113 = -953905486;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi33989912 = -818526252;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi38110004 = -113254173;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi71058825 = -276421055;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi45279154 = -137182046;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi89421318 = -13338270;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi36536670 = -145292841;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi9938102 = 87874486;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi76432025 = -626322038;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi89316894 = -646844418;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi50691085 = -125566340;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi77075208 = -222322107;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi76062225 = -350301828;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi41915976 = -989406851;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi49587737 = 22450971;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi76994556 = -563206755;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi82684450 = 19306313;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi33642922 = -767538480;    int emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi87153282 = -630170857;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi45823410 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi40524717;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi40524717 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi59430635;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi59430635 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi35482418;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi35482418 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi78011866;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi78011866 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi48565714;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi48565714 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi18308315;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi18308315 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi669074;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi669074 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi35059341;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi35059341 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi1240181;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi1240181 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi72166578;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi72166578 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi6744572;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi6744572 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi10499815;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi10499815 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi44341947;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi44341947 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi78436190;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi78436190 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi73453430;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi73453430 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi15653238;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi15653238 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi78343400;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi78343400 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi75209297;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi75209297 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi48533026;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi48533026 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi47531669;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi47531669 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi8808697;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi8808697 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi23908572;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi23908572 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi49778846;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi49778846 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi71369887;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi71369887 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi64853051;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi64853051 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi71651986;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi71651986 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi29732150;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi29732150 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi21953560;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi21953560 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi29267376;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi29267376 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi67096113;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi67096113 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi77889141;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi77889141 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi49232718;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi49232718 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi53575840;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi53575840 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi13446738;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi13446738 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi5933040;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi5933040 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi60342875;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi60342875 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi41187739;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi41187739 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi89221040;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi89221040 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi18829704;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi18829704 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi38163902;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi38163902 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi55710070;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi55710070 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi88476415;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi88476415 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi67786989;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi67786989 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi81430719;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi81430719 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi91132684;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi91132684 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi31193941;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi31193941 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi2803873;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi2803873 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi95742238;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi95742238 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi83843556;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi83843556 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi58208550;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi58208550 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi21816960;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi21816960 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi88467822;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi88467822 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi12696049;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi12696049 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi43637738;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi43637738 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi37014713;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi37014713 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi16616146;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi16616146 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi9651790;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi9651790 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi64112530;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi64112530 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi13158815;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi13158815 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi76913728;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi76913728 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi88576164;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi88576164 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi78715513;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi78715513 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi5791966;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi5791966 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi34144068;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi34144068 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi94277437;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi94277437 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi57511853;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi57511853 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi56923975;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi56923975 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi30895209;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi30895209 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi72503150;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi72503150 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi13110555;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi13110555 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi74465499;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi74465499 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi89122359;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi89122359 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi56379593;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi56379593 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi10369125;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi10369125 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi91821598;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi91821598 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi20332281;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi20332281 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi56121582;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi56121582 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi68348126;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi68348126 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi80237202;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi80237202 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi33659111;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi33659111 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi68848113;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi68848113 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi33989912;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi33989912 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi38110004;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi38110004 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi71058825;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi71058825 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi45279154;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi45279154 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi89421318;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi89421318 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi36536670;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi36536670 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi9938102;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi9938102 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi76432025;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi76432025 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi89316894;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi89316894 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi50691085;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi50691085 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi77075208;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi77075208 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi76062225;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi76062225 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi41915976;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi41915976 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi49587737;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi49587737 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi76994556;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi76994556 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi82684450;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi82684450 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi33642922;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi33642922 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi87153282;     emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi87153282 = emBRilLVQODWztWekdiMMdNNZBbMmgpLpeDklBOi45823410;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void egPixtgdLfHSHYWjNjQA21155638() {     int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr68216998 = -392050678;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr86299900 = -88978309;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr86886702 = -491529927;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr65409245 = -930236730;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr67346018 = -344638664;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr28643399 = -240002003;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr41916718 = -757810242;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr7088882 = -313448803;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr49482308 = -44953811;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr96364251 = -535956931;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr89387832 = -853645581;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr48355843 = -849826727;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr45655082 = -42718540;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr33112479 = -259927097;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr69999358 = -890268114;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr43144795 = -960150129;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr9623830 = -857216466;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr61319283 = -608010461;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr96062657 = -135055316;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr54975546 = -763095950;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr68745352 = -127603623;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr94327649 = -764047408;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr90323497 = -200278141;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr32628525 = 16022687;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr78467444 = -379816462;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr36581969 = -849074134;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr48519825 = -485493583;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr240076 = -35825987;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr16167674 = -539087010;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr62334685 = -576269227;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr77974239 = -531125451;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr50706474 = -846123454;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr44818965 = 19865973;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr12681690 = -554301839;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr7318065 = -291662415;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr4797720 = -582349036;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr41841220 = -666960632;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr24896160 = -754103738;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr2215575 = 52782410;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr67142525 = -566318828;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr79065604 = -176803678;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr58520800 = 66547367;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr33743248 = 47906876;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr7999211 = -801057621;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr65395934 = -778638550;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr58804998 = 46861208;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr15793546 = -993867999;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr72018966 = -222574953;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr71543754 = -323765107;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr60881878 = -82641406;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr53818397 = -731504949;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr81120959 = -648394022;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr91333877 = -252392813;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr62732322 = -251202866;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr52410285 = -478536045;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr73889349 = -628003271;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr95976402 = -888700168;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr54258178 = -407552614;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr86941801 = -450420268;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr30764050 = -495564531;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr80123574 = -754508420;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr41676643 = -621984256;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr90921207 = -774361793;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr87147623 = -468684584;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr18390012 = 95168520;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr38681358 = 92477872;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr3536879 = -769692700;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr32973392 = -488416701;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr25794414 = -968264683;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr65201638 = -207919079;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr1303576 = -193189498;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr84727670 = -3112729;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr59103708 = -560792872;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr28920133 = -568736489;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr75909941 = -486292273;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr10224552 = -94150991;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr60584402 = -711954285;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr82324287 = -399220521;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr67232590 = -205338763;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr19662446 = -326677670;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr20788424 = -855206136;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr76500858 = -162918631;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr28696321 = -712060880;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr55285795 = -356445605;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr8516289 = -844764278;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr96853280 = -882731430;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr59372597 = -493730641;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr82086642 = -728931162;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr60271404 = 24234205;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr33428716 = -663659144;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr8821317 = -693648868;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr87583042 = -159408018;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr37954359 = -203683470;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr71451525 = -451653060;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr87018951 = -811810408;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr37388962 = -554819422;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr67599592 = -159090840;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr46595625 = -483408540;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr89609198 = -796226141;    int lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr26714576 = -392050678;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr68216998 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr86299900;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr86299900 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr86886702;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr86886702 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr65409245;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr65409245 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr67346018;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr67346018 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr28643399;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr28643399 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr41916718;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr41916718 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr7088882;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr7088882 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr49482308;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr49482308 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr96364251;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr96364251 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr89387832;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr89387832 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr48355843;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr48355843 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr45655082;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr45655082 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr33112479;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr33112479 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr69999358;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr69999358 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr43144795;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr43144795 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr9623830;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr9623830 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr61319283;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr61319283 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr96062657;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr96062657 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr54975546;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr54975546 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr68745352;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr68745352 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr94327649;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr94327649 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr90323497;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr90323497 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr32628525;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr32628525 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr78467444;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr78467444 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr36581969;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr36581969 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr48519825;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr48519825 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr240076;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr240076 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr16167674;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr16167674 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr62334685;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr62334685 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr77974239;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr77974239 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr50706474;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr50706474 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr44818965;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr44818965 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr12681690;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr12681690 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr7318065;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr7318065 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr4797720;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr4797720 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr41841220;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr41841220 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr24896160;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr24896160 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr2215575;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr2215575 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr67142525;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr67142525 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr79065604;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr79065604 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr58520800;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr58520800 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr33743248;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr33743248 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr7999211;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr7999211 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr65395934;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr65395934 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr58804998;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr58804998 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr15793546;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr15793546 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr72018966;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr72018966 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr71543754;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr71543754 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr60881878;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr60881878 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr53818397;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr53818397 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr81120959;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr81120959 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr91333877;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr91333877 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr62732322;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr62732322 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr52410285;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr52410285 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr73889349;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr73889349 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr95976402;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr95976402 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr54258178;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr54258178 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr86941801;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr86941801 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr30764050;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr30764050 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr80123574;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr80123574 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr41676643;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr41676643 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr90921207;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr90921207 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr87147623;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr87147623 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr18390012;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr18390012 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr38681358;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr38681358 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr3536879;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr3536879 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr32973392;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr32973392 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr25794414;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr25794414 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr65201638;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr65201638 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr1303576;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr1303576 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr84727670;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr84727670 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr59103708;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr59103708 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr28920133;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr28920133 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr75909941;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr75909941 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr10224552;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr10224552 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr60584402;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr60584402 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr82324287;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr82324287 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr67232590;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr67232590 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr19662446;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr19662446 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr20788424;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr20788424 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr76500858;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr76500858 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr28696321;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr28696321 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr55285795;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr55285795 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr8516289;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr8516289 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr96853280;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr96853280 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr59372597;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr59372597 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr82086642;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr82086642 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr60271404;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr60271404 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr33428716;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr33428716 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr8821317;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr8821317 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr87583042;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr87583042 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr37954359;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr37954359 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr71451525;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr71451525 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr87018951;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr87018951 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr37388962;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr37388962 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr67599592;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr67599592 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr46595625;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr46595625 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr89609198;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr89609198 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr26714576;     lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr26714576 = lCiOOFzczSHkxhRlQCPMLUcdtAPxQnftRHgcxBUr68216998;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void PODwkKxCFmEHqIbOdNzC3384399() {     int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt19952449 = -508305511;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt1973884 = -165878064;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt35687062 = -288889311;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt40484647 = -746505872;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt44069951 = -52289318;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt53526753 = -399029229;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt15693561 = -581021838;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt25880360 = -437228357;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt780386 = -935802522;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt65161375 = 22397087;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt84680531 = -815368052;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt58712221 = -784808227;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt32835875 = -751898802;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt91880197 = -986607644;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt24014616 = -367995824;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt54872067 = -671834085;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt65594355 = -125311156;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt47002205 = 29413044;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt55636507 = -662969499;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt74705120 = -473364099;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt14492705 = -210411791;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt96747103 = -937528415;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt91673012 = -908515589;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt25278775 = -955569264;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt49883303 = -325470898;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt94287382 = -94683913;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt87348459 = -947902301;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt98369299 = -419156673;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt90917746 = -588985913;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt32319769 = 61829977;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt15193048 = -864007918;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt63736204 = -69897645;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt42912275 = -562515913;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt6705403 = -214899005;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt5523193 = -508472058;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt86497329 = -818517864;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt91489446 = -211315375;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt25729773 = -837616103;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt71990417 = -392534985;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt92224941 = -84934494;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt47749692 = -295962466;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt18546201 = 78027745;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt90326479 = -952869655;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt935030 = -726446298;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt37425142 = -279135634;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt60499445 = -377030732;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt1959740 = -356208452;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt51003431 = -626979648;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt60562206 = -287717836;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt49538138 = 58347213;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt94498289 = -440009105;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt13100712 = -9993582;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt14572624 = 3493999;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt32791563 = -966002178;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt88891694 = -508299246;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt23205346 = -570777096;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt10300872 = -257362476;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt10408287 = -333320047;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt90601344 = -321034974;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt49782568 = -957605406;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt66178293 = -451126929;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt17324261 = -61865166;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt34962613 = -848242445;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt68460616 = -897632499;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt49968327 = -113594996;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt20944327 = -645470407;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt15799947 = -122292314;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt26130473 = -436999797;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt86357004 = -378135587;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt37517286 = -549477960;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt63382621 = -360518710;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt39864583 = -287695054;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt75011788 = -578051971;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt63411565 = -478035006;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt26955429 = -77401634;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt95946504 = -188439537;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt6420624 = -984658761;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt90737982 = -82069291;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt87853632 = -576433631;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt89383857 = -948440167;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt92327643 = -738475462;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt36345029 = -220922653;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt37807093 = -31438837;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt41379609 = -547333127;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt37821480 = -498160918;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt2092337 = -754014336;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt49163581 = 26608355;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt10120712 = -596513736;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt17813708 = -706599759;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt82317846 = -937694962;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt76196458 = -461155389;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt81081159 = -877995328;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt35128428 = -416581129;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt22207849 = -434929580;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt26046648 = -633807565;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt30425431 = -134097300;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt83583587 = -73729810;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt21865864 = 44762843;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt50966702 = -512851303;    int IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt16480815 = -508305511;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt19952449 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt1973884;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt1973884 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt35687062;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt35687062 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt40484647;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt40484647 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt44069951;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt44069951 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt53526753;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt53526753 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt15693561;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt15693561 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt25880360;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt25880360 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt780386;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt780386 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt65161375;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt65161375 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt84680531;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt84680531 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt58712221;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt58712221 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt32835875;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt32835875 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt91880197;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt91880197 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt24014616;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt24014616 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt54872067;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt54872067 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt65594355;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt65594355 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt47002205;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt47002205 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt55636507;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt55636507 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt74705120;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt74705120 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt14492705;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt14492705 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt96747103;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt96747103 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt91673012;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt91673012 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt25278775;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt25278775 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt49883303;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt49883303 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt94287382;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt94287382 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt87348459;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt87348459 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt98369299;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt98369299 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt90917746;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt90917746 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt32319769;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt32319769 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt15193048;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt15193048 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt63736204;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt63736204 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt42912275;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt42912275 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt6705403;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt6705403 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt5523193;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt5523193 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt86497329;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt86497329 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt91489446;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt91489446 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt25729773;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt25729773 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt71990417;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt71990417 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt92224941;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt92224941 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt47749692;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt47749692 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt18546201;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt18546201 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt90326479;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt90326479 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt935030;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt935030 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt37425142;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt37425142 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt60499445;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt60499445 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt1959740;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt1959740 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt51003431;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt51003431 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt60562206;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt60562206 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt49538138;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt49538138 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt94498289;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt94498289 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt13100712;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt13100712 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt14572624;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt14572624 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt32791563;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt32791563 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt88891694;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt88891694 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt23205346;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt23205346 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt10300872;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt10300872 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt10408287;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt10408287 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt90601344;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt90601344 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt49782568;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt49782568 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt66178293;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt66178293 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt17324261;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt17324261 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt34962613;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt34962613 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt68460616;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt68460616 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt49968327;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt49968327 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt20944327;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt20944327 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt15799947;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt15799947 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt26130473;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt26130473 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt86357004;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt86357004 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt37517286;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt37517286 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt63382621;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt63382621 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt39864583;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt39864583 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt75011788;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt75011788 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt63411565;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt63411565 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt26955429;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt26955429 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt95946504;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt95946504 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt6420624;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt6420624 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt90737982;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt90737982 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt87853632;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt87853632 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt89383857;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt89383857 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt92327643;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt92327643 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt36345029;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt36345029 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt37807093;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt37807093 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt41379609;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt41379609 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt37821480;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt37821480 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt2092337;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt2092337 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt49163581;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt49163581 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt10120712;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt10120712 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt17813708;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt17813708 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt82317846;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt82317846 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt76196458;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt76196458 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt81081159;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt81081159 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt35128428;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt35128428 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt22207849;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt22207849 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt26046648;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt26046648 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt30425431;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt30425431 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt83583587;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt83583587 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt21865864;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt21865864 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt50966702;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt50966702 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt16480815;     IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt16480815 = IfururdgPFQxYthsyTGdHCHLEZXEJsCxDrYjUMCt19952449;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void uHWFQuUzxKYdsxkwroNE33370629() {     int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY42346038 = -270185333;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY47749068 = -71825994;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY63143128 = -571414542;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY70411475 = -932372573;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY33404103 = -174990998;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY33604438 = -560204796;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY39301964 = -698472677;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY32300168 = -103647685;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY15203352 = -6352491;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY60285446 = -83537375;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY1901786 = -852520381;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY323493 = -200075158;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY67991142 = -248957647;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY80650729 = -69163350;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY15577784 = -32760685;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY24563433 = -720705976;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY59564947 = -582976406;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY29978089 = -25258025;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY76489868 = -180089358;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY81147641 = -113974101;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY35706388 = -491432726;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY82266055 = -932302846;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY58087939 = -625638339;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY8128454 = -538641599;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY56980860 = -620336170;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY66016300 = -630372209;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY64216298 = -404689081;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY68877225 = -698644138;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY85131860 = -287172717;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY65387078 = -183034516;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY26071175 = -558230835;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY36553538 = -330147239;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY38498522 = -889915192;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY65811252 = -662344123;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY99394519 = -312914556;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY85362009 = 45852505;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY72987790 = -944609949;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY9438194 = -709978896;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY84984952 = -80899600;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY40537764 = -611726837;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY88651395 = -711196233;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY21356931 = -586088863;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY35593312 = -281269985;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY41147251 = -66845504;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY21390357 = -715019710;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY28171759 = -747215157;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY86559344 = -453338083;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY20218525 = -874753283;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY36363722 = -673670673;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY26576461 = -496648159;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY90108135 = -116530375;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY72404712 = -58667116;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY17438679 = -876363223;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY82827837 = -709763135;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY97664241 = -892104084;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY60079982 = -337882488;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY89661128 = -446187655;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY55014675 = 67227057;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY13430615 = -212036404;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY67387802 = -544618790;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY69388139 = -55515715;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY70424739 = -999828540;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY47168307 = -816474968;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY49816274 = -823317975;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY34214272 = -525306540;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY65348248 = -422373143;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY61824971 = -310159966;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY2179890 = -586613525;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY81256210 = -756248795;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY30215774 = 21386809;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY51575642 = -776096028;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY50126753 = -872997511;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY44993137 = -944358425;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY35952105 = -568362521;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY92496245 = -402777868;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY14349457 = -905343863;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY46672744 = -551032861;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY16940689 = -458792836;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY86738097 = -823621890;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY28809101 = -873121013;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY79456955 = -77034126;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY43997774 = -529935798;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY32513503 = 75026535;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY58555400 = -790524558;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY75278942 = 33495859;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY53666463 = -399563720;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY19114860 = -453784016;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY55670684 = -80152058;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY68147011 = -770240039;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY39314537 = -975032068;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY95700880 = -507959840;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY17973116 = -911837006;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY96007578 = -397942492;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY17597150 = -536280811;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY71149624 = -456211122;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY18226657 = -711367694;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY74188623 = -769613896;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY85777038 = -457952010;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY6932979 = -541538964;    int ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY56042108 = -270185333;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY42346038 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY47749068;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY47749068 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY63143128;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY63143128 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY70411475;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY70411475 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY33404103;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY33404103 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY33604438;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY33604438 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY39301964;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY39301964 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY32300168;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY32300168 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY15203352;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY15203352 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY60285446;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY60285446 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY1901786;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY1901786 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY323493;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY323493 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY67991142;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY67991142 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY80650729;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY80650729 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY15577784;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY15577784 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY24563433;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY24563433 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY59564947;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY59564947 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY29978089;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY29978089 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY76489868;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY76489868 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY81147641;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY81147641 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY35706388;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY35706388 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY82266055;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY82266055 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY58087939;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY58087939 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY8128454;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY8128454 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY56980860;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY56980860 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY66016300;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY66016300 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY64216298;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY64216298 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY68877225;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY68877225 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY85131860;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY85131860 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY65387078;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY65387078 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY26071175;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY26071175 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY36553538;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY36553538 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY38498522;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY38498522 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY65811252;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY65811252 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY99394519;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY99394519 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY85362009;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY85362009 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY72987790;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY72987790 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY9438194;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY9438194 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY84984952;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY84984952 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY40537764;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY40537764 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY88651395;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY88651395 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY21356931;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY21356931 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY35593312;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY35593312 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY41147251;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY41147251 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY21390357;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY21390357 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY28171759;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY28171759 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY86559344;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY86559344 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY20218525;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY20218525 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY36363722;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY36363722 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY26576461;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY26576461 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY90108135;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY90108135 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY72404712;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY72404712 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY17438679;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY17438679 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY82827837;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY82827837 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY97664241;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY97664241 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY60079982;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY60079982 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY89661128;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY89661128 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY55014675;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY55014675 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY13430615;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY13430615 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY67387802;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY67387802 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY69388139;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY69388139 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY70424739;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY70424739 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY47168307;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY47168307 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY49816274;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY49816274 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY34214272;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY34214272 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY65348248;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY65348248 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY61824971;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY61824971 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY2179890;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY2179890 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY81256210;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY81256210 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY30215774;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY30215774 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY51575642;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY51575642 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY50126753;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY50126753 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY44993137;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY44993137 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY35952105;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY35952105 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY92496245;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY92496245 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY14349457;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY14349457 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY46672744;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY46672744 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY16940689;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY16940689 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY86738097;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY86738097 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY28809101;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY28809101 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY79456955;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY79456955 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY43997774;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY43997774 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY32513503;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY32513503 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY58555400;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY58555400 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY75278942;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY75278942 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY53666463;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY53666463 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY19114860;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY19114860 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY55670684;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY55670684 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY68147011;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY68147011 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY39314537;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY39314537 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY95700880;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY95700880 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY17973116;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY17973116 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY96007578;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY96007578 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY17597150;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY17597150 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY71149624;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY71149624 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY18226657;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY18226657 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY74188623;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY74188623 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY85777038;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY85777038 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY6932979;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY6932979 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY56042108;     ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY56042108 = ZIJDJrqGpjKrdsOlOeKZMizugcOaIoQjlqemyTvY42346038;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void pCPApRlPBzxioehstcoI65104094() {     int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ26072791 = -133945329;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ76061005 = -954180282;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ1072640 = 88842074;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ75019497 = -476984087;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ8545389 = -338761529;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ27541240 = -813809059;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ91908858 = -317718582;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ41033225 = -872013612;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ24052799 = -297012152;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ8071278 = 61825045;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ34630519 = -713069603;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ83389424 = -261475248;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ3118537 = -630960653;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ98101763 = -246269686;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ97170987 = 22898436;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ9095188 = 71564197;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ31503979 = -832048984;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ82555092 = 12426213;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ57252214 = -759747463;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ19218404 = -524254793;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ63211186 = -210666060;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ94119993 = -40462190;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ8824606 = -975554155;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ87446094 = -137413991;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ29361608 = 64679995;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ60722019 = -19236272;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ697447 = -698164647;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ93774662 = -180602132;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ50710779 = 61666540;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ12890471 = 82074796;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ90729258 = -583782238;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ68984897 = -683433580;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ9897012 = -904157176;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ1394548 = -578099904;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ25818826 = 82451799;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ33809148 = -442661099;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ16780697 = -665124556;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ24861145 = -611490773;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ27943873 = -580117774;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ93790433 = -203657874;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ59491082 = -867264410;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ57847827 = -95218492;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ88251778 = -754109112;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ8726821 = -967307014;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ7368581 = -254404087;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ52224656 = 93775487;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ5889418 = -234343679;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ71268581 = -882494503;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ10908741 = -41572893;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ52427079 = -235151151;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ23569283 = -493025273;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ16636803 = -169647028;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ75096907 = -392268585;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ23635308 = -470512397;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ1892909 = -230381390;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ31952797 = 6516860;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ67236399 = -978626128;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ13626545 = -773743935;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ45657890 = -441664083;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ47823369 = -219525257;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ26843793 = -15644412;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ98134196 = -37116450;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ90322446 = -833680153;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ11162328 = -279086949;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ17342020 = -354392717;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ65645621 = 70363977;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ73492413 = -357318073;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ1723989 = 47139250;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ72282938 = -228721486;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ63361839 = -534440466;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ92314490 = -263311247;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ6642834 = -120558212;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ54611219 = -407456014;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ63461781 = -456089590;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ59727322 = -656990383;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ5363359 = -15447569;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ5868216 = -286353079;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ97786 = 91752859;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ80077513 = -883009904;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ77136952 = 70904508;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ54832602 = -784892594;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ29428866 = -815670145;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ82865922 = -39029239;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ98283699 = -703182309;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ89321188 = -424899931;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ74092455 = -314135211;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ93887990 = -191164996;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ86261703 = -333644779;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ99501639 = -247718515;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ93866028 = -924065062;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ66572749 = -464034971;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ3154152 = -891380621;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ79203255 = -69826690;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ80120504 = -260592517;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ66946640 = -88013462;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ61356886 = -730147961;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ67525380 = -261538339;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ77089450 = -375022164;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ91384801 = -512914298;    int EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ41722959 = -133945329;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ26072791 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ76061005;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ76061005 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ1072640;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ1072640 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ75019497;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ75019497 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ8545389;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ8545389 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ27541240;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ27541240 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ91908858;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ91908858 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ41033225;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ41033225 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ24052799;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ24052799 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ8071278;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ8071278 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ34630519;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ34630519 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ83389424;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ83389424 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ3118537;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ3118537 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ98101763;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ98101763 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ97170987;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ97170987 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ9095188;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ9095188 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ31503979;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ31503979 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ82555092;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ82555092 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ57252214;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ57252214 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ19218404;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ19218404 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ63211186;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ63211186 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ94119993;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ94119993 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ8824606;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ8824606 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ87446094;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ87446094 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ29361608;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ29361608 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ60722019;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ60722019 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ697447;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ697447 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ93774662;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ93774662 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ50710779;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ50710779 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ12890471;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ12890471 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ90729258;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ90729258 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ68984897;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ68984897 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ9897012;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ9897012 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ1394548;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ1394548 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ25818826;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ25818826 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ33809148;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ33809148 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ16780697;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ16780697 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ24861145;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ24861145 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ27943873;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ27943873 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ93790433;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ93790433 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ59491082;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ59491082 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ57847827;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ57847827 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ88251778;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ88251778 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ8726821;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ8726821 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ7368581;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ7368581 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ52224656;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ52224656 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ5889418;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ5889418 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ71268581;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ71268581 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ10908741;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ10908741 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ52427079;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ52427079 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ23569283;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ23569283 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ16636803;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ16636803 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ75096907;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ75096907 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ23635308;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ23635308 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ1892909;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ1892909 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ31952797;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ31952797 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ67236399;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ67236399 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ13626545;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ13626545 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ45657890;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ45657890 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ47823369;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ47823369 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ26843793;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ26843793 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ98134196;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ98134196 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ90322446;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ90322446 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ11162328;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ11162328 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ17342020;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ17342020 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ65645621;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ65645621 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ73492413;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ73492413 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ1723989;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ1723989 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ72282938;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ72282938 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ63361839;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ63361839 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ92314490;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ92314490 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ6642834;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ6642834 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ54611219;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ54611219 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ63461781;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ63461781 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ59727322;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ59727322 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ5363359;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ5363359 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ5868216;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ5868216 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ97786;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ97786 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ80077513;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ80077513 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ77136952;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ77136952 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ54832602;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ54832602 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ29428866;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ29428866 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ82865922;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ82865922 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ98283699;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ98283699 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ89321188;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ89321188 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ74092455;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ74092455 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ93887990;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ93887990 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ86261703;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ86261703 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ99501639;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ99501639 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ93866028;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ93866028 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ66572749;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ66572749 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ3154152;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ3154152 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ79203255;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ79203255 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ80120504;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ80120504 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ66946640;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ66946640 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ61356886;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ61356886 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ67525380;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ67525380 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ77089450;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ77089450 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ91384801;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ91384801 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ41722959;     EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ41722959 = EmsPDYaDXYbZdURRzcJjHAPEyTwovIlGtCYCJzxQ26072791;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void mCMvFuKINhDSIcVlEswz47332856() {     int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu77808241 = -250200162;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu91734987 = 68919962;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu49872999 = -808517310;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu50094899 = -293253230;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu85269321 = -46412183;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu52424594 = -972836285;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu65685702 = -140930178;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu59824703 = -995793166;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu75350875 = -87860863;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu76868401 = -479820937;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu29923218 = -674792074;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu93745802 = -196456748;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu90299330 = -240140914;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu56869482 = -972950233;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu51186245 = -554829274;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu20822460 = -740119758;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu87474503 = -100143674;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu68238014 = -450150282;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu16826063 = -187661646;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu38947978 = -234522941;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu8958539 = -293474228;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu96539447 = -213943198;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu10174121 = -583791602;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu80096344 = -9005942;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu777467 = -980974442;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu18427434 = -364846051;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu39526082 = -60573365;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu91903887 = -563932818;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu25460852 = 11767638;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu82875554 = -379826000;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu27948067 = -916664705;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu82014627 = 92792228;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu7990321 = -386539062;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu95418260 = -238697070;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu24023954 = -134357844;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu15508759 = -678829927;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu66428923 = -209479300;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu25694758 = -695003137;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu97718715 = 74564831;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu18872850 = -822273540;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu28175169 = -986423198;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu17873227 = -83738113;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu44835010 = -654885644;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu1662640 = -892695692;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu79397788 = -854901170;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu53919103 = -330116454;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu92055612 = -696684132;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu50253046 = -186899198;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu99927193 = -5525622;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu41083338 = -94162532;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu64249174 = -201529429;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu48616555 = -631246588;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu98335653 = -136381773;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu93694548 = -85311709;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu38374317 = -260144591;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu81268794 = 63743035;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu81560867 = -347288436;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu69776654 = -699511368;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu49317433 = -312278789;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu66841887 = -681566132;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu12898513 = -812262921;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu73781814 = -576997361;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu34363852 = -907560805;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu92475320 = -708034863;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu48920335 = -563156233;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu47908590 = -667584303;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu85755481 = -809917687;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu94881070 = 98556155;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu32845529 = -738592390;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu35677487 = -875999347;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu54393537 = -430640459;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu61779746 = -405140537;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu70519299 = -424715114;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu97953213 = -365388106;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu10772809 = -248099744;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu91085311 = -109736115;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu51704437 = -559057555;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu8511481 = -691095910;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu698556 = -154104772;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu46858363 = -550857988;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu26371822 = -668161920;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu89273035 = -873674167;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu91976694 = -458407196;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu84377513 = -894069831;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu18626380 = -78296571;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu79331511 = -185418117;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu83678974 = -770825999;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu14295773 = -201227353;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu57043943 = -978552480;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu42755160 = -98100880;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu33947891 = -231541491;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu96652268 = -509967932;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu76377324 = -282724349;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu30876828 = -243869037;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu5974338 = 89989380;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu54393354 = -309425838;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu83509375 = -176177309;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu52359689 = -946850781;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu52742305 = -229539459;    int WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu31489199 = -250200162;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu77808241 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu91734987;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu91734987 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu49872999;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu49872999 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu50094899;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu50094899 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu85269321;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu85269321 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu52424594;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu52424594 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu65685702;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu65685702 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu59824703;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu59824703 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu75350875;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu75350875 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu76868401;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu76868401 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu29923218;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu29923218 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu93745802;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu93745802 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu90299330;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu90299330 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu56869482;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu56869482 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu51186245;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu51186245 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu20822460;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu20822460 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu87474503;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu87474503 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu68238014;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu68238014 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu16826063;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu16826063 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu38947978;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu38947978 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu8958539;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu8958539 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu96539447;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu96539447 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu10174121;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu10174121 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu80096344;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu80096344 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu777467;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu777467 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu18427434;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu18427434 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu39526082;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu39526082 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu91903887;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu91903887 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu25460852;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu25460852 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu82875554;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu82875554 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu27948067;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu27948067 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu82014627;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu82014627 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu7990321;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu7990321 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu95418260;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu95418260 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu24023954;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu24023954 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu15508759;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu15508759 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu66428923;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu66428923 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu25694758;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu25694758 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu97718715;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu97718715 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu18872850;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu18872850 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu28175169;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu28175169 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu17873227;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu17873227 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu44835010;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu44835010 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu1662640;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu1662640 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu79397788;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu79397788 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu53919103;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu53919103 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu92055612;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu92055612 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu50253046;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu50253046 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu99927193;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu99927193 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu41083338;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu41083338 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu64249174;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu64249174 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu48616555;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu48616555 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu98335653;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu98335653 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu93694548;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu93694548 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu38374317;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu38374317 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu81268794;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu81268794 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu81560867;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu81560867 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu69776654;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu69776654 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu49317433;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu49317433 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu66841887;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu66841887 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu12898513;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu12898513 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu73781814;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu73781814 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu34363852;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu34363852 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu92475320;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu92475320 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu48920335;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu48920335 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu47908590;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu47908590 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu85755481;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu85755481 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu94881070;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu94881070 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu32845529;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu32845529 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu35677487;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu35677487 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu54393537;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu54393537 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu61779746;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu61779746 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu70519299;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu70519299 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu97953213;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu97953213 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu10772809;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu10772809 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu91085311;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu91085311 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu51704437;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu51704437 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu8511481;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu8511481 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu698556;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu698556 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu46858363;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu46858363 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu26371822;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu26371822 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu89273035;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu89273035 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu91976694;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu91976694 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu84377513;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu84377513 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu18626380;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu18626380 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu79331511;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu79331511 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu83678974;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu83678974 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu14295773;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu14295773 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu57043943;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu57043943 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu42755160;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu42755160 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu33947891;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu33947891 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu96652268;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu96652268 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu76377324;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu76377324 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu30876828;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu30876828 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu5974338;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu5974338 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu54393354;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu54393354 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu83509375;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu83509375 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu52359689;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu52359689 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu52742305;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu52742305 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu31489199;     WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu31489199 = WZGZhLcLFOCtuWGtVgWqRhOqiRedtadyhWAMwmNu77808241;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void IsWgIvTcQGTARyDBGPmM77319086() {     long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd201831 = -12079984;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd37510172 = -937027967;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd77329065 = 8957460;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd80021727 = -479119931;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd74603473 = -169113863;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd32502278 = -34011851;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd89294105 = -258381017;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd66244511 = -662212493;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd89773842 = -258410832;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd71992472 = -585755399;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd47144472 = -711944403;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd35357075 = -711723679;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd25454597 = -837199760;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd45640015 = -55505939;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd42749413 = -219594135;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd90513825 = -788991650;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd81445095 = -557808924;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd51213897 = -504821351;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd37679424 = -804781505;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd45390498 = -975132944;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd30172222 = -574495163;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd82058400 = -208717628;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd76589047 = -300914352;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd62946023 = -692078277;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd7875024 = -175839713;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd90156351 = -900534347;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd16393921 = -617360145;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd62411813 = -843420283;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd19674966 = -786419166;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd15942864 = -624690493;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd38826193 = -610887622;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd54831961 = -167457365;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd3576569 = -713938341;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd54524110 = -686142187;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd17895281 = 61199658;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd14373438 = -914459558;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd47927268 = -942773873;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd9403179 = -567365930;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd10713250 = -713799784;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd67185671 = -249065883;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd69076872 = -301656966;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd20683958 = -747854722;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd90101842 = 16714027;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd41874861 = -233094897;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd63363003 = -190785246;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd21591417 = -700300878;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd76655217 = -793813763;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd19468140 = -434672833;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd75728709 = -391478459;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd18121661 = -649157904;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd59859021 = -978050699;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd7920556 = -679920122;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd1201708 = 83761005;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd43730823 = -929072667;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd47146864 = -643949428;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd18143431 = -803362356;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd60921125 = -536113616;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd14383043 = -298964264;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd72146703 = -203280219;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd84447122 = -268579516;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd16108358 = -416651707;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd26882293 = -414960734;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd46569546 = -875793328;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd73830978 = -633720340;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd33166280 = -974867777;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd92312511 = -444487038;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd31780506 = -997785339;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd70930486 = -51057573;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd27744734 = -16705597;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd28375976 = -305134578;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd42586558 = -846217777;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd72041917 = -990442995;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd40500648 = -791021567;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd70493753 = -455715622;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd76313626 = -573475978;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd9488265 = -826640441;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd91956557 = -125431655;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd34714187 = 32180545;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd99583020 = -401293031;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd86283607 = -475538835;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd13501135 = -6720584;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd96925780 = -82687313;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd86683103 = -351941824;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd1553305 = -37261262;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd56083842 = -646639794;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd30905638 = -930967501;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd53630253 = -151218371;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd59845745 = -784865675;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd7377246 = 57807240;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd99751850 = -135437986;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd53452313 = -278345942;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd33544225 = -543809609;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd37256476 = -264085712;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd26266128 = -345220268;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd51077313 = -832414177;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd42194580 = -886696232;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd74114411 = -872061395;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd16270864 = -349565634;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd8708581 = -258227120;    long MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd71050492 = -12079984;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd201831 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd37510172;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd37510172 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd77329065;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd77329065 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd80021727;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd80021727 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd74603473;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd74603473 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd32502278;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd32502278 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd89294105;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd89294105 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd66244511;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd66244511 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd89773842;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd89773842 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd71992472;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd71992472 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd47144472;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd47144472 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd35357075;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd35357075 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd25454597;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd25454597 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd45640015;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd45640015 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd42749413;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd42749413 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd90513825;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd90513825 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd81445095;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd81445095 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd51213897;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd51213897 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd37679424;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd37679424 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd45390498;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd45390498 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd30172222;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd30172222 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd82058400;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd82058400 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd76589047;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd76589047 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd62946023;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd62946023 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd7875024;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd7875024 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd90156351;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd90156351 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd16393921;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd16393921 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd62411813;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd62411813 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd19674966;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd19674966 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd15942864;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd15942864 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd38826193;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd38826193 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd54831961;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd54831961 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd3576569;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd3576569 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd54524110;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd54524110 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd17895281;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd17895281 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd14373438;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd14373438 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd47927268;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd47927268 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd9403179;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd9403179 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd10713250;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd10713250 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd67185671;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd67185671 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd69076872;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd69076872 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd20683958;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd20683958 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd90101842;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd90101842 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd41874861;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd41874861 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd63363003;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd63363003 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd21591417;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd21591417 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd76655217;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd76655217 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd19468140;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd19468140 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd75728709;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd75728709 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd18121661;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd18121661 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd59859021;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd59859021 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd7920556;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd7920556 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd1201708;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd1201708 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd43730823;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd43730823 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd47146864;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd47146864 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd18143431;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd18143431 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd60921125;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd60921125 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd14383043;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd14383043 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd72146703;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd72146703 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd84447122;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd84447122 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd16108358;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd16108358 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd26882293;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd26882293 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd46569546;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd46569546 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd73830978;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd73830978 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd33166280;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd33166280 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd92312511;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd92312511 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd31780506;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd31780506 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd70930486;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd70930486 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd27744734;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd27744734 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd28375976;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd28375976 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd42586558;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd42586558 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd72041917;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd72041917 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd40500648;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd40500648 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd70493753;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd70493753 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd76313626;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd76313626 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd9488265;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd9488265 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd91956557;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd91956557 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd34714187;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd34714187 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd99583020;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd99583020 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd86283607;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd86283607 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd13501135;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd13501135 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd96925780;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd96925780 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd86683103;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd86683103 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd1553305;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd1553305 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd56083842;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd56083842 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd30905638;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd30905638 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd53630253;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd53630253 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd59845745;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd59845745 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd7377246;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd7377246 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd99751850;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd99751850 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd53452313;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd53452313 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd33544225;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd33544225 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd37256476;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd37256476 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd26266128;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd26266128 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd51077313;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd51077313 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd42194580;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd42194580 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd74114411;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd74114411 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd16270864;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd16270864 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd8708581;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd8708581 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd71050492;     MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd71050492 = MUrvteIcEcBdPfvcxJoiQfazsKdHYLOzeoJnBbnd201831;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void edPCmvMEFRWQwgbuQlXA47010487() {     long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv60070668 = -682716889;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv58314344 = -594048141;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv7821276 = -97094539;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv95333047 = -983353732;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv68176814 = -29056912;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv77819948 = 84046648;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv21041169 = -674237895;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv15276487 = -253897743;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv78017277 = -860752747;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv65216437 = 81513973;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv86233107 = -723128300;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv11326325 = -483744316;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv60998150 = -816207755;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv72604326 = -866209843;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv28554124 = -806507831;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv47257493 = 36791482;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv79372485 = -711174610;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv72108584 = -634775775;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv17086236 = -251857769;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv82121572 = -236272973;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv2001888 = -102919851;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv17699018 = -533114905;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv71009426 = -513672812;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv37762507 = -704744293;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv7321853 = -677349159;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv58795944 = -405815058;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv72092771 = 16569064;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv65794081 = -690255466;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv17974804 = -783772854;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv50221186 = -506861632;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv60422299 = -24541004;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv44007940 = -510499267;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv8696845 = -840171343;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv30897594 = -877202329;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv94067274 = -482950124;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv93263573 = -396254457;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv81649724 = -676698003;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv87484155 = -697753695;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv76665430 = -165848801;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv1578200 = -326431875;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv46268950 = -936753614;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv55312740 = 21294429;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv497522 = -477208068;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv30636843 = -36735041;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv84412124 = -708219842;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv31473400 = -350710476;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv67005271 = 43708270;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv60619366 = -39587597;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv36803847 = -453362009;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv53875322 = -982430232;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv90438025 = -287584909;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv25057891 = -727102600;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv83335514 = -948426507;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv48511464 = -379457273;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv45008600 = -333023615;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv42371651 = -49601984;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv87304918 = 19624671;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv70058768 = -392350247;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv88011195 = -206004573;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv9380871 = -623241854;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv5727177 = -932522417;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv55247088 = -983982429;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv97301683 = -470124889;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv27796092 = -253891115;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv4794139 = -893945023;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv42225167 = -112629033;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv2629481 = -643572973;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv30100557 = -939005427;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv78537051 = -283259719;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv35290550 = -310253375;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv65607769 = -286510516;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv91888329 = 86579085;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv95443154 = -368926975;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv15508036 = -925425894;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv35852623 = -299519359;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv46689147 = -24214281;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv17201497 = 44093163;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv40372583 = -376937772;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv53350382 = -996524452;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv75848453 = -226638683;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv91790673 = -349523329;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv11473406 = -943843339;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv28990234 = -136893458;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv64099481 = -801342623;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv59783161 = -119276723;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv35364409 = -297438405;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv60672426 = -562072761;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv60185380 = -360714070;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv85888994 = -444178714;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv51695624 = -333348141;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv5958656 = -315879129;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv11590956 = -184347756;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv99472960 = -391749122;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv67284560 = -542606947;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv95851022 = -393909459;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv91021862 = -952771186;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv58011057 = -508580682;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv72701429 = -123316954;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv25842705 = -142790018;    long RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv42186958 = -682716889;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv60070668 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv58314344;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv58314344 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv7821276;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv7821276 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv95333047;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv95333047 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv68176814;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv68176814 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv77819948;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv77819948 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv21041169;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv21041169 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv15276487;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv15276487 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv78017277;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv78017277 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv65216437;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv65216437 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv86233107;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv86233107 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv11326325;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv11326325 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv60998150;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv60998150 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv72604326;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv72604326 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv28554124;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv28554124 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv47257493;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv47257493 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv79372485;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv79372485 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv72108584;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv72108584 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv17086236;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv17086236 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv82121572;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv82121572 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv2001888;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv2001888 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv17699018;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv17699018 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv71009426;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv71009426 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv37762507;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv37762507 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv7321853;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv7321853 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv58795944;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv58795944 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv72092771;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv72092771 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv65794081;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv65794081 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv17974804;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv17974804 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv50221186;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv50221186 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv60422299;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv60422299 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv44007940;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv44007940 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv8696845;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv8696845 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv30897594;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv30897594 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv94067274;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv94067274 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv93263573;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv93263573 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv81649724;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv81649724 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv87484155;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv87484155 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv76665430;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv76665430 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv1578200;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv1578200 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv46268950;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv46268950 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv55312740;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv55312740 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv497522;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv497522 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv30636843;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv30636843 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv84412124;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv84412124 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv31473400;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv31473400 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv67005271;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv67005271 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv60619366;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv60619366 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv36803847;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv36803847 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv53875322;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv53875322 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv90438025;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv90438025 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv25057891;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv25057891 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv83335514;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv83335514 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv48511464;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv48511464 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv45008600;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv45008600 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv42371651;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv42371651 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv87304918;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv87304918 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv70058768;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv70058768 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv88011195;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv88011195 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv9380871;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv9380871 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv5727177;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv5727177 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv55247088;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv55247088 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv97301683;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv97301683 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv27796092;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv27796092 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv4794139;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv4794139 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv42225167;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv42225167 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv2629481;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv2629481 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv30100557;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv30100557 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv78537051;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv78537051 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv35290550;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv35290550 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv65607769;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv65607769 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv91888329;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv91888329 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv95443154;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv95443154 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv15508036;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv15508036 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv35852623;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv35852623 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv46689147;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv46689147 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv17201497;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv17201497 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv40372583;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv40372583 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv53350382;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv53350382 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv75848453;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv75848453 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv91790673;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv91790673 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv11473406;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv11473406 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv28990234;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv28990234 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv64099481;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv64099481 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv59783161;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv59783161 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv35364409;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv35364409 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv60672426;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv60672426 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv60185380;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv60185380 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv85888994;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv85888994 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv51695624;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv51695624 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv5958656;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv5958656 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv11590956;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv11590956 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv99472960;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv99472960 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv67284560;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv67284560 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv95851022;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv95851022 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv91021862;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv91021862 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv58011057;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv58011057 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv72701429;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv72701429 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv25842705;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv25842705 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv42186958;     RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv42186958 = RrTJGqDPhJUgquGbnOtiMuRENIpQhqCwGmkmKGwv60070668;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void awHRquqWJPUyxsUwAqcJ89541905() {     double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei1932428 = -857727922;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei57113392 = 54125933;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei52114334 = -31248385;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei43907024 = -985794696;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei57957482 = -778031008;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei83489707 = 32386313;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei89481450 = -134994964;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei86946527 = -14125036;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei53127042 = -659494095;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei38269232 = -30006535;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei57677625 = -93270929;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei56432210 = -998313951;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei86525075 = -737623877;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei69790898 = -491051274;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei80643752 = -769356484;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei83164507 = -475272344;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei79305190 = -240614541;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei79147219 = -440201562;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei37574476 = -146182388;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei69175394 = -594419431;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei35671643 = -990153111;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei18200053 = 60307452;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei5597359 = -528370181;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei38333855 = 75639380;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei25622899 = -166514540;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei35292323 = -627298572;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei32888741 = -205368647;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei87093681 = -33476210;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei53933874 = -495870804;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei67995350 = -843164819;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei1104511 = -684090015;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei56404584 = -235097878;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei15759196 = -622778389;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei48759950 = -529250653;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei27868937 = -350095428;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei28194190 = -935452696;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei31531520 = -836868651;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei12675051 = -647325304;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei56973290 = -318628241;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei71172757 = -849755315;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei28652710 = -761773677;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei69982603 = -881718405;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei16897595 = -853410196;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei54234603 = -926206907;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei48405750 = -321226881;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei53606840 = -158226322;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei33594756 = 32885317;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei29990290 = -470648546;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei53740954 = -853254085;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei71811987 = -198437950;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei60483441 = -370471110;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei810751 = -53128993;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei56026715 = -404392689;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei71477767 = -117811867;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei53870263 = -491387087;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei83732374 = -818035375;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei51516033 = -417503886;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei13780480 = -6887766;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei18284125 = -719280157;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei22665160 = -50732436;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei50600966 = -762245040;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei2387770 = -1518754;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei33012654 = -518254232;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei85131692 = -816329276;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei37164721 = -345916521;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei1273041 = -858173051;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei40673015 = -275535563;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei37765125 = -108373225;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei41921961 = -40955846;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei52449563 = -833903789;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei51632988 = -638403693;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei66630139 = -593289238;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei22173930 = -21573321;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei66401718 = -296427074;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei40522685 = -832645754;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei65689039 = -8434706;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei1302459 = -86282353;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei51362756 = -602163274;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei89928104 = -603133739;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei72016059 = 91711782;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei1697568 = -560183890;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei2898452 = -734720102;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei33352728 = -180222126;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei82121886 = -197432855;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei7511910 = -372693709;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei293760 = -530961022;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei377870 = -830705189;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei44281428 = -404966522;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei94889687 = 62136434;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei44136563 = -532060054;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei76678157 = -417948810;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei17751040 = -729980885;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei94390925 = -928045147;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei34308130 = -167895806;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei20571792 = 12489725;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei26264941 = -660254924;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei36969950 = -263464174;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei31765902 = 62919080;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei17069882 = -480290387;    double JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei47132709 = -857727922;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei1932428 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei57113392;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei57113392 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei52114334;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei52114334 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei43907024;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei43907024 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei57957482;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei57957482 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei83489707;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei83489707 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei89481450;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei89481450 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei86946527;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei86946527 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei53127042;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei53127042 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei38269232;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei38269232 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei57677625;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei57677625 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei56432210;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei56432210 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei86525075;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei86525075 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei69790898;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei69790898 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei80643752;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei80643752 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei83164507;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei83164507 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei79305190;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei79305190 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei79147219;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei79147219 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei37574476;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei37574476 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei69175394;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei69175394 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei35671643;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei35671643 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei18200053;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei18200053 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei5597359;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei5597359 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei38333855;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei38333855 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei25622899;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei25622899 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei35292323;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei35292323 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei32888741;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei32888741 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei87093681;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei87093681 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei53933874;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei53933874 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei67995350;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei67995350 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei1104511;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei1104511 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei56404584;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei56404584 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei15759196;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei15759196 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei48759950;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei48759950 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei27868937;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei27868937 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei28194190;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei28194190 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei31531520;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei31531520 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei12675051;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei12675051 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei56973290;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei56973290 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei71172757;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei71172757 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei28652710;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei28652710 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei69982603;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei69982603 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei16897595;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei16897595 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei54234603;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei54234603 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei48405750;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei48405750 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei53606840;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei53606840 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei33594756;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei33594756 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei29990290;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei29990290 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei53740954;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei53740954 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei71811987;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei71811987 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei60483441;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei60483441 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei810751;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei810751 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei56026715;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei56026715 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei71477767;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei71477767 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei53870263;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei53870263 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei83732374;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei83732374 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei51516033;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei51516033 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei13780480;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei13780480 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei18284125;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei18284125 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei22665160;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei22665160 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei50600966;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei50600966 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei2387770;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei2387770 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei33012654;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei33012654 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei85131692;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei85131692 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei37164721;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei37164721 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei1273041;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei1273041 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei40673015;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei40673015 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei37765125;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei37765125 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei41921961;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei41921961 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei52449563;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei52449563 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei51632988;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei51632988 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei66630139;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei66630139 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei22173930;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei22173930 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei66401718;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei66401718 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei40522685;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei40522685 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei65689039;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei65689039 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei1302459;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei1302459 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei51362756;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei51362756 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei89928104;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei89928104 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei72016059;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei72016059 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei1697568;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei1697568 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei2898452;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei2898452 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei33352728;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei33352728 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei82121886;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei82121886 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei7511910;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei7511910 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei293760;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei293760 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei377870;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei377870 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei44281428;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei44281428 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei94889687;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei94889687 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei44136563;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei44136563 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei76678157;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei76678157 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei17751040;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei17751040 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei94390925;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei94390925 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei34308130;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei34308130 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei20571792;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei20571792 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei26264941;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei26264941 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei36969950;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei36969950 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei31765902;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei31765902 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei17069882;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei17069882 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei47132709;     JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei47132709 = JXOjnINzHYfrGmDtrcHTvOYIAuxyBMlMBmXChYei1932428;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void XobTOurKpXwXeSaVCttw62389752() {     double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM11526907 = -229615335;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM93262320 = -866678233;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM64444025 = -919671461;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM36052748 = -988540781;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM71460734 = -245626865;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM89868185 = -850731563;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM28976767 = -215846666;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM5075325 = -844380740;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM37625527 = -295578112;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM20453625 = -705467106;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM88052708 = 65318614;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM94676331 = -477204791;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM15242868 = -374217014;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM16625793 = 68502116;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM39244586 = -452561218;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM73559898 = -638844148;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM29229484 = -673734464;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM24565683 = -633805572;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM98123746 = -989797584;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM17110945 = -859834197;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM36050117 = -200790529;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM31263718 = -784592397;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM7008783 = -132404720;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM63976621 = -8928987;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM83711576 = -4325593;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM58850749 = -188967525;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM38784207 = -730048573;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM61055731 = -257099548;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM56887829 = -171980998;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM491284 = -809005905;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM34371999 = -876082651;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM95350809 = -200271316;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM36204340 = -378211315;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM31355102 = -825305017;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM3395808 = -63133895;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM17491134 = -442050714;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM148540 = -879560630;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM78514808 = -590593363;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM34819632 = -490505112;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM36966635 = -750994184;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM83834440 = -977421249;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM36486200 = -935107844;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM47847677 = -176637589;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM68282082 = -139362757;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM20398579 = -710859800;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM28506961 = -79181649;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM96007926 = -529290506;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM20532579 = -680592113;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM22795199 = -203132670;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM41990736 = -416446632;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM64284533 = -51218086;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM61032718 = -394908686;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM75304316 = -892354645;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM97314857 = -235960785;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM26339635 = -394545994;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM80263188 = -445022939;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM86253537 = -634273513;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM467405 = -810742474;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM52341172 = -884215189;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM12609985 = 43340659;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM51083978 = -20682991;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM67921036 = -958747119;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM48187496 = -572399743;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM37134243 = -486572207;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM86081626 = -829384455;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM92701898 = -734410071;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM58471991 = 1006523;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM83887765 = -548911997;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM13229985 = -868363990;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM21753452 = 89489496;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM73411359 = -759283518;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM50714676 = 16858898;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM89746051 = -43300461;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM61157111 = -138803401;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM33276504 = -882412949;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM99563917 = -265682685;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM83416041 = -507954809;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM38726701 = -993041964;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM43578042 = -298069188;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM55204615 = -925143945;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM62842823 = -659677020;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM18251629 = 50543540;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM38260533 = 46033121;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM14897093 = -755534367;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM36206750 = -657787819;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM73339280 = -381173966;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM20046493 = -307916671;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM38889482 = -42250530;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM5015468 = -330759024;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM23132620 = -618110957;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM31237597 = -807777202;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM99681134 = 31181844;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM26173637 = -706378175;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM22209647 = -433845772;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM85882656 = -630311194;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM15913405 = 81325870;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM88298704 = -262708102;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM10713434 = -690065382;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM82200456 = -309978302;    double CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM27696680 = -229615335;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM11526907 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM93262320;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM93262320 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM64444025;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM64444025 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM36052748;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM36052748 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM71460734;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM71460734 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM89868185;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM89868185 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM28976767;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM28976767 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM5075325;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM5075325 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM37625527;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM37625527 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM20453625;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM20453625 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM88052708;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM88052708 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM94676331;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM94676331 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM15242868;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM15242868 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM16625793;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM16625793 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM39244586;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM39244586 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM73559898;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM73559898 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM29229484;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM29229484 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM24565683;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM24565683 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM98123746;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM98123746 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM17110945;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM17110945 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM36050117;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM36050117 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM31263718;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM31263718 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM7008783;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM7008783 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM63976621;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM63976621 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM83711576;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM83711576 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM58850749;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM58850749 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM38784207;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM38784207 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM61055731;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM61055731 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM56887829;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM56887829 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM491284;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM491284 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM34371999;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM34371999 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM95350809;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM95350809 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM36204340;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM36204340 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM31355102;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM31355102 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM3395808;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM3395808 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM17491134;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM17491134 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM148540;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM148540 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM78514808;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM78514808 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM34819632;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM34819632 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM36966635;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM36966635 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM83834440;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM83834440 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM36486200;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM36486200 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM47847677;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM47847677 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM68282082;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM68282082 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM20398579;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM20398579 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM28506961;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM28506961 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM96007926;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM96007926 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM20532579;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM20532579 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM22795199;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM22795199 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM41990736;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM41990736 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM64284533;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM64284533 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM61032718;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM61032718 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM75304316;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM75304316 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM97314857;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM97314857 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM26339635;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM26339635 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM80263188;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM80263188 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM86253537;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM86253537 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM467405;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM467405 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM52341172;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM52341172 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM12609985;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM12609985 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM51083978;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM51083978 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM67921036;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM67921036 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM48187496;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM48187496 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM37134243;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM37134243 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM86081626;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM86081626 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM92701898;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM92701898 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM58471991;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM58471991 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM83887765;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM83887765 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM13229985;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM13229985 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM21753452;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM21753452 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM73411359;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM73411359 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM50714676;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM50714676 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM89746051;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM89746051 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM61157111;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM61157111 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM33276504;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM33276504 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM99563917;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM99563917 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM83416041;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM83416041 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM38726701;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM38726701 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM43578042;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM43578042 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM55204615;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM55204615 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM62842823;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM62842823 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM18251629;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM18251629 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM38260533;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM38260533 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM14897093;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM14897093 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM36206750;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM36206750 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM73339280;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM73339280 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM20046493;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM20046493 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM38889482;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM38889482 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM5015468;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM5015468 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM23132620;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM23132620 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM31237597;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM31237597 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM99681134;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM99681134 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM26173637;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM26173637 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM22209647;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM22209647 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM85882656;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM85882656 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM15913405;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM15913405 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM88298704;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM88298704 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM10713434;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM10713434 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM82200456;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM82200456 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM27696680;     CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM27696680 = CHxbtBYYoWfkkdamvkXNeFrCLmMgnmIXtKMPrAaM11526907;}
// Junk Finished
