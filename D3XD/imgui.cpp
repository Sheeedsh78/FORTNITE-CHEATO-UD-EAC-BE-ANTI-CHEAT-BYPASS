// dear imgui, v1.75 WIP
// (main code and documentation)

// Call and read ImGui::ShowDemoWindow() in imgui_demo.cpp for demo code.
// Newcomers, read 'Programmer guide' below for notes on how to setup Dear ImGui in your codebase.
// Get latest version at https://github.com/ocornut/imgui
// Releases change-log at https://github.com/ocornut/imgui/releases
// Technical Support for Getting Started https://github.com/ocornut/imgui/wiki
// Gallery (please post your screenshots/video there!): https://github.com/ocornut/imgui/issues/2847

// Developed by Omar Cornut and every direct or indirect contributors to the GitHub.
// See LICENSE.txt for copyright and licensing details (standard MIT License).
// This library is free but I need your support to sustain development and maintenance.
// Businesses: you can support continued maintenance and development via support contracts or sponsoring, see docs/README.
// Individuals: you can support continued maintenance and development via donations or Patreon https://www.patreon.com/imgui.

// It is recommended that you don't modify imgui.cpp! It will become difficult for you to update the library.
// Note that 'ImGui::' being a namespace, you can add functions into the namespace from your own source files, without
// modifying imgui.h or imgui.cpp. You may include imgui_internal.h to access internal data structures, but it doesn't
// come with any guarantee of forward compatibility. Discussing your changes on the GitHub Issue Tracker may lead you
// to a better solution or official support for them.

/*

Index of this file:

DOCUMENTATION

- MISSION STATEMENT
- END-USER GUIDE
- PROGRAMMER GUIDE
  - READ FIRST
  - HOW TO UPDATE TO A NEWER VERSION OF DEAR IMGUI
  - GETTING STARTED WITH INTEGRATING DEAR IMGUI IN YOUR CODE/ENGINE
  - HOW A SIMPLE APPLICATION MAY LOOK LIKE (2 variations)
  - HOW A SIMPLE RENDERING FUNCTION MAY LOOK LIKE
  - USING GAMEPAD/KEYBOARD NAVIGATION CONTROLS
- API BREAKING CHANGES (read me when you update!)
- FREQUENTLY ASKED QUESTIONS (FAQ)
  - Read all answers online: https://www.dearimgui.org/faq, or in docs/FAQ.md (with a Markdown viewer)

CODE
(search for "[SECTION]" in the code to find them)

// [SECTION] FORWARD DECLARATIONS
// [SECTION] CONTEXT AND MEMORY ALLOCATORS
// [SECTION] MAIN USER FACING STRUCTURES (ImGuiStyle, ImGuiIO)
// [SECTION] MISC HELPERS/UTILITIES (Geometry, String, Format, Hash, File functions)
// [SECTION] MISC HELPERS/UTILITIES (File functions)
// [SECTION] MISC HELPERS/UTILITIES (ImText* functions)
// [SECTION] MISC HELPERS/UTILITIES (Color functions)
// [SECTION] ImGuiStorage
// [SECTION] ImGuiTextFilter
// [SECTION] ImGuiTextBuffer
// [SECTION] ImGuiListClipper
// [SECTION] RENDER HELPERS
// [SECTION] MAIN CODE (most of the code! lots of stuff, needs tidying up!)
// [SECTION] ERROR CHECKING
// [SECTION] SCROLLING
// [SECTION] TOOLTIPS
// [SECTION] POPUPS
// [SECTION] KEYBOARD/GAMEPAD NAVIGATION
// [SECTION] DRAG AND DROP
// [SECTION] LOGGING/CAPTURING
// [SECTION] SETTINGS
// [SECTION] PLATFORM DEPENDENT HELPERS
// [SECTION] METRICS/DEBUG WINDOW

*/

//-----------------------------------------------------------------------------
// DOCUMENTATION
//-----------------------------------------------------------------------------

/*

 MISSION STATEMENT
 =================

 - Easy to use to create code-driven and data-driven tools.
 - Easy to use to create ad hoc short-lived tools and long-lived, more elaborate tools.
 - Easy to hack and improve.
 - Minimize screen real-estate usage.
 - Minimize setup and maintenance.
 - Minimize state storage on user side.
 - Portable, minimize dependencies, run on target (consoles, phones, etc.).
 - Efficient runtime and memory consumption (NB- we do allocate when "growing" content e.g. creating a window,.
   opening a tree node for the first time, etc. but a typical frame should not allocate anything).

 Designed for developers and content-creators, not the typical end-user! Some of the weaknesses includes:
 - Doesn't look fancy, doesn't animate.
 - Limited layout features, intricate layouts are typically crafted in code.


 END-USER GUIDE
 ==============

 - Double-click on title bar to collapse window.
 - Click upper right corner to close a window, available when 'bool* p_open' is passed to ImGui::Begin().
 - Click and drag on lower right corner to resize window (double-click to auto fit window to its contents).
 - Click and drag on any empty space to move window.
 - TAB/SHIFT+TAB to cycle through keyboard editable fields.
 - CTRL+Click on a slider or drag box to input value as text.
 - Use mouse wheel to scroll.
 - Text editor:
   - Hold SHIFT or use mouse to select text.
   - CTRL+Left/Right to word jump.
   - CTRL+Shift+Left/Right to select words.
   - CTRL+A our Double-Click to select all.
   - CTRL+X,CTRL+C,CTRL+V to use OS clipboard/
   - CTRL+Z,CTRL+Y to undo/redo.
   - ESCAPE to revert text to its original value.
   - You can apply arithmetic operators +,*,/ on numerical values. Use +- to subtract (because - would set a negative value!)
   - Controls are automatically adjusted for OSX to match standard OSX text editing operations.
 - General Keyboard controls: enable with ImGuiConfigFlags_NavEnableKeyboard.
 - General Gamepad controls: enable with ImGuiConfigFlags_NavEnableGamepad. See suggested mappings in imgui.h ImGuiNavInput_ + download PNG/PSD at http://goo.gl/9LgVZW


 PROGRAMMER GUIDE
 ================

 READ FIRST
 ----------
 - Remember to read the FAQ (https://www.dearimgui.org/faq)
 - Your code creates the UI, if your code doesn't run the UI is gone! The UI can be highly dynamic, there are no construction
   or destruction steps, less superfluous data retention on your side, less state duplication, less state synchronization, less bugs.
 - Call and read ImGui::ShowDemoWindow() for demo code demonstrating most features.
 - The library is designed to be built from sources. Avoid pre-compiled binaries and packaged versions. See imconfig.h to configure your build.
 - Dear ImGui is an implementation of the IMGUI paradigm (immediate-mode graphical user interface, a term coined by Casey Muratori).
   You can learn about IMGUI principles at http://www.johno.se/book/imgui.html, http://mollyrocket.com/861 & more links docs/README.md.
 - Dear ImGui is a "single pass" rasterizing implementation of the IMGUI paradigm, aimed at ease of use and high-performances.
   For every application frame your UI code will be called only once. This is in contrast to e.g. Unity's own implementation of an IMGUI,
   where the UI code is called multiple times ("multiple passes") from a single entry point. There are pros and cons to both approaches.
 - Our origin are on the top-left. In axis aligned bounding boxes, Min = top-left, Max = bottom-right.
 - This codebase is also optimized to yield decent performances with typical "Debug" builds settings.
 - Please make sure you have asserts enabled (IM_ASSERT redirects to assert() by default, but can be redirected).
   If you get an assert, read the messages and comments around the assert.
 - C++: this is a very C-ish codebase: we don't rely on C++11, we don't include any C++ headers, and ImGui:: is a namespace.
 - C++: ImVec2/ImVec4 do not expose math operators by default, because it is expected that you use your own math types.
   See FAQ "How can I use my own math types instead of ImVec2/ImVec4?" for details about setting up imconfig.h for that.
   However, imgui_internal.h can optionally export math operators for ImVec2/ImVec4, which we use in this codebase.
 - C++: pay attention that ImVector<> manipulates plain-old-data and does not honor construction/destruction (avoid using it in your code!).

 HOW TO UPDATE TO A NEWER VERSION OF DEAR IMGUI
 ----------------------------------------------
 - Overwrite all the sources files except for imconfig.h (if you have made modification to your copy of imconfig.h)
 - Or maintain your own branch where you have imconfig.h modified.
 - Read the "API BREAKING CHANGES" section (below). This is where we list occasional API breaking changes.
   If a function/type has been renamed / or marked obsolete, try to fix the name in your code before it is permanently removed
   from the public API. If you have a problem with a missing function/symbols, search for its name in the code, there will
   likely be a comment about it. Please report any issue to the GitHub page!
 - Try to keep your copy of dear imgui reasonably up to date.

 GETTING STARTED WITH INTEGRATING DEAR IMGUI IN YOUR CODE/ENGINE
 ---------------------------------------------------------------
 - Run and study the examples and demo in imgui_demo.cpp to get acquainted with the library.
 - Add the Dear ImGui source files to your projects or using your preferred build system.
   It is recommended you build and statically link the .cpp files as part of your project and not as shared library (DLL).
 - You can later customize the imconfig.h file to tweak some compile-time behavior, such as integrating Dear ImGui types with your own maths types.
 - When using Dear ImGui, your programming IDE is your friend: follow the declaration of variables, functions and types to find comments about them.
 - Dear ImGui never touches or knows about your GPU state. The only function that knows about GPU is the draw function that you provide.
   Effectively it means you can create widgets at any time in your code, regardless of considerations of being in "update" vs "render"
   phases of your own application. All rendering information are stored into command-lists that you will retrieve after calling ImGui::Render().
 - Refer to the bindings and demo applications in the examples/ folder for instruction on how to setup your code.
 - If you are running over a standard OS with a common graphics API, you should be able to use unmodified imgui_impl_*** files from the examples/ folder.

 HOW A SIMPLE APPLICATION MAY LOOK LIKE
 --------------------------------------
 EXHIBIT 1: USING THE EXAMPLE BINDINGS (imgui_impl_XXX.cpp files from the examples/ folder).

     // Application init: create a dear imgui context, setup some options, load fonts
     ImGui::CreateContext();
     ImGuiIO& io = ImGui::GetIO();
     // TODO: Set optional io.ConfigFlags values, e.g. 'io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard' to enable keyboard controls.
     // TODO: Fill optional fields of the io structure later.
     // TODO: Load TTF/OTF fonts if you don't want to use the default font.

     // Initialize helper Platform and Renderer bindings (here we are using imgui_impl_win32 and imgui_impl_dx11)
     ImGui_ImplWin32_Init(hwnd);
     ImGui_ImplDX11_Init(g_pd3dDevice, g_pd3dDeviceContext);

     // Application main loop
     while (true)
     {
         // Feed inputs to dear imgui, start new frame
         ImGui_ImplDX11_NewFrame();
         ImGui_ImplWin32_NewFrame();
         ImGui::NewFrame();

         // Any application code here
         ImGui::Text("Hello, world!");

         // Render dear imgui into screen
         ImGui::Render();
         ImGui_ImplDX11_RenderDrawData(ImGui::GetDrawData());
         g_pSwapChain->Present(1, 0);
     }

     // Shutdown
     ImGui_ImplDX11_Shutdown();
     ImGui_ImplWin32_Shutdown();
     ImGui::DestroyContext();

 EXHIBIT 2: IMPLEMENTING CUSTOM BINDING / CUSTOM ENGINE

     // Application init: create a dear imgui context, setup some options, load fonts
     ImGui::CreateContext();
     ImGuiIO& io = ImGui::GetIO();
     // TODO: Set optional io.ConfigFlags values, e.g. 'io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard' to enable keyboard controls.
     // TODO: Fill optional fields of the io structure later.
     // TODO: Load TTF/OTF fonts if you don't want to use the default font.

     // Build and load the texture atlas into a texture
     // (In the examples/ app this is usually done within the ImGui_ImplXXX_Init() function from one of the demo Renderer)
     int width, height;
     unsigned char* pixels = NULL;
     io.Fonts->GetTexDataAsRGBA32(&pixels, &width, &height);

     // At this point you've got the texture data and you need to upload that your your graphic system:
     // After we have created the texture, store its pointer/identifier (_in whichever format your engine uses_) in 'io.Fonts->TexID'.
     // This will be passed back to your via the renderer. Basically ImTextureID == void*. Read FAQ for details about ImTextureID.
     MyTexture* texture = MyEngine::CreateTextureFromMemoryPixels(pixels, width, height, TEXTURE_TYPE_RGBA32)
     io.Fonts->TexID = (void*)texture;

     // Application main loop
     while (true)
     {
        // Setup low-level inputs, e.g. on Win32: calling GetKeyboardState(), or write to those fields from your Windows message handlers, etc.
        // (In the examples/ app this is usually done within the ImGui_ImplXXX_NewFrame() function from one of the demo Platform bindings)
        io.DeltaTime = 1.0f/60.0f;              // set the time elapsed since the previous frame (in seconds)
        io.DisplaySize.x = 1920.0f;             // set the current display width
        io.DisplaySize.y = 1280.0f;             // set the current display height here
        io.MousePos = my_mouse_pos;             // set the mouse position
        io.MouseDown[0] = my_mouse_buttons[0];  // set the mouse button states
        io.MouseDown[1] = my_mouse_buttons[1];

        // Call NewFrame(), after this point you can use ImGui::* functions anytime
        // (So you want to try calling NewFrame() as early as you can in your mainloop to be able to use Dear ImGui everywhere)
        ImGui::NewFrame();

        // Most of your application code here
        ImGui::Text("Hello, world!");
        MyGameUpdate(); // may use any Dear ImGui functions, e.g. ImGui::Begin("My window"); ImGui::Text("Hello, world!"); ImGui::End();
        MyGameRender(); // may use any Dear ImGui functions as well!

        // Render dear imgui, swap buffers
        // (You want to try calling EndFrame/Render as late as you can, to be able to use Dear ImGui in your own game rendering code)
        ImGui::EndFrame();
        ImGui::Render();
        ImDrawData* draw_data = ImGui::GetDrawData();
        MyImGuiRenderFunction(draw_data);
        SwapBuffers();
     }

     // Shutdown
     ImGui::DestroyContext();

 HOW A SIMPLE RENDERING FUNCTION MAY LOOK LIKE
 ---------------------------------------------
    void void MyImGuiRenderFunction(ImDrawData* draw_data)
    {
       // TODO: Setup render state: alpha-blending enabled, no face culling, no depth testing, scissor enabled
       // TODO: Setup viewport covering draw_data->DisplayPos to draw_data->DisplayPos + draw_data->DisplaySize
       // TODO: Setup orthographic projection matrix cover draw_data->DisplayPos to draw_data->DisplayPos + draw_data->DisplaySize
       // TODO: Setup shader: vertex { float2 pos, float2 uv, u32 color }, fragment shader sample color from 1 texture, multiply by vertex color.
       for (int n = 0; n < draw_data->CmdListsCount; n++)
       {
          const ImDrawList* cmd_list = draw_data->CmdLists[n];
          const ImDrawVert* vtx_buffer = cmd_list->VtxBuffer.Data;  // vertex buffer generated by Dear ImGui
          const ImDrawIdx* idx_buffer = cmd_list->IdxBuffer.Data;   // index buffer generated by Dear ImGui
          for (int cmd_i = 0; cmd_i < cmd_list->CmdBuffer.Size; cmd_i++)
          {
             const ImDrawCmd* pcmd = &cmd_list->CmdBuffer[cmd_i];
             if (pcmd->UserCallback)
             {
                 pcmd->UserCallback(cmd_list, pcmd);
             }
             else
             {
                 // The texture for the draw call is specified by pcmd->TextureId.
                 // The vast majority of draw calls will use the Dear ImGui texture atlas, which value you have set yourself during initialization.
                 MyEngineBindTexture((MyTexture*)pcmd->TextureId);

                 // We are using scissoring to clip some objects. All low-level graphics API should supports it.
                 // - If your engine doesn't support scissoring yet, you may ignore this at first. You will get some small glitches
                 //   (some elements visible outside their bounds) but you can fix that once everything else works!
                 // - Clipping coordinates are provided in imgui coordinates space (from draw_data->DisplayPos to draw_data->DisplayPos + draw_data->DisplaySize)
                 //   In a single viewport application, draw_data->DisplayPos will always be (0,0) and draw_data->DisplaySize will always be == io.DisplaySize.
                 //   However, in the interest of supporting multi-viewport applications in the future (see 'viewport' branch on github),
                 //   always subtract draw_data->DisplayPos from clipping bounds to convert them to your viewport space.
                 // - Note that pcmd->ClipRect contains Min+Max bounds. Some graphics API may use Min+Max, other may use Min+Size (size being Max-Min)
                 ImVec2 pos = draw_data->DisplayPos;
                 MyEngineScissor((int)(pcmd->ClipRect.x - pos.x), (int)(pcmd->ClipRect.y - pos.y), (int)(pcmd->ClipRect.z - pos.x), (int)(pcmd->ClipRect.w - pos.y));

                 // Render 'pcmd->ElemCount/3' indexed triangles.
                 // By default the indices ImDrawIdx are 16-bit, you can change them to 32-bit in imconfig.h if your engine doesn't support 16-bit indices.
                 MyEngineDrawIndexedTriangles(pcmd->ElemCount, sizeof(ImDrawIdx) == 2 ? GL_UNSIGNED_SHORT : GL_UNSIGNED_INT, idx_buffer, vtx_buffer);
             }
             idx_buffer += pcmd->ElemCount;
          }
       }
    }

 - The examples/ folders contains many actual implementation of the pseudo-codes above.
 - When calling NewFrame(), the 'io.WantCaptureMouse', 'io.WantCaptureKeyboard' and 'io.WantTextInput' flags are updated.
   They tell you if Dear ImGui intends to use your inputs. When a flag is set you want to hide the corresponding inputs from the
   rest of your application. In every cases you need to pass on the inputs to Dear ImGui.
 - Refer to the FAQ for more information. Amusingly, it is called a FAQ because people frequently run into the same issues!

 USING GAMEPAD/KEYBOARD NAVIGATION CONTROLS
 ------------------------------------------
 - The gamepad/keyboard navigation is fairly functional and keeps being improved.
 - Gamepad support is particularly useful to use dear imgui on a console system (e.g. PS4, Switch, XB1) without a mouse!
 - You can ask questions and report issues at https://github.com/ocornut/imgui/issues/787
 - The initial focus was to support game controllers, but keyboard is becoming increasingly and decently usable.
 - Gamepad:
    - Set io.ConfigFlags |= ImGuiConfigFlags_NavEnableGamepad to enable.
    - Backend: Set io.BackendFlags |= ImGuiBackendFlags_HasGamepad + fill the io.NavInputs[] fields before calling NewFrame().
      Note that io.NavInputs[] is cleared by EndFrame().
    - See 'enum ImGuiNavInput_' in imgui.h for a description of inputs. For each entry of io.NavInputs[], set the following values:
         0.0f= not held. 1.0f= fully held. Pass intermediate 0.0f..1.0f values for analog triggers/sticks.
    - We uses a simple >0.0f test for activation testing, and won't attempt to test for a dead-zone.
      Your code will probably need to transform your raw inputs (such as e.g. remapping your 0.2..0.9 raw input range to 0.0..1.0 imgui range, etc.).
    - You can download PNG/PSD files depicting the gamepad controls for common controllers at: http://goo.gl/9LgVZW.
    - If you need to share inputs between your game and the imgui parts, the easiest approach is to go all-or-nothing, with a buttons combo
      to toggle the target. Please reach out if you think the game vs navigation input sharing could be improved.
 - Keyboard:
    - Set io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard to enable.
      NewFrame() will automatically fill io.NavInputs[] based on your io.KeysDown[] + io.KeyMap[] arrays.
    - When keyboard navigation is active (io.NavActive + ImGuiConfigFlags_NavEnableKeyboard), the io.WantCaptureKeyboard flag
      will be set. For more advanced uses, you may want to read from:
       - io.NavActive: true when a window is focused and it doesn't have the ImGuiWindowFlags_NoNavInputs flag set.
       - io.NavVisible: true when the navigation cursor is visible (and usually goes false when mouse is used).
       - or query focus information with e.g. IsWindowFocused(ImGuiFocusedFlags_AnyWindow), IsItemFocused() etc. functions.
      Please reach out if you think the game vs navigation input sharing could be improved.
 - Mouse:
    - PS4 users: Consider emulating a mouse cursor with DualShock4 touch pad or a spare analog stick as a mouse-emulation fallback.
    - Consoles/Tablet/Phone users: Consider using a Synergy 1.x server (on your PC) + uSynergy.c (on your console/tablet/phone app) to share your PC mouse/keyboard.
    - On a TV/console system where readability may be lower or mouse inputs may be awkward, you may want to set the ImGuiConfigFlags_NavEnableSetMousePos flag.
      Enabling ImGuiConfigFlags_NavEnableSetMousePos + ImGuiBackendFlags_HasSetMousePos instructs dear imgui to move your mouse cursor along with navigation movements.
      When enabled, the NewFrame() function may alter 'io.MousePos' and set 'io.WantSetMousePos' to notify you that it wants the mouse cursor to be moved.
      When that happens your back-end NEEDS to move the OS or underlying mouse cursor on the next frame. Some of the binding in examples/ do that.
      (If you set the NavEnableSetMousePos flag but don't honor 'io.WantSetMousePos' properly, imgui will misbehave as it will see your mouse as moving back and forth!)
      (In a setup when you may not have easy control over the mouse cursor, e.g. uSynergy.c doesn't expose moving remote mouse cursor, you may want
       to set a boolean to ignore your other external mouse positions until the external source is moved again.)


 API BREAKING CHANGES
 ====================

 Occasionally introducing changes that are breaking the API. We try to make the breakage minor and easy to fix.
 Below is a change-log of API breaking changes only. If you are using one of the functions listed, expect to have to fix some code.
 When you are not sure about a old symbol or function name, try using the Search/Find function of your IDE to look for comments or references in all imgui files.
 You can read releases logs https://github.com/ocornut/imgui/releases for more details.

 - 2019/12/06 (1.75) - removed implicit default parameter to IsMouseDragging(int button = 0) to be consistent with other mouse functions (none of the other functions have it).
 - 2019/11/21 (1.74) - ImFontAtlas::AddCustomRectRegular() now requires an ID larger than 0x110000 (instead of 0x10000) to conform with supporting Unicode planes 1-16 in a future update. ID below 0x110000 will now assert.
 - 2019/11/19 (1.74) - renamed IMGUI_DISABLE_FORMAT_STRING_FUNCTIONS to IMGUI_DISABLE_DEFAULT_FORMAT_FUNCTIONS for consistency.
 - 2019/11/19 (1.74) - renamed IMGUI_DISABLE_MATH_FUNCTIONS to IMGUI_DISABLE_DEFAULT_MATH_FUNCTIONS for consistency.
 - 2019/10/22 (1.74) - removed redirecting functions/enums that were marked obsolete in 1.52 (October 2017): Begin() (5 arguments signature), IsRootWindowOrAnyChildHovered(), AlignFirstTextHeightToWidgets(), SetNextWindowPosCenter(), ImFont::Glyph. See docs/Changelog.txt or grep this log for details and new names, or see how they were implemented until 1.73.
 - 2019/10/14 (1.74) - inputs: Fixed a miscalculation in the keyboard/mouse "typematic" repeat delay/rate calculation, used by keys and e.g. repeating mouse buttons as well as the GetKeyPressedAmount() function.
                       if you were using a non-default value for io.KeyRepeatRate (previous default was 0.250), you can add +io.KeyRepeatDelay to it to compensate for the fix.
                       The function was triggering on: 0.0 and (delay+rate*N) where (N>=1). Fixed formula responds to (N>=0). Effectively it made io.KeyRepeatRate behave like it was set to (io.KeyRepeatRate + io.KeyRepeatDelay).
                       If you never altered io.KeyRepeatRate nor used GetKeyPressedAmount() this won't affect you.
 - 2019/07/15 (1.72) - removed TreeAdvanceToLabelPos() which is rarely used and only does SetCursorPosX(GetCursorPosX() + GetTreeNodeToLabelSpacing()). Kept redirection function (will obsolete).
 - 2019/07/12 (1.72) - renamed ImFontAtlas::CustomRect to ImFontAtlasCustomRect. Kept redirection typedef (will obsolete).
 - 2019/06/14 (1.72) - removed redirecting functions/enums names that were marked obsolete in 1.51 (June 2017): ImGuiCol_Column*, ImGuiSetCond_*, IsItemHoveredRect(), IsPosHoveringAnyWindow(), IsMouseHoveringAnyWindow(), IsMouseHoveringWindow(), IMGUI_ONCE_UPON_A_FRAME. Grep this log for details and new names, or see how they were implemented until 1.71.
 - 2019/06/07 (1.71) - rendering of child window outer decorations (bg color, border, scrollbars) is now performed as part of the parent window. If you have
                       overlapping child windows in a same parent, and relied on their relative z-order to be mapped to their submission order, this will affect your rendering.
                       This optimization is disabled if the parent window has no visual output, because it appears to be the most common situation leading to the creation of overlapping child windows.
                       Please reach out if you are affected.
 - 2019/05/13 (1.71) - renamed SetNextTreeNodeOpen() to SetNextItemOpen(). Kept inline redirection function (will obsolete).
 - 2019/05/11 (1.71) - changed io.AddInputCharacter(unsigned short c) signature to io.AddInputCharacter(unsigned int c).
 - 2019/04/29 (1.70) - improved ImDrawList thick strokes (>1.0f) preserving correct thickness up to 90 degrees angles (e.g. rectangles). If you have custom rendering using thick lines, they will appear thicker now.
 - 2019/04/29 (1.70) - removed GetContentRegionAvailWidth(), use GetContentRegionAvail().x instead. Kept inline redirection function (will obsolete).
 - 2019/03/04 (1.69) - renamed GetOverlayDrawList() to GetForegroundDrawList(). Kept redirection function (will obsolete).
 - 2019/02/26 (1.69) - renamed ImGuiColorEditFlags_RGB/ImGuiColorEditFlags_HSV/ImGuiColorEditFlags_HEX to ImGuiColorEditFlags_DisplayRGB/ImGuiColorEditFlags_DisplayHSV/ImGuiColorEditFlags_DisplayHex. Kept redirection enums (will obsolete).
 - 2019/02/14 (1.68) - made it illegal/assert when io.DisplayTime == 0.0f (with an exception for the first frame). If for some reason your time step calculation gives you a zero value, replace it with a dummy small value!
 - 2019/02/01 (1.68) - removed io.DisplayVisibleMin/DisplayVisibleMax (which were marked obsolete and removed from viewport/docking branch already).
 - 2019/01/06 (1.67) - renamed io.InputCharacters[], marked internal as was always intended. Please don't access directly, and use AddInputCharacter() instead!
 - 2019/01/06 (1.67) - renamed ImFontAtlas::GlyphRangesBuilder to ImFontGlyphRangesBuilder. Kept redirection typedef (will obsolete).
 - 2018/12/20 (1.67) - made it illegal to call Begin("") with an empty string. This somehow half-worked before but had various undesirable side-effects.
 - 2018/12/10 (1.67) - renamed io.ConfigResizeWindowsFromEdges to io.ConfigWindowsResizeFromEdges as we are doing a large pass on configuration flags.
 - 2018/10/12 (1.66) - renamed misc/stl/imgui_stl.* to misc/cpp/imgui_stdlib.* in prevision for other C++ helper files.
 - 2018/09/28 (1.66) - renamed SetScrollHere() to SetScrollHereY(). Kept redirection function (will obsolete).
 - 2018/09/06 (1.65) - renamed stb_truetype.h to imstb_truetype.h, stb_textedit.h to imstb_textedit.h, and stb_rect_pack.h to imstb_rectpack.h.
                       If you were conveniently using the imgui copy of those STB headers in your project you will have to update your include paths.
 - 2018/09/05 (1.65) - renamed io.OptCursorBlink/io.ConfigCursorBlink to io.ConfigInputTextCursorBlink. (#1427)
 - 2018/08/31 (1.64) - added imgui_widgets.cpp file, extracted and moved widgets code out of imgui.cpp into imgui_widgets.cpp. Re-ordered some of the code remaining in imgui.cpp.
                       NONE OF THE FUNCTIONS HAVE CHANGED. THE CODE IS SEMANTICALLY 100% IDENTICAL, BUT _EVERY_ FUNCTION HAS BEEN MOVED.
                       Because of this, any local modifications to imgui.cpp will likely conflict when you update. Read docs/CHANGELOG.txt for suggestions.
 - 2018/08/22 (1.63) - renamed IsItemDeactivatedAfterChange() to IsItemDeactivatedAfterEdit() for consistency with new IsItemEdited() API. Kept redirection function (will obsolete soonish as IsItemDeactivatedAfterChange() is very recent).
 - 2018/08/21 (1.63) - renamed ImGuiTextEditCallback to ImGuiInputTextCallback, ImGuiTextEditCallbackData to ImGuiInputTextCallbackData for consistency. Kept redirection types (will obsolete).
 - 2018/08/21 (1.63) - removed ImGuiInputTextCallbackData::ReadOnly since it is a duplication of (ImGuiInputTextCallbackData::Flags & ImGuiInputTextFlags_ReadOnly).
 - 2018/08/01 (1.63) - removed per-window ImGuiWindowFlags_ResizeFromAnySide beta flag in favor of a global io.ConfigResizeWindowsFromEdges [update 1.67 renamed to ConfigWindowsResizeFromEdges] to enable the feature.
 - 2018/08/01 (1.63) - renamed io.OptCursorBlink to io.ConfigCursorBlink [-> io.ConfigInputTextCursorBlink in 1.65], io.OptMacOSXBehaviors to ConfigMacOSXBehaviors for consistency.
 - 2018/07/22 (1.63) - changed ImGui::GetTime() return value from float to double to avoid accumulating floating point imprecisions over time.
 - 2018/07/08 (1.63) - style: renamed ImGuiCol_ModalWindowDarkening to ImGuiCol_ModalWindowDimBg for consistency with other features. Kept redirection enum (will obsolete).
 - 2018/06/08 (1.62) - examples: the imgui_impl_xxx files have been split to separate platform (Win32, Glfw, SDL2, etc.) from renderer (DX11, OpenGL, Vulkan,  etc.).
                       old bindings will still work as is, however prefer using the separated bindings as they will be updated to support multi-viewports.
                       when adopting new bindings follow the main.cpp code of your preferred examples/ folder to know which functions to call.
                       in particular, note that old bindings called ImGui::NewFrame() at the end of their ImGui_ImplXXXX_NewFrame() function.
 - 2018/06/06 (1.62) - renamed GetGlyphRangesChinese() to GetGlyphRangesChineseFull() to distinguish other variants and discourage using the full set.
 - 2018/06/06 (1.62) - TreeNodeEx()/TreeNodeBehavior(): the ImGuiTreeNodeFlags_CollapsingHeader helper now include the ImGuiTreeNodeFlags_NoTreePushOnOpen flag. See Changelog for details.
 - 2018/05/03 (1.61) - DragInt(): the default compile-time format string has been changed from "%.0f" to "%d", as we are not using integers internally any more.
                       If you used DragInt() with custom format strings, make sure you change them to use %d or an integer-compatible format.
                       To honor backward-compatibility, the DragInt() code will currently parse and modify format strings to replace %*f with %d, giving time to users to upgrade their code.
                       If you have IMGUI_DISABLE_OBSOLETE_FUNCTIONS enabled, the code will instead assert! You may run a reg-exp search on your codebase for e.g. "DragInt.*%f" to help you find them.
 - 2018/04/28 (1.61) - obsoleted InputFloat() functions taking an optional "int decimal_precision" in favor of an equivalent and more flexible "const char* format",
                       consistent with other functions. Kept redirection functions (will obsolete).
 - 2018/04/09 (1.61) - IM_DELETE() helper function added in 1.60 doesn't clear the input _pointer_ reference, more consistent with expectation and allows passing r-value.
 - 2018/03/20 (1.60) - renamed io.WantMoveMouse to io.WantSetMousePos for consistency and ease of understanding (was added in 1.52, _not_ used by core and only honored by some binding ahead of merging the Nav branch).
 - 2018/03/12 (1.60) - removed ImGuiCol_CloseButton, ImGuiCol_CloseButtonActive, ImGuiCol_CloseButtonHovered as the closing cross uses regular button colors now.
 - 2018/03/08 (1.60) - changed ImFont::DisplayOffset.y to default to 0 instead of +1. Fixed rounding of Ascent/Descent to match TrueType renderer. If you were adding or subtracting to ImFont::DisplayOffset check if your fonts are correctly aligned vertically.
 - 2018/03/03 (1.60) - renamed ImGuiStyleVar_Count_ to ImGuiStyleVar_COUNT and ImGuiMouseCursor_Count_ to ImGuiMouseCursor_COUNT for consistency with other public enums.
 - 2018/02/18 (1.60) - BeginDragDropSource(): temporarily removed the optional mouse_button=0 parameter because it is not really usable in many situations at the moment.
 - 2018/02/16 (1.60) - obsoleted the io.RenderDrawListsFn callback, you can call your graphics engine render function after ImGui::Render(). Use ImGui::GetDrawData() to retrieve the ImDrawData* to display.
 - 2018/02/07 (1.60) - reorganized context handling to be more explicit,
                       - YOU NOW NEED TO CALL ImGui::CreateContext() AT THE BEGINNING OF YOUR APP, AND CALL ImGui::DestroyContext() AT THE END.
                       - removed Shutdown() function, as DestroyContext() serve this purpose.
                       - you may pass a ImFontAtlas* pointer to CreateContext() to share a font atlas between contexts. Otherwise CreateContext() will create its own font atlas instance.
                       - removed allocator parameters from CreateContext(), they are now setup with SetAllocatorFunctions(), and shared by all contexts.
                       - removed the default global context and font atlas instance, which were confusing for users of DLL reloading and users of multiple contexts.
 - 2018/01/31 (1.60) - moved sample TTF files from extra_fonts/ to misc/fonts/. If you loaded files directly from the imgui repo you may need to update your paths.
 - 2018/01/11 (1.60) - obsoleted IsAnyWindowHovered() in favor of IsWindowHovered(ImGuiHoveredFlags_AnyWindow). Kept redirection function (will obsolete).
 - 2018/01/11 (1.60) - obsoleted IsAnyWindowFocused() in favor of IsWindowFocused(ImGuiFocusedFlags_AnyWindow). Kept redirection function (will obsolete).
 - 2018/01/03 (1.60) - renamed ImGuiSizeConstraintCallback to ImGuiSizeCallback, ImGuiSizeConstraintCallbackData to ImGuiSizeCallbackData.
 - 2017/12/29 (1.60) - removed CalcItemRectClosestPoint() which was weird and not really used by anyone except demo code. If you need it it's easy to replicate on your side.
 - 2017/12/24 (1.53) - renamed the emblematic ShowTestWindow() function to ShowDemoWindow(). Kept redirection function (will obsolete).
 - 2017/12/21 (1.53) - ImDrawList: renamed style.AntiAliasedShapes to style.AntiAliasedFill for consistency and as a way to explicitly break code that manipulate those flag at runtime. You can now manipulate ImDrawList::Flags
 - 2017/12/21 (1.53) - ImDrawList: removed 'bool anti_aliased = true' final parameter of ImDrawList::AddPolyline() and ImDrawList::AddConvexPolyFilled(). Prefer manipulating ImDrawList::Flags if you need to toggle them during the frame.
 - 2017/12/14 (1.53) - using the ImGuiWindowFlags_NoScrollWithMouse flag on a child window forwards the mouse wheel event to the parent window, unless either ImGuiWindowFlags_NoInputs or ImGuiWindowFlags_NoScrollbar are also set.
 - 2017/12/13 (1.53) - renamed GetItemsLineHeightWithSpacing() to GetFrameHeightWithSpacing(). Kept redirection function (will obsolete).
 - 2017/12/13 (1.53) - obsoleted IsRootWindowFocused() in favor of using IsWindowFocused(ImGuiFocusedFlags_RootWindow). Kept redirection function (will obsolete).
                     - obsoleted IsRootWindowOrAnyChildFocused() in favor of using IsWindowFocused(ImGuiFocusedFlags_RootAndChildWindows). Kept redirection function (will obsolete).
 - 2017/12/12 (1.53) - renamed ImGuiTreeNodeFlags_AllowOverlapMode to ImGuiTreeNodeFlags_AllowItemOverlap. Kept redirection enum (will obsolete).
 - 2017/12/10 (1.53) - removed SetNextWindowContentWidth(), prefer using SetNextWindowContentSize(). Kept redirection function (will obsolete).
 - 2017/11/27 (1.53) - renamed ImGuiTextBuffer::append() helper to appendf(), appendv() to appendfv(). If you copied the 'Log' demo in your code, it uses appendv() so that needs to be renamed.
 - 2017/11/18 (1.53) - Style, Begin: removed ImGuiWindowFlags_ShowBorders window flag. Borders are now fully set up in the ImGuiStyle structure (see e.g. style.FrameBorderSize, style.WindowBorderSize). Use ImGui::ShowStyleEditor() to look them up.
                       Please note that the style system will keep evolving (hopefully stabilizing in Q1 2018), and so custom styles will probably subtly break over time. It is recommended you use the StyleColorsClassic(), StyleColorsDark(), StyleColorsLight() functions.
 - 2017/11/18 (1.53) - Style: removed ImGuiCol_ComboBg in favor of combo boxes using ImGuiCol_PopupBg for consistency.
 - 2017/11/18 (1.53) - Style: renamed ImGuiCol_ChildWindowBg to ImGuiCol_ChildBg.
 - 2017/11/18 (1.53) - Style: renamed style.ChildWindowRounding to style.ChildRounding, ImGuiStyleVar_ChildWindowRounding to ImGuiStyleVar_ChildRounding.
 - 2017/11/02 (1.53) - obsoleted IsRootWindowOrAnyChildHovered() in favor of using IsWindowHovered(ImGuiHoveredFlags_RootAndChildWindows);
 - 2017/10/24 (1.52) - renamed IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCS/IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCS to IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCTIONS/IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS for consistency.
 - 2017/10/20 (1.52) - changed IsWindowHovered() default parameters behavior to return false if an item is active in another window (e.g. click-dragging item from another window to this window). You can use the newly introduced IsWindowHovered() flags to requests this specific behavior if you need it.
 - 2017/10/20 (1.52) - marked IsItemHoveredRect()/IsMouseHoveringWindow() as obsolete, in favor of using the newly introduced flags for IsItemHovered() and IsWindowHovered(). See https://github.com/ocornut/imgui/issues/1382 for details.
                       removed the IsItemRectHovered()/IsWindowRectHovered() names introduced in 1.51 since they were merely more consistent names for the two functions we are now obsoleting.
                         IsItemHoveredRect()        --> IsItemHovered(ImGuiHoveredFlags_RectOnly)
                         IsMouseHoveringAnyWindow() --> IsWindowHovered(ImGuiHoveredFlags_AnyWindow)
                         IsMouseHoveringWindow()    --> IsWindowHovered(ImGuiHoveredFlags_AllowWhenBlockedByPopup | ImGuiHoveredFlags_AllowWhenBlockedByActiveItem) [weird, old behavior]
 - 2017/10/17 (1.52) - marked the old 5-parameters version of Begin() as obsolete (still available). Use SetNextWindowSize()+Begin() instead!
 - 2017/10/11 (1.52) - renamed AlignFirstTextHeightToWidgets() to AlignTextToFramePadding(). Kept inline redirection function (will obsolete).
 - 2017/09/26 (1.52) - renamed ImFont::Glyph to ImFontGlyph. Kept redirection typedef (will obsolete).
 - 2017/09/25 (1.52) - removed SetNextWindowPosCenter() because SetNextWindowPos() now has the optional pivot information to do the same and more. Kept redirection function (will obsolete).
 - 2017/08/25 (1.52) - io.MousePos needs to be set to ImVec2(-FLT_MAX,-FLT_MAX) when mouse is unavailable/missing. Previously ImVec2(-1,-1) was enough but we now accept negative mouse coordinates. In your binding if you need to support unavailable mouse, make sure to replace "io.MousePos = ImVec2(-1,-1)" with "io.MousePos = ImVec2(-FLT_MAX,-FLT_MAX)".
 - 2017/08/22 (1.51) - renamed IsItemHoveredRect() to IsItemRectHovered(). Kept inline redirection function (will obsolete). -> (1.52) use IsItemHovered(ImGuiHoveredFlags_RectOnly)!
                     - renamed IsMouseHoveringAnyWindow() to IsAnyWindowHovered() for consistency. Kept inline redirection function (will obsolete).
                     - renamed IsMouseHoveringWindow() to IsWindowRectHovered() for consistency. Kept inline redirection function (will obsolete).
 - 2017/08/20 (1.51) - renamed GetStyleColName() to GetStyleColorName() for consistency.
 - 2017/08/20 (1.51) - added PushStyleColor(ImGuiCol idx, ImU32 col) overload, which _might_ cause an "ambiguous call" compilation error if you are using ImColor() with implicit cast. Cast to ImU32 or ImVec4 explicily to fix.
 - 2017/08/15 (1.51) - marked the weird IMGUI_ONCE_UPON_A_FRAME helper macro as obsolete. prefer using the more explicit ImGuiOnceUponAFrame type.
 - 2017/08/15 (1.51) - changed parameter order for BeginPopupContextWindow() from (const char*,int buttons,bool also_over_items) to (const char*,int buttons,bool also_over_items). Note that most calls relied on default parameters completely.
 - 2017/08/13 (1.51) - renamed ImGuiCol_Column to ImGuiCol_Separator, ImGuiCol_ColumnHovered to ImGuiCol_SeparatorHovered, ImGuiCol_ColumnActive to ImGuiCol_SeparatorActive. Kept redirection enums (will obsolete).
 - 2017/08/11 (1.51) - renamed ImGuiSetCond_Always to ImGuiCond_Always, ImGuiSetCond_Once to ImGuiCond_Once, ImGuiSetCond_FirstUseEver to ImGuiCond_FirstUseEver, ImGuiSetCond_Appearing to ImGuiCond_Appearing. Kept redirection enums (will obsolete).
 - 2017/08/09 (1.51) - removed ValueColor() helpers, they are equivalent to calling Text(label) + SameLine() + ColorButton().
 - 2017/08/08 (1.51) - removed ColorEditMode() and ImGuiColorEditMode in favor of ImGuiColorEditFlags and parameters to the various Color*() functions. The SetColorEditOptions() allows to initialize default but the user can still change them with right-click context menu.
                     - changed prototype of 'ColorEdit4(const char* label, float col[4], bool show_alpha = true)' to 'ColorEdit4(const char* label, float col[4], ImGuiColorEditFlags flags = 0)', where passing flags = 0x01 is a safe no-op (hello dodgy backward compatibility!). - check and run the demo window, under "Color/Picker Widgets", to understand the various new options.
                     - changed prototype of rarely used 'ColorButton(ImVec4 col, bool small_height = false, bool outline_border = true)' to 'ColorButton(const char* desc_id, ImVec4 col, ImGuiColorEditFlags flags = 0, ImVec2 size = ImVec2(0,0))'
 - 2017/07/20 (1.51) - removed IsPosHoveringAnyWindow(ImVec2), which was partly broken and misleading. ASSERT + redirect user to io.WantCaptureMouse
 - 2017/05/26 (1.50) - removed ImFontConfig::MergeGlyphCenterV in favor of a more multipurpose ImFontConfig::GlyphOffset.
 - 2017/05/01 (1.50) - renamed ImDrawList::PathFill() (rarely used directly) to ImDrawList::PathFillConvex() for clarity.
 - 2016/11/06 (1.50) - BeginChild(const char*) now applies the stack id to the provided label, consistently with other functions as it should always have been. It shouldn't affect you unless (extremely unlikely) you were appending multiple times to a same child from different locations of the stack id. If that's the case, generate an id with GetId() and use it instead of passing string to BeginChild().
 - 2016/10/15 (1.50) - avoid 'void* user_data' parameter to io.SetClipboardTextFn/io.GetClipboardTextFn pointers. We pass io.ClipboardUserData to it.
 - 2016/09/25 (1.50) - style.WindowTitleAlign is now a ImVec2 (ImGuiAlign enum was removed). set to (0.5f,0.5f) for horizontal+vertical centering, (0.0f,0.0f) for upper-left, etc.
 - 2016/07/30 (1.50) - SameLine(x) with x>0.0f is now relative to left of column/group if any, and not always to left of window. This was sort of always the intent and hopefully breakage should be minimal.
 - 2016/05/12 (1.49) - title bar (using ImGuiCol_TitleBg/ImGuiCol_TitleBgActive colors) isn't rendered over a window background (ImGuiCol_WindowBg color) anymore.
                       If your TitleBg/TitleBgActive alpha was 1.0f or you are using the default theme it will not affect you, otherwise if <1.0f you need tweak your custom theme to readjust for the fact that we don't draw a WindowBg background behind the title bar.
                       This helper function will convert an old TitleBg/TitleBgActive color into a new one with the same visual output, given the OLD color and the OLD WindowBg color: 
                       ImVec4 ConvertTitleBgCol(const ImVec4& win_bg_col, const ImVec4& title_bg_col) { float new_a = 1.0f - ((1.0f - win_bg_col.w) * (1.0f - title_bg_col.w)), k = title_bg_col.w / new_a; return ImVec4((win_bg_col.x * win_bg_col.w + title_bg_col.x) * k, (win_bg_col.y * win_bg_col.w + title_bg_col.y) * k, (win_bg_col.z * win_bg_col.w + title_bg_col.z) * k, new_a); }
                       If this is confusing, pick the RGB value from title bar from an old screenshot and apply this as TitleBg/TitleBgActive. Or you may just create TitleBgActive from a tweaked TitleBg color.
 - 2016/05/07 (1.49) - removed confusing set of GetInternalState(), GetInternalStateSize(), SetInternalState() functions. Now using CreateContext(), DestroyContext(), GetCurrentContext(), SetCurrentContext().
 - 2016/05/02 (1.49) - renamed SetNextTreeNodeOpened() to SetNextTreeNodeOpen(), no redirection.
 - 2016/05/01 (1.49) - obsoleted old signature of CollapsingHeader(const char* label, const char* str_id = NULL, bool display_frame = true, bool default_open = false) as extra parameters were badly designed and rarely used. You can replace the "default_open = true" flag in new API with CollapsingHeader(label, ImGuiTreeNodeFlags_DefaultOpen).
 - 2016/04/26 (1.49) - changed ImDrawList::PushClipRect(ImVec4 rect) to ImDrawList::PushClipRect(Imvec2 min,ImVec2 max,bool intersect_with_current_clip_rect=false). Note that higher-level ImGui::PushClipRect() is preferable because it will clip at logic/widget level, whereas ImDrawList::PushClipRect() only affect your renderer.
 - 2016/04/03 (1.48) - removed style.WindowFillAlphaDefault setting which was redundant. Bake default BG alpha inside style.Colors[ImGuiCol_WindowBg] and all other Bg color values. (ref github issue #337).
 - 2016/04/03 (1.48) - renamed ImGuiCol_TooltipBg to ImGuiCol_PopupBg, used by popups/menus and tooltips. popups/menus were previously using ImGuiCol_WindowBg. (ref github issue #337)
 - 2016/03/21 (1.48) - renamed GetWindowFont() to GetFont(), GetWindowFontSize() to GetFontSize(). Kept inline redirection function (will obsolete).
 - 2016/03/02 (1.48) - InputText() completion/history/always callbacks: if you modify the text buffer manually (without using DeleteChars()/InsertChars() helper) you need to maintain the BufTextLen field. added an assert.
 - 2016/01/23 (1.48) - fixed not honoring exact width passed to PushItemWidth(), previously it would add extra FramePadding.x*2 over that width. if you had manual pixel-perfect alignment in place it might affect you.
 - 2015/12/27 (1.48) - fixed ImDrawList::AddRect() which used to render a rectangle 1 px too large on each axis.
 - 2015/12/04 (1.47) - renamed Color() helpers to ValueColor() - dangerously named, rarely used and probably to be made obsolete.
 - 2015/08/29 (1.45) - with the addition of horizontal scrollbar we made various fixes to inconsistencies with dealing with cursor position.
                       GetCursorPos()/SetCursorPos() functions now include the scrolled amount. It shouldn't affect the majority of users, but take note that SetCursorPosX(100.0f) puts you at +100 from the starting x position which may include scrolling, not at +100 from the window left side.
                       GetContentRegionMax()/GetWindowContentRegionMin()/GetWindowContentRegionMax() functions allow include the scrolled amount. Typically those were used in cases where no scrolling would happen so it may not be a problem, but watch out!
 - 2015/08/29 (1.45) - renamed style.ScrollbarWidth to style.ScrollbarSize
 - 2015/08/05 (1.44) - split imgui.cpp into extra files: imgui_demo.cpp imgui_draw.cpp imgui_internal.h that you need to add to your project.
 - 2015/07/18 (1.44) - fixed angles in ImDrawList::PathArcTo(), PathArcToFast() (introduced in 1.43) being off by an extra PI for no justifiable reason
 - 2015/07/14 (1.43) - add new ImFontAtlas::AddFont() API. For the old AddFont***, moved the 'font_no' parameter of ImFontAtlas::AddFont** functions to the ImFontConfig structure.
                       you need to render your textured triangles with bilinear filtering to benefit from sub-pixel positioning of text.
 - 2015/07/08 (1.43) - switched rendering data to use indexed rendering. this is saving a fair amount of CPU/GPU and enables us to get anti-aliasing for a marginal cost.
                       this necessary change will break your rendering function! the fix should be very easy. sorry for that :(
                     - if you are using a vanilla copy of one of the imgui_impl_XXXX.cpp provided in the example, you just need to update your copy and you can ignore the rest.
                     - the signature of the io.RenderDrawListsFn handler has changed!
                       old: ImGui_XXXX_RenderDrawLists(ImDrawList** const cmd_lists, int cmd_lists_count)
                       new: ImGui_XXXX_RenderDrawLists(ImDrawData* draw_data).
                         parameters: 'cmd_lists' becomes 'draw_data->CmdLists', 'cmd_lists_count' becomes 'draw_data->CmdListsCount'
                         ImDrawList: 'commands' becomes 'CmdBuffer', 'vtx_buffer' becomes 'VtxBuffer', 'IdxBuffer' is new.
                         ImDrawCmd:  'vtx_count' becomes 'ElemCount', 'clip_rect' becomes 'ClipRect', 'user_callback' becomes 'UserCallback', 'texture_id' becomes 'TextureId'.
                     - each ImDrawList now contains both a vertex buffer and an index buffer. For each command, render ElemCount/3 triangles using indices from the index buffer.
                     - if you REALLY cannot render indexed primitives, you can call the draw_data->DeIndexAllBuffers() method to de-index the buffers. This is slow and a waste of CPU/GPU. Prefer using indexed rendering!
                     - refer to code in the examples/ folder or ask on the GitHub if you are unsure of how to upgrade. please upgrade!
 - 2015/07/10 (1.43) - changed SameLine() parameters from int to float.
 - 2015/07/02 (1.42) - renamed SetScrollPosHere() to SetScrollFromCursorPos(). Kept inline redirection function (will obsolete).
 - 2015/07/02 (1.42) - renamed GetScrollPosY() to GetScrollY(). Necessary to reduce confusion along with other scrolling functions, because positions (e.g. cursor position) are not equivalent to scrolling amount.
 - 2015/06/14 (1.41) - changed ImageButton() default bg_col parameter from (0,0,0,1) (black) to (0,0,0,0) (transparent) - makes a difference when texture have transparence
 - 2015/06/14 (1.41) - changed Selectable() API from (label, selected, size) to (label, selected, flags, size). Size override should have been rarely be used. Sorry!
 - 2015/05/31 (1.40) - renamed GetWindowCollapsed() to IsWindowCollapsed() for consistency. Kept inline redirection function (will obsolete).
 - 2015/05/31 (1.40) - renamed IsRectClipped() to IsRectVisible() for consistency. Note that return value is opposite! Kept inline redirection function (will obsolete).
 - 2015/05/27 (1.40) - removed the third 'repeat_if_held' parameter from Button() - sorry! it was rarely used and inconsistent. Use PushButtonRepeat(true) / PopButtonRepeat() to enable repeat on desired buttons.
 - 2015/05/11 (1.40) - changed BeginPopup() API, takes a string identifier instead of a bool. ImGui needs to manage the open/closed state of popups. Call OpenPopup() to actually set the "open" state of a popup. BeginPopup() returns true if the popup is opened.
 - 2015/05/03 (1.40) - removed style.AutoFitPadding, using style.WindowPadding makes more sense (the default values were already the same).
 - 2015/04/13 (1.38) - renamed IsClipped() to IsRectClipped(). Kept inline redirection function until 1.50.
 - 2015/04/09 (1.38) - renamed ImDrawList::AddArc() to ImDrawList::AddArcFast() for compatibility with future API
 - 2015/04/03 (1.38) - removed ImGuiCol_CheckHovered, ImGuiCol_CheckActive, replaced with the more general ImGuiCol_FrameBgHovered, ImGuiCol_FrameBgActive.
 - 2014/04/03 (1.38) - removed support for passing -FLT_MAX..+FLT_MAX as the range for a SliderFloat(). Use DragFloat() or Inputfloat() instead.
 - 2015/03/17 (1.36) - renamed GetItemBoxMin()/GetItemBoxMax()/IsMouseHoveringBox() to GetItemRectMin()/GetItemRectMax()/IsMouseHoveringRect(). Kept inline redirection function until 1.50.
 - 2015/03/15 (1.36) - renamed style.TreeNodeSpacing to style.IndentSpacing, ImGuiStyleVar_TreeNodeSpacing to ImGuiStyleVar_IndentSpacing
 - 2015/03/13 (1.36) - renamed GetWindowIsFocused() to IsWindowFocused(). Kept inline redirection function until 1.50.
 - 2015/03/08 (1.35) - renamed style.ScrollBarWidth to style.ScrollbarWidth (casing)
 - 2015/02/27 (1.34) - renamed OpenNextNode(bool) to SetNextTreeNodeOpened(bool, ImGuiSetCond). Kept inline redirection function until 1.50.
 - 2015/02/27 (1.34) - renamed ImGuiSetCondition_*** to ImGuiSetCond_***, and _FirstUseThisSession becomes _Once.
 - 2015/02/11 (1.32) - changed text input callback ImGuiTextEditCallback return type from void-->int. reserved for future use, return 0 for now.
 - 2015/02/10 (1.32) - renamed GetItemWidth() to CalcItemWidth() to clarify its evolving behavior
 - 2015/02/08 (1.31) - renamed GetTextLineSpacing() to GetTextLineHeightWithSpacing()
 - 2015/02/01 (1.31) - removed IO.MemReallocFn (unused)
 - 2015/01/19 (1.30) - renamed ImGuiStorage::GetIntPtr()/GetFloatPtr() to GetIntRef()/GetIntRef() because Ptr was conflicting with actual pointer storage functions.
 - 2015/01/11 (1.30) - big font/image API change! now loads TTF file. allow for multiple fonts. no need for a PNG loader.
              (1.30) - removed GetDefaultFontData(). uses io.Fonts->GetTextureData*() API to retrieve uncompressed pixels.
                       font init:  { const void* png_data; unsigned int png_size; ImGui::GetDefaultFontData(NULL, NULL, &png_data, &png_size); <..Upload texture to GPU..>; }
                       became:     { unsigned char* pixels; int width, height; io.Fonts->GetTexDataAsRGBA32(&pixels, &width, &height); <..Upload texture to GPU>; io.Fonts->TexId = YourTextureIdentifier; }
                       you now have more flexibility to load multiple TTF fonts and manage the texture buffer for internal needs.
                       it is now recommended that you sample the font texture with bilinear interpolation.
              (1.30) - added texture identifier in ImDrawCmd passed to your render function (we can now render images). make sure to set io.Fonts->TexID.
              (1.30) - removed IO.PixelCenterOffset (unnecessary, can be handled in user projection matrix)
              (1.30) - removed ImGui::IsItemFocused() in favor of ImGui::IsItemActive() which handles all widgets
 - 2014/12/10 (1.18) - removed SetNewWindowDefaultPos() in favor of new generic API SetNextWindowPos(pos, ImGuiSetCondition_FirstUseEver)
 - 2014/11/28 (1.17) - moved IO.Font*** options to inside the IO.Font-> structure (FontYOffset, FontTexUvForWhite, FontBaseScale, FontFallbackGlyph)
 - 2014/11/26 (1.17) - reworked syntax of IMGUI_ONCE_UPON_A_FRAME helper macro to increase compiler compatibility
 - 2014/11/07 (1.15) - renamed IsHovered() to IsItemHovered()
 - 2014/10/02 (1.14) - renamed IMGUI_INCLUDE_IMGUI_USER_CPP to IMGUI_INCLUDE_IMGUI_USER_INL and imgui_user.cpp to imgui_user.inl (more IDE friendly)
 - 2014/09/25 (1.13) - removed 'text_end' parameter from IO.SetClipboardTextFn (the string is now always zero-terminated for simplicity)
 - 2014/09/24 (1.12) - renamed SetFontScale() to SetWindowFontScale()
 - 2014/09/24 (1.12) - moved IM_MALLOC/IM_REALLOC/IM_FREE preprocessor defines to IO.MemAllocFn/IO.MemReallocFn/IO.MemFreeFn
 - 2014/08/30 (1.09) - removed IO.FontHeight (now computed automatically)
 - 2014/08/30 (1.09) - moved IMGUI_FONT_TEX_UV_FOR_WHITE preprocessor define to IO.FontTexUvForWhite
 - 2014/08/28 (1.09) - changed the behavior of IO.PixelCenterOffset following various rendering fixes


 FREQUENTLY ASKED QUESTIONS (FAQ)
 ================================

 Read all answers online: https://www.dearimgui.org/faq, or in docs/FAQ.md (with a Markdown viewer)
 Some answers are copied down here to facilitate searching in code.

 Q&A: Basics
 ===========

 Q: Where is the documentation?
 A: This library is poorly documented at the moment and expects of the user to be acquainted with C/C++.
    - Run the examples/ and explore them.
    - See demo code in imgui_demo.cpp and particularly the ImGui::ShowDemoWindow() function.
    - The demo covers most features of Dear ImGui, so you can read the code and see its output.
    - See documentation and comments at the top of imgui.cpp + effectively imgui.h.
    - Dozens of standalone example applications using e.g. OpenGL/DirectX are provided in the examples/
      folder to explain how to integrate Dear ImGui with your own engine/application.
    - Your programming IDE is your friend, find the type or function declaration to find comments
      associated to it.

 Q: Which version should I get?
 Q: Why the names "Dear ImGui" vs "ImGui"?
 >> See https://www.dearimgui.org/faq

 Q&A: Concerns
 =============

 Q: Who uses Dear ImGui?
 Q: Can you create elaborate/serious tools with Dear ImGui?
 Q: Can you reskin the look of Dear ImGui?
 Q: Why using C++ (as opposed to C)?
 >> See https://www.dearimgui.org/faq

 Q&A: Integration
 ================

 Q: How can I tell whether to dispatch mouse/keyboard to Dear ImGui or to my application?
 A: You can read the 'io.WantCaptureMouse', 'io.WantCaptureKeyboard' and 'io.WantTextInput' flags from the ImGuiIO structure (e.g. if (ImGui::GetIO().WantCaptureMouse) { ... } )
    - When 'io.WantCaptureMouse' is set, imgui wants to use your mouse state, and you may want to discard/hide the inputs from the rest of your application.
    - When 'io.WantCaptureKeyboard' is set, imgui wants to use your keyboard state, and you may want to discard/hide the inputs from the rest of your application.
    - When 'io.WantTextInput' is set to may want to notify your OS to popup an on-screen keyboard, if available (e.g. on a mobile phone, or console OS).
    Note: you should always pass your mouse/keyboard inputs to imgui, even when the io.WantCaptureXXX flag are set false.
     This is because imgui needs to detect that you clicked in the void to unfocus its own windows.
    Note: The 'io.WantCaptureMouse' is more accurate that any attempt to "check if the mouse is hovering a window" (don't do that!).
     It handle mouse dragging correctly (both dragging that started over your application or over an imgui window) and handle e.g. modal windows blocking inputs.
     Those flags are updated by ImGui::NewFrame(). Preferably read the flags after calling NewFrame() if you can afford it, but reading them before is also
     perfectly fine, as the bool toggle fairly rarely. If you have on a touch device, you might find use for an early call to UpdateHoveredWindowAndCaptureFlags().
    Note: Text input widget releases focus on "Return KeyDown", so the subsequent "Return KeyUp" event that your application receive will typically
     have 'io.WantCaptureKeyboard=false'. Depending on your application logic it may or not be inconvenient. You might want to track which key-downs
     were targeted for Dear ImGui, e.g. with an array of bool, and filter out the corresponding key-ups.)

 Q: How can I use this without a mouse, without a keyboard or without a screen? (gamepad, input share, remote display)
 Q: I integrated Dear ImGui in my engine and the text or lines are blurry..
 Q: I integrated Dear ImGui in my engine and some elements are clipping or disappearing when I move windows around..
 >> See https://www.dearimgui.org/faq

 Q&A: Usage
 ----------

 Q: Why are multiple widgets reacting when I interact with a single one?
 Q: How can I have multiple widgets with the same label or with an empty label?
 A: A primer on labels and the ID Stack...

    Dear ImGui internally need to uniquely identify UI elements.
    Elements that are typically not clickable (such as calls to the Text functions) don't need an ID.
    Interactive widgets (such as calls to Button buttons) need a unique ID.
    Unique ID are used internally to track active widgets and occasionally associate state to widgets.
    Unique ID are implicitly built from the hash of multiple elements that identify the "path" to the UI element.

   - Unique ID are often derived from a string label:

       Button("OK");          // Label = "OK",     ID = hash of (..., "OK")
       Button("Cancel");      // Label = "Cancel", ID = hash of (..., "Cancel")

   - ID are uniquely scoped within windows, tree nodes, etc. which all pushes to the ID stack. Having
     two buttons labeled "OK" in different windows or different tree locations is fine.
     We used "..." above to signify whatever was already pushed to the ID stack previously:

       Begin("MyWindow");
       Button("OK");          // Label = "OK",     ID = hash of ("MyWindow", "OK")
       End();
       Begin("MyOtherWindow");
       Button("OK");          // Label = "OK",     ID = hash of ("MyOtherWindow", "OK")
       End();

   - If you have a same ID twice in the same location, you'll have a conflict:

       Button("OK");
       Button("OK");          // ID collision! Interacting with either button will trigger the first one.

     Fear not! this is easy to solve and there are many ways to solve it!

   - Solving ID conflict in a simple/local context:
     When passing a label you can optionally specify extra ID information within string itself.
     Use "##" to pass a complement to the ID that won't be visible to the end-user.
     This helps solving the simple collision cases when you know e.g. at compilation time which items
     are going to be created:

       Begin("MyWindow");
       Button("Play");        // Label = "Play",   ID = hash of ("MyWindow", "Play")
       Button("Play##foo1");  // Label = "Play",   ID = hash of ("MyWindow", "Play##foo1")  // Different from above
       Button("Play##foo2");  // Label = "Play",   ID = hash of ("MyWindow", "Play##foo2")  // Different from above
       End();

   - If you want to completely hide the label, but still need an ID:

       Checkbox("##On", &b);  // Label = "",       ID = hash of (..., "##On")   // No visible label, just a checkbox!

   - Occasionally/rarely you might want change a label while preserving a constant ID. This allows
     you to animate labels. For example you may want to include varying information in a window title bar,
     but windows are uniquely identified by their ID. Use "###" to pass a label that isn't part of ID:

       Button("Hello###ID");  // Label = "Hello",  ID = hash of (..., "###ID")
       Button("World###ID");  // Label = "World",  ID = hash of (..., "###ID")  // Same as above, even though the label looks different

       sprintf(buf, "My game (%f FPS)###MyGame", fps);
       Begin(buf);            // Variable title,   ID = hash of "MyGame"

   - Solving ID conflict in a more general manner:
     Use PushID() / PopID() to create scopes and manipulate the ID stack, as to avoid ID conflicts
     within the same window. This is the most convenient way of distinguishing ID when iterating and
     creating many UI elements programmatically.
     You can push a pointer, a string or an integer value into the ID stack.
     Remember that ID are formed from the concatenation of _everything_ pushed into the ID stack.
     At each level of the stack we store the seed used for items at this level of the ID stack.

     Begin("Window");
       for (int i = 0; i < 100; i++)
       {
         PushID(i);           // Push i to the id tack
         Button("Click");     // Label = "Click",  ID = hash of ("Window", i, "Click")
         PopID();
       }
       for (int i = 0; i < 100; i++)
       {
         MyObject* obj = Objects[i];
         PushID(obj);
         Button("Click");     // Label = "Click",  ID = hash of ("Window", obj pointer, "Click")
         PopID();
       }
       for (int i = 0; i < 100; i++)
       {
         MyObject* obj = Objects[i];
         PushID(obj->Name);
         Button("Click");     // Label = "Click",  ID = hash of ("Window", obj->Name, "Click")
         PopID();
       }
       End();

   - You can stack multiple prefixes into the ID stack:

       Button("Click");       // Label = "Click",  ID = hash of (..., "Click")
       PushID("node");
       Button("Click");       // Label = "Click",  ID = hash of (..., "node", "Click")
         PushID(my_ptr);
           Button("Click");   // Label = "Click",  ID = hash of (..., "node", my_ptr, "Click")
         PopID();
       PopID();

   - Tree nodes implicitly creates a scope for you by calling PushID().

       Button("Click");       // Label = "Click",  ID = hash of (..., "Click")
       if (TreeNode("node"))  // <-- this function call will do a PushID() for you (unless instructed not to, with a special flag)
       {
         Button("Click");     // Label = "Click",  ID = hash of (..., "node", "Click")
         TreePop();
       }

   - When working with trees, ID are used to preserve the open/close state of each tree node.
     Depending on your use cases you may want to use strings, indices or pointers as ID.
      e.g. when following a single pointer that may change over time, using a static string as ID
       will preserve your node open/closed state when the targeted object change.
      e.g. when displaying a list of objects, using indices or pointers as ID will preserve the
       node open/closed state differently. See what makes more sense in your situation!

 Q: How can I display an image? What is ImTextureID, how does it works?
 >> See https://www.dearimgui.org/faq and https://github.com/ocornut/imgui/wiki/Image-Loading-and-Displaying-Examples

 Q: How can I use my own math types instead of ImVec2/ImVec4?
 Q: How can I interact with standard C++ types (such as std::string and std::vector)?
 Q: How can I display custom shapes? (using low-level ImDrawList API)
 >> See https://www.dearimgui.org/faq

 Q&A: Fonts, Text
 ================

 Q: How can I load a different font than the default?
 Q: How can I easily use icons in my application?
 Q: How can I load multiple fonts?
 Q: How can I display and input non-Latin characters such as Chinese, Japanese, Korean, Cyrillic?
 >> See https://www.dearimgui.org/faq and docs/FONTS.txt

 Q&A: Community
 ==============

 Q: How can I help?
 A: - If you are experienced with Dear ImGui and C++, look at the github issues, look at the Wiki, read docs/TODO.txt
      and see how you want to help and can help!
    - Businesses: convince your company to fund development via support contracts/sponsoring! This is among the most useful thing you can do for dear imgui.
    - Individuals: you can also become a Patron (http://www.patreon.com/imgui) or donate on PayPal! See README.
    - Disclose your usage of dear imgui via a dev blog post, a tweet, a screenshot, a mention somewhere etc.
      You may post screenshot or links in the gallery threads (github.com/ocornut/imgui/issues/2847). Visuals are ideal as they inspire other programmers.
      But even without visuals, disclosing your use of dear imgui help the library grow credibility, and help other teams and programmers with taking decisions.
    - If you have issues or if you need to hack into the library, even if you don't expect any support it is useful that you share your issues (on github or privately).

*/

#if defined(_MSC_VER) && !defined(_CRT_SECURE_NO_WARNINGS)
#define _CRT_SECURE_NO_WARNINGS
#endif

#include "imgui.h"
#ifndef IMGUI_DEFINE_MATH_OPERATORS
#define IMGUI_DEFINE_MATH_OPERATORS
#endif
#include "imgui_internal.h"

#include <ctype.h>      // toupper
#include <stdio.h>      // vsnprintf, sscanf, printf
#if defined(_MSC_VER) && _MSC_VER <= 1500 // MSVC 2008 or earlier
#include <stddef.h>     // intptr_t
#else
#include <stdint.h>     // intptr_t
#endif

// Debug options
#define IMGUI_DEBUG_NAV_SCORING     0   // Display navigation scoring preview when hovering items. Display last moving direction matches when holding CTRL
#define IMGUI_DEBUG_NAV_RECTS       0   // Display the reference navigation rectangle for each window
#define IMGUI_DEBUG_INI_SETTINGS    0   // Save additional comments in .ini file

// Visual Studio warnings
#ifdef _MSC_VER
#pragma warning (disable: 4127)     // condition expression is constant
#pragma warning (disable: 4996)     // 'This function or variable may be unsafe': strcpy, strdup, sprintf, vsnprintf, sscanf, fopen
#endif

// Clang/GCC warnings with -Weverything
#if defined(__clang__)
#pragma clang diagnostic ignored "-Wunknown-pragmas"        // warning : unknown warning group '-Wformat-pedantic *'        // not all warnings are known by all clang versions.. so ignoring warnings triggers new warnings on some configuration. great!
#pragma clang diagnostic ignored "-Wold-style-cast"         // warning : use of old-style cast                              // yes, they are more terse.
#pragma clang diagnostic ignored "-Wfloat-equal"            // warning : comparing floating point with == or != is unsafe   // storing and comparing against same constants (typically 0.0f) is ok.
#pragma clang diagnostic ignored "-Wformat-nonliteral"      // warning : format string is not a string literal              // passing non-literal to vsnformat(). yes, user passing incorrect format strings can crash the code.
#pragma clang diagnostic ignored "-Wexit-time-destructors"  // warning : declaration requires an exit-time destructor       // exit-time destruction order is undefined. if MemFree() leads to users code that has been disabled before exit it might cause problems. ImGui coding style welcomes static/globals.
#pragma clang diagnostic ignored "-Wglobal-constructors"    // warning : declaration requires a global destructor           // similar to above, not sure what the exact difference is.
#pragma clang diagnostic ignored "-Wsign-conversion"        // warning : implicit conversion changes signedness             //
#pragma clang diagnostic ignored "-Wformat-pedantic"        // warning : format specifies type 'void *' but the argument has type 'xxxx *' // unreasonable, would lead to casting every %p arg to void*. probably enabled by -pedantic.
#pragma clang diagnostic ignored "-Wint-to-void-pointer-cast"       // warning : cast to 'void *' from smaller integer type 'int'
#if __has_warning("-Wzero-as-null-pointer-constant")
#pragma clang diagnostic ignored "-Wzero-as-null-pointer-constant"  // warning : zero as null pointer constant              // some standard header variations use #define NULL 0
#endif
#if __has_warning("-Wdouble-promotion")
#pragma clang diagnostic ignored "-Wdouble-promotion"       // warning: implicit conversion from 'float' to 'double' when passing argument to function  // using printf() is a misery with this as C++ va_arg ellipsis changes float to double.
#endif
#elif defined(__GNUC__)
// We disable -Wpragmas because GCC doesn't provide an has_warning equivalent and some forks/patches may not following the warning/version association.
#pragma GCC diagnostic ignored "-Wpragmas"                  // warning: unknown option after '#pragma GCC diagnostic' kind
#pragma GCC diagnostic ignored "-Wunused-function"          // warning: 'xxxx' defined but not used
#pragma GCC diagnostic ignored "-Wint-to-pointer-cast"      // warning: cast to pointer from integer of different size
#pragma GCC diagnostic ignored "-Wformat"                   // warning: format '%p' expects argument of type 'void*', but argument 6 has type 'ImGuiWindow*'
#pragma GCC diagnostic ignored "-Wdouble-promotion"         // warning: implicit conversion from 'float' to 'double' when passing argument to function
#pragma GCC diagnostic ignored "-Wconversion"               // warning: conversion to 'xxxx' from 'xxxx' may alter its value
#pragma GCC diagnostic ignored "-Wformat-nonliteral"        // warning: format not a string literal, format string not checked
#pragma GCC diagnostic ignored "-Wstrict-overflow"          // warning: assuming signed overflow does not occur when assuming that (X - c) > X is always false
#pragma GCC diagnostic ignored "-Wclass-memaccess"          // [__GNUC__ >= 8] warning: 'memset/memcpy' clearing/writing an object of type 'xxxx' with no trivial copy-assignment; use assignment or value-initialization instead
#endif

// When using CTRL+TAB (or Gamepad Square+L/R) we delay the visual a little in order to reduce visual noise doing a fast switch.
static const float NAV_WINDOWING_HIGHLIGHT_DELAY            = 0.20f;    // Time before the highlight and screen dimming starts fading in
static const float NAV_WINDOWING_LIST_APPEAR_DELAY          = 0.15f;    // Time before the window list starts to appear

// Window resizing from edges (when io.ConfigWindowsResizeFromEdges = true and ImGuiBackendFlags_HasMouseCursors is set in io.BackendFlags by back-end)
static const float WINDOWS_RESIZE_FROM_EDGES_HALF_THICKNESS = 4.0f;     // Extend outside and inside windows. Affect FindHoveredWindow().
static const float WINDOWS_RESIZE_FROM_EDGES_FEEDBACK_TIMER = 0.04f;    // Reduce visual noise by only highlighting the border after a certain time.
static const float WINDOWS_MOUSE_WHEEL_SCROLL_LOCK_TIMER    = 2.00f;    // Lock scrolled window (so it doesn't pick child windows that are scrolling through) for a certaint time, unless mouse moved.

//-------------------------------------------------------------------------
// [SECTION] FORWARD DECLARATIONS
//-------------------------------------------------------------------------

static void             SetCurrentWindow(ImGuiWindow* window);
static void             FindHoveredWindow();
static ImGuiWindow*     CreateNewWindow(const char* name, ImVec2 size, ImGuiWindowFlags flags);
static ImVec2           CalcNextScrollFromScrollTargetAndClamp(ImGuiWindow* window, bool snap_on_edges);

static void             AddDrawListToDrawData(ImVector<ImDrawList*>* out_list, ImDrawList* draw_list);
static void             AddWindowToSortBuffer(ImVector<ImGuiWindow*>* out_sorted_windows, ImGuiWindow* window);

static ImRect           GetViewportRect();

// Settings
static void*            WindowSettingsHandler_ReadOpen(ImGuiContext*, ImGuiSettingsHandler*, const char* name);
static void             WindowSettingsHandler_ReadLine(ImGuiContext*, ImGuiSettingsHandler*, void* entry, const char* line);
static void             WindowSettingsHandler_WriteAll(ImGuiContext*, ImGuiSettingsHandler*, ImGuiTextBuffer* buf);

// Platform Dependents default implementation for IO functions
static const char*      GetClipboardTextFn_DefaultImpl(void* user_data);
static void             SetClipboardTextFn_DefaultImpl(void* user_data, const char* text);
static void             ImeSetInputScreenPosFn_DefaultImpl(int x, int y);

namespace ImGui
{
static bool             BeginChildEx(const char* name, ImGuiID id, const ImVec2& size_arg, bool border, ImGuiWindowFlags flags);

// Navigation
static void             NavUpdate();
static void             NavUpdateWindowing();
static void             NavUpdateWindowingOverlay();
static void             NavUpdateMoveResult();
static float            NavUpdatePageUpPageDown();
static inline void      NavUpdateAnyRequestFlag();
static bool             NavScoreItem(ImGuiNavMoveResult* result, ImRect cand);
static void             NavProcessItem(ImGuiWindow* window, const ImRect& nav_bb, ImGuiID id);
static ImVec2           NavCalcPreferredRefPos();
static void             NavSaveLastChildNavWindowIntoParent(ImGuiWindow* nav_window);
static ImGuiWindow*     NavRestoreLastChildNavWindow(ImGuiWindow* window);
static int              FindWindowFocusIndex(ImGuiWindow* window);

// Error Checking
static void             ErrorCheckEndFrame();
static void             ErrorCheckBeginEndCompareStacksSize(ImGuiWindow* window, bool write);

// Misc
static void             UpdateMouseInputs();
static void             UpdateMouseWheel();
static bool             UpdateManualResize(ImGuiWindow* window, const ImVec2& size_auto_fit, int* border_held, int resize_grip_count, ImU32 resize_grip_col[4]);
static void             UpdateDebugToolItemPicker();
static void             RenderWindowOuterBorders(ImGuiWindow* window);
static void             RenderWindowDecorations(ImGuiWindow* window, const ImRect& title_bar_rect, bool title_bar_is_highlight, int resize_grip_count, const ImU32 resize_grip_col[4], float resize_grip_draw_size);
static void             RenderWindowTitleBarContents(ImGuiWindow* window, const ImRect& title_bar_rect, const char* name, bool* p_open);

}

//-----------------------------------------------------------------------------
// [SECTION] CONTEXT AND MEMORY ALLOCATORS
//-----------------------------------------------------------------------------

// Current context pointer. Implicitly used by all Dear ImGui functions. Always assumed to be != NULL.
// ImGui::CreateContext() will automatically set this pointer if it is NULL. Change to a different context by calling ImGui::SetCurrentContext().
// 1) Important: globals are not shared across DLL boundaries! If you use DLLs or any form of hot-reloading: you will need to call
//    SetCurrentContext() (with the pointer you got from CreateContext) from each unique static/DLL boundary, and after each hot-reloading.
//    In your debugger, add GImGui to your watch window and notice how its value changes depending on which location you are currently stepping into.
// 2) Important: Dear ImGui functions are not thread-safe because of this pointer.
//    If you want thread-safety to allow N threads to access N different contexts, you can:
//    - Change this variable to use thread local storage so each thread can refer to a different context, in imconfig.h:
//          struct ImGuiContext;
//          extern thread_local ImGuiContext* MyImGuiTLS;
//          #define GImGui MyImGuiTLS
//      And then define MyImGuiTLS in one of your cpp file. Note that thread_local is a C++11 keyword, earlier C++ uses compiler-specific keyword.
//    - Future development aim to make this context pointer explicit to all calls. Also read https://github.com/ocornut/imgui/issues/586
//    - If you need a finite number of contexts, you may compile and use multiple instances of the ImGui code from different namespace.
#ifndef GImGui
ImGuiContext*   GImGui = NULL;
#endif

// Memory Allocator functions. Use SetAllocatorFunctions() to change them.
// If you use DLL hotreloading you might need to call SetAllocatorFunctions() after reloading code from this file.
// Otherwise, you probably don't want to modify them mid-program, and if you use global/static e.g. ImVector<> instances you may need to keep them accessible during program destruction.
#ifndef IMGUI_DISABLE_DEFAULT_ALLOCATORS
static void*   MallocWrapper(size_t size, void* user_data)    { IM_UNUSED(user_data); return malloc(size); }
static void    FreeWrapper(void* ptr, void* user_data)        { IM_UNUSED(user_data); free(ptr); }
#else
static void*   MallocWrapper(size_t size, void* user_data)    { IM_UNUSED(user_data); IM_UNUSED(size); IM_ASSERT(0); return NULL; }
static void    FreeWrapper(void* ptr, void* user_data)        { IM_UNUSED(user_data); IM_UNUSED(ptr); IM_ASSERT(0); }
#endif

static void*  (*GImAllocatorAllocFunc)(size_t size, void* user_data) = MallocWrapper;
static void   (*GImAllocatorFreeFunc)(void* ptr, void* user_data) = FreeWrapper;
static void*    GImAllocatorUserData = NULL;

//-----------------------------------------------------------------------------
// [SECTION] MAIN USER FACING STRUCTURES (ImGuiStyle, ImGuiIO)
//-----------------------------------------------------------------------------

ImGuiStyle::ImGuiStyle()
{
    Alpha                   = 1.0f;             // Global alpha applies to everything in ImGui
    WindowPadding           = ImVec2(8,8);      // Padding within a window
    WindowRounding          = 7.0f;             // Radius of window corners rounding. Set to 0.0f to have rectangular windows
    WindowBorderSize        = 1.0f;             // Thickness of border around windows. Generally set to 0.0f or 1.0f. Other values not well tested.
    WindowMinSize           = ImVec2(32,32);    // Minimum window size
    WindowTitleAlign        = ImVec2(0.0f,0.5f);// Alignment for title bar text
    WindowMenuButtonPosition= ImGuiDir_Left;    // Position of the collapsing/docking button in the title bar (left/right). Defaults to ImGuiDir_Left.
    ChildRounding           = 0.0f;             // Radius of child window corners rounding. Set to 0.0f to have rectangular child windows
    ChildBorderSize         = 1.0f;             // Thickness of border around child windows. Generally set to 0.0f or 1.0f. Other values not well tested.
    PopupRounding           = 0.0f;             // Radius of popup window corners rounding. Set to 0.0f to have rectangular child windows
    PopupBorderSize         = 1.0f;             // Thickness of border around popup or tooltip windows. Generally set to 0.0f or 1.0f. Other values not well tested.
    FramePadding            = ImVec2(4,3);      // Padding within a framed rectangle (used by most widgets)
    FrameRounding           = 0.0f;             // Radius of frame corners rounding. Set to 0.0f to have rectangular frames (used by most widgets).
    FrameBorderSize         = 0.0f;             // Thickness of border around frames. Generally set to 0.0f or 1.0f. Other values not well tested.
    ItemSpacing             = ImVec2(8,4);      // Horizontal and vertical spacing between widgets/lines
    ItemInnerSpacing        = ImVec2(4,4);      // Horizontal and vertical spacing between within elements of a composed widget (e.g. a slider and its label)
    TouchExtraPadding       = ImVec2(0,0);      // Expand reactive bounding box for touch-based system where touch position is not accurate enough. Unfortunately we don't sort widgets so priority on overlap will always be given to the first widget. So don't grow this too much!
    IndentSpacing           = 21.0f;            // Horizontal spacing when e.g. entering a tree node. Generally == (FontSize + FramePadding.x*2).
    ColumnsMinSpacing       = 6.0f;             // Minimum horizontal spacing between two columns. Preferably > (FramePadding.x + 1).
    ScrollbarSize           = 14.0f;            // Width of the vertical scrollbar, Height of the horizontal scrollbar
    ScrollbarRounding       = 9.0f;             // Radius of grab corners rounding for scrollbar
    GrabMinSize             = 10.0f;            // Minimum width/height of a grab box for slider/scrollbar
    GrabRounding            = 0.0f;             // Radius of grabs corners rounding. Set to 0.0f to have rectangular slider grabs.
    TabRounding             = 4.0f;             // Radius of upper corners of a tab. Set to 0.0f to have rectangular tabs.
    TabBorderSize           = 0.0f;             // Thickness of border around tabs.
    ColorButtonPosition     = ImGuiDir_Right;   // Side of the color button in the ColorEdit4 widget (left/right). Defaults to ImGuiDir_Right.
    ButtonTextAlign         = ImVec2(0.5f,0.5f);// Alignment of button text when button is larger than text.
    SelectableTextAlign     = ImVec2(0.0f,0.0f);// Alignment of selectable text when button is larger than text.
    DisplayWindowPadding    = ImVec2(19,19);    // Window position are clamped to be visible within the display area by at least this amount. Only applies to regular windows.
    DisplaySafeAreaPadding  = ImVec2(3,3);      // If you cannot see the edge of your screen (e.g. on a TV) increase the safe area padding. Covers popups/tooltips as well regular windows.
    MouseCursorScale        = 1.0f;             // Scale software rendered mouse cursor (when io.MouseDrawCursor is enabled). May be removed later.
    AntiAliasedLines        = true;             // Enable anti-aliasing on lines/borders. Disable if you are really short on CPU/GPU.
    AntiAliasedFill         = true;             // Enable anti-aliasing on filled shapes (rounded rectangles, circles, etc.)
    CurveTessellationTol    = 1.25f;            // Tessellation tolerance when using PathBezierCurveTo() without a specific number of segments. Decrease for highly tessellated curves (higher quality, more polygons), increase to reduce quality.

    // Default theme
    ImGui::StyleColorsDark(this);
}

// To scale your entire UI (e.g. if you want your app to use High DPI or generally be DPI aware) you may use this helper function. Scaling the fonts is done separately and is up to you.
// Important: This operation is lossy because we round all sizes to integer. If you need to change your scale multiples, call this over a freshly initialized ImGuiStyle structure rather than scaling multiple times.
void ImGuiStyle::ScaleAllSizes(float scale_factor)
{
    WindowPadding = ImFloor(WindowPadding * scale_factor);
    WindowRounding = ImFloor(WindowRounding * scale_factor);
    WindowMinSize = ImFloor(WindowMinSize * scale_factor);
    ChildRounding = ImFloor(ChildRounding * scale_factor);
    PopupRounding = ImFloor(PopupRounding * scale_factor);
    FramePadding = ImFloor(FramePadding * scale_factor);
    FrameRounding = ImFloor(FrameRounding * scale_factor);
    ItemSpacing = ImFloor(ItemSpacing * scale_factor);
    ItemInnerSpacing = ImFloor(ItemInnerSpacing * scale_factor);
    TouchExtraPadding = ImFloor(TouchExtraPadding * scale_factor);
    IndentSpacing = ImFloor(IndentSpacing * scale_factor);
    ColumnsMinSpacing = ImFloor(ColumnsMinSpacing * scale_factor);
    ScrollbarSize = ImFloor(ScrollbarSize * scale_factor);
    ScrollbarRounding = ImFloor(ScrollbarRounding * scale_factor);
    GrabMinSize = ImFloor(GrabMinSize * scale_factor);
    GrabRounding = ImFloor(GrabRounding * scale_factor);
    TabRounding = ImFloor(TabRounding * scale_factor);
    DisplayWindowPadding = ImFloor(DisplayWindowPadding * scale_factor);
    DisplaySafeAreaPadding = ImFloor(DisplaySafeAreaPadding * scale_factor);
    MouseCursorScale = ImFloor(MouseCursorScale * scale_factor);
}

ImGuiIO::ImGuiIO()
{
    // Most fields are initialized with zero
    memset(this, 0, sizeof(*this));
    IM_STATIC_ASSERT(IM_ARRAYSIZE(MouseDown) == ImGuiMouseButton_COUNT && IM_ARRAYSIZE(MouseClicked) == ImGuiMouseButton_COUNT);

    // Settings
    ConfigFlags = ImGuiConfigFlags_None;
    BackendFlags = ImGuiBackendFlags_None;
    DisplaySize = ImVec2(-1.0f, -1.0f);
    DeltaTime = 1.0f/60.0f;
    IniSavingRate = 5.0f;
    IniFilename = "imgui.ini";
    LogFilename = "imgui_log.txt";
    MouseDoubleClickTime = 0.30f;
    MouseDoubleClickMaxDist = 6.0f;
    for (int i = 0; i < ImGuiKey_COUNT; i++)
        KeyMap[i] = -1;
    KeyRepeatDelay = 0.275f;
    KeyRepeatRate = 0.050f;
    UserData = NULL;

    Fonts = NULL;
    FontGlobalScale = 1.0f;
    FontDefault = NULL;
    FontAllowUserScaling = false;
    DisplayFramebufferScale = ImVec2(1.0f, 1.0f);

    // Miscellaneous options
    MouseDrawCursor = false;
#ifdef __APPLE__
    ConfigMacOSXBehaviors = true;  // Set Mac OS X style defaults based on __APPLE__ compile time flag
#else
    ConfigMacOSXBehaviors = false;
#endif
    ConfigInputTextCursorBlink = true;
    ConfigWindowsResizeFromEdges = true;
    ConfigWindowsMoveFromTitleBarOnly = false;
    ConfigWindowsMemoryCompactTimer = 60.0f;

    // Platform Functions
    BackendPlatformName = BackendRendererName = NULL;
    BackendPlatformUserData = BackendRendererUserData = BackendLanguageUserData = NULL;
    GetClipboardTextFn = GetClipboardTextFn_DefaultImpl;   // Platform dependent default implementations
    SetClipboardTextFn = SetClipboardTextFn_DefaultImpl;
    ClipboardUserData = NULL;
    ImeSetInputScreenPosFn = ImeSetInputScreenPosFn_DefaultImpl;
    ImeWindowHandle = NULL;

#ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
    RenderDrawListsFn = NULL;
#endif

    // Input (NB: we already have memset zero the entire structure!)
    MousePos = ImVec2(-FLT_MAX, -FLT_MAX);
    MousePosPrev = ImVec2(-FLT_MAX, -FLT_MAX);
    MouseDragThreshold = 6.0f;
    for (int i = 0; i < IM_ARRAYSIZE(MouseDownDuration); i++) MouseDownDuration[i] = MouseDownDurationPrev[i] = -1.0f;
    for (int i = 0; i < IM_ARRAYSIZE(KeysDownDuration); i++) KeysDownDuration[i]  = KeysDownDurationPrev[i] = -1.0f;
    for (int i = 0; i < IM_ARRAYSIZE(NavInputsDownDuration); i++) NavInputsDownDuration[i] = -1.0f;
}

// Pass in translated ASCII characters for text input.
// - with glfw you can get those from the callback set in glfwSetCharCallback()
// - on Windows you can get those using ToAscii+keyboard state, or via the WM_CHAR message
void ImGuiIO::AddInputCharacter(unsigned int c)
{
    if (c > 0 && c <= IM_UNICODE_CODEPOINT_MAX)
        InputQueueCharacters.push_back((ImWchar)c);
}

void ImGuiIO::AddInputCharactersUTF8(const char* utf8_chars)
{
    while (*utf8_chars != 0)
    {
        unsigned int c = 0;
        utf8_chars += ImTextCharFromUtf8(&c, utf8_chars, NULL);
        if (c > 0 && c <= IM_UNICODE_CODEPOINT_MAX)
            InputQueueCharacters.push_back((ImWchar)c);
    }
}

void ImGuiIO::ClearInputCharacters()
{
    InputQueueCharacters.resize(0);
}

//-----------------------------------------------------------------------------
// [SECTION] MISC HELPERS/UTILITIES (Geometry, String, Format, Hash, File functions)
//-----------------------------------------------------------------------------

ImVec2 ImLineClosestPoint(const ImVec2& a, const ImVec2& b, const ImVec2& p)
{
    ImVec2 ap = p - a;
    ImVec2 ab_dir = b - a;
    float dot = ap.x * ab_dir.x + ap.y * ab_dir.y;
    if (dot < 0.0f)
        return a;
    float ab_len_sqr = ab_dir.x * ab_dir.x + ab_dir.y * ab_dir.y;
    if (dot > ab_len_sqr)
        return b;
    return a + ab_dir * dot / ab_len_sqr;
}

bool ImTriangleContainsPoint(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& p)
{
    bool b1 = ((p.x - b.x) * (a.y - b.y) - (p.y - b.y) * (a.x - b.x)) < 0.0f;
    bool b2 = ((p.x - c.x) * (b.y - c.y) - (p.y - c.y) * (b.x - c.x)) < 0.0f;
    bool b3 = ((p.x - a.x) * (c.y - a.y) - (p.y - a.y) * (c.x - a.x)) < 0.0f;
    return ((b1 == b2) && (b2 == b3));
}

void ImTriangleBarycentricCoords(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& p, float& out_u, float& out_v, float& out_w)
{
    ImVec2 v0 = b - a;
    ImVec2 v1 = c - a;
    ImVec2 v2 = p - a;
    const float denom = v0.x * v1.y - v1.x * v0.y;
    out_v = (v2.x * v1.y - v1.x * v2.y) / denom;
    out_w = (v0.x * v2.y - v2.x * v0.y) / denom;
    out_u = 1.0f - out_v - out_w;
}

ImVec2 ImTriangleClosestPoint(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& p)
{
    ImVec2 proj_ab = ImLineClosestPoint(a, b, p);
    ImVec2 proj_bc = ImLineClosestPoint(b, c, p);
    ImVec2 proj_ca = ImLineClosestPoint(c, a, p);
    float dist2_ab = ImLengthSqr(p - proj_ab);
    float dist2_bc = ImLengthSqr(p - proj_bc);
    float dist2_ca = ImLengthSqr(p - proj_ca);
    float m = ImMin(dist2_ab, ImMin(dist2_bc, dist2_ca));
    if (m == dist2_ab)
        return proj_ab;
    if (m == dist2_bc)
        return proj_bc;
    return proj_ca;
}

// Consider using _stricmp/_strnicmp under Windows or strcasecmp/strncasecmp. We don't actually use either ImStricmp/ImStrnicmp in the codebase any more.
int ImStricmp(const char* str1, const char* str2)
{
    int d;
    while ((d = toupper(*str2) - toupper(*str1)) == 0 && *str1) { str1++; str2++; }
    return d;
}

int ImStrnicmp(const char* str1, const char* str2, size_t count)
{
    int d = 0;
    while (count > 0 && (d = toupper(*str2) - toupper(*str1)) == 0 && *str1) { str1++; str2++; count--; }
    return d;
}

void ImStrncpy(char* dst, const char* src, size_t count)
{
    if (count < 1)
        return;
    if (count > 1)
        strncpy(dst, src, count - 1);
    dst[count - 1] = 0;
}

char* ImStrdup(const char* str)
{
    size_t len = strlen(str);
    void* buf = IM_ALLOC(len + 1);
    return (char*)memcpy(buf, (const void*)str, len + 1);
}

char* ImStrdupcpy(char* dst, size_t* p_dst_size, const char* src)
{
    size_t dst_buf_size = p_dst_size ? *p_dst_size : strlen(dst) + 1;
    size_t src_size = strlen(src) + 1;
    if (dst_buf_size < src_size)
    {
        IM_FREE(dst);
        dst = (char*)IM_ALLOC(src_size);
        if (p_dst_size)
            *p_dst_size = src_size;
    }
    return (char*)memcpy(dst, (const void*)src, src_size);
}

const char* ImStrchrRange(const char* str, const char* str_end, char c)
{
    const char* p = (const char*)memchr(str, (int)c, str_end - str);
    return p;
}

int ImStrlenW(const ImWchar* str)
{
    //return (int)wcslen((const wchar_t*)str);  // FIXME-OPT: Could use this when wchar_t are 16-bit
    int n = 0;
    while (*str++) n++;
    return n;
}

// Find end-of-line. Return pointer will point to either first \n, either str_end.
const char* ImStreolRange(const char* str, const char* str_end)
{
    const char* p = (const char*)memchr(str, '\n', str_end - str);
    return p ? p : str_end;
}

const ImWchar* ImStrbolW(const ImWchar* buf_mid_line, const ImWchar* buf_begin) // find beginning-of-line
{
    while (buf_mid_line > buf_begin && buf_mid_line[-1] != '\n')
        buf_mid_line--;
    return buf_mid_line;
}

const char* ImStristr(const char* haystack, const char* haystack_end, const char* needle, const char* needle_end)
{
    if (!needle_end)
        needle_end = needle + strlen(needle);

    const char un0 = (char)toupper(*needle);
    while ((!haystack_end && *haystack) || (haystack_end && haystack < haystack_end))
    {
        if (toupper(*haystack) == un0)
        {
            const char* b = needle + 1;
            for (const char* a = haystack + 1; b < needle_end; a++, b++)
                if (toupper(*a) != toupper(*b))
                    break;
            if (b == needle_end)
                return haystack;
        }
        haystack++;
    }
    return NULL;
}

// Trim str by offsetting contents when there's leading data + writing a \0 at the trailing position. We use this in situation where the cost is negligible.
void ImStrTrimBlanks(char* buf)
{
    char* p = buf;
    while (p[0] == ' ' || p[0] == '\t')     // Leading blanks
        p++;
    char* p_start = p;
    while (*p != 0)                         // Find end of string
        p++;
    while (p > p_start && (p[-1] == ' ' || p[-1] == '\t'))  // Trailing blanks
        p--;
    if (p_start != buf)                     // Copy memory if we had leading blanks
        memmove(buf, p_start, p - p_start);
    buf[p - p_start] = 0;                   // Zero terminate
}

const char* ImStrSkipBlank(const char* str)
{
    while (str[0] == ' ' || str[0] == '\t')
        str++;
    return str;
}

// A) MSVC version appears to return -1 on overflow, whereas glibc appears to return total count (which may be >= buf_size).
// Ideally we would test for only one of those limits at runtime depending on the behavior the vsnprintf(), but trying to deduct it at compile time sounds like a pandora can of worm.
// B) When buf==NULL vsnprintf() will return the output size.
#ifndef IMGUI_DISABLE_DEFAULT_FORMAT_FUNCTIONS

// We support stb_sprintf which is much faster (see: https://github.com/nothings/stb/blob/master/stb_sprintf.h)
// You may set IMGUI_USE_STB_SPRINTF to use our default wrapper, or set IMGUI_DISABLE_DEFAULT_FORMAT_FUNCTIONS 
// and setup the wrapper yourself. (FIXME-OPT: Some of our high-level operations such as ImGuiTextBuffer::appendfv() are 
// designed using two-passes worst case, which probably could be improved using the stbsp_vsprintfcb() function.)
//#define IMGUI_USE_STB_SPRINTF
#ifdef IMGUI_USE_STB_SPRINTF
#define STB_SPRINTF_IMPLEMENTATION
#include "stb_sprintf.h"
#endif

#if defined(_MSC_VER) && !defined(vsnprintf)
#define vsnprintf _vsnprintf
#endif

int ImFormatString(char* buf, size_t buf_size, const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
#ifdef IMGUI_USE_STB_SPRINTF
    int w = stbsp_vsnprintf(buf, (int)buf_size, fmt, args);
#else
    int w = vsnprintf(buf, buf_size, fmt, args);
#endif
    va_end(args);
    if (buf == NULL)
        return w;
    if (w == -1 || w >= (int)buf_size)
        w = (int)buf_size - 1;
    buf[w] = 0;
    return w;
}

int ImFormatStringV(char* buf, size_t buf_size, const char* fmt, va_list args)
{
#ifdef IMGUI_USE_STB_SPRINTF
    int w = stbsp_vsnprintf(buf, (int)buf_size, fmt, args);
#else
    int w = vsnprintf(buf, buf_size, fmt, args);
#endif
    if (buf == NULL)
        return w;
    if (w == -1 || w >= (int)buf_size)
        w = (int)buf_size - 1;
    buf[w] = 0;
    return w;
}
#endif // #ifdef IMGUI_DISABLE_DEFAULT_FORMAT_FUNCTIONS

// CRC32 needs a 1KB lookup table (not cache friendly)
// Although the code to generate the table is simple and shorter than the table itself, using a const table allows us to easily:
// - avoid an unnecessary branch/memory tap, - keep the ImHashXXX functions usable by static constructors, - make it thread-safe.
static const ImU32 GCrc32LookupTable[256] =
{
    0x00000000,0x77073096,0xEE0E612C,0x990951BA,0x076DC419,0x706AF48F,0xE963A535,0x9E6495A3,0x0EDB8832,0x79DCB8A4,0xE0D5E91E,0x97D2D988,0x09B64C2B,0x7EB17CBD,0xE7B82D07,0x90BF1D91,
    0x1DB71064,0x6AB020F2,0xF3B97148,0x84BE41DE,0x1ADAD47D,0x6DDDE4EB,0xF4D4B551,0x83D385C7,0x136C9856,0x646BA8C0,0xFD62F97A,0x8A65C9EC,0x14015C4F,0x63066CD9,0xFA0F3D63,0x8D080DF5,
    0x3B6E20C8,0x4C69105E,0xD56041E4,0xA2677172,0x3C03E4D1,0x4B04D447,0xD20D85FD,0xA50AB56B,0x35B5A8FA,0x42B2986C,0xDBBBC9D6,0xACBCF940,0x32D86CE3,0x45DF5C75,0xDCD60DCF,0xABD13D59,
    0x26D930AC,0x51DE003A,0xC8D75180,0xBFD06116,0x21B4F4B5,0x56B3C423,0xCFBA9599,0xB8BDA50F,0x2802B89E,0x5F058808,0xC60CD9B2,0xB10BE924,0x2F6F7C87,0x58684C11,0xC1611DAB,0xB6662D3D,
    0x76DC4190,0x01DB7106,0x98D220BC,0xEFD5102A,0x71B18589,0x06B6B51F,0x9FBFE4A5,0xE8B8D433,0x7807C9A2,0x0F00F934,0x9609A88E,0xE10E9818,0x7F6A0DBB,0x086D3D2D,0x91646C97,0xE6635C01,
    0x6B6B51F4,0x1C6C6162,0x856530D8,0xF262004E,0x6C0695ED,0x1B01A57B,0x8208F4C1,0xF50FC457,0x65B0D9C6,0x12B7E950,0x8BBEB8EA,0xFCB9887C,0x62DD1DDF,0x15DA2D49,0x8CD37CF3,0xFBD44C65,
    0x4DB26158,0x3AB551CE,0xA3BC0074,0xD4BB30E2,0x4ADFA541,0x3DD895D7,0xA4D1C46D,0xD3D6F4FB,0x4369E96A,0x346ED9FC,0xAD678846,0xDA60B8D0,0x44042D73,0x33031DE5,0xAA0A4C5F,0xDD0D7CC9,
    0x5005713C,0x270241AA,0xBE0B1010,0xC90C2086,0x5768B525,0x206F85B3,0xB966D409,0xCE61E49F,0x5EDEF90E,0x29D9C998,0xB0D09822,0xC7D7A8B4,0x59B33D17,0x2EB40D81,0xB7BD5C3B,0xC0BA6CAD,
    0xEDB88320,0x9ABFB3B6,0x03B6E20C,0x74B1D29A,0xEAD54739,0x9DD277AF,0x04DB2615,0x73DC1683,0xE3630B12,0x94643B84,0x0D6D6A3E,0x7A6A5AA8,0xE40ECF0B,0x9309FF9D,0x0A00AE27,0x7D079EB1,
    0xF00F9344,0x8708A3D2,0x1E01F268,0x6906C2FE,0xF762575D,0x806567CB,0x196C3671,0x6E6B06E7,0xFED41B76,0x89D32BE0,0x10DA7A5A,0x67DD4ACC,0xF9B9DF6F,0x8EBEEFF9,0x17B7BE43,0x60B08ED5,
    0xD6D6A3E8,0xA1D1937E,0x38D8C2C4,0x4FDFF252,0xD1BB67F1,0xA6BC5767,0x3FB506DD,0x48B2364B,0xD80D2BDA,0xAF0A1B4C,0x36034AF6,0x41047A60,0xDF60EFC3,0xA867DF55,0x316E8EEF,0x4669BE79,
    0xCB61B38C,0xBC66831A,0x256FD2A0,0x5268E236,0xCC0C7795,0xBB0B4703,0x220216B9,0x5505262F,0xC5BA3BBE,0xB2BD0B28,0x2BB45A92,0x5CB36A04,0xC2D7FFA7,0xB5D0CF31,0x2CD99E8B,0x5BDEAE1D,
    0x9B64C2B0,0xEC63F226,0x756AA39C,0x026D930A,0x9C0906A9,0xEB0E363F,0x72076785,0x05005713,0x95BF4A82,0xE2B87A14,0x7BB12BAE,0x0CB61B38,0x92D28E9B,0xE5D5BE0D,0x7CDCEFB7,0x0BDBDF21,
    0x86D3D2D4,0xF1D4E242,0x68DDB3F8,0x1FDA836E,0x81BE16CD,0xF6B9265B,0x6FB077E1,0x18B74777,0x88085AE6,0xFF0F6A70,0x66063BCA,0x11010B5C,0x8F659EFF,0xF862AE69,0x616BFFD3,0x166CCF45,
    0xA00AE278,0xD70DD2EE,0x4E048354,0x3903B3C2,0xA7672661,0xD06016F7,0x4969474D,0x3E6E77DB,0xAED16A4A,0xD9D65ADC,0x40DF0B66,0x37D83BF0,0xA9BCAE53,0xDEBB9EC5,0x47B2CF7F,0x30B5FFE9,
    0xBDBDF21C,0xCABAC28A,0x53B39330,0x24B4A3A6,0xBAD03605,0xCDD70693,0x54DE5729,0x23D967BF,0xB3667A2E,0xC4614AB8,0x5D681B02,0x2A6F2B94,0xB40BBE37,0xC30C8EA1,0x5A05DF1B,0x2D02EF8D,
};

// Known size hash
// It is ok to call ImHashData on a string with known length but the ### operator won't be supported.
// FIXME-OPT: Replace with e.g. FNV1a hash? CRC32 pretty much randomly access 1KB. Need to do proper measurements.
ImU32 ImHashData(const void* data_p, size_t data_size, ImU32 seed)
{
    ImU32 crc = ~seed;
    const unsigned char* data = (const unsigned char*)data_p;
    const ImU32* crc32_lut = GCrc32LookupTable;
    while (data_size-- != 0)
        crc = (crc >> 8) ^ crc32_lut[(crc & 0xFF) ^ *data++];
    return ~crc;
}

// Zero-terminated string hash, with support for ### to reset back to seed value
// We support a syntax of "label###id" where only "###id" is included in the hash, and only "label" gets displayed.
// Because this syntax is rarely used we are optimizing for the common case.
// - If we reach ### in the string we discard the hash so far and reset to the seed.
// - We don't do 'current += 2; continue;' after handling ### to keep the code smaller/faster (measured ~10% diff in Debug build)
// FIXME-OPT: Replace with e.g. FNV1a hash? CRC32 pretty much randomly access 1KB. Need to do proper measurements.
ImU32 ImHashStr(const char* data_p, size_t data_size, ImU32 seed)
{
    seed = ~seed;
    ImU32 crc = seed;
    const unsigned char* data = (const unsigned char*)data_p;
    const ImU32* crc32_lut = GCrc32LookupTable;
    if (data_size != 0)
    {
        while (data_size-- != 0)
        {
            unsigned char c = *data++;
            if (c == '#' && data_size >= 2 && data[0] == '#' && data[1] == '#')
                crc = seed;
            crc = (crc >> 8) ^ crc32_lut[(crc & 0xFF) ^ c];
        }
    }
    else
    {
        while (unsigned char c = *data++)
        {
            if (c == '#' && data[0] == '#' && data[1] == '#')
                crc = seed;
            crc = (crc >> 8) ^ crc32_lut[(crc & 0xFF) ^ c];
        }
    }
    return ~crc;
}

//-----------------------------------------------------------------------------
// [SECTION] MISC HELPERS/UTILITIES (File functions)
//-----------------------------------------------------------------------------

// Default file functions
#ifndef IMGUI_DISABLE_DEFAULT_FILE_FUNCTIONS
ImFileHandle ImFileOpen(const char* filename, const char* mode)
{
#if defined(_WIN32) && !defined(IMGUI_DISABLE_WIN32_FUNCTIONS) && !defined(__CYGWIN__) && !defined(__GNUC__)
    // We need a fopen() wrapper because MSVC/Windows fopen doesn't handle UTF-8 filenames. 
    const int filename_wsize = ImTextCountCharsFromUtf8(filename, NULL) + 1;
    const int mode_wsize = ImTextCountCharsFromUtf8(mode, NULL) + 1;
    ImVector<ImWchar> buf;
    buf.resize(filename_wsize + mode_wsize);
    ImTextStrFromUtf8(&buf[0], filename_wsize, filename, NULL);
    ImTextStrFromUtf8(&buf[filename_wsize], mode_wsize, mode, NULL);
    return _wfopen((wchar_t*)&buf[0], (wchar_t*)&buf[filename_wsize]);
#else
    return fopen(filename, mode);
#endif
}

// We should in theory be using fseeko()/ftello() with off_t and _fseeki64()/_ftelli64() with __int64, waiting for the PR that does that in a very portable pre-C++11 zero-warnings way.
bool    ImFileClose(ImFileHandle f)     { return fclose(f) == 0; }
ImU64   ImFileGetSize(ImFileHandle f)   { long off = 0, sz = 0; return ((off = ftell(f)) != -1 && !fseek(f, 0, SEEK_END) && (sz = ftell(f)) != -1 && !fseek(f, off, SEEK_SET)) ? (ImU64)sz : (ImU64)-1; }
ImU64   ImFileRead(void* data, ImU64 sz, ImU64 count, ImFileHandle f)           { return fread(data, (size_t)sz, (size_t)count, f); }
ImU64   ImFileWrite(const void* data, ImU64 sz, ImU64 count, ImFileHandle f)    { return fwrite(data, (size_t)sz, (size_t)count, f); }
#endif // #ifndef IMGUI_DISABLE_DEFAULT_FILE_FUNCTIONS

// Helper: Load file content into memory
// Memory allocated with IM_ALLOC(), must be freed by user using IM_FREE() == ImGui::MemFree()
void*   ImFileLoadToMemory(const char* filename, const char* mode, size_t* out_file_size, int padding_bytes)
{
    IM_ASSERT(filename && mode);
    if (out_file_size)
        *out_file_size = 0;

    ImFileHandle f;
    if ((f = ImFileOpen(filename, mode)) == NULL)
        return NULL;

    size_t file_size = (size_t)ImFileGetSize(f);
    if (file_size == (size_t)-1)
    {
        ImFileClose(f);
        return NULL;
    }

    void* file_data = IM_ALLOC(file_size + padding_bytes);
    if (file_data == NULL)
    {
        ImFileClose(f);
        return NULL;
    }
    if (ImFileRead(file_data, 1, file_size, f) != file_size)
    {
        ImFileClose(f);
        IM_FREE(file_data);
        return NULL;
    }
    if (padding_bytes > 0)
        memset((void*)(((char*)file_data) + file_size), 0, (size_t)padding_bytes);

    ImFileClose(f);
    if (out_file_size)
        *out_file_size = file_size;

    return file_data;
}

//-----------------------------------------------------------------------------
// [SECTION] MISC HELPERS/UTILITIES (ImText* functions)
//-----------------------------------------------------------------------------

// Convert UTF-8 to 32-bit character, process single character input.
// Based on stb_from_utf8() from github.com/nothings/stb/
// We handle UTF-8 decoding error by skipping forward.
int ImTextCharFromUtf8(unsigned int* out_char, const char* in_text, const char* in_text_end)
{
    unsigned int c = (unsigned int)-1;
    const unsigned char* str = (const unsigned char*)in_text;
    if (!(*str & 0x80))
    {
        c = (unsigned int)(*str++);
        *out_char = c;
        return 1;
    }
    if ((*str & 0xe0) == 0xc0)
    {
        *out_char = IM_UNICODE_CODEPOINT_INVALID; // will be invalid but not end of string
        if (in_text_end && in_text_end - (const char*)str < 2) return 1;
        if (*str < 0xc2) return 2;
        c = (unsigned int)((*str++ & 0x1f) << 6);
        if ((*str & 0xc0) != 0x80) return 2;
        c += (*str++ & 0x3f);
        *out_char = c;
        return 2;
    }
    if ((*str & 0xf0) == 0xe0)
    {
        *out_char = IM_UNICODE_CODEPOINT_INVALID; // will be invalid but not end of string
        if (in_text_end && in_text_end - (const char*)str < 3) return 1;
        if (*str == 0xe0 && (str[1] < 0xa0 || str[1] > 0xbf)) return 3;
        if (*str == 0xed && str[1] > 0x9f) return 3; // str[1] < 0x80 is checked below
        c = (unsigned int)((*str++ & 0x0f) << 12);
        if ((*str & 0xc0) != 0x80) return 3;
        c += (unsigned int)((*str++ & 0x3f) << 6);
        if ((*str & 0xc0) != 0x80) return 3;
        c += (*str++ & 0x3f);
        *out_char = c;
        return 3;
    }
    if ((*str & 0xf8) == 0xf0)
    {
        *out_char = IM_UNICODE_CODEPOINT_INVALID; // will be invalid but not end of string
        if (in_text_end && in_text_end - (const char*)str < 4) return 1;
        if (*str > 0xf4) return 4;
        if (*str == 0xf0 && (str[1] < 0x90 || str[1] > 0xbf)) return 4;
        if (*str == 0xf4 && str[1] > 0x8f) return 4; // str[1] < 0x80 is checked below
        c = (unsigned int)((*str++ & 0x07) << 18);
        if ((*str & 0xc0) != 0x80) return 4;
        c += (unsigned int)((*str++ & 0x3f) << 12);
        if ((*str & 0xc0) != 0x80) return 4;
        c += (unsigned int)((*str++ & 0x3f) << 6);
        if ((*str & 0xc0) != 0x80) return 4;
        c += (*str++ & 0x3f);
        // utf-8 encodings of values used in surrogate pairs are invalid
        if ((c & 0xFFFFF800) == 0xD800) return 4;
        *out_char = c;
        return 4;
    }
    *out_char = 0;
    return 0;
}

int ImTextStrFromUtf8(ImWchar* buf, int buf_size, const char* in_text, const char* in_text_end, const char** in_text_remaining)
{
    ImWchar* buf_out = buf;
    ImWchar* buf_end = buf + buf_size;
    while (buf_out < buf_end-1 && (!in_text_end || in_text < in_text_end) && *in_text)
    {
        unsigned int c;
        in_text += ImTextCharFromUtf8(&c, in_text, in_text_end);
        if (c == 0)
            break;
        if (c <= IM_UNICODE_CODEPOINT_MAX)    // FIXME: Losing characters that don't fit in 2 bytes
            *buf_out++ = (ImWchar)c;
    }
    *buf_out = 0;
    if (in_text_remaining)
        *in_text_remaining = in_text;
    return (int)(buf_out - buf);
}

int ImTextCountCharsFromUtf8(const char* in_text, const char* in_text_end)
{
    int char_count = 0;
    while ((!in_text_end || in_text < in_text_end) && *in_text)
    {
        unsigned int c;
        in_text += ImTextCharFromUtf8(&c, in_text, in_text_end);
        if (c == 0)
            break;
        if (c <= IM_UNICODE_CODEPOINT_MAX)
            char_count++;
    }
    return char_count;
}

// Based on stb_to_utf8() from github.com/nothings/stb/
static inline int ImTextCharToUtf8(char* buf, int buf_size, unsigned int c)
{
    if (c < 0x80)
    {
        buf[0] = (char)c;
        return 1;
    }
    if (c < 0x800)
    {
        if (buf_size < 2) return 0;
        buf[0] = (char)(0xc0 + (c >> 6));
        buf[1] = (char)(0x80 + (c & 0x3f));
        return 2;
    }
    if (c >= 0xdc00 && c < 0xe000)
    {
        return 0;
    }
    if (c >= 0xd800 && c < 0xdc00)
    {
        if (buf_size < 4) return 0;
        buf[0] = (char)(0xf0 + (c >> 18));
        buf[1] = (char)(0x80 + ((c >> 12) & 0x3f));
        buf[2] = (char)(0x80 + ((c >> 6) & 0x3f));
        buf[3] = (char)(0x80 + ((c ) & 0x3f));
        return 4;
    }
    //else if (c < 0x10000)
    {
        if (buf_size < 3) return 0;
        buf[0] = (char)(0xe0 + (c >> 12));
        buf[1] = (char)(0x80 + ((c>> 6) & 0x3f));
        buf[2] = (char)(0x80 + ((c ) & 0x3f));
        return 3;
    }
}

// Not optimal but we very rarely use this function.
int ImTextCountUtf8BytesFromChar(const char* in_text, const char* in_text_end)
{
    unsigned int dummy = 0;
    return ImTextCharFromUtf8(&dummy, in_text, in_text_end);
}

static inline int ImTextCountUtf8BytesFromChar(unsigned int c)
{
    if (c < 0x80) return 1;
    if (c < 0x800) return 2;
    if (c >= 0xdc00 && c < 0xe000) return 0;
    if (c >= 0xd800 && c < 0xdc00) return 4;
    return 3;
}

int ImTextStrToUtf8(char* buf, int buf_size, const ImWchar* in_text, const ImWchar* in_text_end)
{
    char* buf_out = buf;
    const char* buf_end = buf + buf_size;
    while (buf_out < buf_end-1 && (!in_text_end || in_text < in_text_end) && *in_text)
    {
        unsigned int c = (unsigned int)(*in_text++);
        if (c < 0x80)
            *buf_out++ = (char)c;
        else
            buf_out += ImTextCharToUtf8(buf_out, (int)(buf_end-buf_out-1), c);
    }
    *buf_out = 0;
    return (int)(buf_out - buf);
}

int ImTextCountUtf8BytesFromStr(const ImWchar* in_text, const ImWchar* in_text_end)
{
    int bytes_count = 0;
    while ((!in_text_end || in_text < in_text_end) && *in_text)
    {
        unsigned int c = (unsigned int)(*in_text++);
        if (c < 0x80)
            bytes_count++;
        else
            bytes_count += ImTextCountUtf8BytesFromChar(c);
    }
    return bytes_count;
}

//-----------------------------------------------------------------------------
// [SECTION] MISC HELPERS/UTILTIES (Color functions)
// Note: The Convert functions are early design which are not consistent with other API.
//-----------------------------------------------------------------------------

ImVec4 ImGui::ColorConvertU32ToFloat4(ImU32 in)
{
    float s = 1.0f/255.0f;
    return ImVec4(
        ((in >> IM_COL32_R_SHIFT) & 0xFF) * s,
        ((in >> IM_COL32_G_SHIFT) & 0xFF) * s,
        ((in >> IM_COL32_B_SHIFT) & 0xFF) * s,
        ((in >> IM_COL32_A_SHIFT) & 0xFF) * s);
}

ImU32 ImGui::ColorConvertFloat4ToU32(const ImVec4& in)
{
    ImU32 out;
    out  = ((ImU32)IM_F32_TO_INT8_SAT(in.x)) << IM_COL32_R_SHIFT;
    out |= ((ImU32)IM_F32_TO_INT8_SAT(in.y)) << IM_COL32_G_SHIFT;
    out |= ((ImU32)IM_F32_TO_INT8_SAT(in.z)) << IM_COL32_B_SHIFT;
    out |= ((ImU32)IM_F32_TO_INT8_SAT(in.w)) << IM_COL32_A_SHIFT;
    return out;
}

// Convert rgb floats ([0-1],[0-1],[0-1]) to hsv floats ([0-1],[0-1],[0-1]), from Foley & van Dam p592
// Optimized http://lolengine.net/blog/2013/01/13/fast-rgb-to-hsv
void ImGui::ColorConvertRGBtoHSV(float r, float g, float b, float& out_h, float& out_s, float& out_v)
{
    float K = 0.f;
    if (g < b)
    {
        ImSwap(g, b);
        K = -1.f;
    }
    if (r < g)
    {
        ImSwap(r, g);
        K = -2.f / 6.f - K;
    }

    const float chroma = r - (g < b ? g : b);
    out_h = ImFabs(K + (g - b) / (6.f * chroma + 1e-20f));
    out_s = chroma / (r + 1e-20f);
    out_v = r;
}

// Convert hsv floats ([0-1],[0-1],[0-1]) to rgb floats ([0-1],[0-1],[0-1]), from Foley & van Dam p593
// also http://en.wikipedia.org/wiki/HSL_and_HSV
void ImGui::ColorConvertHSVtoRGB(float h, float s, float v, float& out_r, float& out_g, float& out_b)
{
    if (s == 0.0f)
    {
        // gray
        out_r = out_g = out_b = v;
        return;
    }

    h = ImFmod(h, 1.0f) / (60.0f/360.0f);
    int   i = (int)h;
    float f = h - (float)i;
    float p = v * (1.0f - s);
    float q = v * (1.0f - s * f);
    float t = v * (1.0f - s * (1.0f - f));

    switch (i)
    {
    case 0: out_r = v; out_g = t; out_b = p; break;
    case 1: out_r = q; out_g = v; out_b = p; break;
    case 2: out_r = p; out_g = v; out_b = t; break;
    case 3: out_r = p; out_g = q; out_b = v; break;
    case 4: out_r = t; out_g = p; out_b = v; break;
    case 5: default: out_r = v; out_g = p; out_b = q; break;
    }
}

ImU32 ImGui::GetColorU32(ImGuiCol idx, float alpha_mul)
{
    ImGuiStyle& style = GImGui->Style;
    ImVec4 c = style.Colors[idx];
    c.w *= style.Alpha * alpha_mul;
    return ColorConvertFloat4ToU32(c);
}

ImU32 ImGui::GetColorU32(const ImVec4& col)
{
    ImGuiStyle& style = GImGui->Style;
    ImVec4 c = col;
    c.w *= style.Alpha;
    return ColorConvertFloat4ToU32(c);
}

const ImVec4& ImGui::GetStyleColorVec4(ImGuiCol idx)
{
    ImGuiStyle& style = GImGui->Style;
    return style.Colors[idx];
}

ImU32 ImGui::GetColorU32(ImU32 col)
{
    float style_alpha = GImGui->Style.Alpha;
    if (style_alpha >= 1.0f)
        return col;
    ImU32 a = (col & IM_COL32_A_MASK) >> IM_COL32_A_SHIFT;
    a = (ImU32)(a * style_alpha); // We don't need to clamp 0..255 because Style.Alpha is in 0..1 range.
    return (col & ~IM_COL32_A_MASK) | (a << IM_COL32_A_SHIFT);
}

//-----------------------------------------------------------------------------
// [SECTION] ImGuiStorage
// Helper: Key->value storage
//-----------------------------------------------------------------------------

// std::lower_bound but without the bullshit
static ImGuiStorage::ImGuiStoragePair* LowerBound(ImVector<ImGuiStorage::ImGuiStoragePair>& data, ImGuiID key)
{
    ImGuiStorage::ImGuiStoragePair* first = data.Data;
    ImGuiStorage::ImGuiStoragePair* last = data.Data + data.Size;
    size_t count = (size_t)(last - first);
    while (count > 0)
    {
        size_t count2 = count >> 1;
        ImGuiStorage::ImGuiStoragePair* mid = first + count2;
        if (mid->key < key)
        {
            first = ++mid;
            count -= count2 + 1;
        }
        else
        {
            count = count2;
        }
    }
    return first;
}

// For quicker full rebuild of a storage (instead of an incremental one), you may add all your contents and then sort once.
void ImGuiStorage::BuildSortByKey()
{
    struct StaticFunc
    {
        static int IMGUI_CDECL PairCompareByID(const void* lhs, const void* rhs)
        {
            // We can't just do a subtraction because qsort uses signed integers and subtracting our ID doesn't play well with that.
            if (((const ImGuiStoragePair*)lhs)->key > ((const ImGuiStoragePair*)rhs)->key) return +1;
            if (((const ImGuiStoragePair*)lhs)->key < ((const ImGuiStoragePair*)rhs)->key) return -1;
            return 0;
        }
    };
    if (Data.Size > 1)
        ImQsort(Data.Data, (size_t)Data.Size, sizeof(ImGuiStoragePair), StaticFunc::PairCompareByID);
}

int ImGuiStorage::GetInt(ImGuiID key, int default_val) const
{
    ImGuiStoragePair* it = LowerBound(const_cast<ImVector<ImGuiStoragePair>&>(Data), key);
    if (it == Data.end() || it->key != key)
        return default_val;
    return it->val_i;
}

bool ImGuiStorage::GetBool(ImGuiID key, bool default_val) const
{
    return GetInt(key, default_val ? 1 : 0) != 0;
}

float ImGuiStorage::GetFloat(ImGuiID key, float default_val) const
{
    ImGuiStoragePair* it = LowerBound(const_cast<ImVector<ImGuiStoragePair>&>(Data), key);
    if (it == Data.end() || it->key != key)
        return default_val;
    return it->val_f;
}

void* ImGuiStorage::GetVoidPtr(ImGuiID key) const
{
    ImGuiStoragePair* it = LowerBound(const_cast<ImVector<ImGuiStoragePair>&>(Data), key);
    if (it == Data.end() || it->key != key)
        return NULL;
    return it->val_p;
}

// References are only valid until a new value is added to the storage. Calling a Set***() function or a Get***Ref() function invalidates the pointer.
int* ImGuiStorage::GetIntRef(ImGuiID key, int default_val)
{
    ImGuiStoragePair* it = LowerBound(Data, key);
    if (it == Data.end() || it->key != key)
        it = Data.insert(it, ImGuiStoragePair(key, default_val));
    return &it->val_i;
}

bool* ImGuiStorage::GetBoolRef(ImGuiID key, bool default_val)
{
    return (bool*)GetIntRef(key, default_val ? 1 : 0);
}

float* ImGuiStorage::GetFloatRef(ImGuiID key, float default_val)
{
    ImGuiStoragePair* it = LowerBound(Data, key);
    if (it == Data.end() || it->key != key)
        it = Data.insert(it, ImGuiStoragePair(key, default_val));
    return &it->val_f;
}

void** ImGuiStorage::GetVoidPtrRef(ImGuiID key, void* default_val)
{
    ImGuiStoragePair* it = LowerBound(Data, key);
    if (it == Data.end() || it->key != key)
        it = Data.insert(it, ImGuiStoragePair(key, default_val));
    return &it->val_p;
}

// FIXME-OPT: Need a way to reuse the result of lower_bound when doing GetInt()/SetInt() - not too bad because it only happens on explicit interaction (maximum one a frame)
void ImGuiStorage::SetInt(ImGuiID key, int val)
{
    ImGuiStoragePair* it = LowerBound(Data, key);
    if (it == Data.end() || it->key != key)
    {
        Data.insert(it, ImGuiStoragePair(key, val));
        return;
    }
    it->val_i = val;
}

void ImGuiStorage::SetBool(ImGuiID key, bool val)
{
    SetInt(key, val ? 1 : 0);
}

void ImGuiStorage::SetFloat(ImGuiID key, float val)
{
    ImGuiStoragePair* it = LowerBound(Data, key);
    if (it == Data.end() || it->key != key)
    {
        Data.insert(it, ImGuiStoragePair(key, val));
        return;
    }
    it->val_f = val;
}

void ImGuiStorage::SetVoidPtr(ImGuiID key, void* val)
{
    ImGuiStoragePair* it = LowerBound(Data, key);
    if (it == Data.end() || it->key != key)
    {
        Data.insert(it, ImGuiStoragePair(key, val));
        return;
    }
    it->val_p = val;
}

void ImGuiStorage::SetAllInt(int v)
{
    for (int i = 0; i < Data.Size; i++)
        Data[i].val_i = v;
}

//-----------------------------------------------------------------------------
// [SECTION] ImGuiTextFilter
//-----------------------------------------------------------------------------

// Helper: Parse and apply text filters. In format "aaaaa[,bbbb][,ccccc]"
ImGuiTextFilter::ImGuiTextFilter(const char* default_filter)
{
    if (default_filter)
    {
        ImStrncpy(InputBuf, default_filter, IM_ARRAYSIZE(InputBuf));
        Build();
    }
    else
    {
        InputBuf[0] = 0;
        CountGrep = 0;
    }
}

bool ImGuiTextFilter::Draw(const char* label, float width)
{
    if (width != 0.0f)
        ImGui::SetNextItemWidth(width);
    bool value_changed = ImGui::InputText(label, InputBuf, IM_ARRAYSIZE(InputBuf));
    if (value_changed)
        Build();
    return value_changed;
}

void ImGuiTextFilter::ImGuiTextRange::split(char separator, ImVector<ImGuiTextRange>* out) const
{
    out->resize(0);
    const char* wb = b;
    const char* we = wb;
    while (we < e)
    {
        if (*we == separator)
        {
            out->push_back(ImGuiTextRange(wb, we));
            wb = we + 1;
        }
        we++;
    }
    if (wb != we)
        out->push_back(ImGuiTextRange(wb, we));
}

void ImGuiTextFilter::Build()
{
    Filters.resize(0);
    ImGuiTextRange input_range(InputBuf, InputBuf+strlen(InputBuf));
    input_range.split(',', &Filters);

    CountGrep = 0;
    for (int i = 0; i != Filters.Size; i++)
    {
        ImGuiTextRange& f = Filters[i];
        while (f.b < f.e && ImCharIsBlankA(f.b[0]))
            f.b++;
        while (f.e > f.b && ImCharIsBlankA(f.e[-1]))
            f.e--;
        if (f.empty())
            continue;
        if (Filters[i].b[0] != '-')
            CountGrep += 1;
    }
}

bool ImGuiTextFilter::PassFilter(const char* text, const char* text_end) const
{
    if (Filters.empty())
        return true;

    if (text == NULL)
        text = "";

    for (int i = 0; i != Filters.Size; i++)
    {
        const ImGuiTextRange& f = Filters[i];
        if (f.empty())
            continue;
        if (f.b[0] == '-')
        {
            // Subtract
            if (ImStristr(text, text_end, f.b + 1, f.e) != NULL)
                return false;
        }
        else
        {
            // Grep
            if (ImStristr(text, text_end, f.b, f.e) != NULL)
                return true;
        }
    }

    // Implicit * grep
    if (CountGrep == 0)
        return true;

    return false;
}

//-----------------------------------------------------------------------------
// [SECTION] ImGuiTextBuffer
//-----------------------------------------------------------------------------

// On some platform vsnprintf() takes va_list by reference and modifies it.
// va_copy is the 'correct' way to copy a va_list but Visual Studio prior to 2013 doesn't have it.
#ifndef va_copy
#if defined(__GNUC__) || defined(__clang__)
#define va_copy(dest, src) __builtin_va_copy(dest, src)
#else
#define va_copy(dest, src) (dest = src)
#endif
#endif

char ImGuiTextBuffer::EmptyString[1] = { 0 };

void ImGuiTextBuffer::append(const char* str, const char* str_end)
{
    int len = str_end ? (int)(str_end - str) : (int)strlen(str);

    // Add zero-terminator the first time
    const int write_off = (Buf.Size != 0) ? Buf.Size : 1;
    const int needed_sz = write_off + len;
    if (write_off + len >= Buf.Capacity)
    {
        int new_capacity = Buf.Capacity * 2;
        Buf.reserve(needed_sz > new_capacity ? needed_sz : new_capacity);
    }

    Buf.resize(needed_sz);
    memcpy(&Buf[write_off - 1], str, (size_t)len);
    Buf[write_off - 1 + len] = 0;
}

void ImGuiTextBuffer::appendf(const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    appendfv(fmt, args);
    va_end(args);
}

// Helper: Text buffer for logging/accumulating text
void ImGuiTextBuffer::appendfv(const char* fmt, va_list args)
{
    va_list args_copy;
    va_copy(args_copy, args);

    int len = ImFormatStringV(NULL, 0, fmt, args);         // FIXME-OPT: could do a first pass write attempt, likely successful on first pass.
    if (len <= 0)
    {
        va_end(args_copy);
        return;
    }

    // Add zero-terminator the first time
    const int write_off = (Buf.Size != 0) ? Buf.Size : 1;
    const int needed_sz = write_off + len;
    if (write_off + len >= Buf.Capacity)
    {
        int new_capacity = Buf.Capacity * 2;
        Buf.reserve(needed_sz > new_capacity ? needed_sz : new_capacity);
    }

    Buf.resize(needed_sz);
    ImFormatStringV(&Buf[write_off - 1], (size_t)len + 1, fmt, args_copy);
    va_end(args_copy);
}

//-----------------------------------------------------------------------------
// [SECTION] ImGuiListClipper
// This is currently not as flexible/powerful as it should be and really confusing/spaghetti, mostly because we changed
// the API mid-way through development and support two ways to using the clipper, needs some rework (see TODO)
//-----------------------------------------------------------------------------

// Helper to calculate coarse clipping of large list of evenly sized items.
// NB: Prefer using the ImGuiListClipper higher-level helper if you can! Read comments and instructions there on how those use this sort of pattern.
// NB: 'items_count' is only used to clamp the result, if you don't know your count you can use INT_MAX
void ImGui::CalcListClipping(int items_count, float items_height, int* out_items_display_start, int* out_items_display_end)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    if (g.LogEnabled)
    {
        // If logging is active, do not perform any clipping
        *out_items_display_start = 0;
        *out_items_display_end = items_count;
        return;
    }
    if (window->SkipItems)
    {
        *out_items_display_start = *out_items_display_end = 0;
        return;
    }

    // We create the union of the ClipRect and the NavScoringRect which at worst should be 1 page away from ClipRect
    ImRect unclipped_rect = window->ClipRect;
    if (g.NavMoveRequest)
        unclipped_rect.Add(g.NavScoringRectScreen);

    const ImVec2 pos = window->DC.CursorPos;
    int start = (int)((unclipped_rect.Min.y - pos.y) / items_height);
    int end = (int)((unclipped_rect.Max.y - pos.y) / items_height);

    // When performing a navigation request, ensure we have one item extra in the direction we are moving to
    if (g.NavMoveRequest && g.NavMoveClipDir == ImGuiDir_Up)
        start--;
    if (g.NavMoveRequest && g.NavMoveClipDir == ImGuiDir_Down)
        end++;

    start = ImClamp(start, 0, items_count);
    end = ImClamp(end + 1, start, items_count);
    *out_items_display_start = start;
    *out_items_display_end = end;
}

static void SetCursorPosYAndSetupDummyPrevLine(float pos_y, float line_height)
{
    // Set cursor position and a few other things so that SetScrollHereY() and Columns() can work when seeking cursor.
    // FIXME: It is problematic that we have to do that here, because custom/equivalent end-user code would stumble on the same issue.
    // The clipper should probably have a 4th step to display the last item in a regular manner.
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    window->DC.CursorPos.y = pos_y;
    window->DC.CursorMaxPos.y = ImMax(window->DC.CursorMaxPos.y, pos_y);
    window->DC.CursorPosPrevLine.y = window->DC.CursorPos.y - line_height;  // Setting those fields so that SetScrollHereY() can properly function after the end of our clipper usage.
    window->DC.PrevLineSize.y = (line_height - g.Style.ItemSpacing.y);      // If we end up needing more accurate data (to e.g. use SameLine) we may as well make the clipper have a fourth step to let user process and display the last item in their list.
    if (ImGuiColumns* columns = window->DC.CurrentColumns)
        columns->LineMinY = window->DC.CursorPos.y;                         // Setting this so that cell Y position are set properly
}

// Use case A: Begin() called from constructor with items_height<0, then called again from Sync() in StepNo 1
// Use case B: Begin() called from constructor with items_height>0
// FIXME-LEGACY: Ideally we should remove the Begin/End functions but they are part of the legacy API we still support. This is why some of the code in Step() calling Begin() and reassign some fields, spaghetti style.
void ImGuiListClipper::Begin(int count, float items_height)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;

    StartPosY = window->DC.CursorPos.y;
    ItemsHeight = items_height;
    ItemsCount = count;
    StepNo = 0;
    DisplayEnd = DisplayStart = -1;
    if (ItemsHeight > 0.0f)
    {
        ImGui::CalcListClipping(ItemsCount, ItemsHeight, &DisplayStart, &DisplayEnd); // calculate how many to clip/display
        if (DisplayStart > 0)
            SetCursorPosYAndSetupDummyPrevLine(StartPosY + DisplayStart * ItemsHeight, ItemsHeight); // advance cursor
        StepNo = 2;
    }
}

void ImGuiListClipper::End()
{
    if (ItemsCount < 0)
        return;
    // In theory here we should assert that ImGui::GetCursorPosY() == StartPosY + DisplayEnd * ItemsHeight, but it feels saner to just seek at the end and not assert/crash the user.
    if (ItemsCount < INT_MAX)
        SetCursorPosYAndSetupDummyPrevLine(StartPosY + ItemsCount * ItemsHeight, ItemsHeight); // advance cursor
    ItemsCount = -1;
    StepNo = 3;
}

bool ImGuiListClipper::Step()
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;

    if (ItemsCount == 0 || window->SkipItems)
    {
        ItemsCount = -1;
        return false;
    }
    if (StepNo == 0) // Step 0: the clipper let you process the first element, regardless of it being visible or not, so we can measure the element height.
    {
        DisplayStart = 0;
        DisplayEnd = 1;
        StartPosY = window->DC.CursorPos.y;
        StepNo = 1;
        return true;
    }
    if (StepNo == 1) // Step 1: the clipper infer height from first element, calculate the actual range of elements to display, and position the cursor before the first element.
    {
        if (ItemsCount == 1) { ItemsCount = -1; return false; }
        float items_height = window->DC.CursorPos.y - StartPosY;
        IM_ASSERT(items_height > 0.0f);   // If this triggers, it means Item 0 hasn't moved the cursor vertically
        Begin(ItemsCount - 1, items_height);
        DisplayStart++;
        DisplayEnd++;
        StepNo = 3;
        return true;
    }
    if (StepNo == 2) // Step 2: dummy step only required if an explicit items_height was passed to constructor or Begin() and user still call Step(). Does nothing and switch to Step 3.
    {
        IM_ASSERT(DisplayStart >= 0 && DisplayEnd >= 0);
        StepNo = 3;
        return true;
    }
    if (StepNo == 3) // Step 3: the clipper validate that we have reached the expected Y position (corresponding to element DisplayEnd), advance the cursor to the end of the list and then returns 'false' to end the loop.
        End();
    return false;
}

//-----------------------------------------------------------------------------
// [SECTION] RENDER HELPERS
// Those (internal) functions are currently quite a legacy mess - their signature and behavior will change.
// Also see imgui_draw.cpp for some more which have been reworked to not rely on ImGui:: state.
//-----------------------------------------------------------------------------

const char* ImGui::FindRenderedTextEnd(const char* text, const char* text_end)
{
    const char* text_display_end = text;
    if (!text_end)
        text_end = (const char*)-1;

    while (text_display_end < text_end && *text_display_end != '\0' && (text_display_end[0] != '#' || text_display_end[1] != '#'))
        text_display_end++;
    return text_display_end;
}

// Internal ImGui functions to render text
// RenderText***() functions calls ImDrawList::AddText() calls ImBitmapFont::RenderText()
void ImGui::RenderText(ImVec2 pos, const char* text, const char* text_end, bool hide_text_after_hash)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;

    // Hide anything after a '##' string
    const char* text_display_end;
    if (hide_text_after_hash)
    {
        text_display_end = FindRenderedTextEnd(text, text_end);
    }
    else
    {
        if (!text_end)
            text_end = text + strlen(text); // FIXME-OPT
        text_display_end = text_end;
    }

    if (text != text_display_end)
    {
        window->DrawList->AddText(g.Font, g.FontSize, pos, GetColorU32(ImGuiCol_Text), text, text_display_end);
        if (g.LogEnabled)
            LogRenderedText(&pos, text, text_display_end);
    }
}

void ImGui::RenderTextWrapped(ImVec2 pos, const char* text, const char* text_end, float wrap_width)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;

    if (!text_end)
        text_end = text + strlen(text); // FIXME-OPT

    if (text != text_end)
    {
        window->DrawList->AddText(g.Font, g.FontSize, pos, GetColorU32(ImGuiCol_Text), text, text_end, wrap_width);
        if (g.LogEnabled)
            LogRenderedText(&pos, text, text_end);
    }
}

// Default clip_rect uses (pos_min,pos_max)
// Handle clipping on CPU immediately (vs typically let the GPU clip the triangles that are overlapping the clipping rectangle edges)
void ImGui::RenderTextClippedEx(ImDrawList* draw_list, const ImVec2& pos_min, const ImVec2& pos_max, const char* text, const char* text_display_end, const ImVec2* text_size_if_known, const ImVec2& align, const ImRect* clip_rect)
{
    // Perform CPU side clipping for single clipped element to avoid using scissor state
    ImVec2 pos = pos_min;
    const ImVec2 text_size = text_size_if_known ? *text_size_if_known : CalcTextSize(text, text_display_end, false, 0.0f);

    const ImVec2* clip_min = clip_rect ? &clip_rect->Min : &pos_min;
    const ImVec2* clip_max = clip_rect ? &clip_rect->Max : &pos_max;
    bool need_clipping = (pos.x + text_size.x >= clip_max->x) || (pos.y + text_size.y >= clip_max->y);
    if (clip_rect) // If we had no explicit clipping rectangle then pos==clip_min
        need_clipping |= (pos.x < clip_min->x) || (pos.y < clip_min->y);

    // Align whole block. We should defer that to the better rendering function when we'll have support for individual line alignment.
    if (align.x > 0.0f) pos.x = ImMax(pos.x, pos.x + (pos_max.x - pos.x - text_size.x) * align.x);
    if (align.y > 0.0f) pos.y = ImMax(pos.y, pos.y + (pos_max.y - pos.y - text_size.y) * align.y);

    // Render
    if (need_clipping)
    {
        ImVec4 fine_clip_rect(clip_min->x, clip_min->y, clip_max->x, clip_max->y);
        draw_list->AddText(NULL, 0.0f, pos, GetColorU32(ImGuiCol_Text), text, text_display_end, 0.0f, &fine_clip_rect);
    }
    else
    {
        draw_list->AddText(NULL, 0.0f, pos, GetColorU32(ImGuiCol_Text), text, text_display_end, 0.0f, NULL);
    }
}

void ImGui::RenderTextClipped(const ImVec2& pos_min, const ImVec2& pos_max, const char* text, const char* text_end, const ImVec2* text_size_if_known, const ImVec2& align, const ImRect* clip_rect)
{
    // Hide anything after a '##' string
    const char* text_display_end = FindRenderedTextEnd(text, text_end);
    const int text_len = (int)(text_display_end - text);
    if (text_len == 0)
        return;

    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    RenderTextClippedEx(window->DrawList, pos_min, pos_max, text, text_display_end, text_size_if_known, align, clip_rect);
    if (g.LogEnabled)
        LogRenderedText(&pos_min, text, text_display_end);
}


// Another overly complex function until we reorganize everything into a nice all-in-one helper.
// This is made more complex because we have dissociated the layout rectangle (pos_min..pos_max) which define _where_ the ellipsis is, from actual clipping of text and limit of the ellipsis display.
// This is because in the context of tabs we selectively hide part of the text when the Close Button appears, but we don't want the ellipsis to move.
void ImGui::RenderTextEllipsis(ImDrawList* draw_list, const ImVec2& pos_min, const ImVec2& pos_max, float clip_max_x, float ellipsis_max_x, const char* text, const char* text_end_full, const ImVec2* text_size_if_known)
{
    ImGuiContext& g = *GImGui;
    if (text_end_full == NULL)
        text_end_full = FindRenderedTextEnd(text);
    const ImVec2 text_size = text_size_if_known ? *text_size_if_known : CalcTextSize(text, text_end_full, false, 0.0f);

    //draw_list->AddLine(ImVec2(pos_max.x, pos_min.y - 4), ImVec2(pos_max.x, pos_max.y + 4), IM_COL32(0, 0, 255, 255));
    //draw_list->AddLine(ImVec2(ellipsis_max_x, pos_min.y-2), ImVec2(ellipsis_max_x, pos_max.y+2), IM_COL32(0, 255, 0, 255));
    //draw_list->AddLine(ImVec2(clip_max_x, pos_min.y), ImVec2(clip_max_x, pos_max.y), IM_COL32(255, 0, 0, 255));
    // FIXME: We could technically remove (last_glyph->AdvanceX - last_glyph->X1) from text_size.x here and save a few pixels.
    if (text_size.x > pos_max.x - pos_min.x)
    {
        // Hello wo...
        // |       |   |
        // min   max   ellipsis_max
        //          <-> this is generally some padding value

        const ImFont* font = draw_list->_Data->Font;
        const float font_size = draw_list->_Data->FontSize;
        const char* text_end_ellipsis = NULL;

        ImWchar ellipsis_char = font->EllipsisChar;
        int ellipsis_char_count = 1;
        if (ellipsis_char == (ImWchar)-1)
        {
            ellipsis_char = (ImWchar)'.';
            ellipsis_char_count = 3;
        }
        const ImFontGlyph* glyph = font->FindGlyph(ellipsis_char);

        float ellipsis_glyph_width = glyph->X1;                 // Width of the glyph with no padding on either side
        float ellipsis_total_width = ellipsis_glyph_width;      // Full width of entire ellipsis

        if (ellipsis_char_count > 1)
        {
            // Full ellipsis size without free spacing after it.
            const float spacing_between_dots = 1.0f * (draw_list->_Data->FontSize / font->FontSize);
            ellipsis_glyph_width = glyph->X1 - glyph->X0 + spacing_between_dots;
            ellipsis_total_width = ellipsis_glyph_width * (float)ellipsis_char_count - spacing_between_dots;
        }

        // We can now claim the space between pos_max.x and ellipsis_max.x
        const float text_avail_width = ImMax((ImMax(pos_max.x, ellipsis_max_x) - ellipsis_total_width) - pos_min.x, 1.0f);
        float text_size_clipped_x = font->CalcTextSizeA(font_size, text_avail_width, 0.0f, text, text_end_full, &text_end_ellipsis).x;
        if (text == text_end_ellipsis && text_end_ellipsis < text_end_full)
        {
            // Always display at least 1 character if there's no room for character + ellipsis
            text_end_ellipsis = text + ImTextCountUtf8BytesFromChar(text, text_end_full);
            text_size_clipped_x = font->CalcTextSizeA(font_size, FLT_MAX, 0.0f, text, text_end_ellipsis).x;
        }
        while (text_end_ellipsis > text && ImCharIsBlankA(text_end_ellipsis[-1]))
        {
            // Trim trailing space before ellipsis (FIXME: Supporting non-ascii blanks would be nice, for this we need a function to backtrack in UTF-8 text)
            text_end_ellipsis--;
            text_size_clipped_x -= font->CalcTextSizeA(font_size, FLT_MAX, 0.0f, text_end_ellipsis, text_end_ellipsis + 1).x; // Ascii blanks are always 1 byte
        }

        // Render text, render ellipsis
        RenderTextClippedEx(draw_list, pos_min, ImVec2(clip_max_x, pos_max.y), text, text_end_ellipsis, &text_size, ImVec2(0.0f, 0.0f));
        float ellipsis_x = pos_min.x + text_size_clipped_x;
        if (ellipsis_x + ellipsis_total_width <= ellipsis_max_x)
            for (int i = 0; i < ellipsis_char_count; i++)
            {
                font->RenderChar(draw_list, font_size, ImVec2(ellipsis_x, pos_min.y), GetColorU32(ImGuiCol_Text), ellipsis_char);
                ellipsis_x += ellipsis_glyph_width;
            }
    }
    else
    {
        RenderTextClippedEx(draw_list, pos_min, ImVec2(clip_max_x, pos_max.y), text, text_end_full, &text_size, ImVec2(0.0f, 0.0f));
    }

    if (g.LogEnabled)
        LogRenderedText(&pos_min, text, text_end_full);
}

// Render a rectangle shaped with optional rounding and borders
void ImGui::RenderFrame(ImVec2 p_min, ImVec2 p_max, ImU32 fill_col, bool border, float rounding)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    window->DrawList->AddRectFilled(p_min, p_max, fill_col, rounding);
    const float border_size = g.Style.FrameBorderSize;
    if (border && border_size > 0.0f)
    {
        window->DrawList->AddRect(p_min+ImVec2(1,1), p_max+ImVec2(1,1), GetColorU32(ImGuiCol_BorderShadow), rounding, ImDrawCornerFlags_All, border_size);
        window->DrawList->AddRect(p_min, p_max, GetColorU32(ImGuiCol_Border), rounding, ImDrawCornerFlags_All, border_size);
    }
}

void ImGui::RenderFrameBorder(ImVec2 p_min, ImVec2 p_max, float rounding)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    const float border_size = g.Style.FrameBorderSize;
    if (border_size > 0.0f)
    {
        window->DrawList->AddRect(p_min+ImVec2(1,1), p_max+ImVec2(1,1), GetColorU32(ImGuiCol_BorderShadow), rounding, ImDrawCornerFlags_All, border_size);
        window->DrawList->AddRect(p_min, p_max, GetColorU32(ImGuiCol_Border), rounding, ImDrawCornerFlags_All, border_size);
    }
}

// Render an arrow aimed to be aligned with text (p_min is a position in the same space text would be positioned). To e.g. denote expanded/collapsed state
void ImGui::RenderArrow(ImDrawList* draw_list, ImVec2 pos, ImU32 col, ImGuiDir dir, float scale)
{
    const float h = draw_list->_Data->FontSize * 1.00f;
    float r = h * 0.40f * scale;
    ImVec2 center = pos + ImVec2(h * 0.50f, h * 0.50f * scale);

    ImVec2 a, b, c;
    switch (dir)
    {
    case ImGuiDir_Up:
    case ImGuiDir_Down:
        if (dir == ImGuiDir_Up) r = -r;
        a = ImVec2(+0.000f,+0.750f) * r;
        b = ImVec2(-0.866f,-0.750f) * r;
        c = ImVec2(+0.866f,-0.750f) * r;
        break;
    case ImGuiDir_Left:
    case ImGuiDir_Right:
        if (dir == ImGuiDir_Left) r = -r;
        a = ImVec2(+0.750f,+0.000f) * r;
        b = ImVec2(-0.750f,+0.866f) * r;
        c = ImVec2(-0.750f,-0.866f) * r;
        break;
    case ImGuiDir_None:
    case ImGuiDir_COUNT:
        IM_ASSERT(0);
        break;
    }
    draw_list->AddTriangleFilled(center + a, center + b, center + c, col);
}

void ImGui::RenderBullet(ImDrawList* draw_list, ImVec2 pos, ImU32 col)
{
    draw_list->AddCircleFilled(pos, draw_list->_Data->FontSize * 0.20f, col, 8);
}

void ImGui::RenderCheckMark(ImVec2 pos, ImU32 col, float sz)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;

    float thickness = ImMax(sz / 5.0f, 1.0f);
    sz -= thickness*0.5f;
    pos += ImVec2(thickness*0.25f, thickness*0.25f);

    float third = sz / 3.0f;
    float bx = pos.x + third;
    float by = pos.y + sz - third*0.5f;
    window->DrawList->PathLineTo(ImVec2(bx - third, by - third));
    window->DrawList->PathLineTo(ImVec2(bx, by));
    window->DrawList->PathLineTo(ImVec2(bx + third*2, by - third*2));
    window->DrawList->PathStroke(col, false, thickness);
}

void ImGui::RenderNavHighlight(const ImRect& bb, ImGuiID id, ImGuiNavHighlightFlags flags)
{
    ImGuiContext& g = *GImGui;
    if (id != g.NavId)
        return;
    if (g.NavDisableHighlight && !(flags & ImGuiNavHighlightFlags_AlwaysDraw))
        return;
    ImGuiWindow* window = g.CurrentWindow;
    if (window->DC.NavHideHighlightOneFrame)
        return;

    float rounding = (flags & ImGuiNavHighlightFlags_NoRounding) ? 0.0f : g.Style.FrameRounding;
    ImRect display_rect = bb;
    display_rect.ClipWith(window->ClipRect);
    if (flags & ImGuiNavHighlightFlags_TypeDefault)
    {
        const float THICKNESS = 2.0f;
        const float DISTANCE = 3.0f + THICKNESS * 0.5f;
        display_rect.Expand(ImVec2(DISTANCE,DISTANCE));
        bool fully_visible = window->ClipRect.Contains(display_rect);
        if (!fully_visible)
            window->DrawList->PushClipRect(display_rect.Min, display_rect.Max);
        window->DrawList->AddRect(display_rect.Min + ImVec2(THICKNESS*0.5f,THICKNESS*0.5f), display_rect.Max - ImVec2(THICKNESS*0.5f,THICKNESS*0.5f), GetColorU32(ImGuiCol_NavHighlight), rounding, ImDrawCornerFlags_All, THICKNESS);
        if (!fully_visible)
            window->DrawList->PopClipRect();
    }
    if (flags & ImGuiNavHighlightFlags_TypeThin)
    {
        window->DrawList->AddRect(display_rect.Min, display_rect.Max, GetColorU32(ImGuiCol_NavHighlight), rounding, ~0, 1.0f);
    }
}

//-----------------------------------------------------------------------------
// [SECTION] MAIN CODE (most of the code! lots of stuff, needs tidying up!)
//-----------------------------------------------------------------------------

// ImGuiWindow is mostly a dumb struct. It merely has a constructor and a few helper methods
ImGuiWindow::ImGuiWindow(ImGuiContext* context, const char* name)
    : DrawListInst(&context->DrawListSharedData)
{
    Name = ImStrdup(name);
    ID = ImHashStr(name);
    IDStack.push_back(ID);
    Flags = ImGuiWindowFlags_None;
    Pos = ImVec2(0.0f, 0.0f);
    Size = SizeFull = ImVec2(0.0f, 0.0f);
    ContentSize = ContentSizeExplicit = ImVec2(0.0f, 0.0f);
    WindowPadding = ImVec2(0.0f, 0.0f);
    WindowRounding = 0.0f;
    WindowBorderSize = 0.0f;
    NameBufLen = (int)strlen(name) + 1;
    MoveId = GetID("#MOVE");
    ChildId = 0;
    Scroll = ImVec2(0.0f, 0.0f);
    ScrollTarget = ImVec2(FLT_MAX, FLT_MAX);
    ScrollTargetCenterRatio = ImVec2(0.5f, 0.5f);
    ScrollbarSizes = ImVec2(0.0f, 0.0f);
    ScrollbarX = ScrollbarY = false;
    Active = WasActive = false;
    WriteAccessed = false;
    Collapsed = false;
    WantCollapseToggle = false;
    SkipItems = false;
    Appearing = false;
    Hidden = false;
    HasCloseButton = false;
    ResizeBorderHeld = -1;
    BeginCount = 0;
    BeginOrderWithinParent = -1;
    BeginOrderWithinContext = -1;
    PopupId = 0;
    AutoFitFramesX = AutoFitFramesY = -1;
    AutoFitChildAxises = 0x00;
    AutoFitOnlyGrows = false;
    AutoPosLastDirection = ImGuiDir_None;
    HiddenFramesCanSkipItems = HiddenFramesCannotSkipItems = 0;
    SetWindowPosAllowFlags = SetWindowSizeAllowFlags = SetWindowCollapsedAllowFlags = ImGuiCond_Always | ImGuiCond_Once | ImGuiCond_FirstUseEver | ImGuiCond_Appearing;
    SetWindowPosVal = SetWindowPosPivot = ImVec2(FLT_MAX, FLT_MAX);

    InnerRect = ImRect(0.0f, 0.0f, 0.0f, 0.0f); // Clear so the InnerRect.GetSize() code in Begin() doesn't lead to overflow even if the result isn't used.

    LastFrameActive = -1;
    LastTimeActive = -1.0f;
    ItemWidthDefault = 0.0f;
    FontWindowScale = 1.0f;
    SettingsOffset = -1;

    DrawList = &DrawListInst;
    DrawList->_OwnerName = Name;
    ParentWindow = NULL;
    RootWindow = NULL;
    RootWindowForTitleBarHighlight = NULL;
    RootWindowForNav = NULL;

    NavLastIds[0] = NavLastIds[1] = 0;
    NavRectRel[0] = NavRectRel[1] = ImRect();
    NavLastChildNavWindow = NULL;

    MemoryCompacted = false;
    MemoryDrawListIdxCapacity = MemoryDrawListVtxCapacity = 0;
}

ImGuiWindow::~ImGuiWindow()
{
    IM_ASSERT(DrawList == &DrawListInst);
    IM_DELETE(Name);
    for (int i = 0; i != ColumnsStorage.Size; i++)
        ColumnsStorage[i].~ImGuiColumns();
}

ImGuiID ImGuiWindow::GetID(const char* str, const char* str_end)
{
    ImGuiID seed = IDStack.back();
    ImGuiID id = ImHashStr(str, str_end ? (str_end - str) : 0, seed);
    ImGui::KeepAliveID(id);
    return id;
}

ImGuiID ImGuiWindow::GetID(const void* ptr)
{
    ImGuiID seed = IDStack.back();
    ImGuiID id = ImHashData(&ptr, sizeof(void*), seed);
    ImGui::KeepAliveID(id);
    return id;
}

ImGuiID ImGuiWindow::GetID(int n)
{
    ImGuiID seed = IDStack.back();
    ImGuiID id = ImHashData(&n, sizeof(n), seed);
    ImGui::KeepAliveID(id);
    return id;
}

ImGuiID ImGuiWindow::GetIDNoKeepAlive(const char* str, const char* str_end)
{
    ImGuiID seed = IDStack.back();
    return ImHashStr(str, str_end ? (str_end - str) : 0, seed);
}

ImGuiID ImGuiWindow::GetIDNoKeepAlive(const void* ptr)
{
    ImGuiID seed = IDStack.back();
    return ImHashData(&ptr, sizeof(void*), seed);
}

ImGuiID ImGuiWindow::GetIDNoKeepAlive(int n)
{
    ImGuiID seed = IDStack.back();
    return ImHashData(&n, sizeof(n), seed);
}

// This is only used in rare/specific situations to manufacture an ID out of nowhere.
ImGuiID ImGuiWindow::GetIDFromRectangle(const ImRect& r_abs)
{
    ImGuiID seed = IDStack.back();
    const int r_rel[4] = { (int)(r_abs.Min.x - Pos.x), (int)(r_abs.Min.y - Pos.y), (int)(r_abs.Max.x - Pos.x), (int)(r_abs.Max.y - Pos.y) };
    ImGuiID id = ImHashData(&r_rel, sizeof(r_rel), seed);
    ImGui::KeepAliveID(id);
    return id;
}

static void SetCurrentWindow(ImGuiWindow* window)
{
    ImGuiContext& g = *GImGui;
    g.CurrentWindow = window;
    if (window)
        g.FontSize = g.DrawListSharedData.FontSize = window->CalcFontSize();
}

// Free up/compact internal window buffers, we can use this when a window becomes unused.
// This is currently unused by the library, but you may call this yourself for easy GC.
// Not freed:
// - ImGuiWindow, ImGuiWindowSettings, Name
// - StateStorage, ColumnsStorage (may hold useful data)
// This should have no noticeable visual effect. When the window reappear however, expect new allocation/buffer growth/copy cost.
void ImGui::GcCompactTransientWindowBuffers(ImGuiWindow* window)
{
    window->MemoryCompacted = true;
    window->MemoryDrawListIdxCapacity = window->DrawList->IdxBuffer.Capacity;
    window->MemoryDrawListVtxCapacity = window->DrawList->VtxBuffer.Capacity;
    window->IDStack.clear();
    window->DrawList->ClearFreeMemory();
    window->DC.ChildWindows.clear();
    window->DC.ItemFlagsStack.clear();
    window->DC.ItemWidthStack.clear();
    window->DC.TextWrapPosStack.clear();
    window->DC.GroupStack.clear();
}

void ImGui::GcAwakeTransientWindowBuffers(ImGuiWindow* window)
{
    // We stored capacity of the ImDrawList buffer to reduce growth-caused allocation/copy when awakening.
    // The other buffers tends to amortize much faster.
    window->MemoryCompacted = false;
    window->DrawList->IdxBuffer.reserve(window->MemoryDrawListIdxCapacity);
    window->DrawList->VtxBuffer.reserve(window->MemoryDrawListVtxCapacity);
    window->MemoryDrawListIdxCapacity = window->MemoryDrawListVtxCapacity = 0;
}

void ImGui::SetNavID(ImGuiID id, int nav_layer)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(g.NavWindow);
    IM_ASSERT(nav_layer == 0 || nav_layer == 1);
    g.NavId = id;
    g.NavWindow->NavLastIds[nav_layer] = id;
}

void ImGui::SetNavIDWithRectRel(ImGuiID id, int nav_layer, const ImRect& rect_rel)
{
    ImGuiContext& g = *GImGui;
    SetNavID(id, nav_layer);
    g.NavWindow->NavRectRel[nav_layer] = rect_rel;
    g.NavMousePosDirty = true;
    g.NavDisableHighlight = false;
    g.NavDisableMouseHover = true;
}

void ImGui::SetActiveID(ImGuiID id, ImGuiWindow* window)
{
    ImGuiContext& g = *GImGui;
    g.ActiveIdIsJustActivated = (g.ActiveId != id);
    if (g.ActiveIdIsJustActivated)
    {
        g.ActiveIdTimer = 0.0f;
        g.ActiveIdHasBeenPressedBefore = false;
        g.ActiveIdHasBeenEditedBefore = false;
        if (id != 0)
        {
            g.LastActiveId = id;
            g.LastActiveIdTimer = 0.0f;
        }
    }
    g.ActiveId = id;
    g.ActiveIdAllowOverlap = false;
    g.ActiveIdWindow = window;
    g.ActiveIdHasBeenEditedThisFrame = false;
    if (id)
    {
        g.ActiveIdIsAlive = id;
        g.ActiveIdSource = (g.NavActivateId == id || g.NavInputId == id || g.NavJustTabbedId == id || g.NavJustMovedToId == id) ? ImGuiInputSource_Nav : ImGuiInputSource_Mouse;
    }

    // Clear declaration of inputs claimed by the widget
    // (Please note that this is WIP and not all keys/inputs are thoroughly declared by all widgets yet)
    g.ActiveIdUsingNavDirMask = 0x00;
    g.ActiveIdUsingNavInputMask = 0x00;
    g.ActiveIdUsingKeyInputMask = 0x00;
}

// FIXME-NAV: The existence of SetNavID/SetNavIDWithRectRel/SetFocusID is incredibly messy and confusing and needs some explanation or refactoring.
void ImGui::SetFocusID(ImGuiID id, ImGuiWindow* window)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(id != 0);

    // Assume that SetFocusID() is called in the context where its NavLayer is the current layer, which is the case everywhere we call it.
    const ImGuiNavLayer nav_layer = window->DC.NavLayerCurrent;
    if (g.NavWindow != window)
        g.NavInitRequest = false;
    g.NavId = id;
    g.NavWindow = window;
    g.NavLayer = nav_layer;
    window->NavLastIds[nav_layer] = id;
    if (window->DC.LastItemId == id)
        window->NavRectRel[nav_layer] = ImRect(window->DC.LastItemRect.Min - window->Pos, window->DC.LastItemRect.Max - window->Pos);

    if (g.ActiveIdSource == ImGuiInputSource_Nav)
        g.NavDisableMouseHover = true;
    else
        g.NavDisableHighlight = true;
}

void ImGui::ClearActiveID()
{
    SetActiveID(0, NULL);
}

void ImGui::SetHoveredID(ImGuiID id)
{
    ImGuiContext& g = *GImGui;
    g.HoveredId = id;
    g.HoveredIdAllowOverlap = false;
    if (id != 0 && g.HoveredIdPreviousFrame != id)
        g.HoveredIdTimer = g.HoveredIdNotActiveTimer = 0.0f;
}

ImGuiID ImGui::GetHoveredID()
{
    ImGuiContext& g = *GImGui;
    return g.HoveredId ? g.HoveredId : g.HoveredIdPreviousFrame;
}

void ImGui::KeepAliveID(ImGuiID id)
{
    ImGuiContext& g = *GImGui;
    if (g.ActiveId == id)
        g.ActiveIdIsAlive = id;
    if (g.ActiveIdPreviousFrame == id)
        g.ActiveIdPreviousFrameIsAlive = true;
}

void ImGui::MarkItemEdited(ImGuiID id)
{
    // This marking is solely to be able to provide info for IsItemDeactivatedAfterEdit().
    // ActiveId might have been released by the time we call this (as in the typical press/release button behavior) but still need need to fill the data.
    ImGuiContext& g = *GImGui;
    IM_ASSERT(g.ActiveId == id || g.ActiveId == 0 || g.DragDropActive);
    IM_UNUSED(id); // Avoid unused variable warnings when asserts are compiled out.
    //IM_ASSERT(g.CurrentWindow->DC.LastItemId == id);
    g.ActiveIdHasBeenEditedThisFrame = true;
    g.ActiveIdHasBeenEditedBefore = true;
    g.CurrentWindow->DC.LastItemStatusFlags |= ImGuiItemStatusFlags_Edited;
}

static inline bool IsWindowContentHoverable(ImGuiWindow* window, ImGuiHoveredFlags flags)
{
    // An active popup disable hovering on other windows (apart from its own children)
    // FIXME-OPT: This could be cached/stored within the window.
    ImGuiContext& g = *GImGui;
    if (g.NavWindow)
        if (ImGuiWindow* focused_root_window = g.NavWindow->RootWindow)
            if (focused_root_window->WasActive && focused_root_window != window->RootWindow)
            {
                // For the purpose of those flags we differentiate "standard popup" from "modal popup"
                // NB: The order of those two tests is important because Modal windows are also Popups.
                if (focused_root_window->Flags & ImGuiWindowFlags_Modal)
                    return false;
                if ((focused_root_window->Flags & ImGuiWindowFlags_Popup) && !(flags & ImGuiHoveredFlags_AllowWhenBlockedByPopup))
                    return false;
            }

    return true;
}

// Advance cursor given item size for layout.
void ImGui::ItemSize(const ImVec2& size, float text_baseline_y)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    if (window->SkipItems)
        return;

    // We increase the height in this function to accommodate for baseline offset.
    // In theory we should be offsetting the starting position (window->DC.CursorPos), that will be the topic of a larger refactor,
    // but since ItemSize() is not yet an API that moves the cursor (to handle e.g. wrapping) enlarging the height has the same effect.
    const float offset_to_match_baseline_y = (text_baseline_y >= 0) ? ImMax(0.0f, window->DC.CurrLineTextBaseOffset - text_baseline_y) : 0.0f;
    const float line_height = ImMax(window->DC.CurrLineSize.y, size.y + offset_to_match_baseline_y);

    // Always align ourselves on pixel boundaries
    //if (g.IO.KeyAlt) window->DrawList->AddRect(window->DC.CursorPos, window->DC.CursorPos + ImVec2(size.x, line_height), IM_COL32(255,0,0,200)); // [DEBUG]
    window->DC.CursorPosPrevLine.x = window->DC.CursorPos.x + size.x;
    window->DC.CursorPosPrevLine.y = window->DC.CursorPos.y;
    window->DC.CursorPos.x = IM_FLOOR(window->Pos.x + window->DC.Indent.x + window->DC.ColumnsOffset.x);    // Next line
    window->DC.CursorPos.y = IM_FLOOR(window->DC.CursorPos.y + line_height + g.Style.ItemSpacing.y);        // Next line
    window->DC.CursorMaxPos.x = ImMax(window->DC.CursorMaxPos.x, window->DC.CursorPosPrevLine.x);
    window->DC.CursorMaxPos.y = ImMax(window->DC.CursorMaxPos.y, window->DC.CursorPos.y - g.Style.ItemSpacing.y);
    //if (g.IO.KeyAlt) window->DrawList->AddCircle(window->DC.CursorMaxPos, 3.0f, IM_COL32(255,0,0,255), 4); // [DEBUG]

    window->DC.PrevLineSize.y = line_height;
    window->DC.CurrLineSize.y = 0.0f;
    window->DC.PrevLineTextBaseOffset = ImMax(window->DC.CurrLineTextBaseOffset, text_baseline_y);
    window->DC.CurrLineTextBaseOffset = 0.0f;

    // Horizontal layout mode
    if (window->DC.LayoutType == ImGuiLayoutType_Horizontal)
        SameLine();
}

void ImGui::ItemSize(const ImRect& bb, float text_baseline_y)
{
    ItemSize(bb.GetSize(), text_baseline_y);
}

// Declare item bounding box for clipping and interaction.
// Note that the size can be different than the one provided to ItemSize(). Typically, widgets that spread over available surface
// declare their minimum size requirement to ItemSize() and then use a larger region for drawing/interaction, which is passed to ItemAdd().
bool ImGui::ItemAdd(const ImRect& bb, ImGuiID id, const ImRect* nav_bb_arg)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;

    if (id != 0)
    {
        // Navigation processing runs prior to clipping early-out
        //  (a) So that NavInitRequest can be honored, for newly opened windows to select a default widget
        //  (b) So that we can scroll up/down past clipped items. This adds a small O(N) cost to regular navigation requests
        //      unfortunately, but it is still limited to one window. It may not scale very well for windows with ten of
        //      thousands of item, but at least NavMoveRequest is only set on user interaction, aka maximum once a frame.
        //      We could early out with "if (is_clipped && !g.NavInitRequest) return false;" but when we wouldn't be able
        //      to reach unclipped widgets. This would work if user had explicit scrolling control (e.g. mapped on a stick).
        // We intentionally don't check if g.NavWindow != NULL because g.NavAnyRequest should only be set when it is non null.
        // If we crash on a NULL g.NavWindow we need to fix the bug elsewhere.
        window->DC.NavLayerActiveMaskNext |= window->DC.NavLayerCurrentMask;
        if (g.NavId == id || g.NavAnyRequest)
            if (g.NavWindow->RootWindowForNav == window->RootWindowForNav)
                if (window == g.NavWindow || ((window->Flags | g.NavWindow->Flags) & ImGuiWindowFlags_NavFlattened))
                    NavProcessItem(window, nav_bb_arg ? *nav_bb_arg : bb, id);

        // [DEBUG] Item Picker tool, when enabling the "extended" version we perform the check in ItemAdd()
#ifdef IMGUI_DEBUG_TOOL_ITEM_PICKER_EX
        if (id == g.DebugItemPickerBreakID)
        {
            IM_DEBUG_BREAK();
            g.DebugItemPickerBreakID = 0;
        }
#endif
    }

    window->DC.LastItemId = id;
    window->DC.LastItemRect = bb;
    window->DC.LastItemStatusFlags = ImGuiItemStatusFlags_None;
    g.NextItemData.Flags = ImGuiNextItemDataFlags_None;

#ifdef IMGUI_ENABLE_TEST_ENGINE
    if (id != 0)
        IMGUI_TEST_ENGINE_ITEM_ADD(nav_bb_arg ? *nav_bb_arg : bb, id);
#endif

    // Clipping test
    const bool is_clipped = IsClippedEx(bb, id, false);
    if (is_clipped)
        return false;
    //if (g.IO.KeyAlt) window->DrawList->AddRect(bb.Min, bb.Max, IM_COL32(255,255,0,120)); // [DEBUG]

    // We need to calculate this now to take account of the current clipping rectangle (as items like Selectable may change them)
    if (IsMouseHoveringRect(bb.Min, bb.Max))
        window->DC.LastItemStatusFlags |= ImGuiItemStatusFlags_HoveredRect;
    return true;
}

// This is roughly matching the behavior of internal-facing ItemHoverable()
// - we allow hovering to be true when ActiveId==window->MoveID, so that clicking on non-interactive items such as a Text() item still returns true with IsItemHovered()
// - this should work even for non-interactive items that have no ID, so we cannot use LastItemId
bool ImGui::IsItemHovered(ImGuiHoveredFlags flags)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    if (g.NavDisableMouseHover && !g.NavDisableHighlight)
        return IsItemFocused();

    // Test for bounding box overlap, as updated as ItemAdd()
    if (!(window->DC.LastItemStatusFlags & ImGuiItemStatusFlags_HoveredRect))
        return false;
    IM_ASSERT((flags & (ImGuiHoveredFlags_RootWindow | ImGuiHoveredFlags_ChildWindows)) == 0);   // Flags not supported by this function

    // Test if we are hovering the right window (our window could be behind another window)
    // [2017/10/16] Reverted commit 344d48be3 and testing RootWindow instead. I believe it is correct to NOT test for RootWindow but this leaves us unable to use IsItemHovered() after EndChild() itself.
    // Until a solution is found I believe reverting to the test from 2017/09/27 is safe since this was the test that has been running for a long while.
    //if (g.HoveredWindow != window)
    //    return false;
    if (g.HoveredRootWindow != window->RootWindow && !(flags & ImGuiHoveredFlags_AllowWhenOverlapped))
        return false;

    // Test if another item is active (e.g. being dragged)
    if (!(flags & ImGuiHoveredFlags_AllowWhenBlockedByActiveItem))
        if (g.ActiveId != 0 && g.ActiveId != window->DC.LastItemId && !g.ActiveIdAllowOverlap && g.ActiveId != window->MoveId)
            return false;

    // Test if interactions on this window are blocked by an active popup or modal.
    // The ImGuiHoveredFlags_AllowWhenBlockedByPopup flag will be tested here.
    if (!IsWindowContentHoverable(window, flags))
        return false;

    // Test if the item is disabled
    if ((window->DC.ItemFlags & ImGuiItemFlags_Disabled) && !(flags & ImGuiHoveredFlags_AllowWhenDisabled))
        return false;

    // Special handling for the dummy item after Begin() which represent the title bar or tab.
    // When the window is collapsed (SkipItems==true) that last item will never be overwritten so we need to detect the case.
    if (window->DC.LastItemId == window->MoveId && window->WriteAccessed)
        return false;
    return true;
}

// Internal facing ItemHoverable() used when submitting widgets. Differs slightly from IsItemHovered().
bool ImGui::ItemHoverable(const ImRect& bb, ImGuiID id)
{
    ImGuiContext& g = *GImGui;
    if (g.HoveredId != 0 && g.HoveredId != id && !g.HoveredIdAllowOverlap)
        return false;

    ImGuiWindow* window = g.CurrentWindow;
    if (g.HoveredWindow != window)
        return false;
    if (g.ActiveId != 0 && g.ActiveId != id && !g.ActiveIdAllowOverlap)
        return false;
    if (!IsMouseHoveringRect(bb.Min, bb.Max))
        return false;
    if (g.NavDisableMouseHover || !IsWindowContentHoverable(window, ImGuiHoveredFlags_None))
        return false;
    if (window->DC.ItemFlags & ImGuiItemFlags_Disabled)
        return false;

    SetHoveredID(id);

    // [DEBUG] Item Picker tool!
    // We perform the check here because SetHoveredID() is not frequently called (1~ time a frame), making
    // the cost of this tool near-zero. We can get slightly better call-stack and support picking non-hovered
    // items if we perform the test in ItemAdd(), but that would incur a small runtime cost.
    // #define IMGUI_DEBUG_TOOL_ITEM_PICKER_EX in imconfig.h if you want this check to also be performed in ItemAdd().
    if (g.DebugItemPickerActive && g.HoveredIdPreviousFrame == id)
        GetForegroundDrawList()->AddRect(bb.Min, bb.Max, IM_COL32(255, 255, 0, 255));
    if (g.DebugItemPickerBreakID == id)
        IM_DEBUG_BREAK();

    return true;
}

bool ImGui::IsClippedEx(const ImRect& bb, ImGuiID id, bool clip_even_when_logged)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    if (!bb.Overlaps(window->ClipRect))
        if (id == 0 || id != g.ActiveId)
            if (clip_even_when_logged || !g.LogEnabled)
                return true;
    return false;
}

// Process TAB/Shift+TAB. Be mindful that this function may _clear_ the ActiveID when tabbing out.
bool ImGui::FocusableItemRegister(ImGuiWindow* window, ImGuiID id)
{
    ImGuiContext& g = *GImGui;

    // Increment counters
    const bool is_tab_stop = (window->DC.ItemFlags & (ImGuiItemFlags_NoTabStop | ImGuiItemFlags_Disabled)) == 0;
    window->DC.FocusCounterAll++;
    if (is_tab_stop)
        window->DC.FocusCounterTab++;

    // Process TAB/Shift-TAB to tab *OUT* of the currently focused item.
    // (Note that we can always TAB out of a widget that doesn't allow tabbing in)
    if (g.ActiveId == id && g.FocusTabPressed && !IsActiveIdUsingKey(ImGuiKey_Tab) && g.FocusRequestNextWindow == NULL)
    {
        g.FocusRequestNextWindow = window;
        g.FocusRequestNextCounterTab = window->DC.FocusCounterTab + (g.IO.KeyShift ? (is_tab_stop ? -1 : 0) : +1); // Modulo on index will be applied at the end of frame once we've got the total counter of items.
    }

    // Handle focus requests
    if (g.FocusRequestCurrWindow == window)
    {
        if (window->DC.FocusCounterAll == g.FocusRequestCurrCounterAll)
            return true;
        if (is_tab_stop && window->DC.FocusCounterTab == g.FocusRequestCurrCounterTab)
        {
            g.NavJustTabbedId = id;
            return true;
        }

        // If another item is about to be focused, we clear our own active id
        if (g.ActiveId == id)
            ClearActiveID();
    }

    return false;
}

void ImGui::FocusableItemUnregister(ImGuiWindow* window)
{
    window->DC.FocusCounterAll--;
    window->DC.FocusCounterTab--;
}

float ImGui::CalcWrapWidthForPos(const ImVec2& pos, float wrap_pos_x)
{
    if (wrap_pos_x < 0.0f)
        return 0.0f;

    ImGuiWindow* window = GImGui->CurrentWindow;
    if (wrap_pos_x == 0.0f)
        wrap_pos_x = window->WorkRect.Max.x;
    else if (wrap_pos_x > 0.0f)
        wrap_pos_x += window->Pos.x - window->Scroll.x; // wrap_pos_x is provided is window local space

    return ImMax(wrap_pos_x - pos.x, 1.0f);
}

// IM_ALLOC() == ImGui::MemAlloc()
void* ImGui::MemAlloc(size_t size)
{
    if (ImGuiContext* ctx = GImGui)
        ctx->IO.MetricsActiveAllocations++;
    return GImAllocatorAllocFunc(size, GImAllocatorUserData);
}

// IM_FREE() == ImGui::MemFree()
void ImGui::MemFree(void* ptr)
{
    if (ptr)
        if (ImGuiContext* ctx = GImGui)
            ctx->IO.MetricsActiveAllocations--;
    return GImAllocatorFreeFunc(ptr, GImAllocatorUserData);
}

const char* ImGui::GetClipboardText()
{
    ImGuiContext& g = *GImGui;
    return g.IO.GetClipboardTextFn ? g.IO.GetClipboardTextFn(g.IO.ClipboardUserData) : "";
}

void ImGui::SetClipboardText(const char* text)
{
    ImGuiContext& g = *GImGui;
    if (g.IO.SetClipboardTextFn)
        g.IO.SetClipboardTextFn(g.IO.ClipboardUserData, text);
}

const char* ImGui::GetVersion()
{
    return IMGUI_VERSION;
}

// Internal state access - if you want to share Dear ImGui state between modules (e.g. DLL) or allocate it yourself
// Note that we still point to some static data and members (such as GFontAtlas), so the state instance you end up using will point to the static data within its module
ImGuiContext* ImGui::GetCurrentContext()
{
    return GImGui;
}

void ImGui::SetCurrentContext(ImGuiContext* ctx)
{
#ifdef IMGUI_SET_CURRENT_CONTEXT_FUNC
    IMGUI_SET_CURRENT_CONTEXT_FUNC(ctx); // For custom thread-based hackery you may want to have control over this.
#else
    GImGui = ctx;
#endif
}

// Helper function to verify ABI compatibility between caller code and compiled version of Dear ImGui.
// Verify that the type sizes are matching between the calling file's compilation unit and imgui.cpp's compilation unit
// If the user has inconsistent compilation settings, imgui configuration #define, packing pragma, etc. your user code
// may see different structures than what imgui.cpp sees, which is problematic.
// We usually require settings to be in imconfig.h to make sure that they are accessible to all compilation units involved with Dear ImGui.
bool ImGui::DebugCheckVersionAndDataLayout(const char* version, size_t sz_io, size_t sz_style, size_t sz_vec2, size_t sz_vec4, size_t sz_vert, size_t sz_idx)
{
    bool error = false;
    if (strcmp(version, IMGUI_VERSION)!=0) { error = true; IM_ASSERT(strcmp(version,IMGUI_VERSION)==0 && "Mismatched version string!");  }
    if (sz_io    != sizeof(ImGuiIO))       { error = true; IM_ASSERT(sz_io    == sizeof(ImGuiIO)      && "Mismatched struct layout!"); }
    if (sz_style != sizeof(ImGuiStyle))    { error = true; IM_ASSERT(sz_style == sizeof(ImGuiStyle)   && "Mismatched struct layout!"); }
    if (sz_vec2  != sizeof(ImVec2))        { error = true; IM_ASSERT(sz_vec2  == sizeof(ImVec2)       && "Mismatched struct layout!"); }
    if (sz_vec4  != sizeof(ImVec4))        { error = true; IM_ASSERT(sz_vec4  == sizeof(ImVec4)       && "Mismatched struct layout!"); }
    if (sz_vert  != sizeof(ImDrawVert))    { error = true; IM_ASSERT(sz_vert  == sizeof(ImDrawVert)   && "Mismatched struct layout!"); }
    if (sz_idx   != sizeof(ImDrawIdx))     { error = true; IM_ASSERT(sz_idx   == sizeof(ImDrawIdx)    && "Mismatched struct layout!"); }
    return !error;
}

void ImGui::SetAllocatorFunctions(void* (*alloc_func)(size_t sz, void* user_data), void (*free_func)(void* ptr, void* user_data), void* user_data)
{
    GImAllocatorAllocFunc = alloc_func;
    GImAllocatorFreeFunc = free_func;
    GImAllocatorUserData = user_data;
}

ImGuiContext* ImGui::CreateContext(ImFontAtlas* shared_font_atlas)
{
    ImGuiContext* ctx = IM_NEW(ImGuiContext)(shared_font_atlas);
    if (GImGui == NULL)
        SetCurrentContext(ctx);
    Initialize(ctx);
    return ctx;
}

void ImGui::DestroyContext(ImGuiContext* ctx)
{
    if (ctx == NULL)
        ctx = GImGui;
    Shutdown(ctx);
    if (GImGui == ctx)
        SetCurrentContext(NULL);
    IM_DELETE(ctx);
}

ImGuiIO& ImGui::GetIO()
{
    IM_ASSERT(GImGui != NULL && "No current context. Did you call ImGui::CreateContext() and ImGui::SetCurrentContext() ?");
    return GImGui->IO;
}

ImGuiStyle& ImGui::GetStyle()
{
    IM_ASSERT(GImGui != NULL && "No current context. Did you call ImGui::CreateContext() and ImGui::SetCurrentContext() ?");
    return GImGui->Style;
}

// Same value as passed to the old io.RenderDrawListsFn function. Valid after Render() and until the next call to NewFrame()
ImDrawData* ImGui::GetDrawData()
{
    ImGuiContext& g = *GImGui;
    return g.DrawData.Valid ? &g.DrawData : NULL;
}

double ImGui::GetTime()
{
    return GImGui->Time;
}

int ImGui::GetFrameCount()
{
    return GImGui->FrameCount;
}

ImDrawList* ImGui::GetBackgroundDrawList()
{
    return &GImGui->BackgroundDrawList;
}

ImDrawList* ImGui::GetForegroundDrawList()
{
    return &GImGui->ForegroundDrawList;
}

ImDrawListSharedData* ImGui::GetDrawListSharedData()
{
    return &GImGui->DrawListSharedData;
}

void ImGui::StartMouseMovingWindow(ImGuiWindow* window)
{
    // Set ActiveId even if the _NoMove flag is set. Without it, dragging away from a window with _NoMove would activate hover on other windows.
    // We _also_ call this when clicking in a window empty space when io.ConfigWindowsMoveFromTitleBarOnly is set, but clear g.MovingWindow afterward.
    // This is because we want ActiveId to be set even when the window is not permitted to move.
    ImGuiContext& g = *GImGui;
    FocusWindow(window);
    SetActiveID(window->MoveId, window);
    g.NavDisableHighlight = true;
    g.ActiveIdClickOffset = g.IO.MousePos - window->RootWindow->Pos;

    bool can_move_window = true;
    if ((window->Flags & ImGuiWindowFlags_NoMove) || (window->RootWindow->Flags & ImGuiWindowFlags_NoMove))
        can_move_window = false;
    if (can_move_window)
        g.MovingWindow = window;
}

// Handle mouse moving window
// Note: moving window with the navigation keys (Square + d-pad / CTRL+TAB + Arrows) are processed in NavUpdateWindowing()
void ImGui::UpdateMouseMovingWindowNewFrame()
{
    ImGuiContext& g = *GImGui;
    if (g.MovingWindow != NULL)
    {
        // We actually want to move the root window. g.MovingWindow == window we clicked on (could be a child window).
        // We track it to preserve Focus and so that generally ActiveIdWindow == MovingWindow and ActiveId == MovingWindow->MoveId for consistency.
        KeepAliveID(g.ActiveId);
        IM_ASSERT(g.MovingWindow && g.MovingWindow->RootWindow);
        ImGuiWindow* moving_window = g.MovingWindow->RootWindow;
        if (g.IO.MouseDown[0] && IsMousePosValid(&g.IO.MousePos))
        {
            ImVec2 pos = g.IO.MousePos - g.ActiveIdClickOffset;
            if (moving_window->Pos.x != pos.x || moving_window->Pos.y != pos.y)
            {
                MarkIniSettingsDirty(moving_window);
                SetWindowPos(moving_window, pos, ImGuiCond_Always);
            }
            FocusWindow(g.MovingWindow);
        }
        else
        {
            ClearActiveID();
            g.MovingWindow = NULL;
        }
    }
    else
    {
        // When clicking/dragging from a window that has the _NoMove flag, we still set the ActiveId in order to prevent hovering others.
        if (g.ActiveIdWindow && g.ActiveIdWindow->MoveId == g.ActiveId)
        {
            KeepAliveID(g.ActiveId);
            if (!g.IO.MouseDown[0])
                ClearActiveID();
        }
    }
}

// Initiate moving window, handle left-click and right-click focus
void ImGui::UpdateMouseMovingWindowEndFrame()
{
    // Initiate moving window
    ImGuiContext& g = *GImGui;
    if (g.ActiveId != 0 || g.HoveredId != 0)
        return;

    // Unless we just made a window/popup appear
    if (g.NavWindow && g.NavWindow->Appearing)
        return;

    // Click to focus window and start moving (after we're done with all our widgets)
    if (g.IO.MouseClicked[0])
    {
        if (g.HoveredRootWindow != NULL)
        {
            StartMouseMovingWindow(g.HoveredWindow);
            if (g.IO.ConfigWindowsMoveFromTitleBarOnly && !(g.HoveredRootWindow->Flags & ImGuiWindowFlags_NoTitleBar))
                if (!g.HoveredRootWindow->TitleBarRect().Contains(g.IO.MouseClickedPos[0]))
                    g.MovingWindow = NULL;
        }
        else if (g.NavWindow != NULL && GetTopMostPopupModal() == NULL)
        {
            // Clicking on void disable focus
            FocusWindow(NULL);
        }
    }

    // With right mouse button we close popups without changing focus based on where the mouse is aimed
    // Instead, focus will be restored to the window under the bottom-most closed popup.
    // (The left mouse button path calls FocusWindow on the hovered window, which will lead NewFrame->ClosePopupsOverWindow to trigger)
    if (g.IO.MouseClicked[1])
    {
        // Find the top-most window between HoveredWindow and the top-most Modal Window.
        // This is where we can trim the popup stack.
        ImGuiWindow* modal = GetTopMostPopupModal();
        bool hovered_window_above_modal = false;
        if (modal == NULL)
            hovered_window_above_modal = true;
        for (int i = g.Windows.Size - 1; i >= 0 && hovered_window_above_modal == false; i--)
        {
            ImGuiWindow* window = g.Windows[i];
            if (window == modal)
                break;
            if (window == g.HoveredWindow)
                hovered_window_above_modal = true;
        }
        ClosePopupsOverWindow(hovered_window_above_modal ? g.HoveredWindow : modal, true);
    }
}

static bool IsWindowActiveAndVisible(ImGuiWindow* window)
{
    return (window->Active) && (!window->Hidden);
}

static void ImGui::UpdateMouseInputs()
{
    ImGuiContext& g = *GImGui;

    // Round mouse position to avoid spreading non-rounded position (e.g. UpdateManualResize doesn't support them well)
    if (IsMousePosValid(&g.IO.MousePos))
        g.IO.MousePos = g.LastValidMousePos = ImFloor(g.IO.MousePos);

    // If mouse just appeared or disappeared (usually denoted by -FLT_MAX components) we cancel out movement in MouseDelta
    if (IsMousePosValid(&g.IO.MousePos) && IsMousePosValid(&g.IO.MousePosPrev))
        g.IO.MouseDelta = g.IO.MousePos - g.IO.MousePosPrev;
    else
        g.IO.MouseDelta = ImVec2(0.0f, 0.0f);
    if (g.IO.MouseDelta.x != 0.0f || g.IO.MouseDelta.y != 0.0f)
        g.NavDisableMouseHover = false;

    g.IO.MousePosPrev = g.IO.MousePos;
    for (int i = 0; i < IM_ARRAYSIZE(g.IO.MouseDown); i++)
    {
        g.IO.MouseClicked[i] = g.IO.MouseDown[i] && g.IO.MouseDownDuration[i] < 0.0f;
        g.IO.MouseReleased[i] = !g.IO.MouseDown[i] && g.IO.MouseDownDuration[i] >= 0.0f;
        g.IO.MouseDownDurationPrev[i] = g.IO.MouseDownDuration[i];
        g.IO.MouseDownDuration[i] = g.IO.MouseDown[i] ? (g.IO.MouseDownDuration[i] < 0.0f ? 0.0f : g.IO.MouseDownDuration[i] + g.IO.DeltaTime) : -1.0f;
        g.IO.MouseDoubleClicked[i] = false;
        if (g.IO.MouseClicked[i])
        {
            if ((float)(g.Time - g.IO.MouseClickedTime[i]) < g.IO.MouseDoubleClickTime)
            {
                ImVec2 delta_from_click_pos = IsMousePosValid(&g.IO.MousePos) ? (g.IO.MousePos - g.IO.MouseClickedPos[i]) : ImVec2(0.0f, 0.0f);
                if (ImLengthSqr(delta_from_click_pos) < g.IO.MouseDoubleClickMaxDist * g.IO.MouseDoubleClickMaxDist)
                    g.IO.MouseDoubleClicked[i] = true;
                g.IO.MouseClickedTime[i] = -FLT_MAX;    // so the third click isn't turned into a double-click
            }
            else
            {
                g.IO.MouseClickedTime[i] = g.Time;
            }
            g.IO.MouseClickedPos[i] = g.IO.MousePos;
            g.IO.MouseDownWasDoubleClick[i] = g.IO.MouseDoubleClicked[i];
            g.IO.MouseDragMaxDistanceAbs[i] = ImVec2(0.0f, 0.0f);
            g.IO.MouseDragMaxDistanceSqr[i] = 0.0f;
        }
        else if (g.IO.MouseDown[i])
        {
            // Maintain the maximum distance we reaching from the initial click position, which is used with dragging threshold
            ImVec2 delta_from_click_pos = IsMousePosValid(&g.IO.MousePos) ? (g.IO.MousePos - g.IO.MouseClickedPos[i]) : ImVec2(0.0f, 0.0f);
            g.IO.MouseDragMaxDistanceSqr[i] = ImMax(g.IO.MouseDragMaxDistanceSqr[i], ImLengthSqr(delta_from_click_pos));
            g.IO.MouseDragMaxDistanceAbs[i].x = ImMax(g.IO.MouseDragMaxDistanceAbs[i].x, delta_from_click_pos.x < 0.0f ? -delta_from_click_pos.x : delta_from_click_pos.x);
            g.IO.MouseDragMaxDistanceAbs[i].y = ImMax(g.IO.MouseDragMaxDistanceAbs[i].y, delta_from_click_pos.y < 0.0f ? -delta_from_click_pos.y : delta_from_click_pos.y);
        }
        if (!g.IO.MouseDown[i] && !g.IO.MouseReleased[i])
            g.IO.MouseDownWasDoubleClick[i] = false;
        if (g.IO.MouseClicked[i]) // Clicking any mouse button reactivate mouse hovering which may have been deactivated by gamepad/keyboard navigation
            g.NavDisableMouseHover = false;
    }
}

static void StartLockWheelingWindow(ImGuiWindow* window)
{
    ImGuiContext& g = *GImGui;
    if (g.WheelingWindow == window)
        return;
    g.WheelingWindow = window;
    g.WheelingWindowRefMousePos = g.IO.MousePos;
    g.WheelingWindowTimer = WINDOWS_MOUSE_WHEEL_SCROLL_LOCK_TIMER;
}

void ImGui::UpdateMouseWheel()
{
    ImGuiContext& g = *GImGui;

    // Reset the locked window if we move the mouse or after the timer elapses
    if (g.WheelingWindow != NULL)
    {
        g.WheelingWindowTimer -= g.IO.DeltaTime;
        if (IsMousePosValid() && ImLengthSqr(g.IO.MousePos - g.WheelingWindowRefMousePos) > g.IO.MouseDragThreshold * g.IO.MouseDragThreshold)
            g.WheelingWindowTimer = 0.0f;
        if (g.WheelingWindowTimer <= 0.0f)
        {
            g.WheelingWindow = NULL;
            g.WheelingWindowTimer = 0.0f;
        }
    }

    if (g.IO.MouseWheel == 0.0f && g.IO.MouseWheelH == 0.0f)
        return;

    ImGuiWindow* window = g.WheelingWindow ? g.WheelingWindow : g.HoveredWindow;
    if (!window || window->Collapsed)
        return;

    // Zoom / Scale window
    // FIXME-OBSOLETE: This is an old feature, it still works but pretty much nobody is using it and may be best redesigned.
    if (g.IO.MouseWheel != 0.0f && g.IO.KeyCtrl && g.IO.FontAllowUserScaling)
    {
        StartLockWheelingWindow(window);
        const float new_font_scale = ImClamp(window->FontWindowScale + g.IO.MouseWheel * 0.10f, 0.50f, 2.50f);
        const float scale = new_font_scale / window->FontWindowScale;
        window->FontWindowScale = new_font_scale;
        if (!(window->Flags & ImGuiWindowFlags_ChildWindow))
        {
            const ImVec2 offset = window->Size * (1.0f - scale) * (g.IO.MousePos - window->Pos) / window->Size;
            SetWindowPos(window, window->Pos + offset, 0);
            window->Size = ImFloor(window->Size * scale);
            window->SizeFull = ImFloor(window->SizeFull * scale);
        }
        return;
    }

    // Mouse wheel scrolling
    // If a child window has the ImGuiWindowFlags_NoScrollWithMouse flag, we give a chance to scroll its parent

    // Vertical Mouse Wheel scrolling
    const float wheel_y = (g.IO.MouseWheel != 0.0f && !g.IO.KeyShift) ? g.IO.MouseWheel : 0.0f;
    if (wheel_y != 0.0f && !g.IO.KeyCtrl)
    {
        StartLockWheelingWindow(window);
        while ((window->Flags & ImGuiWindowFlags_ChildWindow) && ((window->ScrollMax.y == 0.0f) || ((window->Flags & ImGuiWindowFlags_NoScrollWithMouse) && !(window->Flags & ImGuiWindowFlags_NoMouseInputs))))
            window = window->ParentWindow;
        if (!(window->Flags & ImGuiWindowFlags_NoScrollWithMouse) && !(window->Flags & ImGuiWindowFlags_NoMouseInputs))
        {
            float max_step = window->InnerRect.GetHeight() * 0.67f;
            float scroll_step = ImFloor(ImMin(5 * window->CalcFontSize(), max_step));
            SetScrollY(window, window->Scroll.y - wheel_y * scroll_step);
        }
    }

    // Horizontal Mouse Wheel scrolling, or Vertical Mouse Wheel w/ Shift held
    const float wheel_x = (g.IO.MouseWheelH != 0.0f && !g.IO.KeyShift) ? g.IO.MouseWheelH : (g.IO.MouseWheel != 0.0f && g.IO.KeyShift) ? g.IO.MouseWheel : 0.0f;
    if (wheel_x != 0.0f && !g.IO.KeyCtrl)
    {
        StartLockWheelingWindow(window);
        while ((window->Flags & ImGuiWindowFlags_ChildWindow) && ((window->ScrollMax.x == 0.0f) || ((window->Flags & ImGuiWindowFlags_NoScrollWithMouse) && !(window->Flags & ImGuiWindowFlags_NoMouseInputs))))
            window = window->ParentWindow;
        if (!(window->Flags & ImGuiWindowFlags_NoScrollWithMouse) && !(window->Flags & ImGuiWindowFlags_NoMouseInputs))
        {
            float max_step = window->InnerRect.GetWidth() * 0.67f;
            float scroll_step = ImFloor(ImMin(2 * window->CalcFontSize(), max_step));
            SetScrollX(window, window->Scroll.x - wheel_x * scroll_step);
        }
    }
}

// The reason this is exposed in imgui_internal.h is: on touch-based system that don't have hovering, we want to dispatch inputs to the right target (imgui vs imgui+app)
void ImGui::UpdateHoveredWindowAndCaptureFlags()
{
    ImGuiContext& g = *GImGui;

    // Find the window hovered by mouse:
    // - Child windows can extend beyond the limit of their parent so we need to derive HoveredRootWindow from HoveredWindow.
    // - When moving a window we can skip the search, which also conveniently bypasses the fact that window->WindowRectClipped is lagging as this point of the frame.
    // - We also support the moved window toggling the NoInputs flag after moving has started in order to be able to detect windows below it, which is useful for e.g. docking mechanisms.
    FindHoveredWindow();

    // Modal windows prevents cursor from hovering behind them.
    ImGuiWindow* modal_window = GetTopMostPopupModal();
    if (modal_window)
        if (g.HoveredRootWindow && !IsWindowChildOf(g.HoveredRootWindow, modal_window))
            g.HoveredRootWindow = g.HoveredWindow = NULL;

    // Disabled mouse?
    if (g.IO.ConfigFlags & ImGuiConfigFlags_NoMouse)
        g.HoveredWindow = g.HoveredRootWindow = NULL;

    // We track click ownership. When clicked outside of a window the click is owned by the application and won't report hovering nor request capture even while dragging over our windows afterward.
    int mouse_earliest_button_down = -1;
    bool mouse_any_down = false;
    for (int i = 0; i < IM_ARRAYSIZE(g.IO.MouseDown); i++)
    {
        if (g.IO.MouseClicked[i])
            g.IO.MouseDownOwned[i] = (g.HoveredWindow != NULL) || (!g.OpenPopupStack.empty());
        mouse_any_down |= g.IO.MouseDown[i];
        if (g.IO.MouseDown[i])
            if (mouse_earliest_button_down == -1 || g.IO.MouseClickedTime[i] < g.IO.MouseClickedTime[mouse_earliest_button_down])
                mouse_earliest_button_down = i;
    }
    const bool mouse_avail_to_imgui = (mouse_earliest_button_down == -1) || g.IO.MouseDownOwned[mouse_earliest_button_down];

    // If mouse was first clicked outside of ImGui bounds we also cancel out hovering.
    // FIXME: For patterns of drag and drop across OS windows, we may need to rework/remove this test (first committed 311c0ca9 on 2015/02)
    const bool mouse_dragging_extern_payload = g.DragDropActive && (g.DragDropSourceFlags & ImGuiDragDropFlags_SourceExtern) != 0;
    if (!mouse_avail_to_imgui && !mouse_dragging_extern_payload)
        g.HoveredWindow = g.HoveredRootWindow = NULL;

    // Update io.WantCaptureMouse for the user application (true = dispatch mouse info to imgui, false = dispatch mouse info to Dear ImGui + app)
    if (g.WantCaptureMouseNextFrame != -1)
        g.IO.WantCaptureMouse = (g.WantCaptureMouseNextFrame != 0);
    else
        g.IO.WantCaptureMouse = (mouse_avail_to_imgui && (g.HoveredWindow != NULL || mouse_any_down)) || (!g.OpenPopupStack.empty());

    // Update io.WantCaptureKeyboard for the user application (true = dispatch keyboard info to imgui, false = dispatch keyboard info to Dear ImGui + app)
    if (g.WantCaptureKeyboardNextFrame != -1)
        g.IO.WantCaptureKeyboard = (g.WantCaptureKeyboardNextFrame != 0);
    else
        g.IO.WantCaptureKeyboard = (g.ActiveId != 0) || (modal_window != NULL);
    if (g.IO.NavActive && (g.IO.ConfigFlags & ImGuiConfigFlags_NavEnableKeyboard) && !(g.IO.ConfigFlags & ImGuiConfigFlags_NavNoCaptureKeyboard))
        g.IO.WantCaptureKeyboard = true;

    // Update io.WantTextInput flag, this is to allow systems without a keyboard (e.g. mobile, hand-held) to show a software keyboard if possible
    g.IO.WantTextInput = (g.WantTextInputNextFrame != -1) ? (g.WantTextInputNextFrame != 0) : false;
}

static void NewFrameSanityChecks()
{
    ImGuiContext& g = *GImGui;

    // Check user data
    // (We pass an error message in the assert expression to make it visible to programmers who are not using a debugger, as most assert handlers display their argument)
    IM_ASSERT(g.Initialized);
    IM_ASSERT((g.IO.DeltaTime > 0.0f || g.FrameCount == 0)              && "Need a positive DeltaTime!");
    IM_ASSERT((g.FrameCount == 0 || g.FrameCountEnded == g.FrameCount)  && "Forgot to call Render() or EndFrame() at the end of the previous frame?");
    IM_ASSERT(g.IO.DisplaySize.x >= 0.0f && g.IO.DisplaySize.y >= 0.0f  && "Invalid DisplaySize value!");
    IM_ASSERT(g.IO.Fonts->Fonts.Size > 0                                && "Font Atlas not built. Did you call io.Fonts->GetTexDataAsRGBA32() / GetTexDataAsAlpha8() ?");
    IM_ASSERT(g.IO.Fonts->Fonts[0]->IsLoaded()                          && "Font Atlas not built. Did you call io.Fonts->GetTexDataAsRGBA32() / GetTexDataAsAlpha8() ?");
    IM_ASSERT(g.Style.CurveTessellationTol > 0.0f                       && "Invalid style setting!");
    IM_ASSERT(g.Style.Alpha >= 0.0f && g.Style.Alpha <= 1.0f            && "Invalid style setting. Alpha cannot be negative (allows us to avoid a few clamps in color computations)!");
    IM_ASSERT(g.Style.WindowMinSize.x >= 1.0f && g.Style.WindowMinSize.y >= 1.0f && "Invalid style setting.");
    IM_ASSERT(g.Style.WindowMenuButtonPosition == ImGuiDir_None || g.Style.WindowMenuButtonPosition == ImGuiDir_Left || g.Style.WindowMenuButtonPosition == ImGuiDir_Right);
    for (int n = 0; n < ImGuiKey_COUNT; n++)
        IM_ASSERT(g.IO.KeyMap[n] >= -1 && g.IO.KeyMap[n] < IM_ARRAYSIZE(g.IO.KeysDown) && "io.KeyMap[] contains an out of bound value (need to be 0..512, or -1 for unmapped key)");

    // Perform simple check: required key mapping (we intentionally do NOT check all keys to not pressure user into setting up everything, but Space is required and was only recently added in 1.60 WIP)
    if (g.IO.ConfigFlags & ImGuiConfigFlags_NavEnableKeyboard)
        IM_ASSERT(g.IO.KeyMap[ImGuiKey_Space] != -1 && "ImGuiKey_Space is not mapped, required for keyboard navigation.");

    // Perform simple check: the beta io.ConfigWindowsResizeFromEdges option requires back-end to honor mouse cursor changes and set the ImGuiBackendFlags_HasMouseCursors flag accordingly.
    if (g.IO.ConfigWindowsResizeFromEdges && !(g.IO.BackendFlags & ImGuiBackendFlags_HasMouseCursors))
        g.IO.ConfigWindowsResizeFromEdges = false;
}

void ImGui::NewFrame()
{
    IM_ASSERT(GImGui != NULL && "No current context. Did you call ImGui::CreateContext() and ImGui::SetCurrentContext() ?");
    ImGuiContext& g = *GImGui;

#ifdef IMGUI_ENABLE_TEST_ENGINE
    ImGuiTestEngineHook_PreNewFrame(&g);
#endif

    // Check and assert for various common IO and Configuration mistakes
    NewFrameSanityChecks();

    // Load settings on first frame (if not explicitly loaded manually before)
    if (!g.SettingsLoaded)
    {
        IM_ASSERT(g.SettingsWindows.empty());
        if (g.IO.IniFilename)
            LoadIniSettingsFromDisk(g.IO.IniFilename);
        g.SettingsLoaded = true;
    }

    // Save settings (with a delay after the last modification, so we don't spam disk too much)
    if (g.SettingsDirtyTimer > 0.0f)
    {
        g.SettingsDirtyTimer -= g.IO.DeltaTime;
        if (g.SettingsDirtyTimer <= 0.0f)
        {
            if (g.IO.IniFilename != NULL)
                SaveIniSettingsToDisk(g.IO.IniFilename);
            else
                g.IO.WantSaveIniSettings = true;  // Let user know they can call SaveIniSettingsToMemory(). user will need to clear io.WantSaveIniSettings themselves.
            g.SettingsDirtyTimer = 0.0f;
        }
    }

    g.Time += g.IO.DeltaTime;
    g.WithinFrameScope = true;
    g.FrameCount += 1;
    g.TooltipOverrideCount = 0;
    g.WindowsActiveCount = 0;

    // Setup current font and draw list shared data
    g.IO.Fonts->Locked = true;
    SetCurrentFont(GetDefaultFont());
    IM_ASSERT(g.Font->IsLoaded());
    g.DrawListSharedData.ClipRectFullscreen = ImVec4(0.0f, 0.0f, g.IO.DisplaySize.x, g.IO.DisplaySize.y);
    g.DrawListSharedData.CurveTessellationTol = g.Style.CurveTessellationTol;
    g.DrawListSharedData.InitialFlags = ImDrawListFlags_None;
    if (g.Style.AntiAliasedLines)
        g.DrawListSharedData.InitialFlags |= ImDrawListFlags_AntiAliasedLines;
    if (g.Style.AntiAliasedFill)
        g.DrawListSharedData.InitialFlags |= ImDrawListFlags_AntiAliasedFill;
    if (g.IO.BackendFlags & ImGuiBackendFlags_RendererHasVtxOffset)
        g.DrawListSharedData.InitialFlags |= ImDrawListFlags_AllowVtxOffset;

    g.BackgroundDrawList.Clear();
    g.BackgroundDrawList.PushTextureID(g.IO.Fonts->TexID);
    g.BackgroundDrawList.PushClipRectFullScreen();

    g.ForegroundDrawList.Clear();
    g.ForegroundDrawList.PushTextureID(g.IO.Fonts->TexID);
    g.ForegroundDrawList.PushClipRectFullScreen();

    // Mark rendering data as invalid to prevent user who may have a handle on it to use it.
    g.DrawData.Clear();

    // Drag and drop keep the source ID alive so even if the source disappear our state is consistent
    if (g.DragDropActive && g.DragDropPayload.SourceId == g.ActiveId)
        KeepAliveID(g.DragDropPayload.SourceId);

    // Clear reference to active widget if the widget isn't alive anymore
    if (!g.HoveredIdPreviousFrame)
        g.HoveredIdTimer = 0.0f;
    if (!g.HoveredIdPreviousFrame || (g.HoveredId && g.ActiveId == g.HoveredId))
        g.HoveredIdNotActiveTimer = 0.0f;
    if (g.HoveredId)
        g.HoveredIdTimer += g.IO.DeltaTime;
    if (g.HoveredId && g.ActiveId != g.HoveredId)
        g.HoveredIdNotActiveTimer += g.IO.DeltaTime;
    g.HoveredIdPreviousFrame = g.HoveredId;
    g.HoveredId = 0;
    g.HoveredIdAllowOverlap = false;
    if (g.ActiveIdIsAlive != g.ActiveId && g.ActiveIdPreviousFrame == g.ActiveId && g.ActiveId != 0)
        ClearActiveID();
    if (g.ActiveId)
        g.ActiveIdTimer += g.IO.DeltaTime;
    g.LastActiveIdTimer += g.IO.DeltaTime;
    g.ActiveIdPreviousFrame = g.ActiveId;
    g.ActiveIdPreviousFrameWindow = g.ActiveIdWindow;
    g.ActiveIdPreviousFrameHasBeenEditedBefore = g.ActiveIdHasBeenEditedBefore;
    g.ActiveIdIsAlive = 0;
    g.ActiveIdHasBeenEditedThisFrame = false;
    g.ActiveIdPreviousFrameIsAlive = false;
    g.ActiveIdIsJustActivated = false;
    if (g.TempInputTextId != 0 && g.ActiveId != g.TempInputTextId)
        g.TempInputTextId = 0;
    if (g.ActiveId == 0)
    {
        g.ActiveIdUsingNavDirMask = g.ActiveIdUsingNavInputMask = 0;
        g.ActiveIdUsingKeyInputMask = 0;
    }

    // Drag and drop
    g.DragDropAcceptIdPrev = g.DragDropAcceptIdCurr;
    g.DragDropAcceptIdCurr = 0;
    g.DragDropAcceptIdCurrRectSurface = FLT_MAX;
    g.DragDropWithinSourceOrTarget = false;

    // Update keyboard input state
    memcpy(g.IO.KeysDownDurationPrev, g.IO.KeysDownDuration, sizeof(g.IO.KeysDownDuration));
    for (int i = 0; i < IM_ARRAYSIZE(g.IO.KeysDown); i++)
        g.IO.KeysDownDuration[i] = g.IO.KeysDown[i] ? (g.IO.KeysDownDuration[i] < 0.0f ? 0.0f : g.IO.KeysDownDuration[i] + g.IO.DeltaTime) : -1.0f;

    // Update gamepad/keyboard directional navigation
    NavUpdate();

    // Update mouse input state
    UpdateMouseInputs();

    // Calculate frame-rate for the user, as a purely luxurious feature
    g.FramerateSecPerFrameAccum += g.IO.DeltaTime - g.FramerateSecPerFrame[g.FramerateSecPerFrameIdx];
    g.FramerateSecPerFrame[g.FramerateSecPerFrameIdx] = g.IO.DeltaTime;
    g.FramerateSecPerFrameIdx = (g.FramerateSecPerFrameIdx + 1) % IM_ARRAYSIZE(g.FramerateSecPerFrame);
    g.IO.Framerate = (g.FramerateSecPerFrameAccum > 0.0f) ? (1.0f / (g.FramerateSecPerFrameAccum / (float)IM_ARRAYSIZE(g.FramerateSecPerFrame))) : FLT_MAX;

    // Find hovered window
    // (needs to be before UpdateMouseMovingWindowNewFrame so we fill g.HoveredWindowUnderMovingWindow on the mouse release frame)
    UpdateHoveredWindowAndCaptureFlags();

    // Handle user moving window with mouse (at the beginning of the frame to avoid input lag or sheering)
    UpdateMouseMovingWindowNewFrame();

    // Background darkening/whitening
    if (GetTopMostPopupModal() != NULL || (g.NavWindowingTarget != NULL && g.NavWindowingHighlightAlpha > 0.0f))
        g.DimBgRatio = ImMin(g.DimBgRatio + g.IO.DeltaTime * 6.0f, 1.0f);
    else
        g.DimBgRatio = ImMax(g.DimBgRatio - g.IO.DeltaTime * 10.0f, 0.0f);

    g.MouseCursor = ImGuiMouseCursor_Arrow;
    g.WantCaptureMouseNextFrame = g.WantCaptureKeyboardNextFrame = g.WantTextInputNextFrame = -1;
    g.PlatformImePos = ImVec2(1.0f, 1.0f); // OS Input Method Editor showing on top-left of our window by default

    // Mouse wheel scrolling, scale
    UpdateMouseWheel();

    // Pressing TAB activate widget focus
    g.FocusTabPressed = (g.NavWindow && g.NavWindow->Active && !(g.NavWindow->Flags & ImGuiWindowFlags_NoNavInputs) && !g.IO.KeyCtrl && IsKeyPressedMap(ImGuiKey_Tab));
    if (g.ActiveId == 0 && g.FocusTabPressed)
    {
        // Note that SetKeyboardFocusHere() sets the Next fields mid-frame. To be consistent we also
        // manipulate the Next fields even, even though they will be turned into Curr fields by the code below.
        g.FocusRequestNextWindow = g.NavWindow;
        g.FocusRequestNextCounterAll = INT_MAX;
        if (g.NavId != 0 && g.NavIdTabCounter != INT_MAX)
            g.FocusRequestNextCounterTab = g.NavIdTabCounter + 1 + (g.IO.KeyShift ? -1 : 1);
        else
            g.FocusRequestNextCounterTab = g.IO.KeyShift ? -1 : 0;
    }

    // Turn queued focus request into current one
    g.FocusRequestCurrWindow = NULL;
    g.FocusRequestCurrCounterAll = g.FocusRequestCurrCounterTab = INT_MAX;
    if (g.FocusRequestNextWindow != NULL)
    {
        ImGuiWindow* window = g.FocusRequestNextWindow;
        g.FocusRequestCurrWindow = window;
        if (g.FocusRequestNextCounterAll != INT_MAX && window->DC.FocusCounterAll != -1)
            g.FocusRequestCurrCounterAll = ImModPositive(g.FocusRequestNextCounterAll, window->DC.FocusCounterAll + 1);
        if (g.FocusRequestNextCounterTab != INT_MAX && window->DC.FocusCounterTab != -1)
            g.FocusRequestCurrCounterTab = ImModPositive(g.FocusRequestNextCounterTab, window->DC.FocusCounterTab + 1);
        g.FocusRequestNextWindow = NULL;
        g.FocusRequestNextCounterAll = g.FocusRequestNextCounterTab = INT_MAX;
    }

    g.NavIdTabCounter = INT_MAX;

    // Mark all windows as not visible and compact unused memory.
    IM_ASSERT(g.WindowsFocusOrder.Size == g.Windows.Size);
    const float memory_compact_start_time = (g.IO.ConfigWindowsMemoryCompactTimer >= 0.0f) ? (float)g.Time - g.IO.ConfigWindowsMemoryCompactTimer : FLT_MAX;
    for (int i = 0; i != g.Windows.Size; i++)
    {
        ImGuiWindow* window = g.Windows[i];
        window->WasActive = window->Active;
        window->BeginCount = 0;
        window->Active = false;
        window->WriteAccessed = false;

        // Garbage collect (this is totally functional but we may need decide if the side-effects are desirable)
        if (!window->WasActive && !window->MemoryCompacted && window->LastTimeActive < memory_compact_start_time)
            GcCompactTransientWindowBuffers(window);
    }

    // Closing the focused window restore focus to the first active root window in descending z-order
    if (g.NavWindow && !g.NavWindow->WasActive)
        FocusTopMostWindowUnderOne(NULL, NULL);

    // No window should be open at the beginning of the frame.
    // But in order to allow the user to call NewFrame() multiple times without calling Render(), we are doing an explicit clear.
    g.CurrentWindowStack.resize(0);
    g.BeginPopupStack.resize(0);
    ClosePopupsOverWindow(g.NavWindow, false);

    // [DEBUG] Item picker tool - start with DebugStartItemPicker() - useful to visually select an item and break into its call-stack.
    UpdateDebugToolItemPicker();

    // Create implicit/fallback window - which we will only render it if the user has added something to it.
    // We don't use "Debug" to avoid colliding with user trying to create a "Debug" window with custom flags.
    // This fallback is particularly important as it avoid ImGui:: calls from crashing.
    SetNextWindowSize(ImVec2(400,400), ImGuiCond_FirstUseEver);
    Begin("Debug##Default");
    g.WithinFrameScopeWithImplicitWindow = true;

#ifdef IMGUI_ENABLE_TEST_ENGINE
    ImGuiTestEngineHook_PostNewFrame(&g);
#endif
}

// [DEBUG] Item picker tool - start with DebugStartItemPicker() - useful to visually select an item and break into its call-stack.
void ImGui::UpdateDebugToolItemPicker()
{
    ImGuiContext& g = *GImGui;
    g.DebugItemPickerBreakID = 0;
    if (g.DebugItemPickerActive)
    {
        const ImGuiID hovered_id = g.HoveredIdPreviousFrame;
        ImGui::SetMouseCursor(ImGuiMouseCursor_Hand);
        if (ImGui::IsKeyPressedMap(ImGuiKey_Escape))
            g.DebugItemPickerActive = false;
        if (ImGui::IsMouseClicked(0) && hovered_id)
        {
            g.DebugItemPickerBreakID = hovered_id;
            g.DebugItemPickerActive = false;
        }
        ImGui::SetNextWindowBgAlpha(0.60f);
        ImGui::BeginTooltip();
        ImGui::Text("HoveredId: 0x%08X", hovered_id);
        ImGui::Text("Press ESC to abort picking.");
        ImGui::TextColored(GetStyleColorVec4(hovered_id ? ImGuiCol_Text : ImGuiCol_TextDisabled), "Click to break in debugger!");
        ImGui::EndTooltip();
    }
}

void ImGui::Initialize(ImGuiContext* context)
{
    ImGuiContext& g = *context;
    IM_ASSERT(!g.Initialized && !g.SettingsLoaded);

    // Add .ini handle for ImGuiWindow type
    {
        ImGuiSettingsHandler ini_handler;
        ini_handler.TypeName = "Window";
        ini_handler.TypeHash = ImHashStr("Window");
        ini_handler.ReadOpenFn = WindowSettingsHandler_ReadOpen;
        ini_handler.ReadLineFn = WindowSettingsHandler_ReadLine;
        ini_handler.WriteAllFn = WindowSettingsHandler_WriteAll;
        g.SettingsHandlers.push_back(ini_handler);
    }

    g.Initialized = true;
}

// This function is merely here to free heap allocations.
void ImGui::Shutdown(ImGuiContext* context)
{
    // The fonts atlas can be used prior to calling NewFrame(), so we clear it even if g.Initialized is FALSE (which would happen if we never called NewFrame)
    ImGuiContext& g = *context;
    if (g.IO.Fonts && g.FontAtlasOwnedByContext)
    {
        g.IO.Fonts->Locked = false;
        IM_DELETE(g.IO.Fonts);
    }
    g.IO.Fonts = NULL;

    // Cleanup of other data are conditional on actually having initialized Dear ImGui.
    if (!g.Initialized)
        return;

    // Save settings (unless we haven't attempted to load them: CreateContext/DestroyContext without a call to NewFrame shouldn't save an empty file)
    if (g.SettingsLoaded && g.IO.IniFilename != NULL)
    {
        ImGuiContext* backup_context = GImGui;
        SetCurrentContext(context);
        SaveIniSettingsToDisk(g.IO.IniFilename);
        SetCurrentContext(backup_context);
    }

    // Clear everything else
    for (int i = 0; i < g.Windows.Size; i++)
        IM_DELETE(g.Windows[i]);
    g.Windows.clear();
    g.WindowsFocusOrder.clear();
    g.WindowsSortBuffer.clear();
    g.CurrentWindow = NULL;
    g.CurrentWindowStack.clear();
    g.WindowsById.Clear();
    g.NavWindow = NULL;
    g.HoveredWindow = g.HoveredRootWindow = NULL;
    g.ActiveIdWindow = g.ActiveIdPreviousFrameWindow = NULL;
    g.MovingWindow = NULL;
    g.ColorModifiers.clear();
    g.StyleModifiers.clear();
    g.FontStack.clear();
    g.OpenPopupStack.clear();
    g.BeginPopupStack.clear();
    g.DrawDataBuilder.ClearFreeMemory();
    g.BackgroundDrawList.ClearFreeMemory();
    g.ForegroundDrawList.ClearFreeMemory();

    g.TabBars.Clear();
    g.CurrentTabBarStack.clear();
    g.ShrinkWidthBuffer.clear();

    g.PrivateClipboard.clear();
    g.InputTextState.ClearFreeMemory();

    g.SettingsWindows.clear();
    g.SettingsHandlers.clear();

    if (g.LogFile)
    {
#ifndef IMGUI_DISABLE_TTY_FUNCTIONS
        if (g.LogFile != stdout)
#endif
            ImFileClose(g.LogFile);
        g.LogFile = NULL;
    }
    g.LogBuffer.clear();

    g.Initialized = false;
}

// FIXME: Add a more explicit sort order in the window structure.
static int IMGUI_CDECL ChildWindowComparer(const void* lhs, const void* rhs)
{
    const ImGuiWindow* const a = *(const ImGuiWindow* const *)lhs;
    const ImGuiWindow* const b = *(const ImGuiWindow* const *)rhs;
    if (int d = (a->Flags & ImGuiWindowFlags_Popup) - (b->Flags & ImGuiWindowFlags_Popup))
        return d;
    if (int d = (a->Flags & ImGuiWindowFlags_Tooltip) - (b->Flags & ImGuiWindowFlags_Tooltip))
        return d;
    return (a->BeginOrderWithinParent - b->BeginOrderWithinParent);
}

static void AddWindowToSortBuffer(ImVector<ImGuiWindow*>* out_sorted_windows, ImGuiWindow* window)
{
    out_sorted_windows->push_back(window);
    if (window->Active)
    {
        int count = window->DC.ChildWindows.Size;
        if (count > 1)
            ImQsort(window->DC.ChildWindows.Data, (size_t)count, sizeof(ImGuiWindow*), ChildWindowComparer);
        for (int i = 0; i < count; i++)
        {
            ImGuiWindow* child = window->DC.ChildWindows[i];
            if (child->Active)
                AddWindowToSortBuffer(out_sorted_windows, child);
        }
    }
}

static void AddDrawListToDrawData(ImVector<ImDrawList*>* out_list, ImDrawList* draw_list)
{
    if (draw_list->CmdBuffer.empty())
        return;

    // Remove trailing command if unused
    ImDrawCmd& last_cmd = draw_list->CmdBuffer.back();
    if (last_cmd.ElemCount == 0 && last_cmd.UserCallback == NULL)
    {
        draw_list->CmdBuffer.pop_back();
        if (draw_list->CmdBuffer.empty())
            return;
    }

    // Draw list sanity check. Detect mismatch between PrimReserve() calls and incrementing _VtxCurrentIdx, _VtxWritePtr etc.
    // May trigger for you if you are using PrimXXX functions incorrectly.
    IM_ASSERT(draw_list->VtxBuffer.Size == 0 || draw_list->_VtxWritePtr == draw_list->VtxBuffer.Data + draw_list->VtxBuffer.Size);
    IM_ASSERT(draw_list->IdxBuffer.Size == 0 || draw_list->_IdxWritePtr == draw_list->IdxBuffer.Data + draw_list->IdxBuffer.Size);
    if (!(draw_list->Flags & ImDrawListFlags_AllowVtxOffset))
        IM_ASSERT((int)draw_list->_VtxCurrentIdx == draw_list->VtxBuffer.Size);

    // Check that draw_list doesn't use more vertices than indexable (default ImDrawIdx = unsigned short = 2 bytes = 64K vertices per ImDrawList = per window)
    // If this assert triggers because you are drawing lots of stuff manually:
    // - First, make sure you are coarse clipping yourself and not trying to draw many things outside visible bounds.
    //   Be mindful that the ImDrawList API doesn't filter vertices. Use the Metrics window to inspect draw list contents.
    // - If you want large meshes with more than 64K vertices, you can either:
    //   (A) Handle the ImDrawCmd::VtxOffset value in your renderer back-end, and set 'io.BackendFlags |= ImGuiBackendFlags_RendererHasVtxOffset'.
    //       Most example back-ends already support this from 1.71. Pre-1.71 back-ends won't.
    //       Some graphics API such as GL ES 1/2 don't have a way to offset the starting vertex so it is not supported for them.
    //   (B) Or handle 32-bit indices in your renderer back-end, and uncomment '#define ImDrawIdx unsigned int' line in imconfig.h.
    //       Most example back-ends already support this. For example, the OpenGL example code detect index size at compile-time:
    //         glDrawElements(GL_TRIANGLES, (GLsizei)pcmd->ElemCount, sizeof(ImDrawIdx) == 2 ? GL_UNSIGNED_SHORT : GL_UNSIGNED_INT, idx_buffer_offset);
    //       Your own engine or render API may use different parameters or function calls to specify index sizes.
    //       2 and 4 bytes indices are generally supported by most graphics API.
    // - If for some reason neither of those solutions works for you, a workaround is to call BeginChild()/EndChild() before reaching
    //   the 64K limit to split your draw commands in multiple draw lists.
    if (sizeof(ImDrawIdx) == 2)
        IM_ASSERT(draw_list->_VtxCurrentIdx < (1 << 16) && "Too many vertices in ImDrawList using 16-bit indices. Read comment above");

    out_list->push_back(draw_list);
}

static void AddWindowToDrawData(ImVector<ImDrawList*>* out_render_list, ImGuiWindow* window)
{
    ImGuiContext& g = *GImGui;
    g.IO.MetricsRenderWindows++;
    AddDrawListToDrawData(out_render_list, window->DrawList);
    for (int i = 0; i < window->DC.ChildWindows.Size; i++)
    {
        ImGuiWindow* child = window->DC.ChildWindows[i];
        if (IsWindowActiveAndVisible(child)) // clipped children may have been marked not active
            AddWindowToDrawData(out_render_list, child);
    }
}

// Layer is locked for the root window, however child windows may use a different viewport (e.g. extruding menu)
static void AddRootWindowToDrawData(ImGuiWindow* window)
{
    ImGuiContext& g = *GImGui;
    if (window->Flags & ImGuiWindowFlags_Tooltip)
        AddWindowToDrawData(&g.DrawDataBuilder.Layers[1], window);
    else
        AddWindowToDrawData(&g.DrawDataBuilder.Layers[0], window);
}

void ImDrawDataBuilder::FlattenIntoSingleLayer()
{
    int n = Layers[0].Size;
    int size = n;
    for (int i = 1; i < IM_ARRAYSIZE(Layers); i++)
        size += Layers[i].Size;
    Layers[0].resize(size);
    for (int layer_n = 1; layer_n < IM_ARRAYSIZE(Layers); layer_n++)
    {
        ImVector<ImDrawList*>& layer = Layers[layer_n];
        if (layer.empty())
            continue;
        memcpy(&Layers[0][n], &layer[0], layer.Size * sizeof(ImDrawList*));
        n += layer.Size;
        layer.resize(0);
    }
}

static void SetupDrawData(ImVector<ImDrawList*>* draw_lists, ImDrawData* draw_data)
{
    ImGuiIO& io = ImGui::GetIO();
    draw_data->Valid = true;
    draw_data->CmdLists = (draw_lists->Size > 0) ? draw_lists->Data : NULL;
    draw_data->CmdListsCount = draw_lists->Size;
    draw_data->TotalVtxCount = draw_data->TotalIdxCount = 0;
    draw_data->DisplayPos = ImVec2(0.0f, 0.0f);
    draw_data->DisplaySize = io.DisplaySize;
    draw_data->FramebufferScale = io.DisplayFramebufferScale;
    for (int n = 0; n < draw_lists->Size; n++)
    {
        draw_data->TotalVtxCount += draw_lists->Data[n]->VtxBuffer.Size;
        draw_data->TotalIdxCount += draw_lists->Data[n]->IdxBuffer.Size;
    }
}

// When using this function it is sane to ensure that float are perfectly rounded to integer values, to that e.g. (int)(max.x-min.x) in user's render produce correct result.
void ImGui::PushClipRect(const ImVec2& clip_rect_min, const ImVec2& clip_rect_max, bool intersect_with_current_clip_rect)
{
    ImGuiWindow* window = GetCurrentWindow();
    window->DrawList->PushClipRect(clip_rect_min, clip_rect_max, intersect_with_current_clip_rect);
    window->ClipRect = window->DrawList->_ClipRectStack.back();
}

void ImGui::PopClipRect()
{
    ImGuiWindow* window = GetCurrentWindow();
    window->DrawList->PopClipRect();
    window->ClipRect = window->DrawList->_ClipRectStack.back();
}

// This is normally called by Render(). You may want to call it directly if you want to avoid calling Render() but the gain will be very minimal.
void ImGui::EndFrame()
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(g.Initialized);
    if (g.FrameCountEnded == g.FrameCount)          // Don't process EndFrame() multiple times.
        return;
    IM_ASSERT(g.WithinFrameScope && "Forgot to call ImGui::NewFrame()?");

    // Notify OS when our Input Method Editor cursor has moved (e.g. CJK inputs using Microsoft IME)
    if (g.IO.ImeSetInputScreenPosFn && (g.PlatformImeLastPos.x == FLT_MAX || ImLengthSqr(g.PlatformImeLastPos - g.PlatformImePos) > 0.0001f))
    {
        g.IO.ImeSetInputScreenPosFn((int)g.PlatformImePos.x, (int)g.PlatformImePos.y);
        g.PlatformImeLastPos = g.PlatformImePos;
    }

    ErrorCheckEndFrame();

    // Hide implicit/fallback "Debug" window if it hasn't been used
    g.WithinFrameScopeWithImplicitWindow = false;
    if (g.CurrentWindow && !g.CurrentWindow->WriteAccessed)
        g.CurrentWindow->Active = false;
    End();

    // Show CTRL+TAB list window
    if (g.NavWindowingTarget != NULL)
        NavUpdateWindowingOverlay();

    // Drag and Drop: Elapse payload (if delivered, or if source stops being submitted)
    if (g.DragDropActive)
    {
        bool is_delivered = g.DragDropPayload.Delivery;
        bool is_elapsed = (g.DragDropPayload.DataFrameCount + 1 < g.FrameCount) && ((g.DragDropSourceFlags & ImGuiDragDropFlags_SourceAutoExpirePayload) || !IsMouseDown(g.DragDropMouseButton));
        if (is_delivered || is_elapsed)
            ClearDragDrop();
    }

    // Drag and Drop: Fallback for source tooltip. This is not ideal but better than nothing.
    if (g.DragDropActive && g.DragDropSourceFrameCount < g.FrameCount)
    {
        g.DragDropWithinSourceOrTarget = true;
        SetTooltip("...");
        g.DragDropWithinSourceOrTarget = false;
    }

    // End frame
    g.WithinFrameScope = false;
    g.FrameCountEnded = g.FrameCount;

    // Initiate moving window + handle left-click and right-click focus
    UpdateMouseMovingWindowEndFrame();

    // Sort the window list so that all child windows are after their parent
    // We cannot do that on FocusWindow() because childs may not exist yet
    g.WindowsSortBuffer.resize(0);
    g.WindowsSortBuffer.reserve(g.Windows.Size);
    for (int i = 0; i != g.Windows.Size; i++)
    {
        ImGuiWindow* window = g.Windows[i];
        if (window->Active && (window->Flags & ImGuiWindowFlags_ChildWindow))       // if a child is active its parent will add it
            continue;
        AddWindowToSortBuffer(&g.WindowsSortBuffer, window);
    }

    // This usually assert if there is a mismatch between the ImGuiWindowFlags_ChildWindow / ParentWindow values and DC.ChildWindows[] in parents, aka we've done something wrong.
    IM_ASSERT(g.Windows.Size == g.WindowsSortBuffer.Size);
    g.Windows.swap(g.WindowsSortBuffer);
    g.IO.MetricsActiveWindows = g.WindowsActiveCount;

    // Unlock font atlas
    g.IO.Fonts->Locked = false;

    // Clear Input data for next frame
    g.IO.MouseWheel = g.IO.MouseWheelH = 0.0f;
    g.IO.InputQueueCharacters.resize(0);
    memset(g.IO.NavInputs, 0, sizeof(g.IO.NavInputs));
}

void ImGui::Render()
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(g.Initialized);

    if (g.FrameCountEnded != g.FrameCount)
        EndFrame();
    g.FrameCountRendered = g.FrameCount;

    // Gather ImDrawList to render (for each active window)
    g.IO.MetricsRenderVertices = g.IO.MetricsRenderIndices = g.IO.MetricsRenderWindows = 0;
    g.DrawDataBuilder.Clear();
    if (!g.BackgroundDrawList.VtxBuffer.empty())
        AddDrawListToDrawData(&g.DrawDataBuilder.Layers[0], &g.BackgroundDrawList);

    ImGuiWindow* windows_to_render_top_most[2];
    windows_to_render_top_most[0] = (g.NavWindowingTarget && !(g.NavWindowingTarget->Flags & ImGuiWindowFlags_NoBringToFrontOnFocus)) ? g.NavWindowingTarget->RootWindow : NULL;
    windows_to_render_top_most[1] = g.NavWindowingTarget ? g.NavWindowingList : NULL;
    for (int n = 0; n != g.Windows.Size; n++)
    {
        ImGuiWindow* window = g.Windows[n];
        if (IsWindowActiveAndVisible(window) && (window->Flags & ImGuiWindowFlags_ChildWindow) == 0 && window != windows_to_render_top_most[0] && window != windows_to_render_top_most[1])
            AddRootWindowToDrawData(window);
    }
    for (int n = 0; n < IM_ARRAYSIZE(windows_to_render_top_most); n++)
        if (windows_to_render_top_most[n] && IsWindowActiveAndVisible(windows_to_render_top_most[n])) // NavWindowingTarget is always temporarily displayed as the top-most window
            AddRootWindowToDrawData(windows_to_render_top_most[n]);
    g.DrawDataBuilder.FlattenIntoSingleLayer();

    // Draw software mouse cursor if requested
    if (g.IO.MouseDrawCursor)
        RenderMouseCursor(&g.ForegroundDrawList, g.IO.MousePos, g.Style.MouseCursorScale, g.MouseCursor, IM_COL32_WHITE, IM_COL32_BLACK, IM_COL32(0, 0, 0, 48));

    if (!g.ForegroundDrawList.VtxBuffer.empty())
        AddDrawListToDrawData(&g.DrawDataBuilder.Layers[0], &g.ForegroundDrawList);

    // Setup ImDrawData structure for end-user
    SetupDrawData(&g.DrawDataBuilder.Layers[0], &g.DrawData);
    g.IO.MetricsRenderVertices = g.DrawData.TotalVtxCount;
    g.IO.MetricsRenderIndices = g.DrawData.TotalIdxCount;

    // (Legacy) Call the Render callback function. The current prefer way is to let the user retrieve GetDrawData() and call the render function themselves.
#ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
    if (g.DrawData.CmdListsCount > 0 && g.IO.RenderDrawListsFn != NULL)
        g.IO.RenderDrawListsFn(&g.DrawData);
#endif
}

// Calculate text size. Text can be multi-line. Optionally ignore text after a ## marker.
// CalcTextSize("") should return ImVec2(0.0f, g.FontSize)
ImVec2 ImGui::CalcTextSize(const char* text, const char* text_end, bool hide_text_after_double_hash, float wrap_width)
{
    ImGuiContext& g = *GImGui;

    const char* text_display_end;
    if (hide_text_after_double_hash)
        text_display_end = FindRenderedTextEnd(text, text_end);      // Hide anything after a '##' string
    else
        text_display_end = text_end;

    ImFont* font = g.Font;
    const float font_size = g.FontSize;
    if (text == text_display_end)
        return ImVec2(0.0f, font_size);
    ImVec2 text_size = font->CalcTextSizeA(font_size, FLT_MAX, wrap_width, text, text_display_end, NULL);

    // Round
    text_size.x = IM_FLOOR(text_size.x + 0.95f);

    return text_size;
}

// Find window given position, search front-to-back
// FIXME: Note that we have an inconsequential lag here: OuterRectClipped is updated in Begin(), so windows moved programatically
// with SetWindowPos() and not SetNextWindowPos() will have that rectangle lagging by a frame at the time FindHoveredWindow() is
// called, aka before the next Begin(). Moving window isn't affected.
static void FindHoveredWindow()
{
    ImGuiContext& g = *GImGui;

    ImGuiWindow* hovered_window = NULL;
    if (g.MovingWindow && !(g.MovingWindow->Flags & ImGuiWindowFlags_NoMouseInputs))
        hovered_window = g.MovingWindow;

    ImVec2 padding_regular = g.Style.TouchExtraPadding;
    ImVec2 padding_for_resize_from_edges = g.IO.ConfigWindowsResizeFromEdges ? ImMax(g.Style.TouchExtraPadding, ImVec2(WINDOWS_RESIZE_FROM_EDGES_HALF_THICKNESS, WINDOWS_RESIZE_FROM_EDGES_HALF_THICKNESS)) : padding_regular;
    for (int i = g.Windows.Size - 1; i >= 0; i--)
    {
        ImGuiWindow* window = g.Windows[i];
        if (!window->Active || window->Hidden)
            continue;
        if (window->Flags & ImGuiWindowFlags_NoMouseInputs)
            continue;

        // Using the clipped AABB, a child window will typically be clipped by its parent (not always)
        ImRect bb(window->OuterRectClipped);
        if (window->Flags & (ImGuiWindowFlags_ChildWindow | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_AlwaysAutoResize))
            bb.Expand(padding_regular);
        else
            bb.Expand(padding_for_resize_from_edges);
        if (!bb.Contains(g.IO.MousePos))
            continue;

        // Those seemingly unnecessary extra tests are because the code here is a little different in viewport/docking branches.
        if (hovered_window == NULL)
            hovered_window = window;
        if (hovered_window)
            break;
    }

    g.HoveredWindow = hovered_window;
    g.HoveredRootWindow = g.HoveredWindow ? g.HoveredWindow->RootWindow : NULL;

}

// Test if mouse cursor is hovering given rectangle
// NB- Rectangle is clipped by our current clip setting
// NB- Expand the rectangle to be generous on imprecise inputs systems (g.Style.TouchExtraPadding)
bool ImGui::IsMouseHoveringRect(const ImVec2& r_min, const ImVec2& r_max, bool clip)
{
    ImGuiContext& g = *GImGui;

    // Clip
    ImRect rect_clipped(r_min, r_max);
    if (clip)
        rect_clipped.ClipWith(g.CurrentWindow->ClipRect);

    // Expand for touch input
    const ImRect rect_for_touch(rect_clipped.Min - g.Style.TouchExtraPadding, rect_clipped.Max + g.Style.TouchExtraPadding);
    if (!rect_for_touch.Contains(g.IO.MousePos))
        return false;
    return true;
}

int ImGui::GetKeyIndex(ImGuiKey imgui_key)
{
    IM_ASSERT(imgui_key >= 0 && imgui_key < ImGuiKey_COUNT);
    ImGuiContext& g = *GImGui;
    return g.IO.KeyMap[imgui_key];
}

// Note that dear imgui doesn't know the semantic of each entry of io.KeysDown[]!
// Use your own indices/enums according to how your back-end/engine stored them into io.KeysDown[]!
bool ImGui::IsKeyDown(int user_key_index)
{
    if (user_key_index < 0)
        return false;
    ImGuiContext& g = *GImGui;
    IM_ASSERT(user_key_index >= 0 && user_key_index < IM_ARRAYSIZE(g.IO.KeysDown));
    return g.IO.KeysDown[user_key_index];
}

// t0 = previous time (e.g.: g.Time - g.IO.DeltaTime)
// t1 = current time (e.g.: g.Time)
// An event is triggered at:
//  t = 0.0f     t = repeat_delay,    t = repeat_delay + repeat_rate*N
int ImGui::CalcTypematicRepeatAmount(float t0, float t1, float repeat_delay, float repeat_rate)
{
    if (t1 == 0.0f)
        return 1;
    if (t0 >= t1)
        return 0;
    if (repeat_rate <= 0.0f)
        return (t0 < repeat_delay) && (t1 >= repeat_delay);
    const int count_t0 = (t0 < repeat_delay) ? -1 : (int)((t0 - repeat_delay) / repeat_rate);
    const int count_t1 = (t1 < repeat_delay) ? -1 : (int)((t1 - repeat_delay) / repeat_rate);
    const int count = count_t1 - count_t0;
    return count;
}

int ImGui::GetKeyPressedAmount(int key_index, float repeat_delay, float repeat_rate)
{
    ImGuiContext& g = *GImGui;
    if (key_index < 0)
        return 0;
    IM_ASSERT(key_index >= 0 && key_index < IM_ARRAYSIZE(g.IO.KeysDown));
    const float t = g.IO.KeysDownDuration[key_index];
    return CalcTypematicRepeatAmount(t - g.IO.DeltaTime, t, repeat_delay, repeat_rate);
}

bool ImGui::IsKeyPressed(int user_key_index, bool repeat)
{
    ImGuiContext& g = *GImGui;
    if (user_key_index < 0)
        return false;
    IM_ASSERT(user_key_index >= 0 && user_key_index < IM_ARRAYSIZE(g.IO.KeysDown));
    const float t = g.IO.KeysDownDuration[user_key_index];
    if (t == 0.0f)
        return true;
    if (repeat && t > g.IO.KeyRepeatDelay)
        return GetKeyPressedAmount(user_key_index, g.IO.KeyRepeatDelay, g.IO.KeyRepeatRate) > 0;
    return false;
}

bool ImGui::IsKeyReleased(int user_key_index)
{
    ImGuiContext& g = *GImGui;
    if (user_key_index < 0) return false;
    IM_ASSERT(user_key_index >= 0 && user_key_index < IM_ARRAYSIZE(g.IO.KeysDown));
    return g.IO.KeysDownDurationPrev[user_key_index] >= 0.0f && !g.IO.KeysDown[user_key_index];
}

bool ImGui::IsMouseDown(ImGuiMouseButton button)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(button >= 0 && button < IM_ARRAYSIZE(g.IO.MouseDown));
    return g.IO.MouseDown[button];
}

bool ImGui::IsMouseClicked(ImGuiMouseButton button, bool repeat)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(button >= 0 && button < IM_ARRAYSIZE(g.IO.MouseDown));
    const float t = g.IO.MouseDownDuration[button];
    if (t == 0.0f)
        return true;

    if (repeat && t > g.IO.KeyRepeatDelay)
    {
        // FIXME: 2019/05/03: Our old repeat code was wrong here and led to doubling the repeat rate, which made it an ok rate for repeat on mouse hold.
        int amount = CalcTypematicRepeatAmount(t - g.IO.DeltaTime, t, g.IO.KeyRepeatDelay, g.IO.KeyRepeatRate * 0.50f);
        if (amount > 0)
            return true;
    }
    return false;
}

bool ImGui::IsMouseReleased(ImGuiMouseButton button)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(button >= 0 && button < IM_ARRAYSIZE(g.IO.MouseDown));
    return g.IO.MouseReleased[button];
}

bool ImGui::IsMouseDoubleClicked(ImGuiMouseButton button)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(button >= 0 && button < IM_ARRAYSIZE(g.IO.MouseDown));
    return g.IO.MouseDoubleClicked[button];
}

// [Internal] This doesn't test if the button is pressed
bool ImGui::IsMouseDragPastThreshold(ImGuiMouseButton button, float lock_threshold)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(button >= 0 && button < IM_ARRAYSIZE(g.IO.MouseDown));
    if (lock_threshold < 0.0f)
        lock_threshold = g.IO.MouseDragThreshold;
    return g.IO.MouseDragMaxDistanceSqr[button] >= lock_threshold * lock_threshold;
}

bool ImGui::IsMouseDragging(ImGuiMouseButton button, float lock_threshold)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(button >= 0 && button < IM_ARRAYSIZE(g.IO.MouseDown));
    if (!g.IO.MouseDown[button])
        return false;
    return IsMouseDragPastThreshold(button, lock_threshold);
}

ImVec2 ImGui::GetMousePos()
{
    ImGuiContext& g = *GImGui;
    return g.IO.MousePos;
}

// NB: prefer to call right after BeginPopup(). At the time Selectable/MenuItem is activated, the popup is already closed!
ImVec2 ImGui::GetMousePosOnOpeningCurrentPopup()
{
    ImGuiContext& g = *GImGui;
    if (g.BeginPopupStack.Size > 0)
        return g.OpenPopupStack[g.BeginPopupStack.Size-1].OpenMousePos;
    return g.IO.MousePos;
}

// We typically use ImVec2(-FLT_MAX,-FLT_MAX) to denote an invalid mouse position.
bool ImGui::IsMousePosValid(const ImVec2* mouse_pos)
{
    // The assert is only to silence a false-positive in XCode Static Analysis.
    // Because GImGui is not dereferenced in every code path, the static analyzer assume that it may be NULL (which it doesn't for other functions).
    IM_ASSERT(GImGui != NULL);
    const float MOUSE_INVALID = -256000.0f;
    ImVec2 p = mouse_pos ? *mouse_pos : GImGui->IO.MousePos;
    return p.x >= MOUSE_INVALID && p.y >= MOUSE_INVALID;
}

bool ImGui::IsAnyMouseDown()
{
    ImGuiContext& g = *GImGui;
    for (int n = 0; n < IM_ARRAYSIZE(g.IO.MouseDown); n++)
        if (g.IO.MouseDown[n])
            return true;
    return false;
}

// Return the delta from the initial clicking position while the mouse button is clicked or was just released.
// This is locked and return 0.0f until the mouse moves past a distance threshold at least once.
// NB: This is only valid if IsMousePosValid(). Back-ends in theory should always keep mouse position valid when dragging even outside the client window.
ImVec2 ImGui::GetMouseDragDelta(ImGuiMouseButton button, float lock_threshold)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(button >= 0 && button < IM_ARRAYSIZE(g.IO.MouseDown));
    if (lock_threshold < 0.0f)
        lock_threshold = g.IO.MouseDragThreshold;
    if (g.IO.MouseDown[button] || g.IO.MouseReleased[button])
        if (g.IO.MouseDragMaxDistanceSqr[button] >= lock_threshold * lock_threshold)
            if (IsMousePosValid(&g.IO.MousePos) && IsMousePosValid(&g.IO.MouseClickedPos[button]))
                return g.IO.MousePos - g.IO.MouseClickedPos[button];
    return ImVec2(0.0f, 0.0f);
}

void ImGui::ResetMouseDragDelta(ImGuiMouseButton button)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(button >= 0 && button < IM_ARRAYSIZE(g.IO.MouseDown));
    // NB: We don't need to reset g.IO.MouseDragMaxDistanceSqr
    g.IO.MouseClickedPos[button] = g.IO.MousePos;
}

ImGuiMouseCursor ImGui::GetMouseCursor()
{
    return GImGui->MouseCursor;
}

void ImGui::SetMouseCursor(ImGuiMouseCursor cursor_type)
{
    GImGui->MouseCursor = cursor_type;
}

void ImGui::CaptureKeyboardFromApp(bool capture)
{
    GImGui->WantCaptureKeyboardNextFrame = capture ? 1 : 0;
}

void ImGui::CaptureMouseFromApp(bool capture)
{
    GImGui->WantCaptureMouseNextFrame = capture ? 1 : 0;
}

bool ImGui::IsItemActive()
{
    ImGuiContext& g = *GImGui;
    if (g.ActiveId)
    {
        ImGuiWindow* window = g.CurrentWindow;
        return g.ActiveId == window->DC.LastItemId;
    }
    return false;
}

bool ImGui::IsItemActivated()
{
    ImGuiContext& g = *GImGui;
    if (g.ActiveId)
    {
        ImGuiWindow* window = g.CurrentWindow;
        if (g.ActiveId == window->DC.LastItemId && g.ActiveIdPreviousFrame != window->DC.LastItemId)
            return true;
    }
    return false;
}

bool ImGui::IsItemDeactivated()
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    if (window->DC.LastItemStatusFlags & ImGuiItemStatusFlags_HasDeactivated)
        return (window->DC.LastItemStatusFlags & ImGuiItemStatusFlags_Deactivated) != 0;
    return (g.ActiveIdPreviousFrame == window->DC.LastItemId && g.ActiveIdPreviousFrame != 0 && g.ActiveId != window->DC.LastItemId);
}

bool ImGui::IsItemDeactivatedAfterEdit()
{
    ImGuiContext& g = *GImGui;
    return IsItemDeactivated() && (g.ActiveIdPreviousFrameHasBeenEditedBefore || (g.ActiveId == 0 && g.ActiveIdHasBeenEditedBefore));
}

bool ImGui::IsItemFocused()
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;

    if (g.NavId == 0 || g.NavDisableHighlight || g.NavId != window->DC.LastItemId)
        return false;
    return true;
}

bool ImGui::IsItemClicked(ImGuiMouseButton mouse_button)
{
    return IsMouseClicked(mouse_button) && IsItemHovered(ImGuiHoveredFlags_None);
}

bool ImGui::IsItemToggledOpen()
{
    ImGuiContext& g = *GImGui;
    return (g.CurrentWindow->DC.LastItemStatusFlags & ImGuiItemStatusFlags_ToggledOpen) ? true : false;
}

bool ImGui::IsItemToggledSelection()
{
    ImGuiContext& g = *GImGui;
    return (g.CurrentWindow->DC.LastItemStatusFlags & ImGuiItemStatusFlags_ToggledSelection) ? true : false;
}

bool ImGui::IsAnyItemHovered()
{
    ImGuiContext& g = *GImGui;
    return g.HoveredId != 0 || g.HoveredIdPreviousFrame != 0;
}

bool ImGui::IsAnyItemActive()
{
    ImGuiContext& g = *GImGui;
    return g.ActiveId != 0;
}

bool ImGui::IsAnyItemFocused()
{
    ImGuiContext& g = *GImGui;
    return g.NavId != 0 && !g.NavDisableHighlight;
}

bool ImGui::IsItemVisible()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->ClipRect.Overlaps(window->DC.LastItemRect);
}

bool ImGui::IsItemEdited()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return (window->DC.LastItemStatusFlags & ImGuiItemStatusFlags_Edited) != 0;
}

// Allow last item to be overlapped by a subsequent item. Both may be activated during the same frame before the later one takes priority.
void ImGui::SetItemAllowOverlap()
{
    ImGuiContext& g = *GImGui;
    if (g.HoveredId == g.CurrentWindow->DC.LastItemId)
        g.HoveredIdAllowOverlap = true;
    if (g.ActiveId == g.CurrentWindow->DC.LastItemId)
        g.ActiveIdAllowOverlap = true;
}

ImVec2 ImGui::GetItemRectMin()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->DC.LastItemRect.Min;
}

ImVec2 ImGui::GetItemRectMax()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->DC.LastItemRect.Max;
}

ImVec2 ImGui::GetItemRectSize()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->DC.LastItemRect.GetSize();
}

static ImRect GetViewportRect()
{
    ImGuiContext& g = *GImGui;
    return ImRect(0.0f, 0.0f, g.IO.DisplaySize.x, g.IO.DisplaySize.y);
}

static bool ImGui::BeginChildEx(const char* name, ImGuiID id, const ImVec2& size_arg, bool border, ImGuiWindowFlags flags)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* parent_window = g.CurrentWindow;

    flags |= ImGuiWindowFlags_NoTitleBar|ImGuiWindowFlags_NoResize|ImGuiWindowFlags_NoSavedSettings|ImGuiWindowFlags_ChildWindow;
    flags |= (parent_window->Flags & ImGuiWindowFlags_NoMove);  // Inherit the NoMove flag

    // Size
    const ImVec2 content_avail = GetContentRegionAvail();
    ImVec2 size = ImFloor(size_arg);
    const int auto_fit_axises = ((size.x == 0.0f) ? (1 << ImGuiAxis_X) : 0x00) | ((size.y == 0.0f) ? (1 << ImGuiAxis_Y) : 0x00);
    if (size.x <= 0.0f)
        size.x = ImMax(content_avail.x + size.x, 4.0f); // Arbitrary minimum child size (0.0f causing too much issues)
    if (size.y <= 0.0f)
        size.y = ImMax(content_avail.y + size.y, 4.0f);
    SetNextWindowSize(size);

    // Build up name. If you need to append to a same child from multiple location in the ID stack, use BeginChild(ImGuiID id) with a stable value.
    char title[256];
    if (name)
        ImFormatString(title, IM_ARRAYSIZE(title), "%s/%s_%08X", parent_window->Name, name, id);
    else
        ImFormatString(title, IM_ARRAYSIZE(title), "%s/%08X", parent_window->Name, id);

    const float backup_border_size = g.Style.ChildBorderSize;
    if (!border)
        g.Style.ChildBorderSize = 0.0f;
    bool ret = Begin(title, NULL, flags);
    g.Style.ChildBorderSize = backup_border_size;

    ImGuiWindow* child_window = g.CurrentWindow;
    child_window->ChildId = id;
    child_window->AutoFitChildAxises = (ImS8)auto_fit_axises;

    // Set the cursor to handle case where the user called SetNextWindowPos()+BeginChild() manually.
    // While this is not really documented/defined, it seems that the expected thing to do.
    if (child_window->BeginCount == 1)
        parent_window->DC.CursorPos = child_window->Pos;

    // Process navigation-in immediately so NavInit can run on first frame
    if (g.NavActivateId == id && !(flags & ImGuiWindowFlags_NavFlattened) && (child_window->DC.NavLayerActiveMask != 0 || child_window->DC.NavHasScroll))
    {
        FocusWindow(child_window);
        NavInitWindow(child_window, false);
        SetActiveID(id+1, child_window); // Steal ActiveId with a dummy id so that key-press won't activate child item
        g.ActiveIdSource = ImGuiInputSource_Nav;
    }
    return ret;
}

bool ImGui::BeginChild(const char* str_id, const ImVec2& size_arg, bool border, ImGuiWindowFlags extra_flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    return BeginChildEx(str_id, window->GetID(str_id), size_arg, border, extra_flags);
}

bool ImGui::BeginChild(ImGuiID id, const ImVec2& size_arg, bool border, ImGuiWindowFlags extra_flags)
{
    IM_ASSERT(id != 0);
    return BeginChildEx(NULL, id, size_arg, border, extra_flags);
}

void ImGui::EndChild()
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;

    IM_ASSERT(g.WithinEndChild == false);
    IM_ASSERT(window->Flags & ImGuiWindowFlags_ChildWindow);   // Mismatched BeginChild()/EndChild() callss

    g.WithinEndChild = true;
    if (window->BeginCount > 1)
    {
        End();
    }
    else
    {
        ImVec2 sz = window->Size;
        if (window->AutoFitChildAxises & (1 << ImGuiAxis_X)) // Arbitrary minimum zero-ish child size of 4.0f causes less trouble than a 0.0f
            sz.x = ImMax(4.0f, sz.x);
        if (window->AutoFitChildAxises & (1 << ImGuiAxis_Y))
            sz.y = ImMax(4.0f, sz.y);
        End();

        ImGuiWindow* parent_window = g.CurrentWindow;
        ImRect bb(parent_window->DC.CursorPos, parent_window->DC.CursorPos + sz);
        ItemSize(sz);
        if ((window->DC.NavLayerActiveMask != 0 || window->DC.NavHasScroll) && !(window->Flags & ImGuiWindowFlags_NavFlattened))
        {
            ItemAdd(bb, window->ChildId);
            RenderNavHighlight(bb, window->ChildId);

            // When browsing a window that has no activable items (scroll only) we keep a highlight on the child
            if (window->DC.NavLayerActiveMask == 0 && window == g.NavWindow)
                RenderNavHighlight(ImRect(bb.Min - ImVec2(2,2), bb.Max + ImVec2(2,2)), g.NavId, ImGuiNavHighlightFlags_TypeThin);
        }
        else
        {
            // Not navigable into
            ItemAdd(bb, 0);
        }
    }
    g.WithinEndChild = false;
}

// Helper to create a child window / scrolling region that looks like a normal widget frame.
bool ImGui::BeginChildFrame(ImGuiID id, const ImVec2& size, ImGuiWindowFlags extra_flags)
{
    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    PushStyleColor(ImGuiCol_ChildBg, style.Colors[ImGuiCol_FrameBg]);
    PushStyleVar(ImGuiStyleVar_ChildRounding, style.FrameRounding);
    PushStyleVar(ImGuiStyleVar_ChildBorderSize, style.FrameBorderSize);
    PushStyleVar(ImGuiStyleVar_WindowPadding, style.FramePadding);
    bool ret = BeginChild(id, size, true, ImGuiWindowFlags_NoMove | ImGuiWindowFlags_AlwaysUseWindowPadding | extra_flags);
    PopStyleVar(3);
    PopStyleColor();
    return ret;
}

void ImGui::EndChildFrame()
{
    EndChild();
}

static void SetWindowConditionAllowFlags(ImGuiWindow* window, ImGuiCond flags, bool enabled)
{
    window->SetWindowPosAllowFlags       = enabled ? (window->SetWindowPosAllowFlags       | flags) : (window->SetWindowPosAllowFlags       & ~flags);
    window->SetWindowSizeAllowFlags      = enabled ? (window->SetWindowSizeAllowFlags      | flags) : (window->SetWindowSizeAllowFlags      & ~flags);
    window->SetWindowCollapsedAllowFlags = enabled ? (window->SetWindowCollapsedAllowFlags | flags) : (window->SetWindowCollapsedAllowFlags & ~flags);
}

ImGuiWindow* ImGui::FindWindowByID(ImGuiID id)
{
    ImGuiContext& g = *GImGui;
    return (ImGuiWindow*)g.WindowsById.GetVoidPtr(id);
}

ImGuiWindow* ImGui::FindWindowByName(const char* name)
{
    ImGuiID id = ImHashStr(name);
    return FindWindowByID(id);
}

static ImGuiWindow* CreateNewWindow(const char* name, ImVec2 size, ImGuiWindowFlags flags)
{
    ImGuiContext& g = *GImGui;
    //IMGUI_DEBUG_LOG("CreateNewWindow '%s', flags = 0x%08X\n", name, flags);

    // Create window the first time
    ImGuiWindow* window = IM_NEW(ImGuiWindow)(&g, name);
    window->Flags = flags;
    g.WindowsById.SetVoidPtr(window->ID, window);

    // Default/arbitrary window position. Use SetNextWindowPos() with the appropriate condition flag to change the initial position of a window.
    window->Pos = ImVec2(60, 60);

    // User can disable loading and saving of settings. Tooltip and child windows also don't store settings.
    if (!(flags & ImGuiWindowFlags_NoSavedSettings))
        if (ImGuiWindowSettings* settings = ImGui::FindWindowSettings(window->ID))
        {
            // Retrieve settings from .ini file
            window->SettingsOffset = g.SettingsWindows.offset_from_ptr(settings);
            SetWindowConditionAllowFlags(window, ImGuiCond_FirstUseEver, false);
            window->Pos = ImVec2(settings->Pos.x, settings->Pos.y);
            window->Collapsed = settings->Collapsed;
            if (settings->Size.x > 0 && settings->Size.y > 0)
                size = ImVec2(settings->Size.x, settings->Size.y);
        }
    window->Size = window->SizeFull = ImFloor(size);
    window->DC.CursorStartPos = window->DC.CursorMaxPos = window->Pos; // So first call to CalcContentSize() doesn't return crazy values

    if ((flags & ImGuiWindowFlags_AlwaysAutoResize) != 0)
    {
        window->AutoFitFramesX = window->AutoFitFramesY = 2;
        window->AutoFitOnlyGrows = false;
    }
    else
    {
        if (window->Size.x <= 0.0f)
            window->AutoFitFramesX = 2;
        if (window->Size.y <= 0.0f)
            window->AutoFitFramesY = 2;
        window->AutoFitOnlyGrows = (window->AutoFitFramesX > 0) || (window->AutoFitFramesY > 0);
    }

    g.WindowsFocusOrder.push_back(window);
    if (flags & ImGuiWindowFlags_NoBringToFrontOnFocus)
        g.Windows.push_front(window); // Quite slow but rare and only once
    else
        g.Windows.push_back(window);
    return window;
}

static ImVec2 CalcWindowSizeAfterConstraint(ImGuiWindow* window, ImVec2 new_size)
{
    ImGuiContext& g = *GImGui;
    if (g.NextWindowData.Flags & ImGuiNextWindowDataFlags_HasSizeConstraint)
    {
        // Using -1,-1 on either X/Y axis to preserve the current size.
        ImRect cr = g.NextWindowData.SizeConstraintRect;
        new_size.x = (cr.Min.x >= 0 && cr.Max.x >= 0) ? ImClamp(new_size.x, cr.Min.x, cr.Max.x) : window->SizeFull.x;
        new_size.y = (cr.Min.y >= 0 && cr.Max.y >= 0) ? ImClamp(new_size.y, cr.Min.y, cr.Max.y) : window->SizeFull.y;
        if (g.NextWindowData.SizeCallback)
        {
            ImGuiSizeCallbackData data;
            data.UserData = g.NextWindowData.SizeCallbackUserData;
            data.Pos = window->Pos;
            data.CurrentSize = window->SizeFull;
            data.DesiredSize = new_size;
            g.NextWindowData.SizeCallback(&data);
            new_size = data.DesiredSize;
        }
        new_size.x = IM_FLOOR(new_size.x);
        new_size.y = IM_FLOOR(new_size.y);
    }

    // Minimum size
    if (!(window->Flags & (ImGuiWindowFlags_ChildWindow | ImGuiWindowFlags_AlwaysAutoResize)))
    {
        new_size = ImMax(new_size, g.Style.WindowMinSize);
        new_size.y = ImMax(new_size.y, window->TitleBarHeight() + window->MenuBarHeight() + ImMax(0.0f, g.Style.WindowRounding - 1.0f)); // Reduce artifacts with very small windows
    }
    return new_size;
}

static ImVec2 CalcWindowContentSize(ImGuiWindow* window)
{
    if (window->Collapsed)
        if (window->AutoFitFramesX <= 0 && window->AutoFitFramesY <= 0)
            return window->ContentSize;
    if (window->Hidden && window->HiddenFramesCannotSkipItems == 0 && window->HiddenFramesCanSkipItems > 0)
        return window->ContentSize;

    ImVec2 sz;
    sz.x = IM_FLOOR((window->ContentSizeExplicit.x != 0.0f) ? window->ContentSizeExplicit.x : window->DC.CursorMaxPos.x - window->DC.CursorStartPos.x);
    sz.y = IM_FLOOR((window->ContentSizeExplicit.y != 0.0f) ? window->ContentSizeExplicit.y : window->DC.CursorMaxPos.y - window->DC.CursorStartPos.y);
    return sz;
}

static ImVec2 CalcWindowAutoFitSize(ImGuiWindow* window, const ImVec2& size_contents)
{
    ImGuiContext& g = *GImGui;
    ImGuiStyle& style = g.Style;
    ImVec2 size_decorations = ImVec2(0.0f, window->TitleBarHeight() + window->MenuBarHeight());
    ImVec2 size_pad = window->WindowPadding * 2.0f;
    ImVec2 size_desired = size_contents + size_pad + size_decorations;
    if (window->Flags & ImGuiWindowFlags_Tooltip)
    {
        // Tooltip always resize
        return size_desired;
    }
    else
    {
        // Maximum window size is determined by the viewport size or monitor size
        const bool is_popup = (window->Flags & ImGuiWindowFlags_Popup) != 0;
        const bool is_menu = (window->Flags & ImGuiWindowFlags_ChildMenu) != 0;
        ImVec2 size_min = style.WindowMinSize;
        if (is_popup || is_menu) // Popups and menus bypass style.WindowMinSize by default, but we give then a non-zero minimum size to facilitate understanding problematic cases (e.g. empty popups)
            size_min = ImMin(size_min, ImVec2(4.0f, 4.0f));
        ImVec2 size_auto_fit = ImClamp(size_desired, size_min, ImMax(size_min, g.IO.DisplaySize - style.DisplaySafeAreaPadding * 2.0f));

        // When the window cannot fit all contents (either because of constraints, either because screen is too small),
        // we are growing the size on the other axis to compensate for expected scrollbar. FIXME: Might turn bigger than ViewportSize-WindowPadding.
        ImVec2 size_auto_fit_after_constraint = CalcWindowSizeAfterConstraint(window, size_auto_fit);
        bool will_have_scrollbar_x = (size_auto_fit_after_constraint.x - size_pad.x - size_decorations.x < size_contents.x && !(window->Flags & ImGuiWindowFlags_NoScrollbar) && (window->Flags & ImGuiWindowFlags_HorizontalScrollbar)) || (window->Flags & ImGuiWindowFlags_AlwaysHorizontalScrollbar);
        bool will_have_scrollbar_y = (size_auto_fit_after_constraint.y - size_pad.y - size_decorations.y < size_contents.y && !(window->Flags & ImGuiWindowFlags_NoScrollbar)) || (window->Flags & ImGuiWindowFlags_AlwaysVerticalScrollbar);
        if (will_have_scrollbar_x)
            size_auto_fit.y += style.ScrollbarSize;
        if (will_have_scrollbar_y)
            size_auto_fit.x += style.ScrollbarSize;
        return size_auto_fit;
    }
}

ImVec2 ImGui::CalcWindowExpectedSize(ImGuiWindow* window)
{
    ImVec2 size_contents = CalcWindowContentSize(window);
    ImVec2 size_auto_fit = CalcWindowAutoFitSize(window, size_contents);
    ImVec2 size_final = CalcWindowSizeAfterConstraint(window, size_auto_fit);
    return size_final;
}

static ImGuiCol GetWindowBgColorIdxFromFlags(ImGuiWindowFlags flags)
{
    if (flags & (ImGuiWindowFlags_Tooltip | ImGuiWindowFlags_Popup))
        return ImGuiCol_PopupBg;
    if (flags & ImGuiWindowFlags_ChildWindow)
        return ImGuiCol_ChildBg;
    return ImGuiCol_WindowBg;
}

static void CalcResizePosSizeFromAnyCorner(ImGuiWindow* window, const ImVec2& corner_target, const ImVec2& corner_norm, ImVec2* out_pos, ImVec2* out_size)
{
    ImVec2 pos_min = ImLerp(corner_target, window->Pos, corner_norm);                // Expected window upper-left
    ImVec2 pos_max = ImLerp(window->Pos + window->Size, corner_target, corner_norm); // Expected window lower-right
    ImVec2 size_expected = pos_max - pos_min;
    ImVec2 size_constrained = CalcWindowSizeAfterConstraint(window, size_expected);
    *out_pos = pos_min;
    if (corner_norm.x == 0.0f)
        out_pos->x -= (size_constrained.x - size_expected.x);
    if (corner_norm.y == 0.0f)
        out_pos->y -= (size_constrained.y - size_expected.y);
    *out_size = size_constrained;
}

struct ImGuiResizeGripDef
{
    ImVec2  CornerPosN;
    ImVec2  InnerDir;
    int     AngleMin12, AngleMax12;
};

static const ImGuiResizeGripDef resize_grip_def[4] =
{
    { ImVec2(1,1), ImVec2(-1,-1), 0, 3 }, // Lower-right
    { ImVec2(0,1), ImVec2(+1,-1), 3, 6 }, // Lower-left
    { ImVec2(0,0), ImVec2(+1,+1), 6, 9 }, // Upper-left (Unused)
    { ImVec2(1,0), ImVec2(-1,+1), 9,12 }, // Upper-right (Unused)
};

static ImRect GetResizeBorderRect(ImGuiWindow* window, int border_n, float perp_padding, float thickness)
{
    ImRect rect = window->Rect();
    if (thickness == 0.0f) rect.Max -= ImVec2(1,1);
    if (border_n == 0) return ImRect(rect.Min.x + perp_padding, rect.Min.y - thickness,    rect.Max.x - perp_padding, rect.Min.y + thickness);      // Top
    if (border_n == 1) return ImRect(rect.Max.x - thickness,    rect.Min.y + perp_padding, rect.Max.x + thickness,    rect.Max.y - perp_padding);   // Right
    if (border_n == 2) return ImRect(rect.Min.x + perp_padding, rect.Max.y - thickness,    rect.Max.x - perp_padding, rect.Max.y + thickness);      // Bottom
    if (border_n == 3) return ImRect(rect.Min.x - thickness,    rect.Min.y + perp_padding, rect.Min.x + thickness,    rect.Max.y - perp_padding);   // Left
    IM_ASSERT(0);
    return ImRect();
}

// 0..3: corners (Lower-right, Lower-left, Unused, Unused)
// 4..7: borders (Top, Right, Bottom, Left)
ImGuiID ImGui::GetWindowResizeID(ImGuiWindow* window, int n)
{
    IM_ASSERT(n >= 0 && n <= 7);
    ImGuiID id = window->ID;
    id = ImHashStr("#RESIZE", 0, id);
    id = ImHashData(&n, sizeof(int), id);
    return id;
}

// Handle resize for: Resize Grips, Borders, Gamepad
// Return true when using auto-fit (double click on resize grip)
static bool ImGui::UpdateManualResize(ImGuiWindow* window, const ImVec2& size_auto_fit, int* border_held, int resize_grip_count, ImU32 resize_grip_col[4])
{
    ImGuiContext& g = *GImGui;
    ImGuiWindowFlags flags = window->Flags;

    if ((flags & ImGuiWindowFlags_NoResize) || (flags & ImGuiWindowFlags_AlwaysAutoResize) || window->AutoFitFramesX > 0 || window->AutoFitFramesY > 0)
        return false;
    if (window->WasActive == false) // Early out to avoid running this code for e.g. an hidden implicit/fallback Debug window.
        return false;

    bool ret_auto_fit = false;
    const int resize_border_count = g.IO.ConfigWindowsResizeFromEdges ? 4 : 0;
    const float grip_draw_size = IM_FLOOR(ImMax(g.FontSize * 1.35f, window->WindowRounding + 1.0f + g.FontSize * 0.2f));
    const float grip_hover_inner_size = IM_FLOOR(grip_draw_size * 0.75f);
    const float grip_hover_outer_size = g.IO.ConfigWindowsResizeFromEdges ? WINDOWS_RESIZE_FROM_EDGES_HALF_THICKNESS : 0.0f;

    ImVec2 pos_target(FLT_MAX, FLT_MAX);
    ImVec2 size_target(FLT_MAX, FLT_MAX);

    // Resize grips and borders are on layer 1
    window->DC.NavLayerCurrent = ImGuiNavLayer_Menu;
    window->DC.NavLayerCurrentMask = (1 << ImGuiNavLayer_Menu);

    // Manual resize grips
    PushID("#RESIZE");
    for (int resize_grip_n = 0; resize_grip_n < resize_grip_count; resize_grip_n++)
    {
        const ImGuiResizeGripDef& grip = resize_grip_def[resize_grip_n];
        const ImVec2 corner = ImLerp(window->Pos, window->Pos + window->Size, grip.CornerPosN);

        // Using the FlattenChilds button flag we make the resize button accessible even if we are hovering over a child window
        ImRect resize_rect(corner - grip.InnerDir * grip_hover_outer_size, corner + grip.InnerDir * grip_hover_inner_size);
        if (resize_rect.Min.x > resize_rect.Max.x) ImSwap(resize_rect.Min.x, resize_rect.Max.x);
        if (resize_rect.Min.y > resize_rect.Max.y) ImSwap(resize_rect.Min.y, resize_rect.Max.y);
        bool hovered, held;
        ButtonBehavior(resize_rect, window->GetID(resize_grip_n), &hovered, &held, ImGuiButtonFlags_FlattenChildren | ImGuiButtonFlags_NoNavFocus);
        //GetForegroundDrawList(window)->AddRect(resize_rect.Min, resize_rect.Max, IM_COL32(255, 255, 0, 255));
        if (hovered || held)
            g.MouseCursor = (resize_grip_n & 1) ? ImGuiMouseCursor_ResizeNESW : ImGuiMouseCursor_ResizeNWSE;

        if (held && g.IO.MouseDoubleClicked[0] && resize_grip_n == 0)
        {
            // Manual auto-fit when double-clicking
            size_target = CalcWindowSizeAfterConstraint(window, size_auto_fit);
            ret_auto_fit = true;
            ClearActiveID();
        }
        else if (held)
        {
            // Resize from any of the four corners
            // We don't use an incremental MouseDelta but rather compute an absolute target size based on mouse position
            ImVec2 corner_target = g.IO.MousePos - g.ActiveIdClickOffset + ImLerp(grip.InnerDir * grip_hover_outer_size, grip.InnerDir * -grip_hover_inner_size, grip.CornerPosN); // Corner of the window corresponding to our corner grip
            CalcResizePosSizeFromAnyCorner(window, corner_target, grip.CornerPosN, &pos_target, &size_target);
        }
        if (resize_grip_n == 0 || held || hovered)
            resize_grip_col[resize_grip_n] = GetColorU32(held ? ImGuiCol_ResizeGripActive : hovered ? ImGuiCol_ResizeGripHovered : ImGuiCol_ResizeGrip);
    }
    for (int border_n = 0; border_n < resize_border_count; border_n++)
    {
        bool hovered, held;
        ImRect border_rect = GetResizeBorderRect(window, border_n, grip_hover_inner_size, WINDOWS_RESIZE_FROM_EDGES_HALF_THICKNESS);
        ButtonBehavior(border_rect, window->GetID(border_n + 4), &hovered, &held, ImGuiButtonFlags_FlattenChildren);
        //GetForegroundDrawLists(window)->AddRect(border_rect.Min, border_rect.Max, IM_COL32(255, 255, 0, 255));
        if ((hovered && g.HoveredIdTimer > WINDOWS_RESIZE_FROM_EDGES_FEEDBACK_TIMER) || held)
        {
            g.MouseCursor = (border_n & 1) ? ImGuiMouseCursor_ResizeEW : ImGuiMouseCursor_ResizeNS;
            if (held)
                *border_held = border_n;
        }
        if (held)
        {
            ImVec2 border_target = window->Pos;
            ImVec2 border_posn;
            if (border_n == 0) { border_posn = ImVec2(0, 0); border_target.y = (g.IO.MousePos.y - g.ActiveIdClickOffset.y + WINDOWS_RESIZE_FROM_EDGES_HALF_THICKNESS); } // Top
            if (border_n == 1) { border_posn = ImVec2(1, 0); border_target.x = (g.IO.MousePos.x - g.ActiveIdClickOffset.x + WINDOWS_RESIZE_FROM_EDGES_HALF_THICKNESS); } // Right
            if (border_n == 2) { border_posn = ImVec2(0, 1); border_target.y = (g.IO.MousePos.y - g.ActiveIdClickOffset.y + WINDOWS_RESIZE_FROM_EDGES_HALF_THICKNESS); } // Bottom
            if (border_n == 3) { border_posn = ImVec2(0, 0); border_target.x = (g.IO.MousePos.x - g.ActiveIdClickOffset.x + WINDOWS_RESIZE_FROM_EDGES_HALF_THICKNESS); } // Left
            CalcResizePosSizeFromAnyCorner(window, border_target, border_posn, &pos_target, &size_target);
        }
    }
    PopID();

    // Navigation resize (keyboard/gamepad)
    if (g.NavWindowingTarget && g.NavWindowingTarget->RootWindow == window)
    {
        ImVec2 nav_resize_delta;
        if (g.NavInputSource == ImGuiInputSource_NavKeyboard && g.IO.KeyShift)
            nav_resize_delta = GetNavInputAmount2d(ImGuiNavDirSourceFlags_Keyboard, ImGuiInputReadMode_Down);
        if (g.NavInputSource == ImGuiInputSource_NavGamepad)
            nav_resize_delta = GetNavInputAmount2d(ImGuiNavDirSourceFlags_PadDPad, ImGuiInputReadMode_Down);
        if (nav_resize_delta.x != 0.0f || nav_resize_delta.y != 0.0f)
        {
            const float NAV_RESIZE_SPEED = 600.0f;
            nav_resize_delta *= ImFloor(NAV_RESIZE_SPEED * g.IO.DeltaTime * ImMin(g.IO.DisplayFramebufferScale.x, g.IO.DisplayFramebufferScale.y));
            g.NavWindowingToggleLayer = false;
            g.NavDisableMouseHover = true;
            resize_grip_col[0] = GetColorU32(ImGuiCol_ResizeGripActive);
            // FIXME-NAV: Should store and accumulate into a separate size buffer to handle sizing constraints properly, right now a constraint will make us stuck.
            size_target = CalcWindowSizeAfterConstraint(window, window->SizeFull + nav_resize_delta);
        }
    }

    // Apply back modified position/size to window
    if (size_target.x != FLT_MAX)
    {
        window->SizeFull = size_target;
        MarkIniSettingsDirty(window);
    }
    if (pos_target.x != FLT_MAX)
    {
        window->Pos = ImFloor(pos_target);
        MarkIniSettingsDirty(window);
    }

    // Resize nav layer
    window->DC.NavLayerCurrent = ImGuiNavLayer_Main;
    window->DC.NavLayerCurrentMask = (1 << ImGuiNavLayer_Main);

    window->Size = window->SizeFull;
    return ret_auto_fit;
}

static inline void ClampWindowRect(ImGuiWindow* window, const ImRect& rect, const ImVec2& padding)
{
    ImGuiContext& g = *GImGui;
    ImVec2 size_for_clamping = (g.IO.ConfigWindowsMoveFromTitleBarOnly && !(window->Flags & ImGuiWindowFlags_NoTitleBar)) ? ImVec2(window->Size.x, window->TitleBarHeight()) : window->Size;
    window->Pos = ImMin(rect.Max - padding, ImMax(window->Pos + size_for_clamping, rect.Min + padding) - size_for_clamping);
}

static void ImGui::RenderWindowOuterBorders(ImGuiWindow* window)
{
    ImGuiContext& g = *GImGui;
    float rounding = window->WindowRounding;
    float border_size = window->WindowBorderSize;
    if (border_size > 0.0f && !(window->Flags & ImGuiWindowFlags_NoBackground))
        window->DrawList->AddRect(window->Pos, window->Pos + window->Size, GetColorU32(ImGuiCol_Border), rounding, ImDrawCornerFlags_All, border_size);

    int border_held = window->ResizeBorderHeld;
    if (border_held != -1)
    {
        struct ImGuiResizeBorderDef
        {
            ImVec2 InnerDir;
            ImVec2 CornerPosN1, CornerPosN2;
            float  OuterAngle;
        };
        static const ImGuiResizeBorderDef resize_border_def[4] =
        {
            { ImVec2(0,+1), ImVec2(0,0), ImVec2(1,0), IM_PI*1.50f }, // Top
            { ImVec2(-1,0), ImVec2(1,0), ImVec2(1,1), IM_PI*0.00f }, // Right
            { ImVec2(0,-1), ImVec2(1,1), ImVec2(0,1), IM_PI*0.50f }, // Bottom
            { ImVec2(+1,0), ImVec2(0,1), ImVec2(0,0), IM_PI*1.00f }  // Left
        };
        const ImGuiResizeBorderDef& def = resize_border_def[border_held];
        ImRect border_r = GetResizeBorderRect(window, border_held, rounding, 0.0f);
        window->DrawList->PathArcTo(ImLerp(border_r.Min, border_r.Max, def.CornerPosN1) + ImVec2(0.5f, 0.5f) + def.InnerDir * rounding, rounding, def.OuterAngle - IM_PI*0.25f, def.OuterAngle);
        window->DrawList->PathArcTo(ImLerp(border_r.Min, border_r.Max, def.CornerPosN2) + ImVec2(0.5f, 0.5f) + def.InnerDir * rounding, rounding, def.OuterAngle, def.OuterAngle + IM_PI*0.25f);
        window->DrawList->PathStroke(GetColorU32(ImGuiCol_SeparatorActive), false, ImMax(2.0f, border_size)); // Thicker than usual
    }
    if (g.Style.FrameBorderSize > 0 && !(window->Flags & ImGuiWindowFlags_NoTitleBar))
    {
        float y = window->Pos.y + window->TitleBarHeight() - 1;
        window->DrawList->AddLine(ImVec2(window->Pos.x + border_size, y), ImVec2(window->Pos.x + window->Size.x - border_size, y), GetColorU32(ImGuiCol_Border), g.Style.FrameBorderSize);
    }
}

void ImGui::RenderWindowDecorations(ImGuiWindow* window, const ImRect& title_bar_rect, bool title_bar_is_highlight, int resize_grip_count, const ImU32 resize_grip_col[4], float resize_grip_draw_size)
{
    ImGuiContext& g = *GImGui;
    ImGuiStyle& style = g.Style;
    ImGuiWindowFlags flags = window->Flags;

    // Ensure that ScrollBar doesn't read last frame's SkipItems
    window->SkipItems = false;

    // Draw window + handle manual resize
    // As we highlight the title bar when want_focus is set, multiple reappearing windows will have have their title bar highlighted on their reappearing frame.
    const float window_rounding = window->WindowRounding;
    const float window_border_size = window->WindowBorderSize;
    if (window->Collapsed)
    {
        // Title bar only
        float backup_border_size = style.FrameBorderSize;
        g.Style.FrameBorderSize = window->WindowBorderSize;
        ImU32 title_bar_col = GetColorU32((title_bar_is_highlight && !g.NavDisableHighlight) ? ImGuiCol_TitleBgActive : ImGuiCol_TitleBgCollapsed);
        RenderFrame(title_bar_rect.Min, title_bar_rect.Max, title_bar_col, true, window_rounding);
        g.Style.FrameBorderSize = backup_border_size;
    }
    else
    {
        // Window background
        if (!(flags & ImGuiWindowFlags_NoBackground))
        {
            ImU32 bg_col = GetColorU32(GetWindowBgColorIdxFromFlags(flags));
            float alpha = 1.0f;
            if (g.NextWindowData.Flags & ImGuiNextWindowDataFlags_HasBgAlpha)
                alpha = g.NextWindowData.BgAlphaVal;
            if (alpha != 1.0f)
                bg_col = (bg_col & ~IM_COL32_A_MASK) | (IM_F32_TO_INT8_SAT(alpha) << IM_COL32_A_SHIFT);
            window->DrawList->AddRectFilled(window->Pos + ImVec2(0, window->TitleBarHeight()), window->Pos + window->Size, bg_col, window_rounding, (flags & ImGuiWindowFlags_NoTitleBar) ? ImDrawCornerFlags_All : ImDrawCornerFlags_Bot);
        }

        // Title bar
        if (!(flags & ImGuiWindowFlags_NoTitleBar))
        {
            ImU32 title_bar_col = GetColorU32(title_bar_is_highlight ? ImGuiCol_TitleBgActive : ImGuiCol_TitleBg);
            window->DrawList->AddRectFilled(title_bar_rect.Min, title_bar_rect.Max, title_bar_col, window_rounding, ImDrawCornerFlags_Top);
        }

        // Menu bar
        if (flags & ImGuiWindowFlags_MenuBar)
        {
            ImRect menu_bar_rect = window->MenuBarRect();
            menu_bar_rect.ClipWith(window->Rect());  // Soft clipping, in particular child window don't have minimum size covering the menu bar so this is useful for them.
            window->DrawList->AddRectFilled(menu_bar_rect.Min + ImVec2(window_border_size, 0), menu_bar_rect.Max - ImVec2(window_border_size, 0), GetColorU32(ImGuiCol_MenuBarBg), (flags & ImGuiWindowFlags_NoTitleBar) ? window_rounding : 0.0f, ImDrawCornerFlags_Top);
            if (style.FrameBorderSize > 0.0f && menu_bar_rect.Max.y < window->Pos.y + window->Size.y)
                window->DrawList->AddLine(menu_bar_rect.GetBL(), menu_bar_rect.GetBR(), GetColorU32(ImGuiCol_Border), style.FrameBorderSize);
        }

        // Scrollbars
        if (window->ScrollbarX)
            Scrollbar(ImGuiAxis_X);
        if (window->ScrollbarY)
            Scrollbar(ImGuiAxis_Y);

        // Render resize grips (after their input handling so we don't have a frame of latency)
        if (!(flags & ImGuiWindowFlags_NoResize))
        {
            for (int resize_grip_n = 0; resize_grip_n < resize_grip_count; resize_grip_n++)
            {
                const ImGuiResizeGripDef& grip = resize_grip_def[resize_grip_n];
                const ImVec2 corner = ImLerp(window->Pos, window->Pos + window->Size, grip.CornerPosN);
                window->DrawList->PathLineTo(corner + grip.InnerDir * ((resize_grip_n & 1) ? ImVec2(window_border_size, resize_grip_draw_size) : ImVec2(resize_grip_draw_size, window_border_size)));
                window->DrawList->PathLineTo(corner + grip.InnerDir * ((resize_grip_n & 1) ? ImVec2(resize_grip_draw_size, window_border_size) : ImVec2(window_border_size, resize_grip_draw_size)));
                window->DrawList->PathArcToFast(ImVec2(corner.x + grip.InnerDir.x * (window_rounding + window_border_size), corner.y + grip.InnerDir.y * (window_rounding + window_border_size)), window_rounding, grip.AngleMin12, grip.AngleMax12);
                window->DrawList->PathFillConvex(resize_grip_col[resize_grip_n]);
            }
        }

        // Borders
        RenderWindowOuterBorders(window);
    }
}

// Render title text, collapse button, close button
void ImGui::RenderWindowTitleBarContents(ImGuiWindow* window, const ImRect& title_bar_rect, const char* name, bool* p_open)
{
    ImGuiContext& g = *GImGui;
    ImGuiStyle& style = g.Style;
    ImGuiWindowFlags flags = window->Flags;

    const bool has_close_button = (p_open != NULL);
    const bool has_collapse_button = !(flags & ImGuiWindowFlags_NoCollapse) && (style.WindowMenuButtonPosition != ImGuiDir_None);

    // Close & Collapse button are on the Menu NavLayer and don't default focus (unless there's nothing else on that layer)
    const ImGuiItemFlags item_flags_backup = window->DC.ItemFlags;
    window->DC.ItemFlags |= ImGuiItemFlags_NoNavDefaultFocus;
    window->DC.NavLayerCurrent = ImGuiNavLayer_Menu;
    window->DC.NavLayerCurrentMask = (1 << ImGuiNavLayer_Menu);

    // Layout buttons
    // FIXME: Would be nice to generalize the subtleties expressed here into reusable code.
    float pad_l = style.FramePadding.x;
    float pad_r = style.FramePadding.x;
    float button_sz = g.FontSize;
    ImVec2 close_button_pos;
    ImVec2 collapse_button_pos;
    if (has_close_button)
    {
        pad_r += button_sz;
        close_button_pos = ImVec2(title_bar_rect.Max.x - pad_r - style.FramePadding.x, title_bar_rect.Min.y);
    }
    if (has_collapse_button && style.WindowMenuButtonPosition == ImGuiDir_Right)
    {
        pad_r += button_sz;
        collapse_button_pos = ImVec2(title_bar_rect.Max.x - pad_r - style.FramePadding.x, title_bar_rect.Min.y);
    }
    if (has_collapse_button && style.WindowMenuButtonPosition == ImGuiDir_Left)
    {
        collapse_button_pos = ImVec2(title_bar_rect.Min.x + pad_l - style.FramePadding.x, title_bar_rect.Min.y);
        pad_l += button_sz;
    }

    // Collapse button (submitting first so it gets priority when choosing a navigation init fallback)
    if (has_collapse_button)
        if (CollapseButton(window->GetID("#COLLAPSE"), collapse_button_pos))
            window->WantCollapseToggle = true; // Defer actual collapsing to next frame as we are too far in the Begin() function

    // Close button
    if (has_close_button)
        if (CloseButton(window->GetID("#CLOSE"), close_button_pos))
            *p_open = false;

    window->DC.NavLayerCurrent = ImGuiNavLayer_Main;
    window->DC.NavLayerCurrentMask = (1 << ImGuiNavLayer_Main);
    window->DC.ItemFlags = item_flags_backup;

    // Title bar text (with: horizontal alignment, avoiding collapse/close button, optional "unsaved document" marker)
    // FIXME: Refactor text alignment facilities along with RenderText helpers, this is WAY too much messy code..
    const char* UNSAVED_DOCUMENT_MARKER = "*";
    const float marker_size_x = (flags & ImGuiWindowFlags_UnsavedDocument) ? CalcTextSize(UNSAVED_DOCUMENT_MARKER, NULL, false).x : 0.0f;
    const ImVec2 text_size = CalcTextSize(name, NULL, true) + ImVec2(marker_size_x, 0.0f);

    // As a nice touch we try to ensure that centered title text doesn't get affected by visibility of Close/Collapse button,
    // while uncentered title text will still reach edges correct.
    if (pad_l > style.FramePadding.x)
        pad_l += g.Style.ItemInnerSpacing.x;
    if (pad_r > style.FramePadding.x)
        pad_r += g.Style.ItemInnerSpacing.x;
    if (style.WindowTitleAlign.x > 0.0f && style.WindowTitleAlign.x < 1.0f)
    {
        float centerness = ImSaturate(1.0f - ImFabs(style.WindowTitleAlign.x - 0.5f) * 2.0f); // 0.0f on either edges, 1.0f on center
        float pad_extend = ImMin(ImMax(pad_l, pad_r), title_bar_rect.GetWidth() - pad_l - pad_r - text_size.x);
        pad_l = ImMax(pad_l, pad_extend * centerness);
        pad_r = ImMax(pad_r, pad_extend * centerness);
    }

    ImRect layout_r(title_bar_rect.Min.x + pad_l, title_bar_rect.Min.y, title_bar_rect.Max.x - pad_r, title_bar_rect.Max.y);
    ImRect clip_r(layout_r.Min.x, layout_r.Min.y, layout_r.Max.x + g.Style.ItemInnerSpacing.x, layout_r.Max.y);
    //if (g.IO.KeyCtrl) window->DrawList->AddRect(layout_r.Min, layout_r.Max, IM_COL32(255, 128, 0, 255)); // [DEBUG]
    RenderTextClipped(layout_r.Min, layout_r.Max, name, NULL, &text_size, style.WindowTitleAlign, &clip_r);
    if (flags & ImGuiWindowFlags_UnsavedDocument)
    {
        ImVec2 marker_pos = ImVec2(ImMax(layout_r.Min.x, layout_r.Min.x + (layout_r.GetWidth() - text_size.x) * style.WindowTitleAlign.x) + text_size.x, layout_r.Min.y) + ImVec2(2 - marker_size_x, 0.0f);
        ImVec2 off = ImVec2(0.0f, IM_FLOOR(-g.FontSize * 0.25f));
        RenderTextClipped(marker_pos + off, layout_r.Max + off, UNSAVED_DOCUMENT_MARKER, NULL, NULL, ImVec2(0, style.WindowTitleAlign.y), &clip_r);
    }
}

void ImGui::UpdateWindowParentAndRootLinks(ImGuiWindow* window, ImGuiWindowFlags flags, ImGuiWindow* parent_window)
{
    window->ParentWindow = parent_window;
    window->RootWindow = window->RootWindowForTitleBarHighlight = window->RootWindowForNav = window;
    if (parent_window && (flags & ImGuiWindowFlags_ChildWindow) && !(flags & ImGuiWindowFlags_Tooltip))
        window->RootWindow = parent_window->RootWindow;
    if (parent_window && !(flags & ImGuiWindowFlags_Modal) && (flags & (ImGuiWindowFlags_ChildWindow | ImGuiWindowFlags_Popup)))
        window->RootWindowForTitleBarHighlight = parent_window->RootWindowForTitleBarHighlight;
    while (window->RootWindowForNav->Flags & ImGuiWindowFlags_NavFlattened)
    {
        IM_ASSERT(window->RootWindowForNav->ParentWindow != NULL);
        window->RootWindowForNav = window->RootWindowForNav->ParentWindow;
    }
}

// Push a new Dear ImGui window to add widgets to.
// - A default window called "Debug" is automatically stacked at the beginning of every frame so you can use widgets without explicitly calling a Begin/End pair.
// - Begin/End can be called multiple times during the frame with the same window name to append content.
// - The window name is used as a unique identifier to preserve window information across frames (and save rudimentary information to the .ini file).
//   You can use the "##" or "###" markers to use the same label with different id, or same id with different label. See documentation at the top of this file.
// - Return false when window is collapsed, so you can early out in your code. You always need to call ImGui::End() even if false is returned.
// - Passing 'bool* p_open' displays a Close button on the upper-right corner of the window, the pointed value will be set to false when the button is pressed.
bool ImGui::Begin(const char* name, bool* p_open, ImGuiWindowFlags flags)
{
    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    IM_ASSERT(name != NULL && name[0] != '\0');     // Window name required
    IM_ASSERT(g.WithinFrameScope);                  // Forgot to call ImGui::NewFrame()
    IM_ASSERT(g.FrameCountEnded != g.FrameCount);   // Called ImGui::Render() or ImGui::EndFrame() and haven't called ImGui::NewFrame() again yet

    // Find or create
    ImGuiWindow* window = FindWindowByName(name);
    const bool window_just_created = (window == NULL);
    if (window_just_created)
    {
        ImVec2 size_on_first_use = (g.NextWindowData.Flags & ImGuiNextWindowDataFlags_HasSize) ? g.NextWindowData.SizeVal : ImVec2(0.0f, 0.0f); // Any condition flag will do since we are creating a new window here.
        window = CreateNewWindow(name, size_on_first_use, flags);
    }

    // Automatically disable manual moving/resizing when NoInputs is set
    if ((flags & ImGuiWindowFlags_NoInputs) == ImGuiWindowFlags_NoInputs)
        flags |= ImGuiWindowFlags_NoMove | ImGuiWindowFlags_NoResize;

    if (flags & ImGuiWindowFlags_NavFlattened)
        IM_ASSERT(flags & ImGuiWindowFlags_ChildWindow);

    const int current_frame = g.FrameCount;
    const bool first_begin_of_the_frame = (window->LastFrameActive != current_frame);

    // Update the Appearing flag
    bool window_just_activated_by_user = (window->LastFrameActive < current_frame - 1);   // Not using !WasActive because the implicit "Debug" window would always toggle off->on
    const bool window_just_appearing_after_hidden_for_resize = (window->HiddenFramesCannotSkipItems > 0);
    if (flags & ImGuiWindowFlags_Popup)
    {
        ImGuiPopupData& popup_ref = g.OpenPopupStack[g.BeginPopupStack.Size];
        window_just_activated_by_user |= (window->PopupId != popup_ref.PopupId); // We recycle popups so treat window as activated if popup id changed
        window_just_activated_by_user |= (window != popup_ref.Window);
    }
    window->Appearing = (window_just_activated_by_user || window_just_appearing_after_hidden_for_resize);
    if (window->Appearing)
        SetWindowConditionAllowFlags(window, ImGuiCond_Appearing, true);

    // Update Flags, LastFrameActive, BeginOrderXXX fields
    if (first_begin_of_the_frame)
    {
        window->Flags = (ImGuiWindowFlags)flags;
        window->LastFrameActive = current_frame;
        window->LastTimeActive = (float)g.Time;
        window->BeginOrderWithinParent = 0;
        window->BeginOrderWithinContext = (short)(g.WindowsActiveCount++);
    }
    else
    {
        flags = window->Flags;
    }

    // Parent window is latched only on the first call to Begin() of the frame, so further append-calls can be done from a different window stack
    ImGuiWindow* parent_window_in_stack = g.CurrentWindowStack.empty() ? NULL : g.CurrentWindowStack.back();
    ImGuiWindow* parent_window = first_begin_of_the_frame ? ((flags & (ImGuiWindowFlags_ChildWindow | ImGuiWindowFlags_Popup)) ? parent_window_in_stack : NULL) : window->ParentWindow;
    IM_ASSERT(parent_window != NULL || !(flags & ImGuiWindowFlags_ChildWindow));

    // We allow window memory to be compacted so recreate the base stack when needed.
    if (window->IDStack.Size == 0)
        window->IDStack.push_back(window->ID);

    // Add to stack
    // We intentionally set g.CurrentWindow to NULL to prevent usage until when the viewport is set, then will call SetCurrentWindow()
    g.CurrentWindowStack.push_back(window);
    g.CurrentWindow = NULL;
    ErrorCheckBeginEndCompareStacksSize(window, true);
    if (flags & ImGuiWindowFlags_Popup)
    {
        ImGuiPopupData& popup_ref = g.OpenPopupStack[g.BeginPopupStack.Size];
        popup_ref.Window = window;
        g.BeginPopupStack.push_back(popup_ref);
        window->PopupId = popup_ref.PopupId;
    }

    if (window_just_appearing_after_hidden_for_resize && !(flags & ImGuiWindowFlags_ChildWindow))
        window->NavLastIds[0] = 0;

    // Process SetNextWindow***() calls
    bool window_pos_set_by_api = false;
    bool window_size_x_set_by_api = false, window_size_y_set_by_api = false;
    if (g.NextWindowData.Flags & ImGuiNextWindowDataFlags_HasPos)
    {
        window_pos_set_by_api = (window->SetWindowPosAllowFlags & g.NextWindowData.PosCond) != 0;
        if (window_pos_set_by_api && ImLengthSqr(g.NextWindowData.PosPivotVal) > 0.00001f)
        {
            // May be processed on the next frame if this is our first frame and we are measuring size
            // FIXME: Look into removing the branch so everything can go through this same code path for consistency.
            window->SetWindowPosVal = g.NextWindowData.PosVal;
            window->SetWindowPosPivot = g.NextWindowData.PosPivotVal;
            window->SetWindowPosAllowFlags &= ~(ImGuiCond_Once | ImGuiCond_FirstUseEver | ImGuiCond_Appearing);
        }
        else
        {
            SetWindowPos(window, g.NextWindowData.PosVal, g.NextWindowData.PosCond);
        }
    }
    if (g.NextWindowData.Flags & ImGuiNextWindowDataFlags_HasSize)
    {
        window_size_x_set_by_api = (window->SetWindowSizeAllowFlags & g.NextWindowData.SizeCond) != 0 && (g.NextWindowData.SizeVal.x > 0.0f);
        window_size_y_set_by_api = (window->SetWindowSizeAllowFlags & g.NextWindowData.SizeCond) != 0 && (g.NextWindowData.SizeVal.y > 0.0f);
        SetWindowSize(window, g.NextWindowData.SizeVal, g.NextWindowData.SizeCond);
    }
    if (g.NextWindowData.Flags & ImGuiNextWindowDataFlags_HasContentSize)
        window->ContentSizeExplicit = g.NextWindowData.ContentSizeVal;
    else if (first_begin_of_the_frame)
        window->ContentSizeExplicit = ImVec2(0.0f, 0.0f);
    if (g.NextWindowData.Flags & ImGuiNextWindowDataFlags_HasCollapsed)
        SetWindowCollapsed(window, g.NextWindowData.CollapsedVal, g.NextWindowData.CollapsedCond);
    if (g.NextWindowData.Flags & ImGuiNextWindowDataFlags_HasFocus)
        FocusWindow(window);
    if (window->Appearing)
        SetWindowConditionAllowFlags(window, ImGuiCond_Appearing, false);

    // When reusing window again multiple times a frame, just append content (don't need to setup again)
    if (first_begin_of_the_frame)
    {
        // Initialize
        const bool window_is_child_tooltip = (flags & ImGuiWindowFlags_ChildWindow) && (flags & ImGuiWindowFlags_Tooltip); // FIXME-WIP: Undocumented behavior of Child+Tooltip for pinned tooltip (#1345)
        UpdateWindowParentAndRootLinks(window, flags, parent_window);

        window->Active = true;
        window->HasCloseButton = (p_open != NULL);
        window->ClipRect = ImVec4(-FLT_MAX,-FLT_MAX,+FLT_MAX,+FLT_MAX);
        window->IDStack.resize(1);

        // Restore buffer capacity when woken from a compacted state, to avoid
        if (window->MemoryCompacted)
            GcAwakeTransientWindowBuffers(window);

        // Update stored window name when it changes (which can _only_ happen with the "###" operator, so the ID would stay unchanged).
        // The title bar always display the 'name' parameter, so we only update the string storage if it needs to be visible to the end-user elsewhere.
        bool window_title_visible_elsewhere = false;
        if (g.NavWindowingList != NULL && (window->Flags & ImGuiWindowFlags_NoNavFocus) == 0)   // Window titles visible when using CTRL+TAB
            window_title_visible_elsewhere = true;
        if (window_title_visible_elsewhere && !window_just_created && strcmp(name, window->Name) != 0)
        {
            size_t buf_len = (size_t)window->NameBufLen;
            window->Name = ImStrdupcpy(window->Name, &buf_len, name);
            window->NameBufLen = (int)buf_len;
        }

        // UPDATE CONTENTS SIZE, UPDATE HIDDEN STATUS

        // Update contents size from last frame for auto-fitting (or use explicit size)
        window->ContentSize = CalcWindowContentSize(window);
        if (window->HiddenFramesCanSkipItems > 0)
            window->HiddenFramesCanSkipItems--;
        if (window->HiddenFramesCannotSkipItems > 0)
            window->HiddenFramesCannotSkipItems--;

        // Hide new windows for one frame until they calculate their size
        if (window_just_created && (!window_size_x_set_by_api || !window_size_y_set_by_api))
            window->HiddenFramesCannotSkipItems = 1;

        // Hide popup/tooltip window when re-opening while we measure size (because we recycle the windows)
        // We reset Size/ContentSize for reappearing popups/tooltips early in this function, so further code won't be tempted to use the old size.
        if (window_just_activated_by_user && (flags & (ImGuiWindowFlags_Popup | ImGuiWindowFlags_Tooltip)) != 0)
        {
            window->HiddenFramesCannotSkipItems = 1;
            if (flags & ImGuiWindowFlags_AlwaysAutoResize)
            {
                if (!window_size_x_set_by_api)
                    window->Size.x = window->SizeFull.x = 0.f;
                if (!window_size_y_set_by_api)
                    window->Size.y = window->SizeFull.y = 0.f;
                window->ContentSize = ImVec2(0.f, 0.f);
            }
        }

        // FIXME-VIEWPORT: In the docking/viewport branch, this is the point where we select the current viewport (which may affect the style)
        SetCurrentWindow(window);

        // LOCK BORDER SIZE AND PADDING FOR THE FRAME (so that altering them doesn't cause inconsistencies)

        if (flags & ImGuiWindowFlags_ChildWindow)
            window->WindowBorderSize = style.ChildBorderSize;
        else
            window->WindowBorderSize = ((flags & (ImGuiWindowFlags_Popup | ImGuiWindowFlags_Tooltip)) && !(flags & ImGuiWindowFlags_Modal)) ? style.PopupBorderSize : style.WindowBorderSize;
        window->WindowPadding = style.WindowPadding;
        if ((flags & ImGuiWindowFlags_ChildWindow) && !(flags & (ImGuiWindowFlags_AlwaysUseWindowPadding | ImGuiWindowFlags_Popup)) && window->WindowBorderSize == 0.0f)
            window->WindowPadding = ImVec2(0.0f, (flags & ImGuiWindowFlags_MenuBar) ? style.WindowPadding.y : 0.0f);
        window->DC.MenuBarOffset.x = ImMax(ImMax(window->WindowPadding.x, style.ItemSpacing.x), g.NextWindowData.MenuBarOffsetMinVal.x);
        window->DC.MenuBarOffset.y = g.NextWindowData.MenuBarOffsetMinVal.y;

        // Collapse window by double-clicking on title bar
        // At this point we don't have a clipping rectangle setup yet, so we can use the title bar area for hit detection and drawing
        if (!(flags & ImGuiWindowFlags_NoTitleBar) && !(flags & ImGuiWindowFlags_NoCollapse))
        {
            // We don't use a regular button+id to test for double-click on title bar (mostly due to legacy reason, could be fixed), so verify that we don't have items over the title bar.
            ImRect title_bar_rect = window->TitleBarRect();
            if (g.HoveredWindow == window && g.HoveredId == 0 && g.HoveredIdPreviousFrame == 0 && IsMouseHoveringRect(title_bar_rect.Min, title_bar_rect.Max) && g.IO.MouseDoubleClicked[0])
                window->WantCollapseToggle = true;
            if (window->WantCollapseToggle)
            {
                window->Collapsed = !window->Collapsed;
                MarkIniSettingsDirty(window);
                FocusWindow(window);
            }
        }
        else
        {
            window->Collapsed = false;
        }
        window->WantCollapseToggle = false;

        // SIZE

        // Calculate auto-fit size, handle automatic resize
        const ImVec2 size_auto_fit = CalcWindowAutoFitSize(window, window->ContentSize);
        bool use_current_size_for_scrollbar_x = window_just_created;
        bool use_current_size_for_scrollbar_y = window_just_created;
        if ((flags & ImGuiWindowFlags_AlwaysAutoResize) && !window->Collapsed)
        {
            // Using SetNextWindowSize() overrides ImGuiWindowFlags_AlwaysAutoResize, so it can be used on tooltips/popups, etc.
            if (!window_size_x_set_by_api)
            {
                window->SizeFull.x = size_auto_fit.x;
                use_current_size_for_scrollbar_x = true;
            }
            if (!window_size_y_set_by_api)
            {
                window->SizeFull.y = size_auto_fit.y;
                use_current_size_for_scrollbar_y = true;
            }
        }
        else if (window->AutoFitFramesX > 0 || window->AutoFitFramesY > 0)
        {
            // Auto-fit may only grow window during the first few frames
            // We still process initial auto-fit on collapsed windows to get a window width, but otherwise don't honor ImGuiWindowFlags_AlwaysAutoResize when collapsed.
            if (!window_size_x_set_by_api && window->AutoFitFramesX > 0)
            {
                window->SizeFull.x = window->AutoFitOnlyGrows ? ImMax(window->SizeFull.x, size_auto_fit.x) : size_auto_fit.x;
                use_current_size_for_scrollbar_x = true;
            }
            if (!window_size_y_set_by_api && window->AutoFitFramesY > 0)
            {
                window->SizeFull.y = window->AutoFitOnlyGrows ? ImMax(window->SizeFull.y, size_auto_fit.y) : size_auto_fit.y;
                use_current_size_for_scrollbar_y = true;
            }
            if (!window->Collapsed)
                MarkIniSettingsDirty(window);
        }

        // Apply minimum/maximum window size constraints and final size
        window->SizeFull = CalcWindowSizeAfterConstraint(window, window->SizeFull);
        window->Size = window->Collapsed && !(flags & ImGuiWindowFlags_ChildWindow) ? window->TitleBarRect().GetSize() : window->SizeFull;

        // Decoration size
        const float decoration_up_height = window->TitleBarHeight() + window->MenuBarHeight();

        // POSITION

        // Popup latch its initial position, will position itself when it appears next frame
        if (window_just_activated_by_user)
        {
            window->AutoPosLastDirection = ImGuiDir_None;
            if ((flags & ImGuiWindowFlags_Popup) != 0 && !window_pos_set_by_api)
                window->Pos = g.BeginPopupStack.back().OpenPopupPos;
        }

        // Position child window
        if (flags & ImGuiWindowFlags_ChildWindow)
        {
            IM_ASSERT(parent_window && parent_window->Active);
            window->BeginOrderWithinParent = (short)parent_window->DC.ChildWindows.Size;
            parent_window->DC.ChildWindows.push_back(window);
            if (!(flags & ImGuiWindowFlags_Popup) && !window_pos_set_by_api && !window_is_child_tooltip)
                window->Pos = parent_window->DC.CursorPos;
        }

        const bool window_pos_with_pivot = (window->SetWindowPosVal.x != FLT_MAX && window->HiddenFramesCannotSkipItems == 0);
        if (window_pos_with_pivot)
            SetWindowPos(window, window->SetWindowPosVal - window->SizeFull * window->SetWindowPosPivot, 0); // Position given a pivot (e.g. for centering)
        else if ((flags & ImGuiWindowFlags_ChildMenu) != 0)
            window->Pos = FindBestWindowPosForPopup(window);
        else if ((flags & ImGuiWindowFlags_Popup) != 0 && !window_pos_set_by_api && window_just_appearing_after_hidden_for_resize)
            window->Pos = FindBestWindowPosForPopup(window);
        else if ((flags & ImGuiWindowFlags_Tooltip) != 0 && !window_pos_set_by_api && !window_is_child_tooltip)
            window->Pos = FindBestWindowPosForPopup(window);

        // Clamp position/size so window stays visible within its viewport or monitor

        // Ignore zero-sized display explicitly to avoid losing positions if a window manager reports zero-sized window when initializing or minimizing.
        ImRect viewport_rect(GetViewportRect());
        if (!window_pos_set_by_api && !(flags & ImGuiWindowFlags_ChildWindow) && window->AutoFitFramesX <= 0 && window->AutoFitFramesY <= 0)
        {
            if (g.IO.DisplaySize.x > 0.0f && g.IO.DisplaySize.y > 0.0f) // Ignore zero-sized display explicitly to avoid losing positions if a window manager reports zero-sized window when initializing or minimizing.
            {
                ImVec2 clamp_padding = ImMax(style.DisplayWindowPadding, style.DisplaySafeAreaPadding);
                ClampWindowRect(window, viewport_rect, clamp_padding);
            }
        }
        window->Pos = ImFloor(window->Pos);

        // Lock window rounding for the frame (so that altering them doesn't cause inconsistencies)
        window->WindowRounding = (flags & ImGuiWindowFlags_ChildWindow) ? style.ChildRounding : ((flags & ImGuiWindowFlags_Popup) && !(flags & ImGuiWindowFlags_Modal)) ? style.PopupRounding : style.WindowRounding;

        // Apply window focus (new and reactivated windows are moved to front)
        bool want_focus = false;
        if (window_just_activated_by_user && !(flags & ImGuiWindowFlags_NoFocusOnAppearing))
        {
            if (flags & ImGuiWindowFlags_Popup)
                want_focus = true;
            else if ((flags & (ImGuiWindowFlags_ChildWindow | ImGuiWindowFlags_Tooltip)) == 0)
                want_focus = true;
        }

        // Handle manual resize: Resize Grips, Borders, Gamepad
        int border_held = -1;
        ImU32 resize_grip_col[4] = {};
        const int resize_grip_count = g.IO.ConfigWindowsResizeFromEdges ? 2 : 1; // Allow resize from lower-left if we have the mouse cursor feedback for it.
        const float resize_grip_draw_size = IM_FLOOR(ImMax(g.FontSize * 1.35f, window->WindowRounding + 1.0f + g.FontSize * 0.2f));
        if (!window->Collapsed)
            if (UpdateManualResize(window, size_auto_fit, &border_held, resize_grip_count, &resize_grip_col[0]))
                use_current_size_for_scrollbar_x = use_current_size_for_scrollbar_y = true;
        window->ResizeBorderHeld = (signed char)border_held;

        // SCROLLBAR VISIBILITY

        // Update scrollbar visibility (based on the Size that was effective during last frame or the auto-resized Size).
        if (!window->Collapsed)
        {
            // When reading the current size we need to read it after size constraints have been applied.
            // When we use InnerRect here we are intentionally reading last frame size, same for ScrollbarSizes values before we set them again.
            ImVec2 avail_size_from_current_frame = ImVec2(window->SizeFull.x, window->SizeFull.y - decoration_up_height);
            ImVec2 avail_size_from_last_frame = window->InnerRect.GetSize() + window->ScrollbarSizes;
            ImVec2 needed_size_from_last_frame = window_just_created ? ImVec2(0, 0) : window->ContentSize + window->WindowPadding * 2.0f;
            float size_x_for_scrollbars = use_current_size_for_scrollbar_x ? avail_size_from_current_frame.x : avail_size_from_last_frame.x;
            float size_y_for_scrollbars = use_current_size_for_scrollbar_y ? avail_size_from_current_frame.y : avail_size_from_last_frame.y;
            //bool scrollbar_y_from_last_frame = window->ScrollbarY; // FIXME: May want to use that in the ScrollbarX expression? How many pros vs cons?
            window->ScrollbarY = (flags & ImGuiWindowFlags_AlwaysVerticalScrollbar) || ((needed_size_from_last_frame.y > size_y_for_scrollbars) && !(flags & ImGuiWindowFlags_NoScrollbar));
            window->ScrollbarX = (flags & ImGuiWindowFlags_AlwaysHorizontalScrollbar) || ((needed_size_from_last_frame.x > size_x_for_scrollbars - (window->ScrollbarY ? style.ScrollbarSize : 0.0f)) && !(flags & ImGuiWindowFlags_NoScrollbar) && (flags & ImGuiWindowFlags_HorizontalScrollbar));
            if (window->ScrollbarX && !window->ScrollbarY)
                window->ScrollbarY = (needed_size_from_last_frame.y > size_y_for_scrollbars) && !(flags & ImGuiWindowFlags_NoScrollbar);
            window->ScrollbarSizes = ImVec2(window->ScrollbarY ? style.ScrollbarSize : 0.0f, window->ScrollbarX ? style.ScrollbarSize : 0.0f);
        }

        // UPDATE RECTANGLES (1- THOSE NOT AFFECTED BY SCROLLING)
        // Update various regions. Variables they depends on should be set above in this function.
        // We set this up after processing the resize grip so that our rectangles doesn't lag by a frame.

        // Outer rectangle
        // Not affected by window border size. Used by:
        // - FindHoveredWindow() (w/ extra padding when border resize is enabled)
        // - Begin() initial clipping rect for drawing window background and borders.
        // - Begin() clipping whole child
        const ImRect host_rect = ((flags & ImGuiWindowFlags_ChildWindow) && !(flags & ImGuiWindowFlags_Popup) && !window_is_child_tooltip) ? parent_window->ClipRect : viewport_rect;
        const ImRect outer_rect = window->Rect();
        const ImRect title_bar_rect = window->TitleBarRect();
        window->OuterRectClipped = outer_rect;
        window->OuterRectClipped.ClipWith(host_rect);

        // Inner rectangle
        // Not affected by window border size. Used by:
        // - InnerClipRect
        // - ScrollToBringRectIntoView()
        // - NavUpdatePageUpPageDown()
        // - Scrollbar()
        window->InnerRect.Min.x = window->Pos.x;
        window->InnerRect.Min.y = window->Pos.y + decoration_up_height;
        window->InnerRect.Max.x = window->Pos.x + window->Size.x - window->ScrollbarSizes.x;
        window->InnerRect.Max.y = window->Pos.y + window->Size.y - window->ScrollbarSizes.y;

        // Inner clipping rectangle.
        // Will extend a little bit outside the normal work region.
        // This is to allow e.g. Selectable or CollapsingHeader or some separators to cover that space.
        // Force round operator last to ensure that e.g. (int)(max.x-min.x) in user's render code produce correct result.
        // Note that if our window is collapsed we will end up with an inverted (~null) clipping rectangle which is the correct behavior.
        // Affected by window/frame border size. Used by:
        // - Begin() initial clip rect
        float top_border_size = (((flags & ImGuiWindowFlags_MenuBar) || !(flags & ImGuiWindowFlags_NoTitleBar)) ? style.FrameBorderSize : window->WindowBorderSize);
        window->InnerClipRect.Min.x = ImFloor(0.5f + window->InnerRect.Min.x + ImMax(ImFloor(window->WindowPadding.x * 0.5f), window->WindowBorderSize));
        window->InnerClipRect.Min.y = ImFloor(0.5f + window->InnerRect.Min.y + top_border_size);
        window->InnerClipRect.Max.x = ImFloor(0.5f + window->InnerRect.Max.x - ImMax(ImFloor(window->WindowPadding.x * 0.5f), window->WindowBorderSize));
        window->InnerClipRect.Max.y = ImFloor(0.5f + window->InnerRect.Max.y - window->WindowBorderSize);
        window->InnerClipRect.ClipWithFull(host_rect);

        // Default item width. Make it proportional to window size if window manually resizes
        if (window->Size.x > 0.0f && !(flags & ImGuiWindowFlags_Tooltip) && !(flags & ImGuiWindowFlags_AlwaysAutoResize))
            window->ItemWidthDefault = ImFloor(window->Size.x * 0.65f);
        else
            window->ItemWidthDefault = ImFloor(g.FontSize * 16.0f);

        // SCROLLING

        // Lock down maximum scrolling
        // The value of ScrollMax are ahead from ScrollbarX/ScrollbarY which is intentionally using InnerRect from previous rect in order to accommodate
        // for right/bottom aligned items without creating a scrollbar.
        window->ScrollMax.x = ImMax(0.0f, window->ContentSize.x + window->WindowPadding.x * 2.0f - window->InnerRect.GetWidth());
        window->ScrollMax.y = ImMax(0.0f, window->ContentSize.y + window->WindowPadding.y * 2.0f - window->InnerRect.GetHeight());

        // Apply scrolling
        window->Scroll = CalcNextScrollFromScrollTargetAndClamp(window, true);
        window->ScrollTarget = ImVec2(FLT_MAX, FLT_MAX);

        // DRAWING

        // Setup draw list and outer clipping rectangle
        window->DrawList->Clear();
        window->DrawList->PushTextureID(g.Font->ContainerAtlas->TexID);
        PushClipRect(host_rect.Min, host_rect.Max, false);

        // Draw modal window background (darkens what is behind them, all viewports)
        const bool dim_bg_for_modal = (flags & ImGuiWindowFlags_Modal) && window == GetTopMostPopupModal() && window->HiddenFramesCannotSkipItems <= 0;
        const bool dim_bg_for_window_list = g.NavWindowingTargetAnim && (window == g.NavWindowingTargetAnim->RootWindow);
        if (dim_bg_for_modal || dim_bg_for_window_list)
        {
            const ImU32 dim_bg_col = GetColorU32(dim_bg_for_modal ? ImGuiCol_ModalWindowDimBg : ImGuiCol_NavWindowingDimBg, g.DimBgRatio);
            window->DrawList->AddRectFilled(viewport_rect.Min, viewport_rect.Max, dim_bg_col);
        }

        // Draw navigation selection/windowing rectangle background
        if (dim_bg_for_window_list && window == g.NavWindowingTargetAnim)
        {
            ImRect bb = window->Rect();
            bb.Expand(g.FontSize);
            if (!bb.Contains(viewport_rect)) // Avoid drawing if the window covers all the viewport anyway
                window->DrawList->AddRectFilled(bb.Min, bb.Max, GetColorU32(ImGuiCol_NavWindowingHighlight, g.NavWindowingHighlightAlpha * 0.25f), g.Style.WindowRounding);
        }

        // Since 1.71, child window can render their decoration (bg color, border, scrollbars, etc.) within their parent to save a draw call.
        // When using overlapping child windows, this will break the assumption that child z-order is mapped to submission order.
        // We disable this when the parent window has zero vertices, which is a common pattern leading to laying out multiple overlapping child.
        // We also disabled this when we have dimming overlay behind this specific one child.
        // FIXME: More code may rely on explicit sorting of overlapping child window and would need to disable this somehow. Please get in contact if you are affected.
        bool render_decorations_in_parent = false;
        if ((flags & ImGuiWindowFlags_ChildWindow) && !(flags & ImGuiWindowFlags_Popup) && !window_is_child_tooltip)
            if (window->DrawList->CmdBuffer.back().ElemCount == 0 && parent_window->DrawList->VtxBuffer.Size > 0)
                render_decorations_in_parent = true;
        if (render_decorations_in_parent)
            window->DrawList = parent_window->DrawList;

        // Handle title bar, scrollbar, resize grips and resize borders
        const ImGuiWindow* window_to_highlight = g.NavWindowingTarget ? g.NavWindowingTarget : g.NavWindow;
        const bool title_bar_is_highlight = want_focus || (window_to_highlight && window->RootWindowForTitleBarHighlight == window_to_highlight->RootWindowForTitleBarHighlight);
        RenderWindowDecorations(window, title_bar_rect, title_bar_is_highlight, resize_grip_count, resize_grip_col, resize_grip_draw_size);

        if (render_decorations_in_parent)
            window->DrawList = &window->DrawListInst;

        // Draw navigation selection/windowing rectangle border
        if (g.NavWindowingTargetAnim == window)
        {
            float rounding = ImMax(window->WindowRounding, g.Style.WindowRounding);
            ImRect bb = window->Rect();
            bb.Expand(g.FontSize);
            if (bb.Contains(viewport_rect)) // If a window fits the entire viewport, adjust its highlight inward
            {
                bb.Expand(-g.FontSize - 1.0f);
                rounding = window->WindowRounding;
            }
            window->DrawList->AddRect(bb.Min, bb.Max, GetColorU32(ImGuiCol_NavWindowingHighlight, g.NavWindowingHighlightAlpha), rounding, ~0, 3.0f);
        }

        // UPDATE RECTANGLES (2- THOSE AFFECTED BY SCROLLING)

        // Work rectangle.
        // Affected by window padding and border size. Used by:
        // - Columns() for right-most edge
        // - TreeNode(), CollapsingHeader() for right-most edge
        // - BeginTabBar() for right-most edge
        const bool allow_scrollbar_x = !(flags & ImGuiWindowFlags_NoScrollbar) && (flags & ImGuiWindowFlags_HorizontalScrollbar);
        const bool allow_scrollbar_y = !(flags & ImGuiWindowFlags_NoScrollbar);
        const float work_rect_size_x = (window->ContentSizeExplicit.x != 0.0f ? window->ContentSizeExplicit.x : ImMax(allow_scrollbar_x ? window->ContentSize.x : 0.0f, window->Size.x - window->WindowPadding.x * 2.0f - window->ScrollbarSizes.x));
        const float work_rect_size_y = (window->ContentSizeExplicit.y != 0.0f ? window->ContentSizeExplicit.y : ImMax(allow_scrollbar_y ? window->ContentSize.y : 0.0f, window->Size.y - window->WindowPadding.y * 2.0f - decoration_up_height - window->ScrollbarSizes.y));
        window->WorkRect.Min.x = ImFloor(window->InnerRect.Min.x - window->Scroll.x + ImMax(window->WindowPadding.x, window->WindowBorderSize));
        window->WorkRect.Min.y = ImFloor(window->InnerRect.Min.y - window->Scroll.y + ImMax(window->WindowPadding.y, window->WindowBorderSize));
        window->WorkRect.Max.x = window->WorkRect.Min.x + work_rect_size_x;
        window->WorkRect.Max.y = window->WorkRect.Min.y + work_rect_size_y;

        // [LEGACY] Content Region
        // FIXME-OBSOLETE: window->ContentRegionRect.Max is currently very misleading / partly faulty, but some BeginChild() patterns relies on it.
        // Used by:
        // - Mouse wheel scrolling + many other things
        window->ContentRegionRect.Min.x = window->Pos.x - window->Scroll.x + window->WindowPadding.x;
        window->ContentRegionRect.Min.y = window->Pos.y - window->Scroll.y + window->WindowPadding.y + decoration_up_height;
        window->ContentRegionRect.Max.x = window->ContentRegionRect.Min.x + (window->ContentSizeExplicit.x != 0.0f ? window->ContentSizeExplicit.x : (window->Size.x - window->WindowPadding.x * 2.0f - window->ScrollbarSizes.x));
        window->ContentRegionRect.Max.y = window->ContentRegionRect.Min.y + (window->ContentSizeExplicit.y != 0.0f ? window->ContentSizeExplicit.y : (window->Size.y - window->WindowPadding.y * 2.0f - decoration_up_height - window->ScrollbarSizes.y));

        // Setup drawing context
        // (NB: That term "drawing context / DC" lost its meaning a long time ago. Initially was meant to hold transient data only. Nowadays difference between window-> and window->DC-> is dubious.)
        window->DC.Indent.x = 0.0f + window->WindowPadding.x - window->Scroll.x;
        window->DC.GroupOffset.x = 0.0f;
        window->DC.ColumnsOffset.x = 0.0f;
        window->DC.CursorStartPos = window->Pos + ImVec2(window->DC.Indent.x + window->DC.ColumnsOffset.x, decoration_up_height + window->WindowPadding.y - window->Scroll.y);
        window->DC.CursorPos = window->DC.CursorStartPos;
        window->DC.CursorPosPrevLine = window->DC.CursorPos;
        window->DC.CursorMaxPos = window->DC.CursorStartPos;
        window->DC.CurrLineSize = window->DC.PrevLineSize = ImVec2(0.0f, 0.0f);
        window->DC.CurrLineTextBaseOffset = window->DC.PrevLineTextBaseOffset = 0.0f;
        window->DC.NavHideHighlightOneFrame = false;
        window->DC.NavHasScroll = (window->ScrollMax.y > 0.0f);
        window->DC.NavLayerActiveMask = window->DC.NavLayerActiveMaskNext;
        window->DC.NavLayerActiveMaskNext = 0x00;
        window->DC.MenuBarAppending = false;
        window->DC.ChildWindows.resize(0);
        window->DC.LayoutType = ImGuiLayoutType_Vertical;
        window->DC.ParentLayoutType = parent_window ? parent_window->DC.LayoutType : ImGuiLayoutType_Vertical;
        window->DC.FocusCounterAll = window->DC.FocusCounterTab = -1;
        window->DC.ItemFlags = parent_window ? parent_window->DC.ItemFlags : ImGuiItemFlags_Default_;
        window->DC.ItemWidth = window->ItemWidthDefault;
        window->DC.TextWrapPos = -1.0f; // disabled
        window->DC.ItemFlagsStack.resize(0);
        window->DC.ItemWidthStack.resize(0);
        window->DC.TextWrapPosStack.resize(0);
        window->DC.CurrentColumns = NULL;
        window->DC.TreeDepth = 0;
        window->DC.TreeMayJumpToParentOnPopMask = 0x00;
        window->DC.StateStorage = &window->StateStorage;
        window->DC.GroupStack.resize(0);
        window->MenuColumns.Update(3, style.ItemSpacing.x, window_just_activated_by_user);

        if ((flags & ImGuiWindowFlags_ChildWindow) && (window->DC.ItemFlags != parent_window->DC.ItemFlags))
        {
            window->DC.ItemFlags = parent_window->DC.ItemFlags;
            window->DC.ItemFlagsStack.push_back(window->DC.ItemFlags);
        }

        if (window->AutoFitFramesX > 0)
            window->AutoFitFramesX--;
        if (window->AutoFitFramesY > 0)
            window->AutoFitFramesY--;

        // Apply focus (we need to call FocusWindow() AFTER setting DC.CursorStartPos so our initial navigation reference rectangle can start around there)
        if (want_focus)
        {
            FocusWindow(window);
            NavInitWindow(window, false);
        }

        // Title bar
        if (!(flags & ImGuiWindowFlags_NoTitleBar))
            RenderWindowTitleBarContents(window, title_bar_rect, name, p_open);

        // Pressing CTRL+C while holding on a window copy its content to the clipboard
        // This works but 1. doesn't handle multiple Begin/End pairs, 2. recursing into another Begin/End pair - so we need to work that out and add better logging scope.
        // Maybe we can support CTRL+C on every element?
        /*
        if (g.ActiveId == move_id)
            if (g.IO.KeyCtrl && IsKeyPressedMap(ImGuiKey_C))
                LogToClipboard();
        */

        // We fill last item data based on Title Bar/Tab, in order for IsItemHovered() and IsItemActive() to be usable after Begin().
        // This is useful to allow creating context menus on title bar only, etc.
        window->DC.LastItemId = window->MoveId;
        window->DC.LastItemStatusFlags = IsMouseHoveringRect(title_bar_rect.Min, title_bar_rect.Max, false) ? ImGuiItemStatusFlags_HoveredRect : 0;
        window->DC.LastItemRect = title_bar_rect;
#ifdef IMGUI_ENABLE_TEST_ENGINE
        if (!(window->Flags & ImGuiWindowFlags_NoTitleBar))
            IMGUI_TEST_ENGINE_ITEM_ADD(window->DC.LastItemRect, window->DC.LastItemId);
#endif
    }
    else
    {
        // Append
        SetCurrentWindow(window);
    }

    PushClipRect(window->InnerClipRect.Min, window->InnerClipRect.Max, true);

    // Clear 'accessed' flag last thing (After PushClipRect which will set the flag. We want the flag to stay false when the default "Debug" window is unused)
    if (first_begin_of_the_frame)
        window->WriteAccessed = false;

    window->BeginCount++;
    g.NextWindowData.ClearFlags();

    if (flags & ImGuiWindowFlags_ChildWindow)
    {
        // Child window can be out of sight and have "negative" clip windows.
        // Mark them as collapsed so commands are skipped earlier (we can't manually collapse them because they have no title bar).
        IM_ASSERT((flags & ImGuiWindowFlags_NoTitleBar) != 0);
        if (!(flags & ImGuiWindowFlags_AlwaysAutoResize) && window->AutoFitFramesX <= 0 && window->AutoFitFramesY <= 0)
            if (window->OuterRectClipped.Min.x >= window->OuterRectClipped.Max.x || window->OuterRectClipped.Min.y >= window->OuterRectClipped.Max.y)
                window->HiddenFramesCanSkipItems = 1;

        // Hide along with parent or if parent is collapsed
        if (parent_window && (parent_window->Collapsed || parent_window->HiddenFramesCanSkipItems > 0))
            window->HiddenFramesCanSkipItems = 1;
        if (parent_window && (parent_window->Collapsed || parent_window->HiddenFramesCannotSkipItems > 0))
            window->HiddenFramesCannotSkipItems = 1;
    }

    // Don't render if style alpha is 0.0 at the time of Begin(). This is arbitrary and inconsistent but has been there for a long while (may remove at some point)
    if (style.Alpha <= 0.0f)
        window->HiddenFramesCanSkipItems = 1;

    // Update the Hidden flag
    window->Hidden = (window->HiddenFramesCanSkipItems > 0) || (window->HiddenFramesCannotSkipItems > 0);

    // Update the SkipItems flag, used to early out of all items functions (no layout required)
    bool skip_items = false;
    if (window->Collapsed || !window->Active || window->Hidden)
        if (window->AutoFitFramesX <= 0 && window->AutoFitFramesY <= 0 && window->HiddenFramesCannotSkipItems <= 0)
            skip_items = true;
    window->SkipItems = skip_items;

    return !skip_items;
}

void ImGui::End()
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;

    // Error checking: verify that user hasn't called End() too many times!
    if (g.CurrentWindowStack.Size <= 1 && g.WithinFrameScopeWithImplicitWindow)
    {
        IM_ASSERT_USER_ERROR(g.CurrentWindowStack.Size > 1, "Calling End() too many times!");
        return;
    }
    IM_ASSERT(g.CurrentWindowStack.Size > 0);

    // Error checking: verify that user doesn't directly call End() on a child window.
    if (window->Flags & ImGuiWindowFlags_ChildWindow)
        IM_ASSERT_USER_ERROR(g.WithinEndChild, "Must call EndChild() and not End()!");

    // Close anything that is open
    if (window->DC.CurrentColumns)
        EndColumns();
    PopClipRect();   // Inner window clip rectangle

    // Stop logging
    if (!(window->Flags & ImGuiWindowFlags_ChildWindow))    // FIXME: add more options for scope of logging
        LogFinish();

    // Pop from window stack
    g.CurrentWindowStack.pop_back();
    if (window->Flags & ImGuiWindowFlags_Popup)
        g.BeginPopupStack.pop_back();
    ErrorCheckBeginEndCompareStacksSize(window, false);
    SetCurrentWindow(g.CurrentWindowStack.empty() ? NULL : g.CurrentWindowStack.back());
}

void ImGui::BringWindowToFocusFront(ImGuiWindow* window)
{
    ImGuiContext& g = *GImGui;
    if (g.WindowsFocusOrder.back() == window)
        return;
    for (int i = g.WindowsFocusOrder.Size - 2; i >= 0; i--) // We can ignore the top-most window
        if (g.WindowsFocusOrder[i] == window)
        {
            memmove(&g.WindowsFocusOrder[i], &g.WindowsFocusOrder[i + 1], (size_t)(g.WindowsFocusOrder.Size - i - 1) * sizeof(ImGuiWindow*));
            g.WindowsFocusOrder[g.WindowsFocusOrder.Size - 1] = window;
            break;
        }
}

void ImGui::BringWindowToDisplayFront(ImGuiWindow* window)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* current_front_window = g.Windows.back();
    if (current_front_window == window || current_front_window->RootWindow == window)
        return;
    for (int i = g.Windows.Size - 2; i >= 0; i--) // We can ignore the top-most window
        if (g.Windows[i] == window)
        {
            memmove(&g.Windows[i], &g.Windows[i + 1], (size_t)(g.Windows.Size - i - 1) * sizeof(ImGuiWindow*));
            g.Windows[g.Windows.Size - 1] = window;
            break;
        }
}

void ImGui::BringWindowToDisplayBack(ImGuiWindow* window)
{
    ImGuiContext& g = *GImGui;
    if (g.Windows[0] == window)
        return;
    for (int i = 0; i < g.Windows.Size; i++)
        if (g.Windows[i] == window)
        {
            memmove(&g.Windows[1], &g.Windows[0], (size_t)i * sizeof(ImGuiWindow*));
            g.Windows[0] = window;
            break;
        }
}

// Moving window to front of display and set focus (which happens to be back of our sorted list)
void ImGui::FocusWindow(ImGuiWindow* window)
{
    ImGuiContext& g = *GImGui;

    if (g.NavWindow != window)
    {
        g.NavWindow = window;
        if (window && g.NavDisableMouseHover)
            g.NavMousePosDirty = true;
        g.NavInitRequest = false;
        g.NavId = window ? window->NavLastIds[0] : 0; // Restore NavId
        g.NavIdIsAlive = false;
        g.NavLayer = ImGuiNavLayer_Main;
        //IMGUI_DEBUG_LOG("FocusWindow(\"%s\")\n", window ? window->Name : NULL);
    }

    // Close popups if any
    ClosePopupsOverWindow(window, false);

    // Passing NULL allow to disable keyboard focus
    if (!window)
        return;

    // Move the root window to the top of the pile
    if (window->RootWindow)
        window = window->RootWindow;

    // Steal focus on active widgets
    if (window->Flags & ImGuiWindowFlags_Popup) // FIXME: This statement should be unnecessary. Need further testing before removing it..
        if (g.ActiveId != 0 && g.ActiveIdWindow && g.ActiveIdWindow->RootWindow != window)
            ClearActiveID();

    // Bring to front
    BringWindowToFocusFront(window);
    if (!(window->Flags & ImGuiWindowFlags_NoBringToFrontOnFocus))
        BringWindowToDisplayFront(window);
}

void ImGui::FocusTopMostWindowUnderOne(ImGuiWindow* under_this_window, ImGuiWindow* ignore_window)
{
    ImGuiContext& g = *GImGui;

    int start_idx = g.WindowsFocusOrder.Size - 1;
    if (under_this_window != NULL)
    {
        int under_this_window_idx = FindWindowFocusIndex(under_this_window);
        if (under_this_window_idx != -1)
            start_idx = under_this_window_idx - 1;
    }
    for (int i = start_idx; i >= 0; i--)
    {
        // We may later decide to test for different NoXXXInputs based on the active navigation input (mouse vs nav) but that may feel more confusing to the user.
        ImGuiWindow* window = g.WindowsFocusOrder[i];
        if (window != ignore_window && window->WasActive && !(window->Flags & ImGuiWindowFlags_ChildWindow))
            if ((window->Flags & (ImGuiWindowFlags_NoMouseInputs | ImGuiWindowFlags_NoNavInputs)) != (ImGuiWindowFlags_NoMouseInputs | ImGuiWindowFlags_NoNavInputs))
            {
                ImGuiWindow* focus_window = NavRestoreLastChildNavWindow(window);
                FocusWindow(focus_window);
                return;
            }
    }
    FocusWindow(NULL);
}

void ImGui::SetNextItemWidth(float item_width)
{
    ImGuiContext& g = *GImGui;
    g.NextItemData.Flags |= ImGuiNextItemDataFlags_HasWidth;
    g.NextItemData.Width = item_width;
}

void ImGui::PushItemWidth(float item_width)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    window->DC.ItemWidth = (item_width == 0.0f ? window->ItemWidthDefault : item_width);
    window->DC.ItemWidthStack.push_back(window->DC.ItemWidth);
    g.NextItemData.Flags &= ~ImGuiNextItemDataFlags_HasWidth;
}

void ImGui::PushMultiItemsWidths(int components, float w_full)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    const ImGuiStyle& style = g.Style;
    const float w_item_one  = ImMax(1.0f, IM_FLOOR((w_full - (style.ItemInnerSpacing.x) * (components-1)) / (float)components));
    const float w_item_last = ImMax(1.0f, IM_FLOOR(w_full - (w_item_one + style.ItemInnerSpacing.x) * (components-1)));
    window->DC.ItemWidthStack.push_back(w_item_last);
    for (int i = 0; i < components-1; i++)
        window->DC.ItemWidthStack.push_back(w_item_one);
    window->DC.ItemWidth = window->DC.ItemWidthStack.back();
    g.NextItemData.Flags &= ~ImGuiNextItemDataFlags_HasWidth;
}

void ImGui::PopItemWidth()
{
    ImGuiWindow* window = GetCurrentWindow();
    window->DC.ItemWidthStack.pop_back();
    window->DC.ItemWidth = window->DC.ItemWidthStack.empty() ? window->ItemWidthDefault : window->DC.ItemWidthStack.back();
}

// Calculate default item width given value passed to PushItemWidth() or SetNextItemWidth().
// The SetNextItemWidth() data is generally cleared/consumed by ItemAdd() or NextItemData.ClearFlags()
float ImGui::CalcItemWidth()
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    float w;
    if (g.NextItemData.Flags & ImGuiNextItemDataFlags_HasWidth)
        w = g.NextItemData.Width;
    else
        w = window->DC.ItemWidth;
    if (w < 0.0f)
    {
        float region_max_x = GetContentRegionMaxAbs().x;
        w = ImMax(1.0f, region_max_x - window->DC.CursorPos.x + w);
    }
    w = IM_FLOOR(w);
    return w;
}

// [Internal] Calculate full item size given user provided 'size' parameter and default width/height. Default width is often == CalcItemWidth().
// Those two functions CalcItemWidth vs CalcItemSize are awkwardly named because they are not fully symmetrical.
// Note that only CalcItemWidth() is publicly exposed.
// The 4.0f here may be changed to match CalcItemWidth() and/or BeginChild() (right now we have a mismatch which is harmless but undesirable)
ImVec2 ImGui::CalcItemSize(ImVec2 size, float default_w, float default_h)
{
    ImGuiWindow* window = GImGui->CurrentWindow;

    ImVec2 region_max;
    if (size.x < 0.0f || size.y < 0.0f)
        region_max = GetContentRegionMaxAbs();

    if (size.x == 0.0f)
        size.x = default_w;
    else if (size.x < 0.0f)
        size.x = ImMax(4.0f, region_max.x - window->DC.CursorPos.x + size.x);

    if (size.y == 0.0f)
        size.y = default_h;
    else if (size.y < 0.0f)
        size.y = ImMax(4.0f, region_max.y - window->DC.CursorPos.y + size.y);

    return size;
}

void ImGui::SetCurrentFont(ImFont* font)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(font && font->IsLoaded());    // Font Atlas not created. Did you call io.Fonts->GetTexDataAsRGBA32 / GetTexDataAsAlpha8 ?
    IM_ASSERT(font->Scale > 0.0f);
    g.Font = font;
    g.FontBaseSize = ImMax(1.0f, g.IO.FontGlobalScale * g.Font->FontSize * g.Font->Scale);
    g.FontSize = g.CurrentWindow ? g.CurrentWindow->CalcFontSize() : 0.0f;

    ImFontAtlas* atlas = g.Font->ContainerAtlas;
    g.DrawListSharedData.TexUvWhitePixel = atlas->TexUvWhitePixel;
    g.DrawListSharedData.Font = g.Font;
    g.DrawListSharedData.FontSize = g.FontSize;
}

void ImGui::PushFont(ImFont* font)
{
    ImGuiContext& g = *GImGui;
    if (!font)
        font = GetDefaultFont();
    SetCurrentFont(font);
    g.FontStack.push_back(font);
    g.CurrentWindow->DrawList->PushTextureID(font->ContainerAtlas->TexID);
}

void  ImGui::PopFont()
{
    ImGuiContext& g = *GImGui;
    g.CurrentWindow->DrawList->PopTextureID();
    g.FontStack.pop_back();
    SetCurrentFont(g.FontStack.empty() ? GetDefaultFont() : g.FontStack.back());
}

void ImGui::PushItemFlag(ImGuiItemFlags option, bool enabled)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (enabled)
        window->DC.ItemFlags |= option;
    else
        window->DC.ItemFlags &= ~option;
    window->DC.ItemFlagsStack.push_back(window->DC.ItemFlags);
}

void ImGui::PopItemFlag()
{
    ImGuiWindow* window = GetCurrentWindow();
    window->DC.ItemFlagsStack.pop_back();
    window->DC.ItemFlags = window->DC.ItemFlagsStack.empty() ? ImGuiItemFlags_Default_ : window->DC.ItemFlagsStack.back();
}

// FIXME: Look into renaming this once we have settled the new Focus/Activation/TabStop system.
void ImGui::PushAllowKeyboardFocus(bool allow_keyboard_focus)
{
    PushItemFlag(ImGuiItemFlags_NoTabStop, !allow_keyboard_focus);
}

void ImGui::PopAllowKeyboardFocus()
{
    PopItemFlag();
}

void ImGui::PushButtonRepeat(bool repeat)
{
    PushItemFlag(ImGuiItemFlags_ButtonRepeat, repeat);
}

void ImGui::PopButtonRepeat()
{
    PopItemFlag();
}

void ImGui::PushTextWrapPos(float wrap_pos_x)
{
    ImGuiWindow* window = GetCurrentWindow();
    window->DC.TextWrapPos = wrap_pos_x;
    window->DC.TextWrapPosStack.push_back(wrap_pos_x);
}

void ImGui::PopTextWrapPos()
{
    ImGuiWindow* window = GetCurrentWindow();
    window->DC.TextWrapPosStack.pop_back();
    window->DC.TextWrapPos = window->DC.TextWrapPosStack.empty() ? -1.0f : window->DC.TextWrapPosStack.back();
}

// FIXME: This may incur a round-trip (if the end user got their data from a float4) but eventually we aim to store the in-flight colors as ImU32
void ImGui::PushStyleColor(ImGuiCol idx, ImU32 col)
{
    ImGuiContext& g = *GImGui;
    ImGuiColorMod backup;
    backup.Col = idx;
    backup.BackupValue = g.Style.Colors[idx];
    g.ColorModifiers.push_back(backup);
    g.Style.Colors[idx] = ColorConvertU32ToFloat4(col);
}

void ImGui::PushStyleColor(ImGuiCol idx, const ImVec4& col)
{
    ImGuiContext& g = *GImGui;
    ImGuiColorMod backup;
    backup.Col = idx;
    backup.BackupValue = g.Style.Colors[idx];
    g.ColorModifiers.push_back(backup);
    g.Style.Colors[idx] = col;
}

void ImGui::PopStyleColor(int count)
{
    ImGuiContext& g = *GImGui;
    while (count > 0)
    {
        ImGuiColorMod& backup = g.ColorModifiers.back();
        g.Style.Colors[backup.Col] = backup.BackupValue;
        g.ColorModifiers.pop_back();
        count--;
    }
}

struct ImGuiStyleVarInfo
{
    ImGuiDataType   Type;
    ImU32           Count;
    ImU32           Offset;
    void*           GetVarPtr(ImGuiStyle* style) const { return (void*)((unsigned char*)style + Offset); }
};

static const ImGuiStyleVarInfo GStyleVarInfo[] =
{
    { ImGuiDataType_Float, 1, (ImU32)IM_OFFSETOF(ImGuiStyle, Alpha) },               // ImGuiStyleVar_Alpha
    { ImGuiDataType_Float, 2, (ImU32)IM_OFFSETOF(ImGuiStyle, WindowPadding) },       // ImGuiStyleVar_WindowPadding
    { ImGuiDataType_Float, 1, (ImU32)IM_OFFSETOF(ImGuiStyle, WindowRounding) },      // ImGuiStyleVar_WindowRounding
    { ImGuiDataType_Float, 1, (ImU32)IM_OFFSETOF(ImGuiStyle, WindowBorderSize) },    // ImGuiStyleVar_WindowBorderSize
    { ImGuiDataType_Float, 2, (ImU32)IM_OFFSETOF(ImGuiStyle, WindowMinSize) },       // ImGuiStyleVar_WindowMinSize
    { ImGuiDataType_Float, 2, (ImU32)IM_OFFSETOF(ImGuiStyle, WindowTitleAlign) },    // ImGuiStyleVar_WindowTitleAlign
    { ImGuiDataType_Float, 1, (ImU32)IM_OFFSETOF(ImGuiStyle, ChildRounding) },       // ImGuiStyleVar_ChildRounding
    { ImGuiDataType_Float, 1, (ImU32)IM_OFFSETOF(ImGuiStyle, ChildBorderSize) },     // ImGuiStyleVar_ChildBorderSize
    { ImGuiDataType_Float, 1, (ImU32)IM_OFFSETOF(ImGuiStyle, PopupRounding) },       // ImGuiStyleVar_PopupRounding
    { ImGuiDataType_Float, 1, (ImU32)IM_OFFSETOF(ImGuiStyle, PopupBorderSize) },     // ImGuiStyleVar_PopupBorderSize
    { ImGuiDataType_Float, 2, (ImU32)IM_OFFSETOF(ImGuiStyle, FramePadding) },        // ImGuiStyleVar_FramePadding
    { ImGuiDataType_Float, 1, (ImU32)IM_OFFSETOF(ImGuiStyle, FrameRounding) },       // ImGuiStyleVar_FrameRounding
    { ImGuiDataType_Float, 1, (ImU32)IM_OFFSETOF(ImGuiStyle, FrameBorderSize) },     // ImGuiStyleVar_FrameBorderSize
    { ImGuiDataType_Float, 2, (ImU32)IM_OFFSETOF(ImGuiStyle, ItemSpacing) },         // ImGuiStyleVar_ItemSpacing
    { ImGuiDataType_Float, 2, (ImU32)IM_OFFSETOF(ImGuiStyle, ItemInnerSpacing) },    // ImGuiStyleVar_ItemInnerSpacing
    { ImGuiDataType_Float, 1, (ImU32)IM_OFFSETOF(ImGuiStyle, IndentSpacing) },       // ImGuiStyleVar_IndentSpacing
    { ImGuiDataType_Float, 1, (ImU32)IM_OFFSETOF(ImGuiStyle, ScrollbarSize) },       // ImGuiStyleVar_ScrollbarSize
    { ImGuiDataType_Float, 1, (ImU32)IM_OFFSETOF(ImGuiStyle, ScrollbarRounding) },   // ImGuiStyleVar_ScrollbarRounding
    { ImGuiDataType_Float, 1, (ImU32)IM_OFFSETOF(ImGuiStyle, GrabMinSize) },         // ImGuiStyleVar_GrabMinSize
    { ImGuiDataType_Float, 1, (ImU32)IM_OFFSETOF(ImGuiStyle, GrabRounding) },        // ImGuiStyleVar_GrabRounding
    { ImGuiDataType_Float, 1, (ImU32)IM_OFFSETOF(ImGuiStyle, TabRounding) },         // ImGuiStyleVar_TabRounding
    { ImGuiDataType_Float, 2, (ImU32)IM_OFFSETOF(ImGuiStyle, ButtonTextAlign) },     // ImGuiStyleVar_ButtonTextAlign
    { ImGuiDataType_Float, 2, (ImU32)IM_OFFSETOF(ImGuiStyle, SelectableTextAlign) }, // ImGuiStyleVar_SelectableTextAlign
};

static const ImGuiStyleVarInfo* GetStyleVarInfo(ImGuiStyleVar idx)
{
    IM_ASSERT(idx >= 0 && idx < ImGuiStyleVar_COUNT);
    IM_ASSERT(IM_ARRAYSIZE(GStyleVarInfo) == ImGuiStyleVar_COUNT);
    return &GStyleVarInfo[idx];
}

void ImGui::PushStyleVar(ImGuiStyleVar idx, float val)
{
    const ImGuiStyleVarInfo* var_info = GetStyleVarInfo(idx);
    if (var_info->Type == ImGuiDataType_Float && var_info->Count == 1)
    {
        ImGuiContext& g = *GImGui;
        float* pvar = (float*)var_info->GetVarPtr(&g.Style);
        g.StyleModifiers.push_back(ImGuiStyleMod(idx, *pvar));
        *pvar = val;
        return;
    }
    IM_ASSERT(0 && "Called PushStyleVar() float variant but variable is not a float!");
}

void ImGui::PushStyleVar(ImGuiStyleVar idx, const ImVec2& val)
{
    const ImGuiStyleVarInfo* var_info = GetStyleVarInfo(idx);
    if (var_info->Type == ImGuiDataType_Float && var_info->Count == 2)
    {
        ImGuiContext& g = *GImGui;
        ImVec2* pvar = (ImVec2*)var_info->GetVarPtr(&g.Style);
        g.StyleModifiers.push_back(ImGuiStyleMod(idx, *pvar));
        *pvar = val;
        return;
    }
    IM_ASSERT(0 && "Called PushStyleVar() ImVec2 variant but variable is not a ImVec2!");
}

void ImGui::PopStyleVar(int count)
{
    ImGuiContext& g = *GImGui;
    while (count > 0)
    {
        // We avoid a generic memcpy(data, &backup.Backup.., GDataTypeSize[info->Type] * info->Count), the overhead in Debug is not worth it.
        ImGuiStyleMod& backup = g.StyleModifiers.back();
        const ImGuiStyleVarInfo* info = GetStyleVarInfo(backup.VarIdx);
        void* data = info->GetVarPtr(&g.Style);
        if (info->Type == ImGuiDataType_Float && info->Count == 1)      { ((float*)data)[0] = backup.BackupFloat[0]; }
        else if (info->Type == ImGuiDataType_Float && info->Count == 2) { ((float*)data)[0] = backup.BackupFloat[0]; ((float*)data)[1] = backup.BackupFloat[1]; }
        g.StyleModifiers.pop_back();
        count--;
    }
}

const char* ImGui::GetStyleColorName(ImGuiCol idx)
{
    // Create switch-case from enum with regexp: ImGuiCol_{.*}, --> case ImGuiCol_\1: return "\1";
    switch (idx)
    {
    case ImGuiCol_Text: return "Text";
    case ImGuiCol_TextDisabled: return "TextDisabled";
    case ImGuiCol_WindowBg: return "WindowBg";
    case ImGuiCol_ChildBg: return "ChildBg";
    case ImGuiCol_PopupBg: return "PopupBg";
    case ImGuiCol_Border: return "Border";
    case ImGuiCol_BorderShadow: return "BorderShadow";
    case ImGuiCol_FrameBg: return "FrameBg";
    case ImGuiCol_FrameBgHovered: return "FrameBgHovered";
    case ImGuiCol_FrameBgActive: return "FrameBgActive";
    case ImGuiCol_TitleBg: return "TitleBg";
    case ImGuiCol_TitleBgActive: return "TitleBgActive";
    case ImGuiCol_TitleBgCollapsed: return "TitleBgCollapsed";
    case ImGuiCol_MenuBarBg: return "MenuBarBg";
    case ImGuiCol_ScrollbarBg: return "ScrollbarBg";
    case ImGuiCol_ScrollbarGrab: return "ScrollbarGrab";
    case ImGuiCol_ScrollbarGrabHovered: return "ScrollbarGrabHovered";
    case ImGuiCol_ScrollbarGrabActive: return "ScrollbarGrabActive";
    case ImGuiCol_CheckMark: return "CheckMark";
    case ImGuiCol_SliderGrab: return "SliderGrab";
    case ImGuiCol_SliderGrabActive: return "SliderGrabActive";
    case ImGuiCol_Button: return "Button";
    case ImGuiCol_ButtonHovered: return "ButtonHovered";
    case ImGuiCol_ButtonActive: return "ButtonActive";
    case ImGuiCol_Header: return "Header";
    case ImGuiCol_HeaderHovered: return "HeaderHovered";
    case ImGuiCol_HeaderActive: return "HeaderActive";
    case ImGuiCol_Separator: return "Separator";
    case ImGuiCol_SeparatorHovered: return "SeparatorHovered";
    case ImGuiCol_SeparatorActive: return "SeparatorActive";
    case ImGuiCol_ResizeGrip: return "ResizeGrip";
    case ImGuiCol_ResizeGripHovered: return "ResizeGripHovered";
    case ImGuiCol_ResizeGripActive: return "ResizeGripActive";
    case ImGuiCol_Tab: return "Tab";
    case ImGuiCol_TabHovered: return "TabHovered";
    case ImGuiCol_TabActive: return "TabActive";
    case ImGuiCol_TabUnfocused: return "TabUnfocused";
    case ImGuiCol_TabUnfocusedActive: return "TabUnfocusedActive";
    case ImGuiCol_PlotLines: return "PlotLines";
    case ImGuiCol_PlotLinesHovered: return "PlotLinesHovered";
    case ImGuiCol_PlotHistogram: return "PlotHistogram";
    case ImGuiCol_PlotHistogramHovered: return "PlotHistogramHovered";
    case ImGuiCol_TextSelectedBg: return "TextSelectedBg";
    case ImGuiCol_DragDropTarget: return "DragDropTarget";
    case ImGuiCol_NavHighlight: return "NavHighlight";
    case ImGuiCol_NavWindowingHighlight: return "NavWindowingHighlight";
    case ImGuiCol_NavWindowingDimBg: return "NavWindowingDimBg";
    case ImGuiCol_ModalWindowDimBg: return "ModalWindowDimBg";
    }
    IM_ASSERT(0);
    return "Unknown";
}

bool ImGui::IsWindowChildOf(ImGuiWindow* window, ImGuiWindow* potential_parent)
{
    if (window->RootWindow == potential_parent)
        return true;
    while (window != NULL)
    {
        if (window == potential_parent)
            return true;
        window = window->ParentWindow;
    }
    return false;
}

bool ImGui::IsWindowHovered(ImGuiHoveredFlags flags)
{
    IM_ASSERT((flags & ImGuiHoveredFlags_AllowWhenOverlapped) == 0);   // Flags not supported by this function
    ImGuiContext& g = *GImGui;

    if (flags & ImGuiHoveredFlags_AnyWindow)
    {
        if (g.HoveredWindow == NULL)
            return false;
    }
    else
    {
        switch (flags & (ImGuiHoveredFlags_RootWindow | ImGuiHoveredFlags_ChildWindows))
        {
        case ImGuiHoveredFlags_RootWindow | ImGuiHoveredFlags_ChildWindows:
            if (g.HoveredRootWindow != g.CurrentWindow->RootWindow)
                return false;
            break;
        case ImGuiHoveredFlags_RootWindow:
            if (g.HoveredWindow != g.CurrentWindow->RootWindow)
                return false;
            break;
        case ImGuiHoveredFlags_ChildWindows:
            if (g.HoveredWindow == NULL || !IsWindowChildOf(g.HoveredWindow, g.CurrentWindow))
                return false;
            break;
        default:
            if (g.HoveredWindow != g.CurrentWindow)
                return false;
            break;
        }
    }

    if (!IsWindowContentHoverable(g.HoveredWindow, flags))
        return false;
    if (!(flags & ImGuiHoveredFlags_AllowWhenBlockedByActiveItem))
        if (g.ActiveId != 0 && !g.ActiveIdAllowOverlap && g.ActiveId != g.HoveredWindow->MoveId)
            return false;
    return true;
}

bool ImGui::IsWindowFocused(ImGuiFocusedFlags flags)
{
    ImGuiContext& g = *GImGui;

    if (flags & ImGuiFocusedFlags_AnyWindow)
        return g.NavWindow != NULL;

    IM_ASSERT(g.CurrentWindow);     // Not inside a Begin()/End()
    switch (flags & (ImGuiFocusedFlags_RootWindow | ImGuiFocusedFlags_ChildWindows))
    {
    case ImGuiFocusedFlags_RootWindow | ImGuiFocusedFlags_ChildWindows:
        return g.NavWindow && g.NavWindow->RootWindow == g.CurrentWindow->RootWindow;
    case ImGuiFocusedFlags_RootWindow:
        return g.NavWindow == g.CurrentWindow->RootWindow;
    case ImGuiFocusedFlags_ChildWindows:
        return g.NavWindow && IsWindowChildOf(g.NavWindow, g.CurrentWindow);
    default:
        return g.NavWindow == g.CurrentWindow;
    }
}

// Can we focus this window with CTRL+TAB (or PadMenu + PadFocusPrev/PadFocusNext)
// Note that NoNavFocus makes the window not reachable with CTRL+TAB but it can still be focused with mouse or programmaticaly.
// If you want a window to never be focused, you may use the e.g. NoInputs flag.
bool ImGui::IsWindowNavFocusable(ImGuiWindow* window)
{
    return window->Active && window == window->RootWindow && !(window->Flags & ImGuiWindowFlags_NoNavFocus);
}

float ImGui::GetWindowWidth()
{
    ImGuiWindow* window = GImGui->CurrentWindow;
    return window->Size.x;
}

float ImGui::GetWindowHeight()
{
    ImGuiWindow* window = GImGui->CurrentWindow;
    return window->Size.y;
}

ImVec2 ImGui::GetWindowPos()
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    return window->Pos;
}

void ImGui::SetWindowPos(ImGuiWindow* window, const ImVec2& pos, ImGuiCond cond)
{
    // Test condition (NB: bit 0 is always true) and clear flags for next time
    if (cond && (window->SetWindowPosAllowFlags & cond) == 0)
        return;

    IM_ASSERT(cond == 0 || ImIsPowerOfTwo(cond)); // Make sure the user doesn't attempt to combine multiple condition flags.
    window->SetWindowPosAllowFlags &= ~(ImGuiCond_Once | ImGuiCond_FirstUseEver | ImGuiCond_Appearing);
    window->SetWindowPosVal = ImVec2(FLT_MAX, FLT_MAX);

    // Set
    const ImVec2 old_pos = window->Pos;
    window->Pos = ImFloor(pos);
    ImVec2 offset = window->Pos - old_pos;
    window->DC.CursorPos += offset;         // As we happen to move the window while it is being appended to (which is a bad idea - will smear) let's at least offset the cursor
    window->DC.CursorMaxPos += offset;      // And more importantly we need to offset CursorMaxPos/CursorStartPos this so ContentSize calculation doesn't get affected.
    window->DC.CursorStartPos += offset;
}

void ImGui::SetWindowPos(const ImVec2& pos, ImGuiCond cond)
{
    ImGuiWindow* window = GetCurrentWindowRead();
    SetWindowPos(window, pos, cond);
}

void ImGui::SetWindowPos(const char* name, const ImVec2& pos, ImGuiCond cond)
{
    if (ImGuiWindow* window = FindWindowByName(name))
        SetWindowPos(window, pos, cond);
}

ImVec2 ImGui::GetWindowSize()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->Size;
}

void ImGui::SetWindowSize(ImGuiWindow* window, const ImVec2& size, ImGuiCond cond)
{
    // Test condition (NB: bit 0 is always true) and clear flags for next time
    if (cond && (window->SetWindowSizeAllowFlags & cond) == 0)
        return;

    IM_ASSERT(cond == 0 || ImIsPowerOfTwo(cond)); // Make sure the user doesn't attempt to combine multiple condition flags.
    window->SetWindowSizeAllowFlags &= ~(ImGuiCond_Once | ImGuiCond_FirstUseEver | ImGuiCond_Appearing);

    // Set
    if (size.x > 0.0f)
    {
        window->AutoFitFramesX = 0;
        window->SizeFull.x = IM_FLOOR(size.x);
    }
    else
    {
        window->AutoFitFramesX = 2;
        window->AutoFitOnlyGrows = false;
    }
    if (size.y > 0.0f)
    {
        window->AutoFitFramesY = 0;
        window->SizeFull.y = IM_FLOOR(size.y);
    }
    else
    {
        window->AutoFitFramesY = 2;
        window->AutoFitOnlyGrows = false;
    }
}

void ImGui::SetWindowSize(const ImVec2& size, ImGuiCond cond)
{
    SetWindowSize(GImGui->CurrentWindow, size, cond);
}

void ImGui::SetWindowSize(const char* name, const ImVec2& size, ImGuiCond cond)
{
    if (ImGuiWindow* window = FindWindowByName(name))
        SetWindowSize(window, size, cond);
}

void ImGui::SetWindowCollapsed(ImGuiWindow* window, bool collapsed, ImGuiCond cond)
{
    // Test condition (NB: bit 0 is always true) and clear flags for next time
    if (cond && (window->SetWindowCollapsedAllowFlags & cond) == 0)
        return;
    window->SetWindowCollapsedAllowFlags &= ~(ImGuiCond_Once | ImGuiCond_FirstUseEver | ImGuiCond_Appearing);

    // Set
    window->Collapsed = collapsed;
}

void ImGui::SetWindowCollapsed(bool collapsed, ImGuiCond cond)
{
    SetWindowCollapsed(GImGui->CurrentWindow, collapsed, cond);
}

bool ImGui::IsWindowCollapsed()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->Collapsed;
}

bool ImGui::IsWindowAppearing()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->Appearing;
}

void ImGui::SetWindowCollapsed(const char* name, bool collapsed, ImGuiCond cond)
{
    if (ImGuiWindow* window = FindWindowByName(name))
        SetWindowCollapsed(window, collapsed, cond);
}

void ImGui::SetWindowFocus()
{
    FocusWindow(GImGui->CurrentWindow);
}

void ImGui::SetWindowFocus(const char* name)
{
    if (name)
    {
        if (ImGuiWindow* window = FindWindowByName(name))
            FocusWindow(window);
    }
    else
    {
        FocusWindow(NULL);
    }
}

void ImGui::SetNextWindowPos(const ImVec2& pos, ImGuiCond cond, const ImVec2& pivot)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(cond == 0 || ImIsPowerOfTwo(cond)); // Make sure the user doesn't attempt to combine multiple condition flags.
    g.NextWindowData.Flags |= ImGuiNextWindowDataFlags_HasPos;
    g.NextWindowData.PosVal = pos;
    g.NextWindowData.PosPivotVal = pivot;
    g.NextWindowData.PosCond = cond ? cond : ImGuiCond_Always;
}

void ImGui::SetNextWindowSize(const ImVec2& size, ImGuiCond cond)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(cond == 0 || ImIsPowerOfTwo(cond)); // Make sure the user doesn't attempt to combine multiple condition flags.
    g.NextWindowData.Flags |= ImGuiNextWindowDataFlags_HasSize;
    g.NextWindowData.SizeVal = size;
    g.NextWindowData.SizeCond = cond ? cond : ImGuiCond_Always;
}

void ImGui::SetNextWindowSizeConstraints(const ImVec2& size_min, const ImVec2& size_max, ImGuiSizeCallback custom_callback, void* custom_callback_user_data)
{
    ImGuiContext& g = *GImGui;
    g.NextWindowData.Flags |= ImGuiNextWindowDataFlags_HasSizeConstraint;
    g.NextWindowData.SizeConstraintRect = ImRect(size_min, size_max);
    g.NextWindowData.SizeCallback = custom_callback;
    g.NextWindowData.SizeCallbackUserData = custom_callback_user_data;
}

// Content size = inner scrollable rectangle, padded with WindowPadding.
// SetNextWindowContentSize(ImVec2(100,100) + ImGuiWindowFlags_AlwaysAutoResize will always allow submitting a 100x100 item.
void ImGui::SetNextWindowContentSize(const ImVec2& size)
{
    ImGuiContext& g = *GImGui;
    g.NextWindowData.Flags |= ImGuiNextWindowDataFlags_HasContentSize;
    g.NextWindowData.ContentSizeVal = size;
}

void ImGui::SetNextWindowCollapsed(bool collapsed, ImGuiCond cond)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(cond == 0 || ImIsPowerOfTwo(cond)); // Make sure the user doesn't attempt to combine multiple condition flags.
    g.NextWindowData.Flags |= ImGuiNextWindowDataFlags_HasCollapsed;
    g.NextWindowData.CollapsedVal = collapsed;
    g.NextWindowData.CollapsedCond = cond ? cond : ImGuiCond_Always;
}

void ImGui::SetNextWindowFocus()
{
    ImGuiContext& g = *GImGui;
    g.NextWindowData.Flags |= ImGuiNextWindowDataFlags_HasFocus;
}

void ImGui::SetNextWindowBgAlpha(float alpha)
{
    ImGuiContext& g = *GImGui;
    g.NextWindowData.Flags |= ImGuiNextWindowDataFlags_HasBgAlpha;
    g.NextWindowData.BgAlphaVal = alpha;
}

// FIXME: This is in window space (not screen space!). We should try to obsolete all those functions.
ImVec2 ImGui::GetContentRegionMax()
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    ImVec2 mx = window->ContentRegionRect.Max - window->Pos;
    if (window->DC.CurrentColumns)
        mx.x = window->WorkRect.Max.x - window->Pos.x;
    return mx;
}

// [Internal] Absolute coordinate. Saner. This is not exposed until we finishing refactoring work rect features.
ImVec2 ImGui::GetContentRegionMaxAbs()
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    ImVec2 mx = window->ContentRegionRect.Max;
    if (window->DC.CurrentColumns)
        mx.x = window->WorkRect.Max.x;
    return mx;
}

ImVec2 ImGui::GetContentRegionAvail()
{
    ImGuiWindow* window = GImGui->CurrentWindow;
    return GetContentRegionMaxAbs() - window->DC.CursorPos;
}

// In window space (not screen space!)
ImVec2 ImGui::GetWindowContentRegionMin()
{
    ImGuiWindow* window = GImGui->CurrentWindow;
    return window->ContentRegionRect.Min - window->Pos;
}

ImVec2 ImGui::GetWindowContentRegionMax()
{
    ImGuiWindow* window = GImGui->CurrentWindow;
    return window->ContentRegionRect.Max - window->Pos;
}

float ImGui::GetWindowContentRegionWidth()
{
    ImGuiWindow* window = GImGui->CurrentWindow;
    return window->ContentRegionRect.GetWidth();
}

float ImGui::GetTextLineHeight()
{
    ImGuiContext& g = *GImGui;
    return g.FontSize;
}

float ImGui::GetTextLineHeightWithSpacing()
{
    ImGuiContext& g = *GImGui;
    return g.FontSize + g.Style.ItemSpacing.y;
}

float ImGui::GetFrameHeight()
{
    ImGuiContext& g = *GImGui;
    return g.FontSize + g.Style.FramePadding.y * 2.0f;
}

float ImGui::GetFrameHeightWithSpacing()
{
    ImGuiContext& g = *GImGui;
    return g.FontSize + g.Style.FramePadding.y * 2.0f + g.Style.ItemSpacing.y;
}

ImDrawList* ImGui::GetWindowDrawList()
{
    ImGuiWindow* window = GetCurrentWindow();
    return window->DrawList;
}

ImFont* ImGui::GetFont()
{
    return GImGui->Font;
}

float ImGui::GetFontSize()
{
    return GImGui->FontSize;
}

ImVec2 ImGui::GetFontTexUvWhitePixel()
{
    return GImGui->DrawListSharedData.TexUvWhitePixel;
}

void ImGui::SetWindowFontScale(float scale)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindow();
    window->FontWindowScale = scale;
    g.FontSize = g.DrawListSharedData.FontSize = window->CalcFontSize();
}

// User generally sees positions in window coordinates. Internally we store CursorPos in absolute screen coordinates because it is more convenient.
// Conversion happens as we pass the value to user, but it makes our naming convention confusing because GetCursorPos() == (DC.CursorPos - window.Pos). May want to rename 'DC.CursorPos'.
ImVec2 ImGui::GetCursorPos()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->DC.CursorPos - window->Pos + window->Scroll;
}

float ImGui::GetCursorPosX()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->DC.CursorPos.x - window->Pos.x + window->Scroll.x;
}

float ImGui::GetCursorPosY()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->DC.CursorPos.y - window->Pos.y + window->Scroll.y;
}

void ImGui::SetCursorPos(const ImVec2& local_pos)
{
    ImGuiWindow* window = GetCurrentWindow();
    window->DC.CursorPos = window->Pos - window->Scroll + local_pos;
    window->DC.CursorMaxPos = ImMax(window->DC.CursorMaxPos, window->DC.CursorPos);
}

void ImGui::SetCursorPosX(float x)
{
    ImGuiWindow* window = GetCurrentWindow();
    window->DC.CursorPos.x = window->Pos.x - window->Scroll.x + x;
    window->DC.CursorMaxPos.x = ImMax(window->DC.CursorMaxPos.x, window->DC.CursorPos.x);
}

void ImGui::SetCursorPosY(float y)
{
    ImGuiWindow* window = GetCurrentWindow();
    window->DC.CursorPos.y = window->Pos.y - window->Scroll.y + y;
    window->DC.CursorMaxPos.y = ImMax(window->DC.CursorMaxPos.y, window->DC.CursorPos.y);
}

ImVec2 ImGui::GetCursorStartPos()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->DC.CursorStartPos - window->Pos;
}

ImVec2 ImGui::GetCursorScreenPos()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->DC.CursorPos;
}

void ImGui::SetCursorScreenPos(const ImVec2& pos)
{
    ImGuiWindow* window = GetCurrentWindow();
    window->DC.CursorPos = pos;
    window->DC.CursorMaxPos = ImMax(window->DC.CursorMaxPos, window->DC.CursorPos);
}

void ImGui::ActivateItem(ImGuiID id)
{
    ImGuiContext& g = *GImGui;
    g.NavNextActivateId = id;
}

void ImGui::SetKeyboardFocusHere(int offset)
{
    IM_ASSERT(offset >= -1);    // -1 is allowed but not below
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    g.FocusRequestNextWindow = window;
    g.FocusRequestNextCounterAll = window->DC.FocusCounterAll + 1 + offset;
    g.FocusRequestNextCounterTab = INT_MAX;
}

void ImGui::SetItemDefaultFocus()
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    if (!window->Appearing)
        return;
    if (g.NavWindow == window->RootWindowForNav && (g.NavInitRequest || g.NavInitResultId != 0) && g.NavLayer == g.NavWindow->DC.NavLayerCurrent)
    {
        g.NavInitRequest = false;
        g.NavInitResultId = g.NavWindow->DC.LastItemId;
        g.NavInitResultRectRel = ImRect(g.NavWindow->DC.LastItemRect.Min - g.NavWindow->Pos, g.NavWindow->DC.LastItemRect.Max - g.NavWindow->Pos);
        NavUpdateAnyRequestFlag();
        if (!IsItemVisible())
            SetScrollHereY();
    }
}

void ImGui::SetStateStorage(ImGuiStorage* tree)
{
    ImGuiWindow* window = GImGui->CurrentWindow;
    window->DC.StateStorage = tree ? tree : &window->StateStorage;
}

ImGuiStorage* ImGui::GetStateStorage()
{
    ImGuiWindow* window = GImGui->CurrentWindow;
    return window->DC.StateStorage;
}

void ImGui::PushID(const char* str_id)
{
    ImGuiWindow* window = GImGui->CurrentWindow;
    window->IDStack.push_back(window->GetIDNoKeepAlive(str_id));
}

void ImGui::PushID(const char* str_id_begin, const char* str_id_end)
{
    ImGuiWindow* window = GImGui->CurrentWindow;
    window->IDStack.push_back(window->GetIDNoKeepAlive(str_id_begin, str_id_end));
}

void ImGui::PushID(const void* ptr_id)
{
    ImGuiWindow* window = GImGui->CurrentWindow;
    window->IDStack.push_back(window->GetIDNoKeepAlive(ptr_id));
}

void ImGui::PushID(int int_id)
{
    ImGuiWindow* window = GImGui->CurrentWindow;
    window->IDStack.push_back(window->GetIDNoKeepAlive(int_id));
}

// Push a given id value ignoring the ID stack as a seed.
void ImGui::PushOverrideID(ImGuiID id)
{
    ImGuiWindow* window = GImGui->CurrentWindow;
    window->IDStack.push_back(id);
}

void ImGui::PopID()
{
    ImGuiWindow* window = GImGui->CurrentWindow;
    window->IDStack.pop_back();
}

ImGuiID ImGui::GetID(const char* str_id)
{
    ImGuiWindow* window = GImGui->CurrentWindow;
    return window->GetID(str_id);
}

ImGuiID ImGui::GetID(const char* str_id_begin, const char* str_id_end)
{
    ImGuiWindow* window = GImGui->CurrentWindow;
    return window->GetID(str_id_begin, str_id_end);
}

ImGuiID ImGui::GetID(const void* ptr_id)
{
    ImGuiWindow* window = GImGui->CurrentWindow;
    return window->GetID(ptr_id);
}

bool ImGui::IsRectVisible(const ImVec2& size)
{
    ImGuiWindow* window = GImGui->CurrentWindow;
    return window->ClipRect.Overlaps(ImRect(window->DC.CursorPos, window->DC.CursorPos + size));
}

bool ImGui::IsRectVisible(const ImVec2& rect_min, const ImVec2& rect_max)
{
    ImGuiWindow* window = GImGui->CurrentWindow;
    return window->ClipRect.Overlaps(ImRect(rect_min, rect_max));
}

// Lock horizontal starting position + capture group bounding box into one "item" (so you can use IsItemHovered() or layout primitives such as SameLine() on whole group, etc.)
void ImGui::BeginGroup()
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindow();

    window->DC.GroupStack.resize(window->DC.GroupStack.Size + 1);
    ImGuiGroupData& group_data = window->DC.GroupStack.back();
    group_data.BackupCursorPos = window->DC.CursorPos;
    group_data.BackupCursorMaxPos = window->DC.CursorMaxPos;
    group_data.BackupIndent = window->DC.Indent;
    group_data.BackupGroupOffset = window->DC.GroupOffset;
    group_data.BackupCurrLineSize = window->DC.CurrLineSize;
    group_data.BackupCurrLineTextBaseOffset = window->DC.CurrLineTextBaseOffset;
    group_data.BackupActiveIdIsAlive = g.ActiveIdIsAlive;
    group_data.BackupActiveIdPreviousFrameIsAlive = g.ActiveIdPreviousFrameIsAlive;
    group_data.EmitItem = true;

    window->DC.GroupOffset.x = window->DC.CursorPos.x - window->Pos.x - window->DC.ColumnsOffset.x;
    window->DC.Indent = window->DC.GroupOffset;
    window->DC.CursorMaxPos = window->DC.CursorPos;
    window->DC.CurrLineSize = ImVec2(0.0f, 0.0f);
    if (g.LogEnabled)
        g.LogLinePosY = -FLT_MAX; // To enforce Log carriage return
}

void ImGui::EndGroup()
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindow();
    IM_ASSERT(!window->DC.GroupStack.empty());  // Mismatched BeginGroup()/EndGroup() calls

    ImGuiGroupData& group_data = window->DC.GroupStack.back();

    ImRect group_bb(group_data.BackupCursorPos, ImMax(window->DC.CursorMaxPos, group_data.BackupCursorPos));

    window->DC.CursorPos = group_data.BackupCursorPos;
    window->DC.CursorMaxPos = ImMax(group_data.BackupCursorMaxPos, window->DC.CursorMaxPos);
    window->DC.Indent = group_data.BackupIndent;
    window->DC.GroupOffset = group_data.BackupGroupOffset;
    window->DC.CurrLineSize = group_data.BackupCurrLineSize;
    window->DC.CurrLineTextBaseOffset = group_data.BackupCurrLineTextBaseOffset;
    if (g.LogEnabled)
        g.LogLinePosY = -FLT_MAX; // To enforce Log carriage return

    if (!group_data.EmitItem)
    {
        window->DC.GroupStack.pop_back();
        return;
    }

    window->DC.CurrLineTextBaseOffset = ImMax(window->DC.PrevLineTextBaseOffset, group_data.BackupCurrLineTextBaseOffset);      // FIXME: Incorrect, we should grab the base offset from the *first line* of the group but it is hard to obtain now.
    ItemSize(group_bb.GetSize());
    ItemAdd(group_bb, 0);

    // If the current ActiveId was declared within the boundary of our group, we copy it to LastItemId so IsItemActive(), IsItemDeactivated() etc. will be functional on the entire group.
    // It would be be neater if we replaced window.DC.LastItemId by e.g. 'bool LastItemIsActive', but would put a little more burden on individual widgets.
    // Also if you grep for LastItemId you'll notice it is only used in that context.
    // (The tests not symmetrical because ActiveIdIsAlive is an ID itself, in order to be able to handle ActiveId being overwritten during the frame.)
    const bool group_contains_curr_active_id = (group_data.BackupActiveIdIsAlive != g.ActiveId) && (g.ActiveIdIsAlive == g.ActiveId) && g.ActiveId;
    const bool group_contains_prev_active_id = !group_data.BackupActiveIdPreviousFrameIsAlive && g.ActiveIdPreviousFrameIsAlive;
    if (group_contains_curr_active_id)
        window->DC.LastItemId = g.ActiveId;
    else if (group_contains_prev_active_id)
        window->DC.LastItemId = g.ActiveIdPreviousFrame;
    window->DC.LastItemRect = group_bb;

    // Forward Edited flag
    if (group_contains_curr_active_id && g.ActiveIdHasBeenEditedThisFrame)
        window->DC.LastItemStatusFlags |= ImGuiItemStatusFlags_Edited;

    // Forward Deactivated flag
    window->DC.LastItemStatusFlags |= ImGuiItemStatusFlags_HasDeactivated;
    if (group_contains_prev_active_id && g.ActiveId != g.ActiveIdPreviousFrame)
        window->DC.LastItemStatusFlags |= ImGuiItemStatusFlags_Deactivated;

    window->DC.GroupStack.pop_back();
    //window->DrawList->AddRect(group_bb.Min, group_bb.Max, IM_COL32(255,0,255,255));   // [Debug]
}

// Gets back to previous line and continue with horizontal layout
//      offset_from_start_x == 0 : follow right after previous item
//      offset_from_start_x != 0 : align to specified x position (relative to window/group left)
//      spacing_w < 0            : use default spacing if pos_x == 0, no spacing if pos_x != 0
//      spacing_w >= 0           : enforce spacing amount
void ImGui::SameLine(float offset_from_start_x, float spacing_w)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImGuiContext& g = *GImGui;
    if (offset_from_start_x != 0.0f)
    {
        if (spacing_w < 0.0f) spacing_w = 0.0f;
        window->DC.CursorPos.x = window->Pos.x - window->Scroll.x + offset_from_start_x + spacing_w + window->DC.GroupOffset.x + window->DC.ColumnsOffset.x;
        window->DC.CursorPos.y = window->DC.CursorPosPrevLine.y;
    }
    else
    {
        if (spacing_w < 0.0f) spacing_w = g.Style.ItemSpacing.x;
        window->DC.CursorPos.x = window->DC.CursorPosPrevLine.x + spacing_w;
        window->DC.CursorPos.y = window->DC.CursorPosPrevLine.y;
    }
    window->DC.CurrLineSize = window->DC.PrevLineSize;
    window->DC.CurrLineTextBaseOffset = window->DC.PrevLineTextBaseOffset;
}

void ImGui::Indent(float indent_w)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindow();
    window->DC.Indent.x += (indent_w != 0.0f) ? indent_w : g.Style.IndentSpacing;
    window->DC.CursorPos.x = window->Pos.x + window->DC.Indent.x + window->DC.ColumnsOffset.x;
}

void ImGui::Unindent(float indent_w)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindow();
    window->DC.Indent.x -= (indent_w != 0.0f) ? indent_w : g.Style.IndentSpacing;
    window->DC.CursorPos.x = window->Pos.x + window->DC.Indent.x + window->DC.ColumnsOffset.x;
}


//-----------------------------------------------------------------------------
// [SECTION] ERROR CHECKING
//-----------------------------------------------------------------------------

static void ImGui::ErrorCheckEndFrame()
{
    // Report when there is a mismatch of Begin/BeginChild vs End/EndChild calls. Important: Remember that the Begin/BeginChild API requires you
    // to always call End/EndChild even if Begin/BeginChild returns false! (this is unfortunately inconsistent with most other Begin* API).
    ImGuiContext& g = *GImGui;
    if (g.CurrentWindowStack.Size != 1)
    {
        if (g.CurrentWindowStack.Size > 1)
        {
            IM_ASSERT_USER_ERROR(g.CurrentWindowStack.Size == 1, "Mismatched Begin/BeginChild vs End/EndChild calls: did you forget to call End/EndChild?");
            while (g.CurrentWindowStack.Size > 1)
                End();
        }
        else
        {
            IM_ASSERT_USER_ERROR(g.CurrentWindowStack.Size == 1, "Mismatched Begin/BeginChild vs End/EndChild calls: did you call End/EndChild too much?");
        }
    }

}

// Save and compare stack sizes on Begin()/End() to detect usage errors
// Begin() calls this with write=true
// End() calls this with write=false
static void ImGui::ErrorCheckBeginEndCompareStacksSize(ImGuiWindow* window, bool write)
{
    ImGuiContext& g = *GImGui;
    short* p = &window->DC.StackSizesBackup[0];

    // Window stacks
    // NOT checking: DC.ItemWidth, DC.AllowKeyboardFocus, DC.ButtonRepeat, DC.TextWrapPos (per window) to allow user to conveniently push once and not pop (they are cleared on Begin)
    { int n = window->IDStack.Size;       if (write) *p = (short)n; else IM_ASSERT(*p == n && "PushID/PopID or TreeNode/TreePop Mismatch!");   p++; }    // Too few or too many PopID()/TreePop()
    { int n = window->DC.GroupStack.Size; if (write) *p = (short)n; else IM_ASSERT(*p == n && "BeginGroup/EndGroup Mismatch!");                p++; }    // Too few or too many EndGroup()

    // Global stacks
    // For color, style and font stacks there is an incentive to use Push/Begin/Pop/.../End patterns, so we relax our checks a little to allow them.
    { int n = g.BeginPopupStack.Size;     if (write) *p = (short)n; else IM_ASSERT(*p == n && "BeginMenu/EndMenu or BeginPopup/EndPopup Mismatch!"); p++; }// Too few or too many EndMenu()/EndPopup()
    { int n = g.ColorModifiers.Size;      if (write) *p = (short)n; else IM_ASSERT(*p >= n && "PushStyleColor/PopStyleColor Mismatch!");       p++; }    // Too few or too many PopStyleColor()
    { int n = g.StyleModifiers.Size;      if (write) *p = (short)n; else IM_ASSERT(*p >= n && "PushStyleVar/PopStyleVar Mismatch!");           p++; }    // Too few or too many PopStyleVar()
    { int n = g.FontStack.Size;           if (write) *p = (short)n; else IM_ASSERT(*p >= n && "PushFont/PopFont Mismatch!");                   p++; }    // Too few or too many PopFont()
    IM_ASSERT(p == window->DC.StackSizesBackup + IM_ARRAYSIZE(window->DC.StackSizesBackup));
}


//-----------------------------------------------------------------------------
// [SECTION] SCROLLING
//-----------------------------------------------------------------------------

static ImVec2 CalcNextScrollFromScrollTargetAndClamp(ImGuiWindow* window, bool snap_on_edges)
{
    ImGuiContext& g = *GImGui;
    ImVec2 scroll = window->Scroll;
    if (window->ScrollTarget.x < FLT_MAX)
    {
        float cr_x = window->ScrollTargetCenterRatio.x;
        float target_x = window->ScrollTarget.x;
        if (snap_on_edges && cr_x <= 0.0f && target_x <= window->WindowPadding.x)
            target_x = 0.0f;
        else if (snap_on_edges && cr_x >= 1.0f && target_x >= window->ContentSize.x + window->WindowPadding.x + g.Style.ItemSpacing.x)
            target_x = window->ContentSize.x + window->WindowPadding.x * 2.0f;
        scroll.x = target_x - cr_x * (window->SizeFull.x - window->ScrollbarSizes.x);
    }
    if (window->ScrollTarget.y < FLT_MAX)
    {
        // 'snap_on_edges' allows for a discontinuity at the edge of scrolling limits to take account of WindowPadding so that scrolling to make the last item visible scroll far enough to see the padding.
        float decoration_up_height = window->TitleBarHeight() + window->MenuBarHeight();
        float cr_y = window->ScrollTargetCenterRatio.y;
        float target_y = window->ScrollTarget.y;
        if (snap_on_edges && cr_y <= 0.0f && target_y <= window->WindowPadding.y)
            target_y = 0.0f;
        if (snap_on_edges && cr_y >= 1.0f && target_y >= window->ContentSize.y + window->WindowPadding.y + g.Style.ItemSpacing.y)
            target_y = window->ContentSize.y + window->WindowPadding.y * 2.0f;
        scroll.y = target_y - cr_y * (window->SizeFull.y - window->ScrollbarSizes.y - decoration_up_height);
    }
    scroll = ImMax(scroll, ImVec2(0.0f, 0.0f));
    if (!window->Collapsed && !window->SkipItems)
    {
        scroll.x = ImMin(scroll.x, window->ScrollMax.x);
        scroll.y = ImMin(scroll.y, window->ScrollMax.y);
    }
    return scroll;
}

// Scroll to keep newly navigated item fully into view
ImVec2 ImGui::ScrollToBringRectIntoView(ImGuiWindow* window, const ImRect& item_rect)
{
    ImGuiContext& g = *GImGui;
    ImRect window_rect(window->InnerRect.Min - ImVec2(1, 1), window->InnerRect.Max + ImVec2(1, 1));
    //GetForegroundDrawList(window)->AddRect(window_rect.Min, window_rect.Max, IM_COL32_WHITE); // [DEBUG]

    ImVec2 delta_scroll;
    if (!window_rect.Contains(item_rect))
    {
        if (window->ScrollbarX && item_rect.Min.x < window_rect.Min.x)
            SetScrollFromPosX(window, item_rect.Min.x - window->Pos.x + g.Style.ItemSpacing.x, 0.0f);
        else if (window->ScrollbarX && item_rect.Max.x >= window_rect.Max.x)
            SetScrollFromPosX(window, item_rect.Max.x - window->Pos.x + g.Style.ItemSpacing.x, 1.0f);
        if (item_rect.Min.y < window_rect.Min.y)
            SetScrollFromPosY(window, item_rect.Min.y - window->Pos.y - g.Style.ItemSpacing.y, 0.0f);
        else if (item_rect.Max.y >= window_rect.Max.y)
            SetScrollFromPosY(window, item_rect.Max.y - window->Pos.y + g.Style.ItemSpacing.y, 1.0f);

        ImVec2 next_scroll = CalcNextScrollFromScrollTargetAndClamp(window, false);
        delta_scroll = next_scroll - window->Scroll;
    }

    // Also scroll parent window to keep us into view if necessary
    if (window->Flags & ImGuiWindowFlags_ChildWindow)
        delta_scroll += ScrollToBringRectIntoView(window->ParentWindow, ImRect(item_rect.Min - delta_scroll, item_rect.Max - delta_scroll));

    return delta_scroll;
}

float ImGui::GetScrollX()
{
    ImGuiWindow* window = GImGui->CurrentWindow;
    return window->Scroll.x;
}

float ImGui::GetScrollY()
{
    ImGuiWindow* window = GImGui->CurrentWindow;
    return window->Scroll.y;
}

float ImGui::GetScrollMaxX()
{
    ImGuiWindow* window = GImGui->CurrentWindow;
    return window->ScrollMax.x;
}

float ImGui::GetScrollMaxY()
{
    ImGuiWindow* window = GImGui->CurrentWindow;
    return window->ScrollMax.y;
}

void ImGui::SetScrollX(float scroll_x)
{
    ImGuiWindow* window = GetCurrentWindow();
    window->ScrollTarget.x = scroll_x;
    window->ScrollTargetCenterRatio.x = 0.0f;
}

void ImGui::SetScrollY(float scroll_y)
{
    ImGuiWindow* window = GetCurrentWindow();
    window->ScrollTarget.y = scroll_y;
    window->ScrollTargetCenterRatio.y = 0.0f;
}

void ImGui::SetScrollX(ImGuiWindow* window, float new_scroll_x)
{
    window->ScrollTarget.x = new_scroll_x;
    window->ScrollTargetCenterRatio.x = 0.0f;
}

void ImGui::SetScrollY(ImGuiWindow* window, float new_scroll_y)
{
    window->ScrollTarget.y = new_scroll_y;
    window->ScrollTargetCenterRatio.y = 0.0f;
}


void ImGui::SetScrollFromPosX(ImGuiWindow* window, float local_x, float center_x_ratio)
{
    // We store a target position so centering can occur on the next frame when we are guaranteed to have a known window size
    IM_ASSERT(center_x_ratio >= 0.0f && center_x_ratio <= 1.0f);
    window->ScrollTarget.x = IM_FLOOR(local_x + window->Scroll.x);
    window->ScrollTargetCenterRatio.x = center_x_ratio;
}

void ImGui::SetScrollFromPosY(ImGuiWindow* window, float local_y, float center_y_ratio)
{
    // We store a target position so centering can occur on the next frame when we are guaranteed to have a known window size
    IM_ASSERT(center_y_ratio >= 0.0f && center_y_ratio <= 1.0f);
    const float decoration_up_height = window->TitleBarHeight() + window->MenuBarHeight();
    local_y -= decoration_up_height;
    window->ScrollTarget.y = IM_FLOOR(local_y + window->Scroll.y);
    window->ScrollTargetCenterRatio.y = center_y_ratio;
}

void ImGui::SetScrollFromPosX(float local_x, float center_x_ratio)
{
    ImGuiContext& g = *GImGui;
    SetScrollFromPosX(g.CurrentWindow, local_x, center_x_ratio);
}

void ImGui::SetScrollFromPosY(float local_y, float center_y_ratio)
{
    ImGuiContext& g = *GImGui;
    SetScrollFromPosY(g.CurrentWindow, local_y, center_y_ratio);
}

// center_x_ratio: 0.0f left of last item, 0.5f horizontal center of last item, 1.0f right of last item.
void ImGui::SetScrollHereX(float center_x_ratio)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    float target_x = window->DC.LastItemRect.Min.x - window->Pos.x; // Left of last item, in window space
    float last_item_width = window->DC.LastItemRect.GetWidth();
    target_x += (last_item_width * center_x_ratio) + (g.Style.ItemSpacing.x * (center_x_ratio - 0.5f) * 2.0f); // Precisely aim before, in the middle or after the last item.
    SetScrollFromPosX(target_x, center_x_ratio);
}

// center_y_ratio: 0.0f top of last item, 0.5f vertical center of last item, 1.0f bottom of last item.
void ImGui::SetScrollHereY(float center_y_ratio)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    float target_y = window->DC.CursorPosPrevLine.y - window->Pos.y; // Top of last item, in window space
    target_y += (window->DC.PrevLineSize.y * center_y_ratio) + (g.Style.ItemSpacing.y * (center_y_ratio - 0.5f) * 2.0f); // Precisely aim above, in the middle or below the last line.
    SetScrollFromPosY(target_y, center_y_ratio);
}

//-----------------------------------------------------------------------------
// [SECTION] TOOLTIPS
//-----------------------------------------------------------------------------

void ImGui::BeginTooltip()
{
    ImGuiContext& g = *GImGui;
    if (g.DragDropWithinSourceOrTarget)
    {
        // The default tooltip position is a little offset to give space to see the context menu (it's also clamped within the current viewport/monitor)
        // In the context of a dragging tooltip we try to reduce that offset and we enforce following the cursor.
        // Whatever we do we want to call SetNextWindowPos() to enforce a tooltip position and disable clipping the tooltip without our display area, like regular tooltip do.
        //ImVec2 tooltip_pos = g.IO.MousePos - g.ActiveIdClickOffset - g.Style.WindowPadding;
        ImVec2 tooltip_pos = g.IO.MousePos + ImVec2(16 * g.Style.MouseCursorScale, 8 * g.Style.MouseCursorScale);
        SetNextWindowPos(tooltip_pos);
        SetNextWindowBgAlpha(g.Style.Colors[ImGuiCol_PopupBg].w * 0.60f);
        //PushStyleVar(ImGuiStyleVar_Alpha, g.Style.Alpha * 0.60f); // This would be nice but e.g ColorButton with checkboard has issue with transparent colors :(
        BeginTooltipEx(0, true);
    }
    else
    {
        BeginTooltipEx(0, false);
    }
}

// Not exposed publicly as BeginTooltip() because bool parameters are evil. Let's see if other needs arise first.
void ImGui::BeginTooltipEx(ImGuiWindowFlags extra_flags, bool override_previous_tooltip)
{
    ImGuiContext& g = *GImGui;
    char window_name[16];
    ImFormatString(window_name, IM_ARRAYSIZE(window_name), "##Tooltip_%02d", g.TooltipOverrideCount);
    if (override_previous_tooltip)
        if (ImGuiWindow* window = FindWindowByName(window_name))
            if (window->Active)
            {
                // Hide previous tooltip from being displayed. We can't easily "reset" the content of a window so we create a new one.
                window->Hidden = true;
                window->HiddenFramesCanSkipItems = 1;
                ImFormatString(window_name, IM_ARRAYSIZE(window_name), "##Tooltip_%02d", ++g.TooltipOverrideCount);
            }
    ImGuiWindowFlags flags = ImGuiWindowFlags_Tooltip|ImGuiWindowFlags_NoInputs|ImGuiWindowFlags_NoTitleBar|ImGuiWindowFlags_NoMove|ImGuiWindowFlags_NoResize|ImGuiWindowFlags_NoSavedSettings|ImGuiWindowFlags_AlwaysAutoResize;
    Begin(window_name, NULL, flags | extra_flags);
}

void ImGui::EndTooltip()
{
    IM_ASSERT(GetCurrentWindowRead()->Flags & ImGuiWindowFlags_Tooltip);   // Mismatched BeginTooltip()/EndTooltip() calls
    End();
}

void ImGui::SetTooltipV(const char* fmt, va_list args)
{
    ImGuiContext& g = *GImGui;
    if (g.DragDropWithinSourceOrTarget)
        BeginTooltip();
    else
        BeginTooltipEx(0, true);
    TextV(fmt, args);
    EndTooltip();
}

void ImGui::SetTooltip(const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    SetTooltipV(fmt, args);
    va_end(args);
}

//-----------------------------------------------------------------------------
// [SECTION] POPUPS
//-----------------------------------------------------------------------------

bool ImGui::IsPopupOpen(ImGuiID id)
{
    ImGuiContext& g = *GImGui;
    return g.OpenPopupStack.Size > g.BeginPopupStack.Size && g.OpenPopupStack[g.BeginPopupStack.Size].PopupId == id;
}

bool ImGui::IsPopupOpen(const char* str_id)
{
    ImGuiContext& g = *GImGui;
    return g.OpenPopupStack.Size > g.BeginPopupStack.Size && g.OpenPopupStack[g.BeginPopupStack.Size].PopupId == g.CurrentWindow->GetID(str_id);
}

ImGuiWindow* ImGui::GetTopMostPopupModal()
{
    ImGuiContext& g = *GImGui;
    for (int n = g.OpenPopupStack.Size-1; n >= 0; n--)
        if (ImGuiWindow* popup = g.OpenPopupStack.Data[n].Window)
            if (popup->Flags & ImGuiWindowFlags_Modal)
                return popup;
    return NULL;
}

void ImGui::OpenPopup(const char* str_id)
{
    ImGuiContext& g = *GImGui;
    OpenPopupEx(g.CurrentWindow->GetID(str_id));
}

// Mark popup as open (toggle toward open state).
// Popups are closed when user click outside, or activate a pressable item, or CloseCurrentPopup() is called within a BeginPopup()/EndPopup() block.
// Popup identifiers are relative to the current ID-stack (so OpenPopup and BeginPopup needs to be at the same level).
// One open popup per level of the popup hierarchy (NB: when assigning we reset the Window member of ImGuiPopupRef to NULL)
void ImGui::OpenPopupEx(ImGuiID id)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* parent_window = g.CurrentWindow;
    int current_stack_size = g.BeginPopupStack.Size;
    ImGuiPopupData popup_ref; // Tagged as new ref as Window will be set back to NULL if we write this into OpenPopupStack.
    popup_ref.PopupId = id;
    popup_ref.Window = NULL;
    popup_ref.SourceWindow = g.NavWindow;
    popup_ref.OpenFrameCount = g.FrameCount;
    popup_ref.OpenParentId = parent_window->IDStack.back();
    popup_ref.OpenPopupPos = NavCalcPreferredRefPos();
    popup_ref.OpenMousePos = IsMousePosValid(&g.IO.MousePos) ? g.IO.MousePos : popup_ref.OpenPopupPos;

    //IMGUI_DEBUG_LOG("OpenPopupEx(0x%08X)\n", g.FrameCount, id);
    if (g.OpenPopupStack.Size < current_stack_size + 1)
    {
        g.OpenPopupStack.push_back(popup_ref);
    }
    else
    {
        // Gently handle the user mistakenly calling OpenPopup() every frame. It is a programming mistake! However, if we were to run the regular code path, the ui
        // would become completely unusable because the popup will always be in hidden-while-calculating-size state _while_ claiming focus. Which would be a very confusing
        // situation for the programmer. Instead, we silently allow the popup to proceed, it will keep reappearing and the programming error will be more obvious to understand.
        if (g.OpenPopupStack[current_stack_size].PopupId == id && g.OpenPopupStack[current_stack_size].OpenFrameCount == g.FrameCount - 1)
        {
            g.OpenPopupStack[current_stack_size].OpenFrameCount = popup_ref.OpenFrameCount;
        }
        else
        {
            // Close child popups if any, then flag popup for open/reopen
            g.OpenPopupStack.resize(current_stack_size + 1);
            g.OpenPopupStack[current_stack_size] = popup_ref;
        }

        // When reopening a popup we first refocus its parent, otherwise if its parent is itself a popup it would get closed by ClosePopupsOverWindow().
        // This is equivalent to what ClosePopupToLevel() does.
        //if (g.OpenPopupStack[current_stack_size].PopupId == id)
        //    FocusWindow(parent_window);
    }
}

void ImGui::ClosePopupsOverWindow(ImGuiWindow* ref_window, bool restore_focus_to_window_under_popup)
{
    ImGuiContext& g = *GImGui;
    if (g.OpenPopupStack.empty())
        return;

    // When popups are stacked, clicking on a lower level popups puts focus back to it and close popups above it.
    // Don't close our own child popup windows.
    int popup_count_to_keep = 0;
    if (ref_window)
    {
        // Find the highest popup which is a descendant of the reference window (generally reference window = NavWindow)
        for (; popup_count_to_keep < g.OpenPopupStack.Size; popup_count_to_keep++)
        {
            ImGuiPopupData& popup = g.OpenPopupStack[popup_count_to_keep];
            if (!popup.Window)
                continue;
            IM_ASSERT((popup.Window->Flags & ImGuiWindowFlags_Popup) != 0);
            if (popup.Window->Flags & ImGuiWindowFlags_ChildWindow)
                continue;

            // Trim the stack when popups are not direct descendant of the reference window (the reference window is often the NavWindow)
            bool popup_or_descendent_is_ref_window = false;
            for (int m = popup_count_to_keep; m < g.OpenPopupStack.Size && !popup_or_descendent_is_ref_window; m++)
                if (ImGuiWindow* popup_window = g.OpenPopupStack[m].Window)
                    if (popup_window->RootWindow == ref_window->RootWindow)
                        popup_or_descendent_is_ref_window = true;
            if (!popup_or_descendent_is_ref_window)
                break;
        }
    }
    if (popup_count_to_keep < g.OpenPopupStack.Size) // This test is not required but it allows to set a convenient breakpoint on the statement below
    {
        //IMGUI_DEBUG_LOG("ClosePopupsOverWindow(%s) -> ClosePopupToLevel(%d)\n", ref_window->Name, popup_count_to_keep);
        ClosePopupToLevel(popup_count_to_keep, restore_focus_to_window_under_popup);
    }
}

void ImGui::ClosePopupToLevel(int remaining, bool restore_focus_to_window_under_popup)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(remaining >= 0 && remaining < g.OpenPopupStack.Size);
    ImGuiWindow* focus_window = g.OpenPopupStack[remaining].SourceWindow;
    ImGuiWindow* popup_window = g.OpenPopupStack[remaining].Window;
    g.OpenPopupStack.resize(remaining);

    if (restore_focus_to_window_under_popup)
    {
        if (focus_window && !focus_window->WasActive && popup_window)
        {
            // Fallback
            FocusTopMostWindowUnderOne(popup_window, NULL);
        }
        else
        {
            if (g.NavLayer == 0 && focus_window)
                focus_window = NavRestoreLastChildNavWindow(focus_window);
            FocusWindow(focus_window);
        }
    }
}

// Close the popup we have begin-ed into.
void ImGui::CloseCurrentPopup()
{
    ImGuiContext& g = *GImGui;
    int popup_idx = g.BeginPopupStack.Size - 1;
    if (popup_idx < 0 || popup_idx >= g.OpenPopupStack.Size || g.BeginPopupStack[popup_idx].PopupId != g.OpenPopupStack[popup_idx].PopupId)
        return;

    // Closing a menu closes its top-most parent popup (unless a modal)
    while (popup_idx > 0)
    {
        ImGuiWindow* popup_window = g.OpenPopupStack[popup_idx].Window;
        ImGuiWindow* parent_popup_window = g.OpenPopupStack[popup_idx - 1].Window;
        bool close_parent = false;
        if (popup_window && (popup_window->Flags & ImGuiWindowFlags_ChildMenu))
            if (parent_popup_window == NULL || !(parent_popup_window->Flags & ImGuiWindowFlags_Modal))
                close_parent = true;
        if (!close_parent)
            break;
        popup_idx--;
    }
    //IMGUI_DEBUG_LOG("CloseCurrentPopup %d -> %d\n", g.BeginPopupStack.Size - 1, popup_idx);
    ClosePopupToLevel(popup_idx, true);

    // A common pattern is to close a popup when selecting a menu item/selectable that will open another window.
    // To improve this usage pattern, we avoid nav highlight for a single frame in the parent window.
    // Similarly, we could avoid mouse hover highlight in this window but it is less visually problematic.
    if (ImGuiWindow* window = g.NavWindow)
        window->DC.NavHideHighlightOneFrame = true;
}

bool ImGui::BeginPopupEx(ImGuiID id, ImGuiWindowFlags extra_flags)
{
    ImGuiContext& g = *GImGui;
    if (!IsPopupOpen(id))
    {
        g.NextWindowData.ClearFlags(); // We behave like Begin() and need to consume those values
        return false;
    }

    char name[20];
    if (extra_flags & ImGuiWindowFlags_ChildMenu)
        ImFormatString(name, IM_ARRAYSIZE(name), "##Menu_%02d", g.BeginPopupStack.Size); // Recycle windows based on depth
    else
        ImFormatString(name, IM_ARRAYSIZE(name), "##Popup_%08x", id); // Not recycling, so we can close/open during the same frame

    bool is_open = Begin(name, NULL, extra_flags | ImGuiWindowFlags_Popup);
    if (!is_open) // NB: Begin can return false when the popup is completely clipped (e.g. zero size display)
        EndPopup();

    return is_open;
}

bool ImGui::BeginPopup(const char* str_id, ImGuiWindowFlags flags)
{
    ImGuiContext& g = *GImGui;
    if (g.OpenPopupStack.Size <= g.BeginPopupStack.Size) // Early out for performance
    {
        g.NextWindowData.ClearFlags(); // We behave like Begin() and need to consume those values
        return false;
    }
    flags |= ImGuiWindowFlags_AlwaysAutoResize | ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoSavedSettings;
    return BeginPopupEx(g.CurrentWindow->GetID(str_id), flags);
}

// If 'p_open' is specified for a modal popup window, the popup will have a regular close button which will close the popup.
// Note that popup visibility status is owned by Dear ImGui (and manipulated with e.g. OpenPopup) so the actual value of *p_open is meaningless here.
bool ImGui::BeginPopupModal(const char* name, bool* p_open, ImGuiWindowFlags flags)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    const ImGuiID id = window->GetID(name);
    if (!IsPopupOpen(id))
    {
        g.NextWindowData.ClearFlags(); // We behave like Begin() and need to consume those values
        return false;
    }

    // Center modal windows by default
    // FIXME: Should test for (PosCond & window->SetWindowPosAllowFlags) with the upcoming window.
    if ((g.NextWindowData.Flags & ImGuiNextWindowDataFlags_HasPos) == 0)
        SetNextWindowPos(g.IO.DisplaySize * 0.5f, ImGuiCond_Appearing, ImVec2(0.5f, 0.5f));

    flags |= ImGuiWindowFlags_Popup | ImGuiWindowFlags_Modal | ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_NoSavedSettings;
    const bool is_open = Begin(name, p_open, flags);
    if (!is_open || (p_open && !*p_open)) // NB: is_open can be 'false' when the popup is completely clipped (e.g. zero size display)
    {
        EndPopup();
        if (is_open)
            ClosePopupToLevel(g.BeginPopupStack.Size, true);
        return false;
    }
    return is_open;
}

void ImGui::EndPopup()
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    IM_ASSERT(window->Flags & ImGuiWindowFlags_Popup);  // Mismatched BeginPopup()/EndPopup() calls
    IM_ASSERT(g.BeginPopupStack.Size > 0);

    // Make all menus and popups wrap around for now, may need to expose that policy.
    NavMoveRequestTryWrapping(window, ImGuiNavMoveFlags_LoopY);

    // Child-popups don't need to be layed out
    IM_ASSERT(g.WithinEndChild == false);
    if (window->Flags & ImGuiWindowFlags_ChildWindow)
        g.WithinEndChild = true;
    End();
    g.WithinEndChild = false;
}

bool ImGui::OpenPopupOnItemClick(const char* str_id, ImGuiMouseButton mouse_button)
{
    ImGuiWindow* window = GImGui->CurrentWindow;
    if (IsMouseReleased(mouse_button) && IsItemHovered(ImGuiHoveredFlags_AllowWhenBlockedByPopup))
    {
        ImGuiID id = str_id ? window->GetID(str_id) : window->DC.LastItemId; // If user hasn't passed an ID, we can use the LastItemID. Using LastItemID as a Popup ID won't conflict!
        IM_ASSERT(id != 0);                                                  // You cannot pass a NULL str_id if the last item has no identifier (e.g. a Text() item)
        OpenPopupEx(id);
        return true;
    }
    return false;
}

// This is a helper to handle the simplest case of associating one named popup to one given widget.
// You may want to handle this on user side if you have specific needs (e.g. tweaking IsItemHovered() parameters).
// You can pass a NULL str_id to use the identifier of the last item.
bool ImGui::BeginPopupContextItem(const char* str_id, ImGuiMouseButton mouse_button)
{
    ImGuiWindow* window = GImGui->CurrentWindow;
    if (window->SkipItems)
        return false;
    ImGuiID id = str_id ? window->GetID(str_id) : window->DC.LastItemId; // If user hasn't passed an ID, we can use the LastItemID. Using LastItemID as a Popup ID won't conflict!
    IM_ASSERT(id != 0);                                                  // You cannot pass a NULL str_id if the last item has no identifier (e.g. a Text() item)
    if (IsMouseReleased(mouse_button) && IsItemHovered(ImGuiHoveredFlags_AllowWhenBlockedByPopup))
        OpenPopupEx(id);
    return BeginPopupEx(id, ImGuiWindowFlags_AlwaysAutoResize|ImGuiWindowFlags_NoTitleBar|ImGuiWindowFlags_NoSavedSettings);
}

bool ImGui::BeginPopupContextWindow(const char* str_id, ImGuiMouseButton mouse_button, bool also_over_items)
{
    if (!str_id)
        str_id = "window_context";
    ImGuiID id = GImGui->CurrentWindow->GetID(str_id);
    if (IsMouseReleased(mouse_button) && IsWindowHovered(ImGuiHoveredFlags_AllowWhenBlockedByPopup))
        if (also_over_items || !IsAnyItemHovered())
            OpenPopupEx(id);
    return BeginPopupEx(id, ImGuiWindowFlags_AlwaysAutoResize|ImGuiWindowFlags_NoTitleBar|ImGuiWindowFlags_NoSavedSettings);
}

bool ImGui::BeginPopupContextVoid(const char* str_id, ImGuiMouseButton mouse_button)
{
    if (!str_id)
        str_id = "void_context";
    ImGuiID id = GImGui->CurrentWindow->GetID(str_id);
    if (IsMouseReleased(mouse_button) && !IsWindowHovered(ImGuiHoveredFlags_AnyWindow))
        OpenPopupEx(id);
    return BeginPopupEx(id, ImGuiWindowFlags_AlwaysAutoResize|ImGuiWindowFlags_NoTitleBar|ImGuiWindowFlags_NoSavedSettings);
}

// r_avoid = the rectangle to avoid (e.g. for tooltip it is a rectangle around the mouse cursor which we want to avoid. for popups it's a small point around the cursor.)
// r_outer = the visible area rectangle, minus safe area padding. If our popup size won't fit because of safe area padding we ignore it.
ImVec2 ImGui::FindBestWindowPosForPopupEx(const ImVec2& ref_pos, const ImVec2& size, ImGuiDir* last_dir, const ImRect& r_outer, const ImRect& r_avoid, ImGuiPopupPositionPolicy policy)
{
    ImVec2 base_pos_clamped = ImClamp(ref_pos, r_outer.Min, r_outer.Max - size);
    //GetForegroundDrawList()->AddRect(r_avoid.Min, r_avoid.Max, IM_COL32(255,0,0,255));
    //GetForegroundDrawList()->AddRect(r_outer.Min, r_outer.Max, IM_COL32(0,255,0,255));

    // Combo Box policy (we want a connecting edge)
    if (policy == ImGuiPopupPositionPolicy_ComboBox)
    {
        const ImGuiDir dir_prefered_order[ImGuiDir_COUNT] = { ImGuiDir_Down, ImGuiDir_Right, ImGuiDir_Left, ImGuiDir_Up };
        for (int n = (*last_dir != ImGuiDir_None) ? -1 : 0; n < ImGuiDir_COUNT; n++)
        {
            const ImGuiDir dir = (n == -1) ? *last_dir : dir_prefered_order[n];
            if (n != -1 && dir == *last_dir) // Already tried this direction?
                continue;
            ImVec2 pos;
            if (dir == ImGuiDir_Down)  pos = ImVec2(r_avoid.Min.x, r_avoid.Max.y);          // Below, Toward Right (default)
            if (dir == ImGuiDir_Right) pos = ImVec2(r_avoid.Min.x, r_avoid.Min.y - size.y); // Above, Toward Right
            if (dir == ImGuiDir_Left)  pos = ImVec2(r_avoid.Max.x - size.x, r_avoid.Max.y); // Below, Toward Left
            if (dir == ImGuiDir_Up)    pos = ImVec2(r_avoid.Max.x - size.x, r_avoid.Min.y - size.y); // Above, Toward Left
            if (!r_outer.Contains(ImRect(pos, pos + size)))
                continue;
            *last_dir = dir;
            return pos;
        }
    }

    // Default popup policy
    const ImGuiDir dir_prefered_order[ImGuiDir_COUNT] = { ImGuiDir_Right, ImGuiDir_Down, ImGuiDir_Up, ImGuiDir_Left };
    for (int n = (*last_dir != ImGuiDir_None) ? -1 : 0; n < ImGuiDir_COUNT; n++)
    {
        const ImGuiDir dir = (n == -1) ? *last_dir : dir_prefered_order[n];
        if (n != -1 && dir == *last_dir) // Already tried this direction?
            continue;
        float avail_w = (dir == ImGuiDir_Left ? r_avoid.Min.x : r_outer.Max.x) - (dir == ImGuiDir_Right ? r_avoid.Max.x : r_outer.Min.x);
        float avail_h = (dir == ImGuiDir_Up ? r_avoid.Min.y : r_outer.Max.y) - (dir == ImGuiDir_Down ? r_avoid.Max.y : r_outer.Min.y);
        if (avail_w < size.x || avail_h < size.y)
            continue;
        ImVec2 pos;
        pos.x = (dir == ImGuiDir_Left) ? r_avoid.Min.x - size.x : (dir == ImGuiDir_Right) ? r_avoid.Max.x : base_pos_clamped.x;
        pos.y = (dir == ImGuiDir_Up)   ? r_avoid.Min.y - size.y : (dir == ImGuiDir_Down)  ? r_avoid.Max.y : base_pos_clamped.y;
        *last_dir = dir;
        return pos;
    }

    // Fallback, try to keep within display
    *last_dir = ImGuiDir_None;
    ImVec2 pos = ref_pos;
    pos.x = ImMax(ImMin(pos.x + size.x, r_outer.Max.x) - size.x, r_outer.Min.x);
    pos.y = ImMax(ImMin(pos.y + size.y, r_outer.Max.y) - size.y, r_outer.Min.y);
    return pos;
}

ImRect ImGui::GetWindowAllowedExtentRect(ImGuiWindow* window)
{
    IM_UNUSED(window);
    ImVec2 padding = GImGui->Style.DisplaySafeAreaPadding;
    ImRect r_screen = GetViewportRect();
    r_screen.Expand(ImVec2((r_screen.GetWidth() > padding.x * 2) ? -padding.x : 0.0f, (r_screen.GetHeight() > padding.y * 2) ? -padding.y : 0.0f));
    return r_screen;
}

ImVec2 ImGui::FindBestWindowPosForPopup(ImGuiWindow* window)
{
    ImGuiContext& g = *GImGui;

    ImRect r_outer = GetWindowAllowedExtentRect(window);
    if (window->Flags & ImGuiWindowFlags_ChildMenu)
    {
        // Child menus typically request _any_ position within the parent menu item, and then we move the new menu outside the parent bounds.
        // This is how we end up with child menus appearing (most-commonly) on the right of the parent menu.
        IM_ASSERT(g.CurrentWindow == window);
        ImGuiWindow* parent_window = g.CurrentWindowStack[g.CurrentWindowStack.Size - 2];
        float horizontal_overlap = g.Style.ItemInnerSpacing.x; // We want some overlap to convey the relative depth of each menu (currently the amount of overlap is hard-coded to style.ItemSpacing.x).
        ImRect r_avoid;
        if (parent_window->DC.MenuBarAppending)
            r_avoid = ImRect(-FLT_MAX, parent_window->Pos.y + parent_window->TitleBarHeight(), FLT_MAX, parent_window->Pos.y + parent_window->TitleBarHeight() + parent_window->MenuBarHeight());
        else
            r_avoid = ImRect(parent_window->Pos.x + horizontal_overlap, -FLT_MAX, parent_window->Pos.x + parent_window->Size.x - horizontal_overlap - parent_window->ScrollbarSizes.x, FLT_MAX);
        return FindBestWindowPosForPopupEx(window->Pos, window->Size, &window->AutoPosLastDirection, r_outer, r_avoid);
    }
    if (window->Flags & ImGuiWindowFlags_Popup)
    {
        ImRect r_avoid = ImRect(window->Pos.x - 1, window->Pos.y - 1, window->Pos.x + 1, window->Pos.y + 1);
        return FindBestWindowPosForPopupEx(window->Pos, window->Size, &window->AutoPosLastDirection, r_outer, r_avoid);
    }
    if (window->Flags & ImGuiWindowFlags_Tooltip)
    {
        // Position tooltip (always follows mouse)
        float sc = g.Style.MouseCursorScale;
        ImVec2 ref_pos = NavCalcPreferredRefPos();
        ImRect r_avoid;
        if (!g.NavDisableHighlight && g.NavDisableMouseHover && !(g.IO.ConfigFlags & ImGuiConfigFlags_NavEnableSetMousePos))
            r_avoid = ImRect(ref_pos.x - 16, ref_pos.y - 8, ref_pos.x + 16, ref_pos.y + 8);
        else
            r_avoid = ImRect(ref_pos.x - 16, ref_pos.y - 8, ref_pos.x + 24 * sc, ref_pos.y + 24 * sc); // FIXME: Hard-coded based on mouse cursor shape expectation. Exact dimension not very important.
        ImVec2 pos = FindBestWindowPosForPopupEx(ref_pos, window->Size, &window->AutoPosLastDirection, r_outer, r_avoid);
        if (window->AutoPosLastDirection == ImGuiDir_None)
            pos = ref_pos + ImVec2(2, 2); // If there's not enough room, for tooltip we prefer avoiding the cursor at all cost even if it means that part of the tooltip won't be visible.
        return pos;
    }
    IM_ASSERT(0);
    return window->Pos;
}


//-----------------------------------------------------------------------------
// [SECTION] KEYBOARD/GAMEPAD NAVIGATION
//-----------------------------------------------------------------------------

ImGuiDir ImGetDirQuadrantFromDelta(float dx, float dy)
{
    if (ImFabs(dx) > ImFabs(dy))
        return (dx > 0.0f) ? ImGuiDir_Right : ImGuiDir_Left;
    return (dy > 0.0f) ? ImGuiDir_Down : ImGuiDir_Up;
}

static float inline NavScoreItemDistInterval(float a0, float a1, float b0, float b1)
{
    if (a1 < b0)
        return a1 - b0;
    if (b1 < a0)
        return a0 - b1;
    return 0.0f;
}

static void inline NavClampRectToVisibleAreaForMoveDir(ImGuiDir move_dir, ImRect& r, const ImRect& clip_rect)
{
    if (move_dir == ImGuiDir_Left || move_dir == ImGuiDir_Right)
    {
        r.Min.y = ImClamp(r.Min.y, clip_rect.Min.y, clip_rect.Max.y);
        r.Max.y = ImClamp(r.Max.y, clip_rect.Min.y, clip_rect.Max.y);
    }
    else
    {
        r.Min.x = ImClamp(r.Min.x, clip_rect.Min.x, clip_rect.Max.x);
        r.Max.x = ImClamp(r.Max.x, clip_rect.Min.x, clip_rect.Max.x);
    }
}

// Scoring function for directional navigation. Based on https://gist.github.com/rygorous/6981057
static bool ImGui::NavScoreItem(ImGuiNavMoveResult* result, ImRect cand)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    if (g.NavLayer != window->DC.NavLayerCurrent)
        return false;

    const ImRect& curr = g.NavScoringRectScreen; // Current modified source rect (NB: we've applied Max.x = Min.x in NavUpdate() to inhibit the effect of having varied item width)
    g.NavScoringCount++;

    // When entering through a NavFlattened border, we consider child window items as fully clipped for scoring
    if (window->ParentWindow == g.NavWindow)
    {
        IM_ASSERT((window->Flags | g.NavWindow->Flags) & ImGuiWindowFlags_NavFlattened);
        if (!window->ClipRect.Overlaps(cand))
            return false;
        cand.ClipWithFull(window->ClipRect); // This allows the scored item to not overlap other candidates in the parent window
    }

    // We perform scoring on items bounding box clipped by the current clipping rectangle on the other axis (clipping on our movement axis would give us equal scores for all clipped items)
    // For example, this ensure that items in one column are not reached when moving vertically from items in another column.
    NavClampRectToVisibleAreaForMoveDir(g.NavMoveClipDir, cand, window->ClipRect);

    // Compute distance between boxes
    // FIXME-NAV: Introducing biases for vertical navigation, needs to be removed.
    float dbx = NavScoreItemDistInterval(cand.Min.x, cand.Max.x, curr.Min.x, curr.Max.x);
    float dby = NavScoreItemDistInterval(ImLerp(cand.Min.y, cand.Max.y, 0.2f), ImLerp(cand.Min.y, cand.Max.y, 0.8f), ImLerp(curr.Min.y, curr.Max.y, 0.2f), ImLerp(curr.Min.y, curr.Max.y, 0.8f)); // Scale down on Y to keep using box-distance for vertically touching items
    if (dby != 0.0f && dbx != 0.0f)
       dbx = (dbx/1000.0f) + ((dbx > 0.0f) ? +1.0f : -1.0f);
    float dist_box = ImFabs(dbx) + ImFabs(dby);

    // Compute distance between centers (this is off by a factor of 2, but we only compare center distances with each other so it doesn't matter)
    float dcx = (cand.Min.x + cand.Max.x) - (curr.Min.x + curr.Max.x);
    float dcy = (cand.Min.y + cand.Max.y) - (curr.Min.y + curr.Max.y);
    float dist_center = ImFabs(dcx) + ImFabs(dcy); // L1 metric (need this for our connectedness guarantee)

    // Determine which quadrant of 'curr' our candidate item 'cand' lies in based on distance
    ImGuiDir quadrant;
    float dax = 0.0f, day = 0.0f, dist_axial = 0.0f;
    if (dbx != 0.0f || dby != 0.0f)
    {
        // For non-overlapping boxes, use distance between boxes
        dax = dbx;
        day = dby;
        dist_axial = dist_box;
        quadrant = ImGetDirQuadrantFromDelta(dbx, dby);
    }
    else if (dcx != 0.0f || dcy != 0.0f)
    {
        // For overlapping boxes with different centers, use distance between centers
        dax = dcx;
        day = dcy;
        dist_axial = dist_center;
        quadrant = ImGetDirQuadrantFromDelta(dcx, dcy);
    }
    else
    {
        // Degenerate case: two overlapping buttons with same center, break ties arbitrarily (note that LastItemId here is really the _previous_ item order, but it doesn't matter)
        quadrant = (window->DC.LastItemId < g.NavId) ? ImGuiDir_Left : ImGuiDir_Right;
    }

#if IMGUI_DEBUG_NAV_SCORING
    char buf[128];
    if (IsMouseHoveringRect(cand.Min, cand.Max))
    {
        ImFormatString(buf, IM_ARRAYSIZE(buf), "dbox (%.2f,%.2f->%.4f)\ndcen (%.2f,%.2f->%.4f)\nd (%.2f,%.2f->%.4f)\nnav %c, quadrant %c", dbx, dby, dist_box, dcx, dcy, dist_center, dax, day, dist_axial, "WENS"[g.NavMoveDir], "WENS"[quadrant]);
        ImDrawList* draw_list = GetForegroundDrawList(window);
        draw_list->AddRect(curr.Min, curr.Max, IM_COL32(255,200,0,100));
        draw_list->AddRect(cand.Min, cand.Max, IM_COL32(255,255,0,200));
        draw_list->AddRectFilled(cand.Max - ImVec2(4,4), cand.Max + CalcTextSize(buf) + ImVec2(4,4), IM_COL32(40,0,0,150));
        draw_list->AddText(g.IO.FontDefault, 13.0f, cand.Max, ~0U, buf);
    }
    else if (g.IO.KeyCtrl) // Hold to preview score in matching quadrant. Press C to rotate.
    {
        if (IsKeyPressedMap(ImGuiKey_C)) { g.NavMoveDirLast = (ImGuiDir)((g.NavMoveDirLast + 1) & 3); g.IO.KeysDownDuration[g.IO.KeyMap[ImGuiKey_C]] = 0.01f; }
        if (quadrant == g.NavMoveDir)
        {
            ImFormatString(buf, IM_ARRAYSIZE(buf), "%.0f/%.0f", dist_box, dist_center);
            ImDrawList* draw_list = GetForegroundDrawList(window);
            draw_list->AddRectFilled(cand.Min, cand.Max, IM_COL32(255, 0, 0, 200));
            draw_list->AddText(g.IO.FontDefault, 13.0f, cand.Min, IM_COL32(255, 255, 255, 255), buf);
        }
    }
 #endif

    // Is it in the quadrant we're interesting in moving to?
    bool new_best = false;
    if (quadrant == g.NavMoveDir)
    {
        // Does it beat the current best candidate?
        if (dist_box < result->DistBox)
        {
            result->DistBox = dist_box;
            result->DistCenter = dist_center;
            return true;
        }
        if (dist_box == result->DistBox)
        {
            // Try using distance between center points to break ties
            if (dist_center < result->DistCenter)
            {
                result->DistCenter = dist_center;
                new_best = true;
            }
            else if (dist_center == result->DistCenter)
            {
                // Still tied! we need to be extra-careful to make sure everything gets linked properly. We consistently break ties by symbolically moving "later" items
                // (with higher index) to the right/downwards by an infinitesimal amount since we the current "best" button already (so it must have a lower index),
                // this is fairly easy. This rule ensures that all buttons with dx==dy==0 will end up being linked in order of appearance along the x axis.
                if (((g.NavMoveDir == ImGuiDir_Up || g.NavMoveDir == ImGuiDir_Down) ? dby : dbx) < 0.0f) // moving bj to the right/down decreases distance
                    new_best = true;
            }
        }
    }

    // Axial check: if 'curr' has no link at all in some direction and 'cand' lies roughly in that direction, add a tentative link. This will only be kept if no "real" matches
    // are found, so it only augments the graph produced by the above method using extra links. (important, since it doesn't guarantee strong connectedness)
    // This is just to avoid buttons having no links in a particular direction when there's a suitable neighbor. you get good graphs without this too.
    // 2017/09/29: FIXME: This now currently only enabled inside menu bars, ideally we'd disable it everywhere. Menus in particular need to catch failure. For general navigation it feels awkward.
    // Disabling it may lead to disconnected graphs when nodes are very spaced out on different axis. Perhaps consider offering this as an option?
    if (result->DistBox == FLT_MAX && dist_axial < result->DistAxial)  // Check axial match
        if (g.NavLayer == 1 && !(g.NavWindow->Flags & ImGuiWindowFlags_ChildMenu))
            if ((g.NavMoveDir == ImGuiDir_Left && dax < 0.0f) || (g.NavMoveDir == ImGuiDir_Right && dax > 0.0f) || (g.NavMoveDir == ImGuiDir_Up && day < 0.0f) || (g.NavMoveDir == ImGuiDir_Down && day > 0.0f))
            {
                result->DistAxial = dist_axial;
                new_best = true;
            }

    return new_best;
}

// We get there when either NavId == id, or when g.NavAnyRequest is set (which is updated by NavUpdateAnyRequestFlag above)
static void ImGui::NavProcessItem(ImGuiWindow* window, const ImRect& nav_bb, const ImGuiID id)
{
    ImGuiContext& g = *GImGui;
    //if (!g.IO.NavActive)  // [2017/10/06] Removed this possibly redundant test but I am not sure of all the side-effects yet. Some of the feature here will need to work regardless of using a _NoNavInputs flag.
    //    return;

    const ImGuiItemFlags item_flags = window->DC.ItemFlags;
    const ImRect nav_bb_rel(nav_bb.Min - window->Pos, nav_bb.Max - window->Pos);

    // Process Init Request
    if (g.NavInitRequest && g.NavLayer == window->DC.NavLayerCurrent)
    {
        // Even if 'ImGuiItemFlags_NoNavDefaultFocus' is on (typically collapse/close button) we record the first ResultId so they can be used as a fallback
        if (!(item_flags & ImGuiItemFlags_NoNavDefaultFocus) || g.NavInitResultId == 0)
        {
            g.NavInitResultId = id;
            g.NavInitResultRectRel = nav_bb_rel;
        }
        if (!(item_flags & ImGuiItemFlags_NoNavDefaultFocus))
        {
            g.NavInitRequest = false; // Found a match, clear request
            NavUpdateAnyRequestFlag();
        }
    }

    // Process Move Request (scoring for navigation)
    // FIXME-NAV: Consider policy for double scoring (scoring from NavScoringRectScreen + scoring from a rect wrapped according to current wrapping policy)
    if ((g.NavId != id || (g.NavMoveRequestFlags & ImGuiNavMoveFlags_AllowCurrentNavId)) && !(item_flags & (ImGuiItemFlags_Disabled|ImGuiItemFlags_NoNav)))
    {
        ImGuiNavMoveResult* result = (window == g.NavWindow) ? &g.NavMoveResultLocal : &g.NavMoveResultOther;
#if IMGUI_DEBUG_NAV_SCORING
        // [DEBUG] Score all items in NavWindow at all times
        if (!g.NavMoveRequest)
            g.NavMoveDir = g.NavMoveDirLast;
        bool new_best = NavScoreItem(result, nav_bb) && g.NavMoveRequest;
#else
        bool new_best = g.NavMoveRequest && NavScoreItem(result, nav_bb);
#endif
        if (new_best)
        {
            result->ID = id;
            result->SelectScopeId = g.MultiSelectScopeId;
            result->Window = window;
            result->RectRel = nav_bb_rel;
        }

        const float VISIBLE_RATIO = 0.70f;
        if ((g.NavMoveRequestFlags & ImGuiNavMoveFlags_AlsoScoreVisibleSet) && window->ClipRect.Overlaps(nav_bb))
            if (ImClamp(nav_bb.Max.y, window->ClipRect.Min.y, window->ClipRect.Max.y) - ImClamp(nav_bb.Min.y, window->ClipRect.Min.y, window->ClipRect.Max.y) >= (nav_bb.Max.y - nav_bb.Min.y) * VISIBLE_RATIO)
                if (NavScoreItem(&g.NavMoveResultLocalVisibleSet, nav_bb))
                {
                    result = &g.NavMoveResultLocalVisibleSet;
                    result->ID = id;
                    result->SelectScopeId = g.MultiSelectScopeId;
                    result->Window = window;
                    result->RectRel = nav_bb_rel;
                }
    }

    // Update window-relative bounding box of navigated item
    if (g.NavId == id)
    {
        g.NavWindow = window;                                           // Always refresh g.NavWindow, because some operations such as FocusItem() don't have a window.
        g.NavLayer = window->DC.NavLayerCurrent;
        g.NavIdIsAlive = true;
        g.NavIdTabCounter = window->DC.FocusCounterTab;
        window->NavRectRel[window->DC.NavLayerCurrent] = nav_bb_rel;    // Store item bounding box (relative to window position)
    }
}

bool ImGui::NavMoveRequestButNoResultYet()
{
    ImGuiContext& g = *GImGui;
    return g.NavMoveRequest && g.NavMoveResultLocal.ID == 0 && g.NavMoveResultOther.ID == 0;
}

void ImGui::NavMoveRequestCancel()
{
    ImGuiContext& g = *GImGui;
    g.NavMoveRequest = false;
    NavUpdateAnyRequestFlag();
}

void ImGui::NavMoveRequestForward(ImGuiDir move_dir, ImGuiDir clip_dir, const ImRect& bb_rel, ImGuiNavMoveFlags move_flags)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(g.NavMoveRequestForward == ImGuiNavForward_None);
    NavMoveRequestCancel();
    g.NavMoveDir = move_dir;
    g.NavMoveClipDir = clip_dir;
    g.NavMoveRequestForward = ImGuiNavForward_ForwardQueued;
    g.NavMoveRequestFlags = move_flags;
    g.NavWindow->NavRectRel[g.NavLayer] = bb_rel;
}

void ImGui::NavMoveRequestTryWrapping(ImGuiWindow* window, ImGuiNavMoveFlags move_flags)
{
    ImGuiContext& g = *GImGui;
    if (g.NavWindow != window || !NavMoveRequestButNoResultYet() || g.NavMoveRequestForward != ImGuiNavForward_None || g.NavLayer != 0)
        return;
    IM_ASSERT(move_flags != 0); // No points calling this with no wrapping
    ImRect bb_rel = window->NavRectRel[0];

    ImGuiDir clip_dir = g.NavMoveDir;
    if (g.NavMoveDir == ImGuiDir_Left && (move_flags & (ImGuiNavMoveFlags_WrapX | ImGuiNavMoveFlags_LoopX)))
    {
        bb_rel.Min.x = bb_rel.Max.x = ImMax(window->SizeFull.x, window->ContentSize.x + window->WindowPadding.x * 2.0f) - window->Scroll.x;
        if (move_flags & ImGuiNavMoveFlags_WrapX) { bb_rel.TranslateY(-bb_rel.GetHeight()); clip_dir = ImGuiDir_Up; }
        NavMoveRequestForward(g.NavMoveDir, clip_dir, bb_rel, move_flags);
    }
    if (g.NavMoveDir == ImGuiDir_Right && (move_flags & (ImGuiNavMoveFlags_WrapX | ImGuiNavMoveFlags_LoopX)))
    {
        bb_rel.Min.x = bb_rel.Max.x = -window->Scroll.x;
        if (move_flags & ImGuiNavMoveFlags_WrapX) { bb_rel.TranslateY(+bb_rel.GetHeight()); clip_dir = ImGuiDir_Down; }
        NavMoveRequestForward(g.NavMoveDir, clip_dir, bb_rel, move_flags);
    }
    if (g.NavMoveDir == ImGuiDir_Up && (move_flags & (ImGuiNavMoveFlags_WrapY | ImGuiNavMoveFlags_LoopY)))
    {
        bb_rel.Min.y = bb_rel.Max.y = ImMax(window->SizeFull.y, window->ContentSize.y + window->WindowPadding.y * 2.0f) - window->Scroll.y;
        if (move_flags & ImGuiNavMoveFlags_WrapY) { bb_rel.TranslateX(-bb_rel.GetWidth()); clip_dir = ImGuiDir_Left; }
        NavMoveRequestForward(g.NavMoveDir, clip_dir, bb_rel, move_flags);
    }
    if (g.NavMoveDir == ImGuiDir_Down && (move_flags & (ImGuiNavMoveFlags_WrapY | ImGuiNavMoveFlags_LoopY)))
    {
        bb_rel.Min.y = bb_rel.Max.y = -window->Scroll.y;
        if (move_flags & ImGuiNavMoveFlags_WrapY) { bb_rel.TranslateX(+bb_rel.GetWidth()); clip_dir = ImGuiDir_Right; }
        NavMoveRequestForward(g.NavMoveDir, clip_dir, bb_rel, move_flags);
    }
}

// FIXME: This could be replaced by updating a frame number in each window when (window == NavWindow) and (NavLayer == 0).
// This way we could find the last focused window among our children. It would be much less confusing this way?
static void ImGui::NavSaveLastChildNavWindowIntoParent(ImGuiWindow* nav_window)
{
    ImGuiWindow* parent_window = nav_window;
    while (parent_window && (parent_window->Flags & ImGuiWindowFlags_ChildWindow) != 0 && (parent_window->Flags & (ImGuiWindowFlags_Popup | ImGuiWindowFlags_ChildMenu)) == 0)
        parent_window = parent_window->ParentWindow;
    if (parent_window && parent_window != nav_window)
        parent_window->NavLastChildNavWindow = nav_window;
}

// Restore the last focused child.
// Call when we are expected to land on the Main Layer (0) after FocusWindow()
static ImGuiWindow* ImGui::NavRestoreLastChildNavWindow(ImGuiWindow* window)
{
    return window->NavLastChildNavWindow ? window->NavLastChildNavWindow : window;
}

static void NavRestoreLayer(ImGuiNavLayer layer)
{
    ImGuiContext& g = *GImGui;
    g.NavLayer = layer;
    if (layer == 0)
        g.NavWindow = ImGui::NavRestoreLastChildNavWindow(g.NavWindow);
    if (layer == 0 && g.NavWindow->NavLastIds[0] != 0)
        ImGui::SetNavIDWithRectRel(g.NavWindow->NavLastIds[0], layer, g.NavWindow->NavRectRel[0]);
    else
        ImGui::NavInitWindow(g.NavWindow, true);
}

static inline void ImGui::NavUpdateAnyRequestFlag()
{
    ImGuiContext& g = *GImGui;
    g.NavAnyRequest = g.NavMoveRequest || g.NavInitRequest || (IMGUI_DEBUG_NAV_SCORING && g.NavWindow != NULL);
    if (g.NavAnyRequest)
        IM_ASSERT(g.NavWindow != NULL);
}

// This needs to be called before we submit any widget (aka in or before Begin)
void ImGui::NavInitWindow(ImGuiWindow* window, bool force_reinit)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(window == g.NavWindow);
    bool init_for_nav = false;
    if (!(window->Flags & ImGuiWindowFlags_NoNavInputs))
        if (!(window->Flags & ImGuiWindowFlags_ChildWindow) || (window->Flags & ImGuiWindowFlags_Popup) || (window->NavLastIds[0] == 0) || force_reinit)
            init_for_nav = true;
    //IMGUI_DEBUG_LOG("[Nav] NavInitWindow() init_for_nav=%d, window=\"%s\", layer=%d\n", init_for_nav, window->Name, g.NavLayer);
    if (init_for_nav)
    {
        SetNavID(0, g.NavLayer);
        g.NavInitRequest = true;
        g.NavInitRequestFromMove = false;
        g.NavInitResultId = 0;
        g.NavInitResultRectRel = ImRect();
        NavUpdateAnyRequestFlag();
    }
    else
    {
        g.NavId = window->NavLastIds[0];
    }
}

static ImVec2 ImGui::NavCalcPreferredRefPos()
{
    ImGuiContext& g = *GImGui;
    if (g.NavDisableHighlight || !g.NavDisableMouseHover || !g.NavWindow)
    {
        // Mouse (we need a fallback in case the mouse becomes invalid after being used)
        if (IsMousePosValid(&g.IO.MousePos))
            return g.IO.MousePos;
        return g.LastValidMousePos;
    }
    else
    {
        // When navigation is active and mouse is disabled, decide on an arbitrary position around the bottom left of the currently navigated item.
        const ImRect& rect_rel = g.NavWindow->NavRectRel[g.NavLayer];
        ImVec2 pos = g.NavWindow->Pos + ImVec2(rect_rel.Min.x + ImMin(g.Style.FramePadding.x * 4, rect_rel.GetWidth()), rect_rel.Max.y - ImMin(g.Style.FramePadding.y, rect_rel.GetHeight()));
        ImRect visible_rect = GetViewportRect();
        return ImFloor(ImClamp(pos, visible_rect.Min, visible_rect.Max));   // ImFloor() is important because non-integer mouse position application in back-end might be lossy and result in undesirable non-zero delta.
    }
}

float ImGui::GetNavInputAmount(ImGuiNavInput n, ImGuiInputReadMode mode)
{
    ImGuiContext& g = *GImGui;
    if (mode == ImGuiInputReadMode_Down)
        return g.IO.NavInputs[n];                         // Instant, read analog input (0.0f..1.0f, as provided by user)

    const float t = g.IO.NavInputsDownDuration[n];
    if (t < 0.0f && mode == ImGuiInputReadMode_Released)  // Return 1.0f when just released, no repeat, ignore analog input.
        return (g.IO.NavInputsDownDurationPrev[n] >= 0.0f ? 1.0f : 0.0f);
    if (t < 0.0f)
        return 0.0f;
    if (mode == ImGuiInputReadMode_Pressed)               // Return 1.0f when just pressed, no repeat, ignore analog input.
        return (t == 0.0f) ? 1.0f : 0.0f;
    if (mode == ImGuiInputReadMode_Repeat)
        return (float)CalcTypematicRepeatAmount(t - g.IO.DeltaTime, t, g.IO.KeyRepeatDelay * 0.72f, g.IO.KeyRepeatRate * 0.80f);
    if (mode == ImGuiInputReadMode_RepeatSlow)
        return (float)CalcTypematicRepeatAmount(t - g.IO.DeltaTime, t, g.IO.KeyRepeatDelay * 1.25f, g.IO.KeyRepeatRate * 2.00f);
    if (mode == ImGuiInputReadMode_RepeatFast)
        return (float)CalcTypematicRepeatAmount(t - g.IO.DeltaTime, t, g.IO.KeyRepeatDelay * 0.72f, g.IO.KeyRepeatRate * 0.30f);
    return 0.0f;
}

ImVec2 ImGui::GetNavInputAmount2d(ImGuiNavDirSourceFlags dir_sources, ImGuiInputReadMode mode, float slow_factor, float fast_factor)
{
    ImVec2 delta(0.0f, 0.0f);
    if (dir_sources & ImGuiNavDirSourceFlags_Keyboard)
        delta += ImVec2(GetNavInputAmount(ImGuiNavInput_KeyRight_, mode)   - GetNavInputAmount(ImGuiNavInput_KeyLeft_,   mode), GetNavInputAmount(ImGuiNavInput_KeyDown_,   mode) - GetNavInputAmount(ImGuiNavInput_KeyUp_,   mode));
    if (dir_sources & ImGuiNavDirSourceFlags_PadDPad)
        delta += ImVec2(GetNavInputAmount(ImGuiNavInput_DpadRight, mode)   - GetNavInputAmount(ImGuiNavInput_DpadLeft,   mode), GetNavInputAmount(ImGuiNavInput_DpadDown,   mode) - GetNavInputAmount(ImGuiNavInput_DpadUp,   mode));
    if (dir_sources & ImGuiNavDirSourceFlags_PadLStick)
        delta += ImVec2(GetNavInputAmount(ImGuiNavInput_LStickRight, mode) - GetNavInputAmount(ImGuiNavInput_LStickLeft, mode), GetNavInputAmount(ImGuiNavInput_LStickDown, mode) - GetNavInputAmount(ImGuiNavInput_LStickUp, mode));
    if (slow_factor != 0.0f && IsNavInputDown(ImGuiNavInput_TweakSlow))
        delta *= slow_factor;
    if (fast_factor != 0.0f && IsNavInputDown(ImGuiNavInput_TweakFast))
        delta *= fast_factor;
    return delta;
}

static void ImGui::NavUpdate()
{
    ImGuiContext& g = *GImGui;
    g.IO.WantSetMousePos = false;
#if 0
    if (g.NavScoringCount > 0) IMGUI_DEBUG_LOG("NavScoringCount %d for '%s' layer %d (Init:%d, Move:%d)\n", g.FrameCount, g.NavScoringCount, g.NavWindow ? g.NavWindow->Name : "NULL", g.NavLayer, g.NavInitRequest || g.NavInitResultId != 0, g.NavMoveRequest);
#endif

    // Set input source as Gamepad when buttons are pressed before we map Keyboard (some features differs when used with Gamepad vs Keyboard)
    bool nav_keyboard_active = (g.IO.ConfigFlags & ImGuiConfigFlags_NavEnableKeyboard) != 0;
    bool nav_gamepad_active = (g.IO.ConfigFlags & ImGuiConfigFlags_NavEnableGamepad) != 0 && (g.IO.BackendFlags & ImGuiBackendFlags_HasGamepad) != 0;
    if (nav_gamepad_active)
        if (g.IO.NavInputs[ImGuiNavInput_Activate] > 0.0f || g.IO.NavInputs[ImGuiNavInput_Input] > 0.0f || g.IO.NavInputs[ImGuiNavInput_Cancel] > 0.0f || g.IO.NavInputs[ImGuiNavInput_Menu] > 0.0f)
            g.NavInputSource = ImGuiInputSource_NavGamepad;

    // Update Keyboard->Nav inputs mapping
    if (nav_keyboard_active)
    {
        #define NAV_MAP_KEY(_KEY, _NAV_INPUT)  do { if (IsKeyDown(g.IO.KeyMap[_KEY])) { g.IO.NavInputs[_NAV_INPUT] = 1.0f; g.NavInputSource = ImGuiInputSource_NavKeyboard; } } while (0)
        NAV_MAP_KEY(ImGuiKey_Space,     ImGuiNavInput_Activate );
        NAV_MAP_KEY(ImGuiKey_Enter,     ImGuiNavInput_Input    );
        NAV_MAP_KEY(ImGuiKey_Escape,    ImGuiNavInput_Cancel   );
        NAV_MAP_KEY(ImGuiKey_LeftArrow, ImGuiNavInput_KeyLeft_ );
        NAV_MAP_KEY(ImGuiKey_RightArrow,ImGuiNavInput_KeyRight_);
        NAV_MAP_KEY(ImGuiKey_UpArrow,   ImGuiNavInput_KeyUp_   );
        NAV_MAP_KEY(ImGuiKey_DownArrow, ImGuiNavInput_KeyDown_ );
        if (g.IO.KeyCtrl)
            g.IO.NavInputs[ImGuiNavInput_TweakSlow] = 1.0f;
        if (g.IO.KeyShift)
            g.IO.NavInputs[ImGuiNavInput_TweakFast] = 1.0f;
        if (g.IO.KeyAlt && !g.IO.KeyCtrl) // AltGR is Alt+Ctrl, also even on keyboards without AltGR we don't want Alt+Ctrl to open menu.
            g.IO.NavInputs[ImGuiNavInput_KeyMenu_]  = 1.0f;
        #undef NAV_MAP_KEY
    }
    memcpy(g.IO.NavInputsDownDurationPrev, g.IO.NavInputsDownDuration, sizeof(g.IO.NavInputsDownDuration));
    for (int i = 0; i < IM_ARRAYSIZE(g.IO.NavInputs); i++)
        g.IO.NavInputsDownDuration[i] = (g.IO.NavInputs[i] > 0.0f) ? (g.IO.NavInputsDownDuration[i] < 0.0f ? 0.0f : g.IO.NavInputsDownDuration[i] + g.IO.DeltaTime) : -1.0f;

    // Process navigation init request (select first/default focus)
    // In very rare cases g.NavWindow may be null (e.g. clearing focus after requesting an init request, which does happen when releasing Alt while clicking on void)
    if (g.NavInitResultId != 0 && (!g.NavDisableHighlight || g.NavInitRequestFromMove) && g.NavWindow)
    {
        // Apply result from previous navigation init request (will typically select the first item, unless SetItemDefaultFocus() has been called)
        //IMGUI_DEBUG_LOG("[Nav] Apply NavInitRequest result: 0x%08X Layer %d in \"%s\"\n", g.NavInitResultId, g.NavLayer, g.NavWindow->Name);
        if (g.NavInitRequestFromMove)
            SetNavIDWithRectRel(g.NavInitResultId, g.NavLayer, g.NavInitResultRectRel);
        else
            SetNavID(g.NavInitResultId, g.NavLayer);
        g.NavWindow->NavRectRel[g.NavLayer] = g.NavInitResultRectRel;
    }
    g.NavInitRequest = false;
    g.NavInitRequestFromMove = false;
    g.NavInitResultId = 0;
    g.NavJustMovedToId = 0;

    // Process navigation move request
    if (g.NavMoveRequest)
        NavUpdateMoveResult();

    // When a forwarded move request failed, we restore the highlight that we disabled during the forward frame
    if (g.NavMoveRequestForward == ImGuiNavForward_ForwardActive)
    {
        IM_ASSERT(g.NavMoveRequest);
        if (g.NavMoveResultLocal.ID == 0 && g.NavMoveResultOther.ID == 0)
            g.NavDisableHighlight = false;
        g.NavMoveRequestForward = ImGuiNavForward_None;
    }

    // Apply application mouse position movement, after we had a chance to process move request result.
    if (g.NavMousePosDirty && g.NavIdIsAlive)
    {
        // Set mouse position given our knowledge of the navigated item position from last frame
        if ((g.IO.ConfigFlags & ImGuiConfigFlags_NavEnableSetMousePos) && (g.IO.BackendFlags & ImGuiBackendFlags_HasSetMousePos))
        {
            if (!g.NavDisableHighlight && g.NavDisableMouseHover && g.NavWindow)
            {
                g.IO.MousePos = g.IO.MousePosPrev = NavCalcPreferredRefPos();
                g.IO.WantSetMousePos = true;
            }
        }
        g.NavMousePosDirty = false;
    }
    g.NavIdIsAlive = false;
    g.NavJustTabbedId = 0;
    IM_ASSERT(g.NavLayer == 0 || g.NavLayer == 1);

    // Store our return window (for returning from Layer 1 to Layer 0) and clear it as soon as we step back in our own Layer 0
    if (g.NavWindow)
        NavSaveLastChildNavWindowIntoParent(g.NavWindow);
    if (g.NavWindow && g.NavWindow->NavLastChildNavWindow != NULL && g.NavLayer == 0)
        g.NavWindow->NavLastChildNavWindow = NULL;

    // Update CTRL+TAB and Windowing features (hold Square to move/resize/etc.)
    NavUpdateWindowing();

    // Set output flags for user application
    g.IO.NavActive = (nav_keyboard_active || nav_gamepad_active) && g.NavWindow && !(g.NavWindow->Flags & ImGuiWindowFlags_NoNavInputs);
    g.IO.NavVisible = (g.IO.NavActive && g.NavId != 0 && !g.NavDisableHighlight) || (g.NavWindowingTarget != NULL);

    // Process NavCancel input (to close a popup, get back to parent, clear focus)
    if (IsNavInputTest(ImGuiNavInput_Cancel, ImGuiInputReadMode_Pressed))
    {
        if (g.ActiveId != 0)
        {
            if (!IsActiveIdUsingNavInput(ImGuiNavInput_Cancel))
                ClearActiveID();
        }
        else if (g.NavWindow && (g.NavWindow->Flags & ImGuiWindowFlags_ChildWindow) && !(g.NavWindow->Flags & ImGuiWindowFlags_Popup) && g.NavWindow->ParentWindow)
        {
            // Exit child window
            ImGuiWindow* child_window = g.NavWindow;
            ImGuiWindow* parent_window = g.NavWindow->ParentWindow;
            IM_ASSERT(child_window->ChildId != 0);
            FocusWindow(parent_window);
            SetNavID(child_window->ChildId, 0);
            g.NavIdIsAlive = false;
            if (g.NavDisableMouseHover)
                g.NavMousePosDirty = true;
        }
        else if (g.OpenPopupStack.Size > 0)
        {
            // Close open popup/menu
            if (!(g.OpenPopupStack.back().Window->Flags & ImGuiWindowFlags_Modal))
                ClosePopupToLevel(g.OpenPopupStack.Size - 1, true);
        }
        else if (g.NavLayer != 0)
        {
            // Leave the "menu" layer
            NavRestoreLayer(ImGuiNavLayer_Main);
        }
        else
        {
            // Clear NavLastId for popups but keep it for regular child window so we can leave one and come back where we were
            if (g.NavWindow && ((g.NavWindow->Flags & ImGuiWindowFlags_Popup) || !(g.NavWindow->Flags & ImGuiWindowFlags_ChildWindow)))
                g.NavWindow->NavLastIds[0] = 0;
            g.NavId = 0;
        }
    }

    // Process manual activation request
    g.NavActivateId = g.NavActivateDownId = g.NavActivatePressedId = g.NavInputId = 0;
    if (g.NavId != 0 && !g.NavDisableHighlight && !g.NavWindowingTarget && g.NavWindow && !(g.NavWindow->Flags & ImGuiWindowFlags_NoNavInputs))
    {
        bool activate_down = IsNavInputDown(ImGuiNavInput_Activate);
        bool activate_pressed = activate_down && IsNavInputTest(ImGuiNavInput_Activate, ImGuiInputReadMode_Pressed);
        if (g.ActiveId == 0 && activate_pressed)
            g.NavActivateId = g.NavId;
        if ((g.ActiveId == 0 || g.ActiveId == g.NavId) && activate_down)
            g.NavActivateDownId = g.NavId;
        if ((g.ActiveId == 0 || g.ActiveId == g.NavId) && activate_pressed)
            g.NavActivatePressedId = g.NavId;
        if ((g.ActiveId == 0 || g.ActiveId == g.NavId) && IsNavInputTest(ImGuiNavInput_Input, ImGuiInputReadMode_Pressed))
            g.NavInputId = g.NavId;
    }
    if (g.NavWindow && (g.NavWindow->Flags & ImGuiWindowFlags_NoNavInputs))
        g.NavDisableHighlight = true;
    if (g.NavActivateId != 0)
        IM_ASSERT(g.NavActivateDownId == g.NavActivateId);
    g.NavMoveRequest = false;

    // Process programmatic activation request
    if (g.NavNextActivateId != 0)
        g.NavActivateId = g.NavActivateDownId = g.NavActivatePressedId = g.NavInputId = g.NavNextActivateId;
    g.NavNextActivateId = 0;

    // Initiate directional inputs request
    if (g.NavMoveRequestForward == ImGuiNavForward_None)
    {
        g.NavMoveDir = ImGuiDir_None;
        g.NavMoveRequestFlags = ImGuiNavMoveFlags_None;
        if (g.NavWindow && !g.NavWindowingTarget && !(g.NavWindow->Flags & ImGuiWindowFlags_NoNavInputs))
        {
            const ImGuiInputReadMode read_mode = ImGuiInputReadMode_Repeat;
            if (!IsActiveIdUsingNavDir(ImGuiDir_Left)  && (IsNavInputTest(ImGuiNavInput_DpadLeft,  read_mode) || IsNavInputTest(ImGuiNavInput_KeyLeft_,  read_mode))) { g.NavMoveDir = ImGuiDir_Left; }
            if (!IsActiveIdUsingNavDir(ImGuiDir_Right) && (IsNavInputTest(ImGuiNavInput_DpadRight, read_mode) || IsNavInputTest(ImGuiNavInput_KeyRight_, read_mode))) { g.NavMoveDir = ImGuiDir_Right; }
            if (!IsActiveIdUsingNavDir(ImGuiDir_Up)    && (IsNavInputTest(ImGuiNavInput_DpadUp,    read_mode) || IsNavInputTest(ImGuiNavInput_KeyUp_,    read_mode))) { g.NavMoveDir = ImGuiDir_Up; }
            if (!IsActiveIdUsingNavDir(ImGuiDir_Down)  && (IsNavInputTest(ImGuiNavInput_DpadDown,  read_mode) || IsNavInputTest(ImGuiNavInput_KeyDown_,  read_mode))) { g.NavMoveDir = ImGuiDir_Down; }
        }
        g.NavMoveClipDir = g.NavMoveDir;
    }
    else
    {
        // Forwarding previous request (which has been modified, e.g. wrap around menus rewrite the requests with a starting rectangle at the other side of the window)
        // (Preserve g.NavMoveRequestFlags, g.NavMoveClipDir which were set by the NavMoveRequestForward() function)
        IM_ASSERT(g.NavMoveDir != ImGuiDir_None && g.NavMoveClipDir != ImGuiDir_None);
        IM_ASSERT(g.NavMoveRequestForward == ImGuiNavForward_ForwardQueued);
        g.NavMoveRequestForward = ImGuiNavForward_ForwardActive;
    }

    // Update PageUp/PageDown/Home/End scroll
    // FIXME-NAV: Consider enabling those keys even without the master ImGuiConfigFlags_NavEnableKeyboard flag?
    float nav_scoring_rect_offset_y = 0.0f;
    if (nav_keyboard_active)
        nav_scoring_rect_offset_y = NavUpdatePageUpPageDown();

    // If we initiate a movement request and have no current NavId, we initiate a InitDefautRequest that will be used as a fallback if the direction fails to find a match
    if (g.NavMoveDir != ImGuiDir_None)
    {
        g.NavMoveRequest = true;
        g.NavMoveDirLast = g.NavMoveDir;
    }
    if (g.NavMoveRequest && g.NavId == 0)
    {
        //IMGUI_DEBUG_LOG("[Nav] NavInitRequest from move, window \"%s\", layer=%d\n", g.NavWindow->Name, g.NavLayer);
        g.NavInitRequest = g.NavInitRequestFromMove = true;
        g.NavInitResultId = 0;
        g.NavDisableHighlight = false;
    }
    NavUpdateAnyRequestFlag();

    // Scrolling
    if (g.NavWindow && !(g.NavWindow->Flags & ImGuiWindowFlags_NoNavInputs) && !g.NavWindowingTarget)
    {
        // *Fallback* manual-scroll with Nav directional keys when window has no navigable item
        ImGuiWindow* window = g.NavWindow;
        const float scroll_speed = IM_ROUND(window->CalcFontSize() * 100 * g.IO.DeltaTime); // We need round the scrolling speed because sub-pixel scroll isn't reliably supported.
        if (window->DC.NavLayerActiveMask == 0x00 && window->DC.NavHasScroll && g.NavMoveRequest)
        {
            if (g.NavMoveDir == ImGuiDir_Left || g.NavMoveDir == ImGuiDir_Right)
                SetScrollX(window, ImFloor(window->Scroll.x + ((g.NavMoveDir == ImGuiDir_Left) ? -1.0f : +1.0f) * scroll_speed));
            if (g.NavMoveDir == ImGuiDir_Up || g.NavMoveDir == ImGuiDir_Down)
                SetScrollY(window, ImFloor(window->Scroll.y + ((g.NavMoveDir == ImGuiDir_Up) ? -1.0f : +1.0f) * scroll_speed));
        }

        // *Normal* Manual scroll with NavScrollXXX keys
        // Next movement request will clamp the NavId reference rectangle to the visible area, so navigation will resume within those bounds.
        ImVec2 scroll_dir = GetNavInputAmount2d(ImGuiNavDirSourceFlags_PadLStick, ImGuiInputReadMode_Down, 1.0f/10.0f, 10.0f);
        if (scroll_dir.x != 0.0f && window->ScrollbarX)
        {
            SetScrollX(window, ImFloor(window->Scroll.x + scroll_dir.x * scroll_speed));
            g.NavMoveFromClampedRefRect = true;
        }
        if (scroll_dir.y != 0.0f)
        {
            SetScrollY(window, ImFloor(window->Scroll.y + scroll_dir.y * scroll_speed));
            g.NavMoveFromClampedRefRect = true;
        }
    }

    // Reset search results
    g.NavMoveResultLocal.Clear();
    g.NavMoveResultLocalVisibleSet.Clear();
    g.NavMoveResultOther.Clear();

    // When we have manually scrolled (without using navigation) and NavId becomes out of bounds, we project its bounding box to the visible area to restart navigation within visible items
    if (g.NavMoveRequest && g.NavMoveFromClampedRefRect && g.NavLayer == 0)
    {
        ImGuiWindow* window = g.NavWindow;
        ImRect window_rect_rel(window->InnerRect.Min - window->Pos - ImVec2(1,1), window->InnerRect.Max - window->Pos + ImVec2(1,1));
        if (!window_rect_rel.Contains(window->NavRectRel[g.NavLayer]))
        {
            float pad = window->CalcFontSize() * 0.5f;
            window_rect_rel.Expand(ImVec2(-ImMin(window_rect_rel.GetWidth(), pad), -ImMin(window_rect_rel.GetHeight(), pad))); // Terrible approximation for the intent of starting navigation from first fully visible item
            window->NavRectRel[g.NavLayer].ClipWith(window_rect_rel);
            g.NavId = 0;
        }
        g.NavMoveFromClampedRefRect = false;
    }

    // For scoring we use a single segment on the left side our current item bounding box (not touching the edge to avoid box overlap with zero-spaced items)
    ImRect nav_rect_rel = (g.NavWindow && !g.NavWindow->NavRectRel[g.NavLayer].IsInverted()) ? g.NavWindow->NavRectRel[g.NavLayer] : ImRect(0,0,0,0);
    g.NavScoringRectScreen = g.NavWindow ? ImRect(g.NavWindow->Pos + nav_rect_rel.Min, g.NavWindow->Pos + nav_rect_rel.Max) : GetViewportRect();
    g.NavScoringRectScreen.TranslateY(nav_scoring_rect_offset_y);
    g.NavScoringRectScreen.Min.x = ImMin(g.NavScoringRectScreen.Min.x + 1.0f, g.NavScoringRectScreen.Max.x);
    g.NavScoringRectScreen.Max.x = g.NavScoringRectScreen.Min.x;
    IM_ASSERT(!g.NavScoringRectScreen.IsInverted()); // Ensure if we have a finite, non-inverted bounding box here will allows us to remove extraneous ImFabs() calls in NavScoreItem().
    //GetForegroundDrawList()->AddRect(g.NavScoringRectScreen.Min, g.NavScoringRectScreen.Max, IM_COL32(255,200,0,255)); // [DEBUG]
    g.NavScoringCount = 0;
#if IMGUI_DEBUG_NAV_RECTS
    if (g.NavWindow)
    {
        ImDrawList* draw_list = GetForegroundDrawList(g.NavWindow);
        if (1) { for (int layer = 0; layer < 2; layer++) draw_list->AddRect(g.NavWindow->Pos + g.NavWindow->NavRectRel[layer].Min, g.NavWindow->Pos + g.NavWindow->NavRectRel[layer].Max, IM_COL32(255,200,0,255)); } // [DEBUG]
        if (1) { ImU32 col = (!g.NavWindow->Hidden) ? IM_COL32(255,0,255,255) : IM_COL32(255,0,0,255); ImVec2 p = NavCalcPreferredRefPos(); char buf[32]; ImFormatString(buf, 32, "%d", g.NavLayer); draw_list->AddCircleFilled(p, 3.0f, col); draw_list->AddText(NULL, 13.0f, p + ImVec2(8,-4), col, buf); }
    }
#endif
}

// Apply result from previous frame navigation directional move request
static void ImGui::NavUpdateMoveResult()
{
    ImGuiContext& g = *GImGui;
    if (g.NavMoveResultLocal.ID == 0 && g.NavMoveResultOther.ID == 0)
    {
        // In a situation when there is no results but NavId != 0, re-enable the Navigation highlight (because g.NavId is not considered as a possible result)
        if (g.NavId != 0)
        {
            g.NavDisableHighlight = false;
            g.NavDisableMouseHover = true;
        }
        return;
    }

    // Select which result to use
    ImGuiNavMoveResult* result = (g.NavMoveResultLocal.ID != 0) ? &g.NavMoveResultLocal : &g.NavMoveResultOther;

    // PageUp/PageDown behavior first jumps to the bottom/top mostly visible item, _otherwise_ use the result from the previous/next page.
    if (g.NavMoveRequestFlags & ImGuiNavMoveFlags_AlsoScoreVisibleSet)
        if (g.NavMoveResultLocalVisibleSet.ID != 0 && g.NavMoveResultLocalVisibleSet.ID != g.NavId)
            result = &g.NavMoveResultLocalVisibleSet;

    // Maybe entering a flattened child from the outside? In this case solve the tie using the regular scoring rules.
    if (result != &g.NavMoveResultOther && g.NavMoveResultOther.ID != 0 && g.NavMoveResultOther.Window->ParentWindow == g.NavWindow)
        if ((g.NavMoveResultOther.DistBox < result->DistBox) || (g.NavMoveResultOther.DistBox == result->DistBox && g.NavMoveResultOther.DistCenter < result->DistCenter))
            result = &g.NavMoveResultOther;
    IM_ASSERT(g.NavWindow && result->Window);

    // Scroll to keep newly navigated item fully into view.
    if (g.NavLayer == 0)
    {
        ImVec2 delta_scroll;
        if (g.NavMoveRequestFlags & ImGuiNavMoveFlags_ScrollToEdge)
        {
            float scroll_target = (g.NavMoveDir == ImGuiDir_Up) ? result->Window->ScrollMax.y : 0.0f;
            delta_scroll.y = result->Window->Scroll.y - scroll_target;
            SetScrollY(result->Window, scroll_target);
        }
        else
        {
            ImRect rect_abs = ImRect(result->RectRel.Min + result->Window->Pos, result->RectRel.Max + result->Window->Pos);
            delta_scroll = ScrollToBringRectIntoView(result->Window, rect_abs);
        }

        // Offset our result position so mouse position can be applied immediately after in NavUpdate()
        result->RectRel.TranslateX(-delta_scroll.x);
        result->RectRel.TranslateY(-delta_scroll.y);
    }

    ClearActiveID();
    g.NavWindow = result->Window;
    if (g.NavId != result->ID)
    {
        // Don't set NavJustMovedToId if just landed on the same spot (which may happen with ImGuiNavMoveFlags_AllowCurrentNavId)
        g.NavJustMovedToId = result->ID;
        g.NavJustMovedToMultiSelectScopeId = result->SelectScopeId;
    }
    SetNavIDWithRectRel(result->ID, g.NavLayer, result->RectRel);
    g.NavMoveFromClampedRefRect = false;
}

// Handle PageUp/PageDown/Home/End keys
static float ImGui::NavUpdatePageUpPageDown()
{
    ImGuiContext& g = *GImGui;
    if (g.NavMoveDir != ImGuiDir_None || g.NavWindow == NULL)
        return 0.0f;
    if ((g.NavWindow->Flags & ImGuiWindowFlags_NoNavInputs) || g.NavWindowingTarget != NULL || g.NavLayer != 0)
        return 0.0f;

    ImGuiWindow* window = g.NavWindow;
    const bool page_up_held = IsKeyDown(g.IO.KeyMap[ImGuiKey_PageUp]) && !IsActiveIdUsingKey(ImGuiKey_PageUp);
    const bool page_down_held = IsKeyDown(g.IO.KeyMap[ImGuiKey_PageDown]) && !IsActiveIdUsingKey(ImGuiKey_PageDown);
    const bool home_pressed = IsKeyPressed(g.IO.KeyMap[ImGuiKey_Home]) && !IsActiveIdUsingKey(ImGuiKey_Home);
    const bool end_pressed = IsKeyPressed(g.IO.KeyMap[ImGuiKey_End]) && !IsActiveIdUsingKey(ImGuiKey_End);
    if (page_up_held != page_down_held || home_pressed != end_pressed) // If either (not both) are pressed
    {
        if (window->DC.NavLayerActiveMask == 0x00 && window->DC.NavHasScroll)
        {
            // Fallback manual-scroll when window has no navigable item
            if (IsKeyPressed(g.IO.KeyMap[ImGuiKey_PageUp], true))
                SetScrollY(window, window->Scroll.y - window->InnerRect.GetHeight());
            else if (IsKeyPressed(g.IO.KeyMap[ImGuiKey_PageDown], true))
                SetScrollY(window, window->Scroll.y + window->InnerRect.GetHeight());
            else if (home_pressed)
                SetScrollY(window, 0.0f);
            else if (end_pressed)
                SetScrollY(window, window->ScrollMax.y);
        }
        else
        {
            ImRect& nav_rect_rel = window->NavRectRel[g.NavLayer];
            const float page_offset_y = ImMax(0.0f, window->InnerRect.GetHeight() - window->CalcFontSize() * 1.0f + nav_rect_rel.GetHeight());
            float nav_scoring_rect_offset_y = 0.0f;
            if (IsKeyPressed(g.IO.KeyMap[ImGuiKey_PageUp], true))
            {
                nav_scoring_rect_offset_y = -page_offset_y;
                g.NavMoveDir = ImGuiDir_Down; // Because our scoring rect is offset up, we request the down direction (so we can always land on the last item)
                g.NavMoveClipDir = ImGuiDir_Up;
                g.NavMoveRequestFlags = ImGuiNavMoveFlags_AllowCurrentNavId | ImGuiNavMoveFlags_AlsoScoreVisibleSet;
            }
            else if (IsKeyPressed(g.IO.KeyMap[ImGuiKey_PageDown], true))
            {
                nav_scoring_rect_offset_y = +page_offset_y;
                g.NavMoveDir = ImGuiDir_Up; // Because our scoring rect is offset down, we request the up direction (so we can always land on the last item)
                g.NavMoveClipDir = ImGuiDir_Down;
                g.NavMoveRequestFlags = ImGuiNavMoveFlags_AllowCurrentNavId | ImGuiNavMoveFlags_AlsoScoreVisibleSet;
            }
            else if (home_pressed)
            {
                // FIXME-NAV: handling of Home/End is assuming that the top/bottom most item will be visible with Scroll.y == 0/ScrollMax.y
                // Scrolling will be handled via the ImGuiNavMoveFlags_ScrollToEdge flag, we don't scroll immediately to avoid scrolling happening before nav result.
                // Preserve current horizontal position if we have any.
                nav_rect_rel.Min.y = nav_rect_rel.Max.y = -window->Scroll.y;
                if (nav_rect_rel.IsInverted())
                    nav_rect_rel.Min.x = nav_rect_rel.Max.x = 0.0f;
                g.NavMoveDir = ImGuiDir_Down;
                g.NavMoveRequestFlags = ImGuiNavMoveFlags_AllowCurrentNavId | ImGuiNavMoveFlags_ScrollToEdge;
            }
            else if (end_pressed)
            {
                nav_rect_rel.Min.y = nav_rect_rel.Max.y = window->ScrollMax.y + window->SizeFull.y - window->Scroll.y;
                if (nav_rect_rel.IsInverted())
                    nav_rect_rel.Min.x = nav_rect_rel.Max.x = 0.0f;
                g.NavMoveDir = ImGuiDir_Up;
                g.NavMoveRequestFlags = ImGuiNavMoveFlags_AllowCurrentNavId | ImGuiNavMoveFlags_ScrollToEdge;
            }
            return nav_scoring_rect_offset_y;
        }
    }
    return 0.0f;
}

static int ImGui::FindWindowFocusIndex(ImGuiWindow* window) // FIXME-OPT O(N)
{
    ImGuiContext& g = *GImGui;
    for (int i = g.WindowsFocusOrder.Size-1; i >= 0; i--)
        if (g.WindowsFocusOrder[i] == window)
            return i;
    return -1;
}

static ImGuiWindow* FindWindowNavFocusable(int i_start, int i_stop, int dir) // FIXME-OPT O(N)
{
    ImGuiContext& g = *GImGui;
    for (int i = i_start; i >= 0 && i < g.WindowsFocusOrder.Size && i != i_stop; i += dir)
        if (ImGui::IsWindowNavFocusable(g.WindowsFocusOrder[i]))
            return g.WindowsFocusOrder[i];
    return NULL;
}

static void NavUpdateWindowingHighlightWindow(int focus_change_dir)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(g.NavWindowingTarget);
    if (g.NavWindowingTarget->Flags & ImGuiWindowFlags_Modal)
        return;

    const int i_current = ImGui::FindWindowFocusIndex(g.NavWindowingTarget);
    ImGuiWindow* window_target = FindWindowNavFocusable(i_current + focus_change_dir, -INT_MAX, focus_change_dir);
    if (!window_target)
        window_target = FindWindowNavFocusable((focus_change_dir < 0) ? (g.WindowsFocusOrder.Size - 1) : 0, i_current, focus_change_dir);
    if (window_target) // Don't reset windowing target if there's a single window in the list
        g.NavWindowingTarget = g.NavWindowingTargetAnim = window_target;
    g.NavWindowingToggleLayer = false;
}

// Windowing management mode
// Keyboard: CTRL+Tab (change focus/move/resize), Alt (toggle menu layer)
// Gamepad:  Hold Menu/Square (change focus/move/resize), Tap Menu/Square (toggle menu layer)
static void ImGui::NavUpdateWindowing()
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* apply_focus_window = NULL;
    bool apply_toggle_layer = false;

    ImGuiWindow* modal_window = GetTopMostPopupModal();
    if (modal_window != NULL)
    {
        g.NavWindowingTarget = NULL;
        return;
    }

    // Fade out
    if (g.NavWindowingTargetAnim && g.NavWindowingTarget == NULL)
    {
        g.NavWindowingHighlightAlpha = ImMax(g.NavWindowingHighlightAlpha - g.IO.DeltaTime * 10.0f, 0.0f);
        if (g.DimBgRatio <= 0.0f && g.NavWindowingHighlightAlpha <= 0.0f)
            g.NavWindowingTargetAnim = NULL;
    }

    // Start CTRL-TAB or Square+L/R window selection
    bool start_windowing_with_gamepad = !g.NavWindowingTarget && IsNavInputTest(ImGuiNavInput_Menu, ImGuiInputReadMode_Pressed);
    bool start_windowing_with_keyboard = !g.NavWindowingTarget && g.IO.KeyCtrl && IsKeyPressedMap(ImGuiKey_Tab) && (g.IO.ConfigFlags & ImGuiConfigFlags_NavEnableKeyboard);
    if (start_windowing_with_gamepad || start_windowing_with_keyboard)
        if (ImGuiWindow* window = g.NavWindow ? g.NavWindow : FindWindowNavFocusable(g.WindowsFocusOrder.Size - 1, -INT_MAX, -1))
        {
            g.NavWindowingTarget = g.NavWindowingTargetAnim = window;
            g.NavWindowingTimer = g.NavWindowingHighlightAlpha = 0.0f;
            g.NavWindowingToggleLayer = start_windowing_with_keyboard ? false : true;
            g.NavInputSource = start_windowing_with_keyboard ? ImGuiInputSource_NavKeyboard : ImGuiInputSource_NavGamepad;
        }

    // Gamepad update
    g.NavWindowingTimer += g.IO.DeltaTime;
    if (g.NavWindowingTarget && g.NavInputSource == ImGuiInputSource_NavGamepad)
    {
        // Highlight only appears after a brief time holding the button, so that a fast tap on PadMenu (to toggle NavLayer) doesn't add visual noise
        g.NavWindowingHighlightAlpha = ImMax(g.NavWindowingHighlightAlpha, ImSaturate((g.NavWindowingTimer - NAV_WINDOWING_HIGHLIGHT_DELAY) / 0.05f));

        // Select window to focus
        const int focus_change_dir = (int)IsNavInputTest(ImGuiNavInput_FocusPrev, ImGuiInputReadMode_RepeatSlow) - (int)IsNavInputTest(ImGuiNavInput_FocusNext, ImGuiInputReadMode_RepeatSlow);
        if (focus_change_dir != 0)
        {
            NavUpdateWindowingHighlightWindow(focus_change_dir);
            g.NavWindowingHighlightAlpha = 1.0f;
        }

        // Single press toggles NavLayer, long press with L/R apply actual focus on release (until then the window was merely rendered top-most)
        if (!IsNavInputDown(ImGuiNavInput_Menu))
        {
            g.NavWindowingToggleLayer &= (g.NavWindowingHighlightAlpha < 1.0f); // Once button was held long enough we don't consider it a tap-to-toggle-layer press anymore.
            if (g.NavWindowingToggleLayer && g.NavWindow)
                apply_toggle_layer = true;
            else if (!g.NavWindowingToggleLayer)
                apply_focus_window = g.NavWindowingTarget;
            g.NavWindowingTarget = NULL;
        }
    }

    // Keyboard: Focus
    if (g.NavWindowingTarget && g.NavInputSource == ImGuiInputSource_NavKeyboard)
    {
        // Visuals only appears after a brief time after pressing TAB the first time, so that a fast CTRL+TAB doesn't add visual noise
        g.NavWindowingHighlightAlpha = ImMax(g.NavWindowingHighlightAlpha, ImSaturate((g.NavWindowingTimer - NAV_WINDOWING_HIGHLIGHT_DELAY) / 0.05f)); // 1.0f
        if (IsKeyPressedMap(ImGuiKey_Tab, true))
            NavUpdateWindowingHighlightWindow(g.IO.KeyShift ? +1 : -1);
        if (!g.IO.KeyCtrl)
            apply_focus_window = g.NavWindowingTarget;
    }

    // Keyboard: Press and Release ALT to toggle menu layer
    // FIXME: We lack an explicit IO variable for "is the imgui window focused", so compare mouse validity to detect the common case of back-end clearing releases all keys on ALT-TAB
    if (IsNavInputTest(ImGuiNavInput_KeyMenu_, ImGuiInputReadMode_Pressed))
        g.NavWindowingToggleLayer = true;
    if ((g.ActiveId == 0 || g.ActiveIdAllowOverlap) && g.NavWindowingToggleLayer && IsNavInputTest(ImGuiNavInput_KeyMenu_, ImGuiInputReadMode_Released))
        if (IsMousePosValid(&g.IO.MousePos) == IsMousePosValid(&g.IO.MousePosPrev))
            apply_toggle_layer = true;

    // Move window
    if (g.NavWindowingTarget && !(g.NavWindowingTarget->Flags & ImGuiWindowFlags_NoMove))
    {
        ImVec2 move_delta;
        if (g.NavInputSource == ImGuiInputSource_NavKeyboard && !g.IO.KeyShift)
            move_delta = GetNavInputAmount2d(ImGuiNavDirSourceFlags_Keyboard, ImGuiInputReadMode_Down);
        if (g.NavInputSource == ImGuiInputSource_NavGamepad)
            move_delta = GetNavInputAmount2d(ImGuiNavDirSourceFlags_PadLStick, ImGuiInputReadMode_Down);
        if (move_delta.x != 0.0f || move_delta.y != 0.0f)
        {
            const float NAV_MOVE_SPEED = 800.0f;
            const float move_speed = ImFloor(NAV_MOVE_SPEED * g.IO.DeltaTime * ImMin(g.IO.DisplayFramebufferScale.x, g.IO.DisplayFramebufferScale.y)); // FIXME: Doesn't code variable framerate very well
            SetWindowPos(g.NavWindowingTarget->RootWindow, g.NavWindowingTarget->RootWindow->Pos + move_delta * move_speed, ImGuiCond_Always);
            g.NavDisableMouseHover = true;
            MarkIniSettingsDirty(g.NavWindowingTarget);
        }
    }

    // Apply final focus
    if (apply_focus_window && (g.NavWindow == NULL || apply_focus_window != g.NavWindow->RootWindow))
    {
        ClearActiveID();
        g.NavDisableHighlight = false;
        g.NavDisableMouseHover = true;
        apply_focus_window = NavRestoreLastChildNavWindow(apply_focus_window);
        ClosePopupsOverWindow(apply_focus_window, false);
        FocusWindow(apply_focus_window);
        if (apply_focus_window->NavLastIds[0] == 0)
            NavInitWindow(apply_focus_window, false);

        // If the window only has a menu layer, select it directly
        if (apply_focus_window->DC.NavLayerActiveMask == (1 << ImGuiNavLayer_Menu))
            g.NavLayer = ImGuiNavLayer_Menu;
    }
    if (apply_focus_window)
        g.NavWindowingTarget = NULL;

    // Apply menu/layer toggle
    if (apply_toggle_layer && g.NavWindow)
    {
        // Move to parent menu if necessary
        ImGuiWindow* new_nav_window = g.NavWindow;
        while (new_nav_window->ParentWindow
            && (new_nav_window->DC.NavLayerActiveMask & (1 << ImGuiNavLayer_Menu)) == 0
            && (new_nav_window->Flags & ImGuiWindowFlags_ChildWindow) != 0
            && (new_nav_window->Flags & (ImGuiWindowFlags_Popup | ImGuiWindowFlags_ChildMenu)) == 0)
            new_nav_window = new_nav_window->ParentWindow;
        if (new_nav_window != g.NavWindow)
        {
            ImGuiWindow* old_nav_window = g.NavWindow;
            FocusWindow(new_nav_window);
            new_nav_window->NavLastChildNavWindow = old_nav_window;
        }
        g.NavDisableHighlight = false;
        g.NavDisableMouseHover = true;

        // When entering a regular menu bar with the Alt key, we always reinitialize the navigation ID.
        const ImGuiNavLayer new_nav_layer = (g.NavWindow->DC.NavLayerActiveMask & (1 << ImGuiNavLayer_Menu)) ? (ImGuiNavLayer)((int)g.NavLayer ^ 1) : ImGuiNavLayer_Main;
        NavRestoreLayer(new_nav_layer);
    }
}

// Window has already passed the IsWindowNavFocusable()
static const char* GetFallbackWindowNameForWindowingList(ImGuiWindow* window)
{
    if (window->Flags & ImGuiWindowFlags_Popup)
        return "(Popup)";
    if ((window->Flags & ImGuiWindowFlags_MenuBar) && strcmp(window->Name, "##MainMenuBar") == 0)
        return "(Main menu bar)";
    return "(Untitled)";
}

// Overlay displayed when using CTRL+TAB. Called by EndFrame().
void ImGui::NavUpdateWindowingOverlay()
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(g.NavWindowingTarget != NULL);

    if (g.NavWindowingTimer < NAV_WINDOWING_LIST_APPEAR_DELAY)
        return;

    if (g.NavWindowingList == NULL)
        g.NavWindowingList = FindWindowByName("###NavWindowingList");
    SetNextWindowSizeConstraints(ImVec2(g.IO.DisplaySize.x * 0.20f, g.IO.DisplaySize.y * 0.20f), ImVec2(FLT_MAX, FLT_MAX));
    SetNextWindowPos(g.IO.DisplaySize * 0.5f, ImGuiCond_Always, ImVec2(0.5f, 0.5f));
    PushStyleVar(ImGuiStyleVar_WindowPadding, g.Style.WindowPadding * 2.0f);
    Begin("###NavWindowingList", NULL, ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoFocusOnAppearing | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoMove | ImGuiWindowFlags_NoInputs | ImGuiWindowFlags_AlwaysAutoResize | ImGuiWindowFlags_NoSavedSettings);
    for (int n = g.WindowsFocusOrder.Size - 1; n >= 0; n--)
    {
        ImGuiWindow* window = g.WindowsFocusOrder[n];
        if (!IsWindowNavFocusable(window))
            continue;
        const char* label = window->Name;
        if (label == FindRenderedTextEnd(label))
            label = GetFallbackWindowNameForWindowingList(window);
        Selectable(label, g.NavWindowingTarget == window);
    }
    End();
    PopStyleVar();
}


//-----------------------------------------------------------------------------
// [SECTION] DRAG AND DROP
//-----------------------------------------------------------------------------

void ImGui::ClearDragDrop()
{
    ImGuiContext& g = *GImGui;
    g.DragDropActive = false;
    g.DragDropPayload.Clear();
    g.DragDropAcceptFlags = ImGuiDragDropFlags_None;
    g.DragDropAcceptIdCurr = g.DragDropAcceptIdPrev = 0;
    g.DragDropAcceptIdCurrRectSurface = FLT_MAX;
    g.DragDropAcceptFrameCount = -1;

    g.DragDropPayloadBufHeap.clear();
    memset(&g.DragDropPayloadBufLocal, 0, sizeof(g.DragDropPayloadBufLocal));
}

// Call when current ID is active.
// When this returns true you need to: a) call SetDragDropPayload() exactly once, b) you may render the payload visual/description, c) call EndDragDropSource()
bool ImGui::BeginDragDropSource(ImGuiDragDropFlags flags)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;

    bool source_drag_active = false;
    ImGuiID source_id = 0;
    ImGuiID source_parent_id = 0;
    ImGuiMouseButton mouse_button = ImGuiMouseButton_Left;
    if (!(flags & ImGuiDragDropFlags_SourceExtern))
    {
        source_id = window->DC.LastItemId;
        if (source_id != 0 && g.ActiveId != source_id) // Early out for most common case
            return false;
        if (g.IO.MouseDown[mouse_button] == false)
            return false;

        if (source_id == 0)
        {
            // If you want to use BeginDragDropSource() on an item with no unique identifier for interaction, such as Text() or Image(), you need to:
            // A) Read the explanation below, B) Use the ImGuiDragDropFlags_SourceAllowNullID flag, C) Swallow your programmer pride.
            if (!(flags & ImGuiDragDropFlags_SourceAllowNullID))
            {
                IM_ASSERT(0);
                return false;
            }

            // Early out
            if ((window->DC.LastItemStatusFlags & ImGuiItemStatusFlags_HoveredRect) == 0 && (g.ActiveId == 0 || g.ActiveIdWindow != window))
                return false;

            // Magic fallback (=somehow reprehensible) to handle items with no assigned ID, e.g. Text(), Image()
            // We build a throwaway ID based on current ID stack + relative AABB of items in window.
            // THE IDENTIFIER WON'T SURVIVE ANY REPOSITIONING OF THE WIDGET, so if your widget moves your dragging operation will be canceled.
            // We don't need to maintain/call ClearActiveID() as releasing the button will early out this function and trigger !ActiveIdIsAlive.
            source_id = window->DC.LastItemId = window->GetIDFromRectangle(window->DC.LastItemRect);
            bool is_hovered = ItemHoverable(window->DC.LastItemRect, source_id);
            if (is_hovered && g.IO.MouseClicked[mouse_button])
            {
                SetActiveID(source_id, window);
                FocusWindow(window);
            }
            if (g.ActiveId == source_id) // Allow the underlying widget to display/return hovered during the mouse release frame, else we would get a flicker.
                g.ActiveIdAllowOverlap = is_hovered;
        }
        else
        {
            g.ActiveIdAllowOverlap = false;
        }
        if (g.ActiveId != source_id)
            return false;
        source_parent_id = window->IDStack.back();
        source_drag_active = IsMouseDragging(mouse_button);
    }
    else
    {
        window = NULL;
        source_id = ImHashStr("#SourceExtern");
        source_drag_active = true;
    }

    if (source_drag_active)
    {
        if (!g.DragDropActive)
        {
            IM_ASSERT(source_id != 0);
            ClearDragDrop();
            ImGuiPayload& payload = g.DragDropPayload;
            payload.SourceId = source_id;
            payload.SourceParentId = source_parent_id;
            g.DragDropActive = true;
            g.DragDropSourceFlags = flags;
            g.DragDropMouseButton = mouse_button;
        }
        g.DragDropSourceFrameCount = g.FrameCount;
        g.DragDropWithinSourceOrTarget = true;

        if (!(flags & ImGuiDragDropFlags_SourceNoPreviewTooltip))
        {
            // Target can request the Source to not display its tooltip (we use a dedicated flag to make this request explicit)
            // We unfortunately can't just modify the source flags and skip the call to BeginTooltip, as caller may be emitting contents.
            BeginTooltip();
            if (g.DragDropAcceptIdPrev && (g.DragDropAcceptFlags & ImGuiDragDropFlags_AcceptNoPreviewTooltip))
            {
                ImGuiWindow* tooltip_window = g.CurrentWindow;
                tooltip_window->SkipItems = true;
                tooltip_window->HiddenFramesCanSkipItems = 1;
            }
        }

        if (!(flags & ImGuiDragDropFlags_SourceNoDisableHover) && !(flags & ImGuiDragDropFlags_SourceExtern))
            window->DC.LastItemStatusFlags &= ~ImGuiItemStatusFlags_HoveredRect;

        return true;
    }
    return false;
}

void ImGui::EndDragDropSource()
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(g.DragDropActive);
    IM_ASSERT(g.DragDropWithinSourceOrTarget && "Not after a BeginDragDropSource()?");

    if (!(g.DragDropSourceFlags & ImGuiDragDropFlags_SourceNoPreviewTooltip))
        EndTooltip();

    // Discard the drag if have not called SetDragDropPayload()
    if (g.DragDropPayload.DataFrameCount == -1)
        ClearDragDrop();
    g.DragDropWithinSourceOrTarget = false;
}

// Use 'cond' to choose to submit payload on drag start or every frame
bool ImGui::SetDragDropPayload(const char* type, const void* data, size_t data_size, ImGuiCond cond)
{
    ImGuiContext& g = *GImGui;
    ImGuiPayload& payload = g.DragDropPayload;
    if (cond == 0)
        cond = ImGuiCond_Always;

    IM_ASSERT(type != NULL);
    IM_ASSERT(strlen(type) < IM_ARRAYSIZE(payload.DataType) && "Payload type can be at most 32 characters long");
    IM_ASSERT((data != NULL && data_size > 0) || (data == NULL && data_size == 0));
    IM_ASSERT(cond == ImGuiCond_Always || cond == ImGuiCond_Once);
    IM_ASSERT(payload.SourceId != 0);                               // Not called between BeginDragDropSource() and EndDragDropSource()

    if (cond == ImGuiCond_Always || payload.DataFrameCount == -1)
    {
        // Copy payload
        ImStrncpy(payload.DataType, type, IM_ARRAYSIZE(payload.DataType));
        g.DragDropPayloadBufHeap.resize(0);
        if (data_size > sizeof(g.DragDropPayloadBufLocal))
        {
            // Store in heap
            g.DragDropPayloadBufHeap.resize((int)data_size);
            payload.Data = g.DragDropPayloadBufHeap.Data;
            memcpy(payload.Data, data, data_size);
        }
        else if (data_size > 0)
        {
            // Store locally
            memset(&g.DragDropPayloadBufLocal, 0, sizeof(g.DragDropPayloadBufLocal));
            payload.Data = g.DragDropPayloadBufLocal;
            memcpy(payload.Data, data, data_size);
        }
        else
        {
            payload.Data = NULL;
        }
        payload.DataSize = (int)data_size;
    }
    payload.DataFrameCount = g.FrameCount;

    return (g.DragDropAcceptFrameCount == g.FrameCount) || (g.DragDropAcceptFrameCount == g.FrameCount - 1);
}

bool ImGui::BeginDragDropTargetCustom(const ImRect& bb, ImGuiID id)
{
    ImGuiContext& g = *GImGui;
    if (!g.DragDropActive)
        return false;

    ImGuiWindow* window = g.CurrentWindow;
    if (g.HoveredWindow == NULL || window->RootWindow != g.HoveredWindow->RootWindow)
        return false;
    IM_ASSERT(id != 0);
    if (!IsMouseHoveringRect(bb.Min, bb.Max) || (id == g.DragDropPayload.SourceId))
        return false;
    if (window->SkipItems)
        return false;

    IM_ASSERT(g.DragDropWithinSourceOrTarget == false);
    g.DragDropTargetRect = bb;
    g.DragDropTargetId = id;
    g.DragDropWithinSourceOrTarget = true;
    return true;
}

// We don't use BeginDragDropTargetCustom() and duplicate its code because:
// 1) we use LastItemRectHoveredRect which handles items that pushes a temporarily clip rectangle in their code. Calling BeginDragDropTargetCustom(LastItemRect) would not handle them.
// 2) and it's faster. as this code may be very frequently called, we want to early out as fast as we can.
// Also note how the HoveredWindow test is positioned differently in both functions (in both functions we optimize for the cheapest early out case)
bool ImGui::BeginDragDropTarget()
{
    ImGuiContext& g = *GImGui;
    if (!g.DragDropActive)
        return false;

    ImGuiWindow* window = g.CurrentWindow;
    if (!(window->DC.LastItemStatusFlags & ImGuiItemStatusFlags_HoveredRect))
        return false;
    if (g.HoveredWindow == NULL || window->RootWindow != g.HoveredWindow->RootWindow)
        return false;

    const ImRect& display_rect = (window->DC.LastItemStatusFlags & ImGuiItemStatusFlags_HasDisplayRect) ? window->DC.LastItemDisplayRect : window->DC.LastItemRect;
    ImGuiID id = window->DC.LastItemId;
    if (id == 0)
        id = window->GetIDFromRectangle(display_rect);
    if (g.DragDropPayload.SourceId == id)
        return false;

    IM_ASSERT(g.DragDropWithinSourceOrTarget == false);
    g.DragDropTargetRect = display_rect;
    g.DragDropTargetId = id;
    g.DragDropWithinSourceOrTarget = true;
    return true;
}

bool ImGui::IsDragDropPayloadBeingAccepted()
{
    ImGuiContext& g = *GImGui;
    return g.DragDropActive && g.DragDropAcceptIdPrev != 0;
}

const ImGuiPayload* ImGui::AcceptDragDropPayload(const char* type, ImGuiDragDropFlags flags)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    ImGuiPayload& payload = g.DragDropPayload;
    IM_ASSERT(g.DragDropActive);                        // Not called between BeginDragDropTarget() and EndDragDropTarget() ?
    IM_ASSERT(payload.DataFrameCount != -1);            // Forgot to call EndDragDropTarget() ?
    if (type != NULL && !payload.IsDataType(type))
        return NULL;

    // Accept smallest drag target bounding box, this allows us to nest drag targets conveniently without ordering constraints.
    // NB: We currently accept NULL id as target. However, overlapping targets requires a unique ID to function!
    const bool was_accepted_previously = (g.DragDropAcceptIdPrev == g.DragDropTargetId);
    ImRect r = g.DragDropTargetRect;
    float r_surface = r.GetWidth() * r.GetHeight();
    if (r_surface < g.DragDropAcceptIdCurrRectSurface)
    {
        g.DragDropAcceptFlags = flags;
        g.DragDropAcceptIdCurr = g.DragDropTargetId;
        g.DragDropAcceptIdCurrRectSurface = r_surface;
    }

    // Render default drop visuals
    payload.Preview = was_accepted_previously;
    flags |= (g.DragDropSourceFlags & ImGuiDragDropFlags_AcceptNoDrawDefaultRect); // Source can also inhibit the preview (useful for external sources that lives for 1 frame)
    if (!(flags & ImGuiDragDropFlags_AcceptNoDrawDefaultRect) && payload.Preview)
    {
        // FIXME-DRAG: Settle on a proper default visuals for drop target.
        r.Expand(3.5f);
        bool push_clip_rect = !window->ClipRect.Contains(r);
        if (push_clip_rect) window->DrawList->PushClipRect(r.Min-ImVec2(1,1), r.Max+ImVec2(1,1));
        window->DrawList->AddRect(r.Min, r.Max, GetColorU32(ImGuiCol_DragDropTarget), 0.0f, ~0, 2.0f);
        if (push_clip_rect) window->DrawList->PopClipRect();
    }

    g.DragDropAcceptFrameCount = g.FrameCount;
    payload.Delivery = was_accepted_previously && !IsMouseDown(g.DragDropMouseButton); // For extern drag sources affecting os window focus, it's easier to just test !IsMouseDown() instead of IsMouseReleased()
    if (!payload.Delivery && !(flags & ImGuiDragDropFlags_AcceptBeforeDelivery))
        return NULL;

    return &payload;
}

const ImGuiPayload* ImGui::GetDragDropPayload()
{
    ImGuiContext& g = *GImGui;
    return g.DragDropActive ? &g.DragDropPayload : NULL;
}

// We don't really use/need this now, but added it for the sake of consistency and because we might need it later.
void ImGui::EndDragDropTarget()
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(g.DragDropActive);
    IM_ASSERT(g.DragDropWithinSourceOrTarget);
    g.DragDropWithinSourceOrTarget = false;
}


//-----------------------------------------------------------------------------
// [SECTION] LOGGING/CAPTURING
//-----------------------------------------------------------------------------
// All text output from the interface can be captured into tty/file/clipboard.
// By default, tree nodes are automatically opened during logging.
//-----------------------------------------------------------------------------

// Pass text data straight to log (without being displayed)
void ImGui::LogText(const char* fmt, ...)
{
    ImGuiContext& g = *GImGui;
    if (!g.LogEnabled)
        return;

    va_list args;
    va_start(args, fmt);
    if (g.LogFile)
    {
        g.LogBuffer.Buf.resize(0);
        g.LogBuffer.appendfv(fmt, args);
        ImFileWrite(g.LogBuffer.c_str(), sizeof(char), (ImU64)g.LogBuffer.size(), g.LogFile);
    }
    else
    {
        g.LogBuffer.appendfv(fmt, args);
    }
    va_end(args);
}

// Internal version that takes a position to decide on newline placement and pad items according to their depth.
// We split text into individual lines to add current tree level padding
void ImGui::LogRenderedText(const ImVec2* ref_pos, const char* text, const char* text_end)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;

    if (!text_end)
        text_end = FindRenderedTextEnd(text, text_end);

    const bool log_new_line = ref_pos && (ref_pos->y > g.LogLinePosY + 1);
    if (ref_pos)
        g.LogLinePosY = ref_pos->y;
    if (log_new_line)
        g.LogLineFirstItem = true;

    const char* text_remaining = text;
    if (g.LogDepthRef > window->DC.TreeDepth)  // Re-adjust padding if we have popped out of our starting depth
        g.LogDepthRef = window->DC.TreeDepth;
    const int tree_depth = (window->DC.TreeDepth - g.LogDepthRef);
    for (;;)
    {
        // Split the string. Each new line (after a '\n') is followed by spacing corresponding to the current depth of our log entry.
        // We don't add a trailing \n to allow a subsequent item on the same line to be captured.
        const char* line_start = text_remaining;
        const char* line_end = ImStreolRange(line_start, text_end);
        const bool is_first_line = (line_start == text);
        const bool is_last_line = (line_end == text_end);
        if (!is_last_line || (line_start != line_end))
        {
            const int char_count = (int)(line_end - line_start);
            if (log_new_line || !is_first_line)
                LogText(IM_NEWLINE "%*s%.*s", tree_depth * 4, "", char_count, line_start);
            else if (g.LogLineFirstItem)
                LogText("%*s%.*s", tree_depth * 4, "", char_count, line_start);
            else
                LogText(" %.*s", char_count, line_start);
            g.LogLineFirstItem = false;
        }
        else if (log_new_line)
        {
            // An empty "" string at a different Y position should output a carriage return.
            LogText(IM_NEWLINE);
            break;
        }

        if (is_last_line)
            break;
        text_remaining = line_end + 1;
    }
}

// Start logging/capturing text output
void ImGui::LogBegin(ImGuiLogType type, int auto_open_depth)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    IM_ASSERT(g.LogEnabled == false);
    IM_ASSERT(g.LogFile == NULL);
    IM_ASSERT(g.LogBuffer.empty());
    g.LogEnabled = true;
    g.LogType = type;
    g.LogDepthRef = window->DC.TreeDepth;
    g.LogDepthToExpand = ((auto_open_depth >= 0) ? auto_open_depth : g.LogDepthToExpandDefault);
    g.LogLinePosY = FLT_MAX;
    g.LogLineFirstItem = true;
}

void ImGui::LogToTTY(int auto_open_depth)
{
    ImGuiContext& g = *GImGui;
    if (g.LogEnabled)
        return;
    IM_UNUSED(auto_open_depth);
#ifndef IMGUI_DISABLE_TTY_FUNCTIONS
    LogBegin(ImGuiLogType_TTY, auto_open_depth);
    g.LogFile = stdout;
#endif
}

// Start logging/capturing text output to given file
void ImGui::LogToFile(int auto_open_depth, const char* filename)
{
    ImGuiContext& g = *GImGui;
    if (g.LogEnabled)
        return;

    // FIXME: We could probably open the file in text mode "at", however note that clipboard/buffer logging will still
    // be subject to outputting OS-incompatible carriage return if within strings the user doesn't use IM_NEWLINE.
    // By opening the file in binary mode "ab" we have consistent output everywhere.
    if (!filename)
        filename = g.IO.LogFilename;
    if (!filename || !filename[0])
        return;
    ImFileHandle f = ImFileOpen(filename, "ab");
    if (!f)
    {
        IM_ASSERT(0);
        return;
    }

    LogBegin(ImGuiLogType_File, auto_open_depth);
    g.LogFile = f;
}

// Start logging/capturing text output to clipboard
void ImGui::LogToClipboard(int auto_open_depth)
{
    ImGuiContext& g = *GImGui;
    if (g.LogEnabled)
        return;
    LogBegin(ImGuiLogType_Clipboard, auto_open_depth);
}

void ImGui::LogToBuffer(int auto_open_depth)
{
    ImGuiContext& g = *GImGui;
    if (g.LogEnabled)
        return;
    LogBegin(ImGuiLogType_Buffer, auto_open_depth);
}

void ImGui::LogFinish()
{
    ImGuiContext& g = *GImGui;
    if (!g.LogEnabled)
        return;

    LogText(IM_NEWLINE);
    switch (g.LogType)
    {
    case ImGuiLogType_TTY:
#ifndef IMGUI_DISABLE_TTY_FUNCTIONS
        fflush(g.LogFile);
#endif
        break;
    case ImGuiLogType_File:
        ImFileClose(g.LogFile);
        break;
    case ImGuiLogType_Buffer:
        break;
    case ImGuiLogType_Clipboard:
        if (!g.LogBuffer.empty())
            SetClipboardText(g.LogBuffer.begin());
        break;
    case ImGuiLogType_None:
        IM_ASSERT(0);
        break;
    }

    g.LogEnabled = false;
    g.LogType = ImGuiLogType_None;
    g.LogFile = NULL;
    g.LogBuffer.clear();
}

// Helper to display logging buttons
// FIXME-OBSOLETE: We should probably obsolete this and let the user have their own helper (this is one of the oldest function alive!)
void ImGui::LogButtons()
{
    ImGuiContext& g = *GImGui;

    PushID("LogButtons");
#ifndef IMGUI_DISABLE_TTY_FUNCTIONS
    const bool log_to_tty = Button("Log To TTY"); SameLine();
#else
    const bool log_to_tty = false;
#endif
    const bool log_to_file = Button("Log To File"); SameLine();
    const bool log_to_clipboard = Button("Log To Clipboard"); SameLine();
    PushAllowKeyboardFocus(false);
    SetNextItemWidth(80.0f);
    SliderInt("Default Depth", &g.LogDepthToExpandDefault, 0, 9, NULL);
    PopAllowKeyboardFocus();
    PopID();

    // Start logging at the end of the function so that the buttons don't appear in the log
    if (log_to_tty)
        LogToTTY();
    if (log_to_file)
        LogToFile();
    if (log_to_clipboard)
        LogToClipboard();
}

//-----------------------------------------------------------------------------
// [SECTION] SETTINGS
//-----------------------------------------------------------------------------

void ImGui::MarkIniSettingsDirty()
{
    ImGuiContext& g = *GImGui;
    if (g.SettingsDirtyTimer <= 0.0f)
        g.SettingsDirtyTimer = g.IO.IniSavingRate;
}

void ImGui::MarkIniSettingsDirty(ImGuiWindow* window)
{
    ImGuiContext& g = *GImGui;
    if (!(window->Flags & ImGuiWindowFlags_NoSavedSettings))
        if (g.SettingsDirtyTimer <= 0.0f)
            g.SettingsDirtyTimer = g.IO.IniSavingRate;
}

ImGuiWindowSettings* ImGui::CreateNewWindowSettings(const char* name)
{
    ImGuiContext& g = *GImGui;

#if !IMGUI_DEBUG_INI_SETTINGS
    // Skip to the "###" marker if any. We don't skip past to match the behavior of GetID()
    // Preserve the full string when IMGUI_DEBUG_INI_SETTINGS is set to make .ini inspection easier.
    if (const char* p = strstr(name, "###"))
        name = p;
#endif
    const size_t name_len = strlen(name);

    // Allocate chunk
    const size_t chunk_size = sizeof(ImGuiWindowSettings) + name_len + 1;
    ImGuiWindowSettings* settings = g.SettingsWindows.alloc_chunk(chunk_size);
    IM_PLACEMENT_NEW(settings) ImGuiWindowSettings();
    settings->ID = ImHashStr(name, name_len);
    memcpy(settings->GetName(), name, name_len + 1);   // Store with zero terminator

    return settings;
}

ImGuiWindowSettings* ImGui::FindWindowSettings(ImGuiID id)
{
    ImGuiContext& g = *GImGui;
    for (ImGuiWindowSettings* settings = g.SettingsWindows.begin(); settings != NULL; settings = g.SettingsWindows.next_chunk(settings))
        if (settings->ID == id)
            return settings;
    return NULL;
}

ImGuiWindowSettings* ImGui::FindOrCreateWindowSettings(const char* name)
{
    if (ImGuiWindowSettings* settings = FindWindowSettings(ImHashStr(name)))
        return settings;
    return CreateNewWindowSettings(name);
}

void ImGui::LoadIniSettingsFromDisk(const char* ini_filename)
{
    size_t file_data_size = 0;
    char* file_data = (char*)ImFileLoadToMemory(ini_filename, "rb", &file_data_size);
    if (!file_data)
        return;
    LoadIniSettingsFromMemory(file_data, (size_t)file_data_size);
    IM_FREE(file_data);
}

ImGuiSettingsHandler* ImGui::FindSettingsHandler(const char* type_name)
{
    ImGuiContext& g = *GImGui;
    const ImGuiID type_hash = ImHashStr(type_name);
    for (int handler_n = 0; handler_n < g.SettingsHandlers.Size; handler_n++)
        if (g.SettingsHandlers[handler_n].TypeHash == type_hash)
            return &g.SettingsHandlers[handler_n];
    return NULL;
}

// Zero-tolerance, no error reporting, cheap .ini parsing
void ImGui::LoadIniSettingsFromMemory(const char* ini_data, size_t ini_size)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(g.Initialized);
    IM_ASSERT(g.SettingsLoaded == false && g.FrameCount == 0);

    // For user convenience, we allow passing a non zero-terminated string (hence the ini_size parameter).
    // For our convenience and to make the code simpler, we'll also write zero-terminators within the buffer. So let's create a writable copy..
    if (ini_size == 0)
        ini_size = strlen(ini_data);
    char* buf = (char*)IM_ALLOC(ini_size + 1);
    char* buf_end = buf + ini_size;
    memcpy(buf, ini_data, ini_size);
    buf[ini_size] = 0;

    void* entry_data = NULL;
    ImGuiSettingsHandler* entry_handler = NULL;

    char* line_end = NULL;
    for (char* line = buf; line < buf_end; line = line_end + 1)
    {
        // Skip new lines markers, then find end of the line
        while (*line == '\n' || *line == '\r')
            line++;
        line_end = line;
        while (line_end < buf_end && *line_end != '\n' && *line_end != '\r')
            line_end++;
        line_end[0] = 0;
        if (line[0] == ';')
            continue;
        if (line[0] == '[' && line_end > line && line_end[-1] == ']')
        {
            // Parse "[Type][Name]". Note that 'Name' can itself contains [] characters, which is acceptable with the current format and parsing code.
            line_end[-1] = 0;
            const char* name_end = line_end - 1;
            const char* type_start = line + 1;
            char* type_end = (char*)(void*)ImStrchrRange(type_start, name_end, ']');
            const char* name_start = type_end ? ImStrchrRange(type_end + 1, name_end, '[') : NULL;
            if (!type_end || !name_start)
                continue;
            *type_end = 0; // Overwrite first ']'
            name_start++;  // Skip second '['
            entry_handler = FindSettingsHandler(type_start);
            entry_data = entry_handler ? entry_handler->ReadOpenFn(&g, entry_handler, name_start) : NULL;
        }
        else if (entry_handler != NULL && entry_data != NULL)
        {
            // Let type handler parse the line
            entry_handler->ReadLineFn(&g, entry_handler, entry_data, line);
        }
    }
    IM_FREE(buf);
    g.SettingsLoaded = true;
}

void ImGui::SaveIniSettingsToDisk(const char* ini_filename)
{
    ImGuiContext& g = *GImGui;
    g.SettingsDirtyTimer = 0.0f;
    if (!ini_filename)
        return;

    size_t ini_data_size = 0;
    const char* ini_data = SaveIniSettingsToMemory(&ini_data_size);
    ImFileHandle f = ImFileOpen(ini_filename, "wt");
    if (!f)
        return;
    ImFileWrite(ini_data, sizeof(char), ini_data_size, f);
    ImFileClose(f);
}

// Call registered handlers (e.g. SettingsHandlerWindow_WriteAll() + custom handlers) to write their stuff into a text buffer
const char* ImGui::SaveIniSettingsToMemory(size_t* out_size)
{
    ImGuiContext& g = *GImGui;
    g.SettingsDirtyTimer = 0.0f;
    g.SettingsIniData.Buf.resize(0);
    g.SettingsIniData.Buf.push_back(0);
    for (int handler_n = 0; handler_n < g.SettingsHandlers.Size; handler_n++)
    {
        ImGuiSettingsHandler* handler = &g.SettingsHandlers[handler_n];
        handler->WriteAllFn(&g, handler, &g.SettingsIniData);
    }
    if (out_size)
        *out_size = (size_t)g.SettingsIniData.size();
    return g.SettingsIniData.c_str();
}

static void* WindowSettingsHandler_ReadOpen(ImGuiContext*, ImGuiSettingsHandler*, const char* name)
{
    ImGuiWindowSettings* settings = ImGui::FindWindowSettings(ImHashStr(name));
    if (!settings)
        settings = ImGui::CreateNewWindowSettings(name);
    return (void*)settings;
}

static void WindowSettingsHandler_ReadLine(ImGuiContext*, ImGuiSettingsHandler*, void* entry, const char* line)
{
    ImGuiWindowSettings* settings = (ImGuiWindowSettings*)entry;
    int x, y;
    int i;
    if (sscanf(line, "Pos=%i,%i", &x, &y) == 2)         settings->Pos = ImVec2ih((short)x, (short)y);
    else if (sscanf(line, "Size=%i,%i", &x, &y) == 2)   settings->Size = ImVec2ih((short)x, (short)y);
    else if (sscanf(line, "Collapsed=%d", &i) == 1)     settings->Collapsed = (i != 0);
}

static void WindowSettingsHandler_WriteAll(ImGuiContext* ctx, ImGuiSettingsHandler* handler, ImGuiTextBuffer* buf)
{
    // Gather data from windows that were active during this session
    // (if a window wasn't opened in this session we preserve its settings)
    ImGuiContext& g = *ctx;
    for (int i = 0; i != g.Windows.Size; i++)
    {
        ImGuiWindow* window = g.Windows[i];
        if (window->Flags & ImGuiWindowFlags_NoSavedSettings)
            continue;

        ImGuiWindowSettings* settings = (window->SettingsOffset != -1) ? g.SettingsWindows.ptr_from_offset(window->SettingsOffset) : ImGui::FindWindowSettings(window->ID);
        if (!settings)
        {
            settings = ImGui::CreateNewWindowSettings(window->Name);
            window->SettingsOffset = g.SettingsWindows.offset_from_ptr(settings);
        }
        IM_ASSERT(settings->ID == window->ID);
        settings->Pos = ImVec2ih((short)window->Pos.x, (short)window->Pos.y);
        settings->Size = ImVec2ih((short)window->SizeFull.x, (short)window->SizeFull.y);
        settings->Collapsed = window->Collapsed;
    }

    // Write to text buffer
    buf->reserve(buf->size() + g.SettingsWindows.size() * 6); // ballpark reserve
    for (ImGuiWindowSettings* settings = g.SettingsWindows.begin(); settings != NULL; settings = g.SettingsWindows.next_chunk(settings))
    {
        const char* settings_name = settings->GetName();
        buf->appendf("[%s][%s]\n", handler->TypeName, settings_name);
        buf->appendf("Pos=%d,%d\n", settings->Pos.x, settings->Pos.y);
        buf->appendf("Size=%d,%d\n", settings->Size.x, settings->Size.y);
        buf->appendf("Collapsed=%d\n", settings->Collapsed);
        buf->append("\n");
    }
}


//-----------------------------------------------------------------------------
// [SECTION] VIEWPORTS, PLATFORM WINDOWS
//-----------------------------------------------------------------------------

// (this section is filled in the 'docking' branch)


//-----------------------------------------------------------------------------
// [SECTION] DOCKING
//-----------------------------------------------------------------------------

// (this section is filled in the 'docking' branch)


//-----------------------------------------------------------------------------
// [SECTION] PLATFORM DEPENDENT HELPERS
//-----------------------------------------------------------------------------

#if defined(_WIN32) && !defined(_WINDOWS_) && !defined(IMGUI_DISABLE_WIN32_FUNCTIONS) && (!defined(IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCTIONS) || !defined(IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS))
#ifndef WIN32_LEAN_AND_MEAN
#define WIN32_LEAN_AND_MEAN
#endif
#ifndef __MINGW32__
#include <Windows.h>
#else
#include <windows.h>
#endif
#if defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_APP) // UWP doesn't have Win32 functions
#define IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCTIONS
#define IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS
#endif
#elif defined(__APPLE__)
#include <TargetConditionals.h>
#endif

#if defined(_WIN32) && !defined(IMGUI_DISABLE_WIN32_FUNCTIONS) && !defined(IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCTIONS)

#ifdef _MSC_VER
#pragma comment(lib, "user32")
#endif

// Win32 clipboard implementation
static const char* GetClipboardTextFn_DefaultImpl(void*)
{
    static ImVector<char> buf_local;
    buf_local.clear();
    if (!::OpenClipboard(NULL))
        return NULL;
    HANDLE wbuf_handle = ::GetClipboardData(CF_UNICODETEXT);
    if (wbuf_handle == NULL)
    {
        ::CloseClipboard();
        return NULL;
    }
    if (ImWchar* wbuf_global = (ImWchar*)::GlobalLock(wbuf_handle))
    {
        int buf_len = ImTextCountUtf8BytesFromStr(wbuf_global, NULL) + 1;
        buf_local.resize(buf_len);
        ImTextStrToUtf8(buf_local.Data, buf_len, wbuf_global, NULL);
    }
    ::GlobalUnlock(wbuf_handle);
    ::CloseClipboard();
    return buf_local.Data;
}

static void SetClipboardTextFn_DefaultImpl(void*, const char* text)
{
    if (!::OpenClipboard(NULL))
        return;
    const int wbuf_length = ImTextCountCharsFromUtf8(text, NULL) + 1;
    HGLOBAL wbuf_handle = ::GlobalAlloc(GMEM_MOVEABLE, (SIZE_T)wbuf_length * sizeof(ImWchar));
    if (wbuf_handle == NULL)
    {
        ::CloseClipboard();
        return;
    }
    ImWchar* wbuf_global = (ImWchar*)::GlobalLock(wbuf_handle);
    ImTextStrFromUtf8(wbuf_global, wbuf_length, text, NULL);
    ::GlobalUnlock(wbuf_handle);
    ::EmptyClipboard();
    if (::SetClipboardData(CF_UNICODETEXT, wbuf_handle) == NULL)
        ::GlobalFree(wbuf_handle);
    ::CloseClipboard();
}

#elif defined(__APPLE__) && TARGET_OS_OSX && defined(IMGUI_ENABLE_OSX_DEFAULT_CLIPBOARD_FUNCTIONS)

#include <Carbon/Carbon.h>  // Use old API to avoid need for separate .mm file
static PasteboardRef main_clipboard = 0;

// OSX clipboard implementation
// If you enable this you will need to add '-framework ApplicationServices' to your linker command-line!
static void SetClipboardTextFn_DefaultImpl(void*, const char* text)
{
    if (!main_clipboard)
        PasteboardCreate(kPasteboardClipboard, &main_clipboard);
    PasteboardClear(main_clipboard);
    CFDataRef cf_data = CFDataCreate(kCFAllocatorDefault, (const UInt8*)text, strlen(text));
    if (cf_data)
    {
        PasteboardPutItemFlavor(main_clipboard, (PasteboardItemID)1, CFSTR("public.utf8-plain-text"), cf_data, 0);
        CFRelease(cf_data);
    }
}

static const char* GetClipboardTextFn_DefaultImpl(void*)
{
    if (!main_clipboard)
        PasteboardCreate(kPasteboardClipboard, &main_clipboard);
    PasteboardSynchronize(main_clipboard);

    ItemCount item_count = 0;
    PasteboardGetItemCount(main_clipboard, &item_count);
    for (ItemCount i = 0; i < item_count; i++)
    {
        PasteboardItemID item_id = 0;
        PasteboardGetItemIdentifier(main_clipboard, i + 1, &item_id);
        CFArrayRef flavor_type_array = 0;
        PasteboardCopyItemFlavors(main_clipboard, item_id, &flavor_type_array);
        for (CFIndex j = 0, nj = CFArrayGetCount(flavor_type_array); j < nj; j++)
        {
            CFDataRef cf_data;
            if (PasteboardCopyItemFlavorData(main_clipboard, item_id, CFSTR("public.utf8-plain-text"), &cf_data) == noErr)
            {
                static ImVector<char> clipboard_text;
                int length = (int)CFDataGetLength(cf_data);
                clipboard_text.resize(length + 1);
                CFDataGetBytes(cf_data, CFRangeMake(0, length), (UInt8*)clipboard_text.Data);
                clipboard_text[length] = 0;
                CFRelease(cf_data);
                return clipboard_text.Data;
            }
        }
    }
    return NULL;
}

#else

// Local Dear ImGui-only clipboard implementation, if user hasn't defined better clipboard handlers.
static const char* GetClipboardTextFn_DefaultImpl(void*)
{
    ImGuiContext& g = *GImGui;
    return g.PrivateClipboard.empty() ? NULL : g.PrivateClipboard.begin();
}

static void SetClipboardTextFn_DefaultImpl(void*, const char* text)
{
    ImGuiContext& g = *GImGui;
    g.PrivateClipboard.clear();
    const char* text_end = text + strlen(text);
    g.PrivateClipboard.resize((int)(text_end - text) + 1);
    memcpy(&g.PrivateClipboard[0], text, (size_t)(text_end - text));
    g.PrivateClipboard[(int)(text_end - text)] = 0;
}

#endif

// Win32 API IME support (for Asian languages, etc.)
#if defined(_WIN32) && !defined(__GNUC__) && !defined(IMGUI_DISABLE_WIN32_FUNCTIONS) && !defined(IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS)

#include <imm.h>
#ifdef _MSC_VER
#pragma comment(lib, "imm32")
#endif

static void ImeSetInputScreenPosFn_DefaultImpl(int x, int y)
{
    // Notify OS Input Method Editor of text input position
    ImGuiIO& io = ImGui::GetIO();
    if (HWND hwnd = (HWND)io.ImeWindowHandle)
        if (HIMC himc = ::ImmGetContext(hwnd))
        {
            COMPOSITIONFORM cf;
            cf.ptCurrentPos.x = x;
            cf.ptCurrentPos.y = y;
            cf.dwStyle = CFS_FORCE_POSITION;
            ::ImmSetCompositionWindow(himc, &cf);
            ::ImmReleaseContext(hwnd, himc);
        }
}

#else

static void ImeSetInputScreenPosFn_DefaultImpl(int, int) {}

#endif

//-----------------------------------------------------------------------------
// [SECTION] METRICS/DEBUG WINDOW
//-----------------------------------------------------------------------------

#ifndef IMGUI_DISABLE_METRICS_WINDOW
// Avoid naming collision with imgui_demo.cpp's HelpMarker() for unity builds.
static void MetricsHelpMarker(const char* desc)
{
    ImGui::TextDisabled("(?)");
    if (ImGui::IsItemHovered())
    {
        ImGui::BeginTooltip();
        ImGui::PushTextWrapPos(ImGui::GetFontSize() * 35.0f);
        ImGui::TextUnformatted(desc);
        ImGui::PopTextWrapPos();
        ImGui::EndTooltip();
    }
}

void ImGui::ShowMetricsWindow(bool* p_open)
{
    if (!ImGui::Begin("Dear ImGui Metrics", p_open))
    {
        ImGui::End();
        return;
    }

    // State
    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, WRT_Content, WRT_ContentRegionRect, WRT_Count }; // Windows Rect Type
    const char* wrt_rects_names[WRT_Count] = { "OuterRect", "OuterRectClipped", "InnerRect", "InnerClipRect", "WorkRect", "Content", "ContentRegionRect" };
    static bool show_windows_rects = false;
    static int  show_windows_rect_type = WRT_WorkRect;
    static bool show_windows_begin_order = false;
    static bool show_drawcmd_details = true;

    // Basic info
    ImGuiContext& g = *GImGui;
    ImGuiIO& io = ImGui::GetIO();
    ImGui::Text("Dear ImGui %s", ImGui::GetVersion());
    ImGui::Text("Application average %.3f ms/frame (%.1f FPS)", 1000.0f / io.Framerate, io.Framerate);
    ImGui::Text("%d vertices, %d indices (%d triangles)", io.MetricsRenderVertices, io.MetricsRenderIndices, io.MetricsRenderIndices / 3);
    ImGui::Text("%d active windows (%d visible)", io.MetricsActiveWindows, io.MetricsRenderWindows);
    ImGui::Text("%d active allocations", io.MetricsActiveAllocations);
    ImGui::Separator();

    // Helper functions to display common structures:
    // - NodeDrawList
    // - NodeColumns
    // - NodeWindow
    // - NodeWindows
    // - NodeTabBar
    struct Funcs
    {
        static ImRect GetWindowRect(ImGuiWindow* window, int rect_type)
        {
            if (rect_type == WRT_OuterRect)                 { return window->Rect(); }
            else if (rect_type == WRT_OuterRectClipped)     { return window->OuterRectClipped; }
            else if (rect_type == WRT_InnerRect)            { return window->InnerRect; }
            else if (rect_type == WRT_InnerClipRect)        { return window->InnerClipRect; }
            else if (rect_type == WRT_WorkRect)             { return window->WorkRect; }
            else if (rect_type == WRT_Content)              { ImVec2 min = window->InnerRect.Min - window->Scroll + window->WindowPadding; return ImRect(min, min + window->ContentSize); }
            else if (rect_type == WRT_ContentRegionRect)    { return window->ContentRegionRect; }
            IM_ASSERT(0);
            return ImRect();
        }

        static void NodeDrawList(ImGuiWindow* window, ImDrawList* draw_list, const char* label)
        {
            bool node_open = ImGui::TreeNode(draw_list, "%s: '%s' %d vtx, %d indices, %d cmds", label, draw_list->_OwnerName ? draw_list->_OwnerName : "", draw_list->VtxBuffer.Size, draw_list->IdxBuffer.Size, draw_list->CmdBuffer.Size);
            if (draw_list == ImGui::GetWindowDrawList())
            {
                ImGui::SameLine();
                ImGui::TextColored(ImVec4(1.0f,0.4f,0.4f,1.0f), "CURRENTLY APPENDING"); // Can't display stats for active draw list! (we don't have the data double-buffered)
                if (node_open) ImGui::TreePop();
                return;
            }

            ImDrawList* fg_draw_list = GetForegroundDrawList(window); // Render additional visuals into the top-most draw list
            if (window && IsItemHovered())
                fg_draw_list->AddRect(window->Pos, window->Pos + window->Size, IM_COL32(255, 255, 0, 255));
            if (!node_open)
                return;

            if (window && !window->WasActive)
                ImGui::TextDisabled("Warning: owning Window is inactive. This DrawList is not being rendered!");

            unsigned int elem_offset = 0;
            for (const ImDrawCmd* pcmd = draw_list->CmdBuffer.begin(); pcmd < draw_list->CmdBuffer.end(); elem_offset += pcmd->ElemCount, pcmd++)
            {
                if (pcmd->UserCallback == NULL && pcmd->ElemCount == 0)
                    continue;
                if (pcmd->UserCallback)
                {
                    ImGui::BulletText("Callback %p, user_data %p", pcmd->UserCallback, pcmd->UserCallbackData);
                    continue;
                }

                ImDrawIdx* idx_buffer = (draw_list->IdxBuffer.Size > 0) ? draw_list->IdxBuffer.Data : NULL;
                char buf[300];
                ImFormatString(buf, IM_ARRAYSIZE(buf), "DrawCmd: %4d triangles, Tex 0x%p, ClipRect (%4.0f,%4.0f)-(%4.0f,%4.0f)",
                    pcmd->ElemCount/3, (void*)(intptr_t)pcmd->TextureId,
                    pcmd->ClipRect.x, pcmd->ClipRect.y, pcmd->ClipRect.z, pcmd->ClipRect.w);
                bool pcmd_node_open = ImGui::TreeNode((void*)(pcmd - draw_list->CmdBuffer.begin()), "%s", buf);
                if (show_drawcmd_details && fg_draw_list && ImGui::IsItemHovered())
                {
                    ImRect clip_rect = pcmd->ClipRect;
                    ImRect vtxs_rect;
                    for (unsigned int i = elem_offset; i < elem_offset + (int)pcmd->ElemCount; i++)
                        vtxs_rect.Add(draw_list->VtxBuffer[idx_buffer ? idx_buffer[i] : i].pos);
                    fg_draw_list->AddRect(ImFloor(clip_rect.Min), ImFloor(clip_rect.Max), IM_COL32(255,0,255,255));
                    fg_draw_list->AddRect(ImFloor(vtxs_rect.Min), ImFloor(vtxs_rect.Max), IM_COL32(255,255,0,255));
                }
                if (!pcmd_node_open)
                    continue;

                // Calculate approximate coverage area (touched pixel count)
                // This will be in pixels squared as long there's no post-scaling happening to the renderer output.
                float total_area = 0.0f;
                for (unsigned int base_idx = elem_offset; base_idx < (elem_offset + pcmd->ElemCount); base_idx += 3)
                {
                    ImVec2 triangle[3];
                    for (int n = 0; n < 3; n++)
                        triangle[n] = draw_list->VtxBuffer[idx_buffer ? idx_buffer[base_idx + n] : (base_idx + n)].pos;
                    total_area += ImTriangleArea(triangle[0], triangle[1], triangle[2]);
                }

                // Display vertex information summary. Hover to get all triangles drawn in wire-frame
                ImFormatString(buf, IM_ARRAYSIZE(buf), "Mesh: ElemCount: %d, VtxOffset: +%d, IdxOffset: +%d, Area: ~%0.f px", pcmd->ElemCount, pcmd->VtxOffset, pcmd->IdxOffset, total_area);
                ImGui::Selectable(buf);
                if (fg_draw_list && ImGui::IsItemHovered() && show_drawcmd_details)
                {
                    // Draw wire-frame version of everything
                    ImDrawListFlags backup_flags = fg_draw_list->Flags;
                    fg_draw_list->Flags &= ~ImDrawListFlags_AntiAliasedLines; // Disable AA on triangle outlines is more readable for very large and thin triangles.
                    ImRect clip_rect = pcmd->ClipRect;
                    fg_draw_list->AddRect(ImFloor(clip_rect.Min), ImFloor(clip_rect.Max), IM_COL32(255, 0, 255, 255));
                    for (unsigned int base_idx = elem_offset; base_idx < (elem_offset + pcmd->ElemCount); base_idx += 3)
                    {
                        ImVec2 triangle[3];
                        for (int n = 0; n < 3; n++)
                            triangle[n] = draw_list->VtxBuffer[idx_buffer ? idx_buffer[base_idx + n] : (base_idx + n)].pos;
                        fg_draw_list->AddPolyline(triangle, 3, IM_COL32(255, 255, 0, 255), true, 1.0f);
                    }
                    fg_draw_list->Flags = backup_flags;
                }

                // Display individual triangles/vertices. Hover on to get the corresponding triangle highlighted.
                ImGuiListClipper clipper(pcmd->ElemCount/3); // Manually coarse clip our print out of individual vertices to save CPU, only items that may be visible.
                while (clipper.Step())
                    for (int prim = clipper.DisplayStart, idx_i = elem_offset + clipper.DisplayStart*3; prim < clipper.DisplayEnd; prim++)
                    {
                        char *buf_p = buf, *buf_end = buf + IM_ARRAYSIZE(buf);
                        ImVec2 triangle[3];
                        for (int n = 0; n < 3; n++, idx_i++)
                        {
                            ImDrawVert& v = draw_list->VtxBuffer[idx_buffer ? idx_buffer[idx_i] : idx_i];
                            triangle[n] = v.pos;
                            buf_p += ImFormatString(buf_p, buf_end - buf_p, "%s %04d: pos (%8.2f,%8.2f), uv (%.6f,%.6f), col %08X\n",
                                (n == 0) ? "Vert:" : "     ", idx_i, v.pos.x, v.pos.y, v.uv.x, v.uv.y, v.col);
                        }

                        ImGui::Selectable(buf, false);
                        if (fg_draw_list && ImGui::IsItemHovered())
                        {
                            ImDrawListFlags backup_flags = fg_draw_list->Flags;
                            fg_draw_list->Flags &= ~ImDrawListFlags_AntiAliasedLines; // Disable AA on triangle outlines is more readable for very large and thin triangles.
                            fg_draw_list->AddPolyline(triangle, 3, IM_COL32(255,255,0,255), true, 1.0f);
                            fg_draw_list->Flags = backup_flags;
                        }
                    }
                ImGui::TreePop();
            }
            ImGui::TreePop();
        }

        static void NodeColumns(const ImGuiColumns* columns)
        {
            if (!ImGui::TreeNode((void*)(uintptr_t)columns->ID, "Columns Id: 0x%08X, Count: %d, Flags: 0x%04X", columns->ID, columns->Count, columns->Flags))
                return;
            ImGui::BulletText("Width: %.1f (MinX: %.1f, MaxX: %.1f)", columns->OffMaxX - columns->OffMinX, columns->OffMinX, columns->OffMaxX);
            for (int column_n = 0; column_n < columns->Columns.Size; column_n++)
                ImGui::BulletText("Column %02d: OffsetNorm %.3f (= %.1f px)", column_n, columns->Columns[column_n].OffsetNorm, GetColumnOffsetFromNorm(columns, columns->Columns[column_n].OffsetNorm));
            ImGui::TreePop();
        }

        static void NodeWindows(ImVector<ImGuiWindow*>& windows, const char* label)
        {
            if (!ImGui::TreeNode(label, "%s (%d)", label, windows.Size))
                return;
            for (int i = 0; i < windows.Size; i++)
                Funcs::NodeWindow(windows[i], "Window");
            ImGui::TreePop();
        }

        static void NodeWindow(ImGuiWindow* window, const char* label)
        {
            if (window == NULL)
            {
                ImGui::BulletText("%s: NULL", label);
                return;
            }
            bool open = ImGui::TreeNode(window, "%s '%s', %d @ 0x%p", label, window->Name, (window->Active || window->WasActive), window);
            if (ImGui::IsItemHovered() && window->WasActive)
                ImGui::GetForegroundDrawList()->AddRect(window->Pos, window->Pos + window->Size, IM_COL32(255, 255, 0, 255));
            if (!open)
                return;
            ImGuiWindowFlags flags = window->Flags;
            NodeDrawList(window, window->DrawList, "DrawList");
            ImGui::BulletText("Pos: (%.1f,%.1f), Size: (%.1f,%.1f), ContentSize (%.1f,%.1f)", window->Pos.x, window->Pos.y, window->Size.x, window->Size.y, window->ContentSize.x, window->ContentSize.y);
            ImGui::BulletText("Flags: 0x%08X (%s%s%s%s%s%s%s%s%s..)", flags,
                (flags & ImGuiWindowFlags_ChildWindow)  ? "Child " : "",      (flags & ImGuiWindowFlags_Tooltip)     ? "Tooltip "   : "",  (flags & ImGuiWindowFlags_Popup) ? "Popup " : "",
                (flags & ImGuiWindowFlags_Modal)        ? "Modal " : "",      (flags & ImGuiWindowFlags_ChildMenu)   ? "ChildMenu " : "",  (flags & ImGuiWindowFlags_NoSavedSettings) ? "NoSavedSettings " : "",
                (flags & ImGuiWindowFlags_NoMouseInputs)? "NoMouseInputs":"", (flags & ImGuiWindowFlags_NoNavInputs) ? "NoNavInputs" : "", (flags & ImGuiWindowFlags_AlwaysAutoResize) ? "AlwaysAutoResize" : "");
            ImGui::BulletText("Scroll: (%.2f/%.2f,%.2f/%.2f) Scrollbar:%s%s", window->Scroll.x, window->ScrollMax.x, window->Scroll.y, window->ScrollMax.y, window->ScrollbarX ? "X" : "", window->ScrollbarY ? "Y" : "");
            ImGui::BulletText("Active: %d/%d, WriteAccessed: %d, BeginOrderWithinContext: %d", window->Active, window->WasActive, window->WriteAccessed, (window->Active || window->WasActive) ? window->BeginOrderWithinContext : -1);
            ImGui::BulletText("Appearing: %d, Hidden: %d (CanSkip %d Cannot %d), SkipItems: %d", window->Appearing, window->Hidden, window->HiddenFramesCanSkipItems, window->HiddenFramesCannotSkipItems, window->SkipItems);
            ImGui::BulletText("NavLastIds: 0x%08X,0x%08X, NavLayerActiveMask: %X", window->NavLastIds[0], window->NavLastIds[1], window->DC.NavLayerActiveMask);
            ImGui::BulletText("NavLastChildNavWindow: %s", window->NavLastChildNavWindow ? window->NavLastChildNavWindow->Name : "NULL");
            if (!window->NavRectRel[0].IsInverted())
                ImGui::BulletText("NavRectRel[0]: (%.1f,%.1f)(%.1f,%.1f)", window->NavRectRel[0].Min.x, window->NavRectRel[0].Min.y, window->NavRectRel[0].Max.x, window->NavRectRel[0].Max.y);
            else
                ImGui::BulletText("NavRectRel[0]: <None>");
            if (window->RootWindow != window) NodeWindow(window->RootWindow, "RootWindow");
            if (window->ParentWindow != NULL) NodeWindow(window->ParentWindow, "ParentWindow");
            if (window->DC.ChildWindows.Size > 0) NodeWindows(window->DC.ChildWindows, "ChildWindows");
            if (window->ColumnsStorage.Size > 0 && ImGui::TreeNode("Columns", "Columns sets (%d)", window->ColumnsStorage.Size))
            {
                for (int n = 0; n < window->ColumnsStorage.Size; n++)
                    NodeColumns(&window->ColumnsStorage[n]);
                ImGui::TreePop();
            }
            NodeStorage(&window->StateStorage, "Storage");
            ImGui::TreePop();
        }

        static void NodeTabBar(ImGuiTabBar* tab_bar)
        {
            // Standalone tab bars (not associated to docking/windows functionality) currently hold no discernible strings.
            char buf[256];
            char* p = buf;
            const char* buf_end = buf + IM_ARRAYSIZE(buf);
            ImFormatString(p, buf_end - p, "TabBar (%d tabs)%s", tab_bar->Tabs.Size, (tab_bar->PrevFrameVisible < ImGui::GetFrameCount() - 2) ? " *Inactive*" : "");
            if (ImGui::TreeNode(tab_bar, "%s", buf))
            {
                for (int tab_n = 0; tab_n < tab_bar->Tabs.Size; tab_n++)
                {
                    const ImGuiTabItem* tab = &tab_bar->Tabs[tab_n];
                    ImGui::PushID(tab);
                    if (ImGui::SmallButton("<")) { TabBarQueueChangeTabOrder(tab_bar, tab, -1); } ImGui::SameLine(0, 2);
                    if (ImGui::SmallButton(">")) { TabBarQueueChangeTabOrder(tab_bar, tab, +1); } ImGui::SameLine();
                    ImGui::Text("%02d%c Tab 0x%08X '%s'", tab_n, (tab->ID == tab_bar->SelectedTabId) ? '*' : ' ', tab->ID, (tab->NameOffset != -1) ? tab_bar->GetTabName(tab) : "");
                    ImGui::PopID();
                }
                ImGui::TreePop();
            }
        }

        static void NodeStorage(ImGuiStorage* storage, const char* label)
        {
            if (!ImGui::TreeNode(label, "%s: %d entries, %d bytes", label, storage->Data.Size, storage->Data.size_in_bytes()))
                return;
            for (int n = 0; n < storage->Data.Size; n++)
            {
                const ImGuiStorage::ImGuiStoragePair& p = storage->Data[n];
                ImGui::BulletText("Key 0x%08X Value { i: %d }", p.key, p.val_i); // Important: we currently don't store a type, real value may not be integer.
            }
            ImGui::TreePop();
        }
    };

    Funcs::NodeWindows(g.Windows, "Windows");
    if (ImGui::TreeNode("DrawLists", "Active DrawLists (%d)", g.DrawDataBuilder.Layers[0].Size))
    {
        for (int i = 0; i < g.DrawDataBuilder.Layers[0].Size; i++)
            Funcs::NodeDrawList(NULL, g.DrawDataBuilder.Layers[0][i], "DrawList");
        ImGui::TreePop();
    }

    if (ImGui::TreeNode("Popups", "Popups (%d)", g.OpenPopupStack.Size))
    {
        for (int i = 0; i < g.OpenPopupStack.Size; i++)
        {
            ImGuiWindow* window = g.OpenPopupStack[i].Window;
            ImGui::BulletText("PopupID: %08x, Window: '%s'%s%s", g.OpenPopupStack[i].PopupId, window ? window->Name : "NULL", window && (window->Flags & ImGuiWindowFlags_ChildWindow) ? " ChildWindow" : "", window && (window->Flags & ImGuiWindowFlags_ChildMenu) ? " ChildMenu" : "");
        }
        ImGui::TreePop();
    }

    if (ImGui::TreeNode("TabBars", "Tab Bars (%d)", g.TabBars.GetSize()))
    {
        for (int n = 0; n < g.TabBars.GetSize(); n++)
            Funcs::NodeTabBar(g.TabBars.GetByIndex(n));
        ImGui::TreePop();
    }

#if 0
    if (ImGui::TreeNode("Docking"))
    {
        ImGui::TreePop();
    }
#endif

#if 0
    if (ImGui::TreeNode("Tables", "Tables (%d)", g.Tables.GetSize()))
    {
        ImGui::TreePop();
    }
#endif

    if (ImGui::TreeNode("Internal state"))
    {
        const char* input_source_names[] = { "None", "Mouse", "Nav", "NavKeyboard", "NavGamepad" }; IM_ASSERT(IM_ARRAYSIZE(input_source_names) == ImGuiInputSource_COUNT);
        ImGui::Text("HoveredWindow: '%s'", g.HoveredWindow ? g.HoveredWindow->Name : "NULL");
        ImGui::Text("HoveredRootWindow: '%s'", g.HoveredRootWindow ? g.HoveredRootWindow->Name : "NULL");
        ImGui::Text("HoveredId: 0x%08X/0x%08X (%.2f sec), AllowOverlap: %d", g.HoveredId, g.HoveredIdPreviousFrame, g.HoveredIdTimer, g.HoveredIdAllowOverlap); // Data is "in-flight" so depending on when the Metrics window is called we may see current frame information or not
        ImGui::Text("ActiveId: 0x%08X/0x%08X (%.2f sec), AllowOverlap: %d, Source: %s", g.ActiveId, g.ActiveIdPreviousFrame, g.ActiveIdTimer, g.ActiveIdAllowOverlap, input_source_names[g.ActiveIdSource]);
        ImGui::Text("ActiveIdWindow: '%s'", g.ActiveIdWindow ? g.ActiveIdWindow->Name : "NULL");
        ImGui::Text("MovingWindow: '%s'", g.MovingWindow ? g.MovingWindow->Name : "NULL");
        ImGui::Text("NavWindow: '%s'", g.NavWindow ? g.NavWindow->Name : "NULL");
        ImGui::Text("NavId: 0x%08X, NavLayer: %d", g.NavId, g.NavLayer);
        ImGui::Text("NavInputSource: %s", input_source_names[g.NavInputSource]);
        ImGui::Text("NavActive: %d, NavVisible: %d", g.IO.NavActive, g.IO.NavVisible);
        ImGui::Text("NavActivateId: 0x%08X, NavInputId: 0x%08X", g.NavActivateId, g.NavInputId);
        ImGui::Text("NavDisableHighlight: %d, NavDisableMouseHover: %d", g.NavDisableHighlight, g.NavDisableMouseHover);
        ImGui::Text("NavWindowingTarget: '%s'", g.NavWindowingTarget ? g.NavWindowingTarget->Name : "NULL");
        ImGui::Text("DragDrop: %d, SourceId = 0x%08X, Payload \"%s\" (%d bytes)", g.DragDropActive, g.DragDropPayload.SourceId, g.DragDropPayload.DataType, g.DragDropPayload.DataSize);
        ImGui::TreePop();
    }

    if (ImGui::TreeNode("Tools"))
    {
        // The Item Picker tool is super useful to visually select an item and break into the call-stack of where it was submitted.
        if (ImGui::Button("Item Picker.."))
            ImGui::DebugStartItemPicker();
        ImGui::SameLine();
        MetricsHelpMarker("Will call the IM_DEBUG_BREAK() macro to break in debugger.\nWarning: If you don't have a debugger attached, this will probably crash.");

        ImGui::Checkbox("Show windows begin order", &show_windows_begin_order);
        ImGui::Checkbox("Show windows rectangles", &show_windows_rects);
        ImGui::SameLine();
        ImGui::SetNextItemWidth(ImGui::GetFontSize() * 12);
        show_windows_rects |= ImGui::Combo("##show_windows_rect_type", &show_windows_rect_type, wrt_rects_names, WRT_Count);
        if (show_windows_rects && g.NavWindow)
        {
            ImGui::BulletText("'%s':", g.NavWindow->Name);
            ImGui::Indent();
            for (int rect_n = 0; rect_n < WRT_Count; rect_n++)
            {
                ImRect r = Funcs::GetWindowRect(g.NavWindow, rect_n);
                ImGui::Text("(%6.1f,%6.1f) (%6.1f,%6.1f) Size (%6.1f,%6.1f) %s", r.Min.x, r.Min.y, r.Max.x, r.Max.y, r.GetWidth(), r.GetHeight(), wrt_rects_names[rect_n]);
            }
            ImGui::Unindent();
        }
        ImGui::Checkbox("Show details when hovering ImDrawCmd node", &show_drawcmd_details);
        ImGui::TreePop();
    }

    // Tool: Display windows Rectangles and Begin Order
    if (show_windows_rects || show_windows_begin_order)
    {
        for (int n = 0; n < g.Windows.Size; n++)
        {
            ImGuiWindow* window = g.Windows[n];
            if (!window->WasActive)
                continue;
            ImDrawList* draw_list = GetForegroundDrawList(window);
            if (show_windows_rects)
            {
                ImRect r = Funcs::GetWindowRect(window, show_windows_rect_type);
                draw_list->AddRect(r.Min, r.Max, IM_COL32(255, 0, 128, 255));
            }
            if (show_windows_begin_order && !(window->Flags & ImGuiWindowFlags_ChildWindow))
            {
                char buf[32];
                ImFormatString(buf, IM_ARRAYSIZE(buf), "%d", window->BeginOrderWithinContext);
                float font_size = ImGui::GetFontSize();
                draw_list->AddRectFilled(window->Pos, window->Pos + ImVec2(font_size, font_size), IM_COL32(200, 100, 100, 255));
                draw_list->AddText(window->Pos, IM_COL32(255, 255, 255, 255), buf);
            }
        }
    }
    ImGui::End();
}

#else

void ImGui::ShowMetricsWindow(bool*) { }

#endif

//-----------------------------------------------------------------------------

// Include imgui_user.inl at the end of imgui.cpp to access private data/functions that aren't exposed.
// Prefer just including imgui_internal.h from your code rather than using this define. If a declaration is missing from imgui_internal.h add it or request it on the github.
#ifdef IMGUI_INCLUDE_IMGUI_USER_INL
#include "imgui_user.inl"
#endif

//-----------------------------------------------------------------------------

// Junk Code By Peatreat & Thaisen's Gen
void fXyHPKkeGisItQpOSYDgrHhHtlelfRmhgzzfGTYzT60309557() {     float akoMzjMbWeCNHpYqqOdgyzo26371766 = -746327853;    float akoMzjMbWeCNHpYqqOdgyzo7330204 = -808448275;    float akoMzjMbWeCNHpYqqOdgyzo11550548 = -204839959;    float akoMzjMbWeCNHpYqqOdgyzo2085017 = -811915067;    float akoMzjMbWeCNHpYqqOdgyzo83801571 = -738498968;    float akoMzjMbWeCNHpYqqOdgyzo66548167 = -117292486;    float akoMzjMbWeCNHpYqqOdgyzo5530480 = -619237874;    float akoMzjMbWeCNHpYqqOdgyzo39016260 = -240589072;    float akoMzjMbWeCNHpYqqOdgyzo90667541 = -771700048;    float akoMzjMbWeCNHpYqqOdgyzo16271353 = -922862281;    float akoMzjMbWeCNHpYqqOdgyzo91586670 = -487002712;    float akoMzjMbWeCNHpYqqOdgyzo49633233 = -636233771;    float akoMzjMbWeCNHpYqqOdgyzo2206308 = -303690037;    float akoMzjMbWeCNHpYqqOdgyzo24424764 = -633431942;    float akoMzjMbWeCNHpYqqOdgyzo11436522 = -955758015;    float akoMzjMbWeCNHpYqqOdgyzo65272192 = -258813968;    float akoMzjMbWeCNHpYqqOdgyzo52274817 = 77132516;    float akoMzjMbWeCNHpYqqOdgyzo20144583 = -599398961;    float akoMzjMbWeCNHpYqqOdgyzo4228135 = -693778791;    float akoMzjMbWeCNHpYqqOdgyzo82644481 = -67506318;    float akoMzjMbWeCNHpYqqOdgyzo2617667 = -683613394;    float akoMzjMbWeCNHpYqqOdgyzo85268329 = -294815096;    float akoMzjMbWeCNHpYqqOdgyzo29656966 = -763826883;    float akoMzjMbWeCNHpYqqOdgyzo98320230 = -677445153;    float akoMzjMbWeCNHpYqqOdgyzo10167762 = -8822999;    float akoMzjMbWeCNHpYqqOdgyzo65092858 = -873332263;    float akoMzjMbWeCNHpYqqOdgyzo38888572 = -107631441;    float akoMzjMbWeCNHpYqqOdgyzo68321557 = -467928088;    float akoMzjMbWeCNHpYqqOdgyzo79074683 = -782300604;    float akoMzjMbWeCNHpYqqOdgyzo31908188 = -708696021;    float akoMzjMbWeCNHpYqqOdgyzo45508480 = -354490818;    float akoMzjMbWeCNHpYqqOdgyzo15020653 = -313317725;    float akoMzjMbWeCNHpYqqOdgyzo21119463 = -666556253;    float akoMzjMbWeCNHpYqqOdgyzo69213958 = -140849278;    float akoMzjMbWeCNHpYqqOdgyzo18102516 = -609150399;    float akoMzjMbWeCNHpYqqOdgyzo99501379 = 70002137;    float akoMzjMbWeCNHpYqqOdgyzo33493631 = -32090524;    float akoMzjMbWeCNHpYqqOdgyzo31533829 = -755919301;    float akoMzjMbWeCNHpYqqOdgyzo95241561 = 97255271;    float akoMzjMbWeCNHpYqqOdgyzo6048438 = -442575834;    float akoMzjMbWeCNHpYqqOdgyzo46685612 = -434864211;    float akoMzjMbWeCNHpYqqOdgyzo51938295 = -133571338;    float akoMzjMbWeCNHpYqqOdgyzo90801011 = -519833378;    float akoMzjMbWeCNHpYqqOdgyzo85053385 = -950394987;    float akoMzjMbWeCNHpYqqOdgyzo48390819 = -666007408;    float akoMzjMbWeCNHpYqqOdgyzo51574875 = -23656668;    float akoMzjMbWeCNHpYqqOdgyzo50406143 = -373413522;    float akoMzjMbWeCNHpYqqOdgyzo78609524 = -930785751;    float akoMzjMbWeCNHpYqqOdgyzo29033773 = -202380663;    float akoMzjMbWeCNHpYqqOdgyzo55551383 = -878908768;    float akoMzjMbWeCNHpYqqOdgyzo987126 = -872888936;    float akoMzjMbWeCNHpYqqOdgyzo59517760 = -388637140;    float akoMzjMbWeCNHpYqqOdgyzo67217053 = -953762980;    float akoMzjMbWeCNHpYqqOdgyzo56713410 = -675298044;    float akoMzjMbWeCNHpYqqOdgyzo57691891 = -526313800;    float akoMzjMbWeCNHpYqqOdgyzo41103436 = -351512757;    float akoMzjMbWeCNHpYqqOdgyzo77673238 = 55378607;    float akoMzjMbWeCNHpYqqOdgyzo13230318 = -527394807;    float akoMzjMbWeCNHpYqqOdgyzo91917255 = -703092068;    float akoMzjMbWeCNHpYqqOdgyzo18708714 = -865166706;    float akoMzjMbWeCNHpYqqOdgyzo27659596 = 90338955;    float akoMzjMbWeCNHpYqqOdgyzo37208923 = -51309786;    float akoMzjMbWeCNHpYqqOdgyzo59941577 = -458288469;    float akoMzjMbWeCNHpYqqOdgyzo58759354 = 36995972;    float akoMzjMbWeCNHpYqqOdgyzo70762872 = -468371463;    float akoMzjMbWeCNHpYqqOdgyzo76566018 = -73684988;    float akoMzjMbWeCNHpYqqOdgyzo28513771 = -969677518;    float akoMzjMbWeCNHpYqqOdgyzo32992350 = -62840760;    float akoMzjMbWeCNHpYqqOdgyzo6322248 = 75718457;    float akoMzjMbWeCNHpYqqOdgyzo11935143 = -925760153;    float akoMzjMbWeCNHpYqqOdgyzo31778562 = -126723445;    float akoMzjMbWeCNHpYqqOdgyzo20740988 = -166948183;    float akoMzjMbWeCNHpYqqOdgyzo24903022 = -596654232;    float akoMzjMbWeCNHpYqqOdgyzo98179696 = -151202957;    float akoMzjMbWeCNHpYqqOdgyzo35958869 = -632642108;    float akoMzjMbWeCNHpYqqOdgyzo50679371 = -450042057;    float akoMzjMbWeCNHpYqqOdgyzo94467318 = -774981718;    float akoMzjMbWeCNHpYqqOdgyzo44603581 = -813431896;    float akoMzjMbWeCNHpYqqOdgyzo49929412 = 88562255;    float akoMzjMbWeCNHpYqqOdgyzo58592886 = -985166332;    float akoMzjMbWeCNHpYqqOdgyzo14686715 = -399918742;    float akoMzjMbWeCNHpYqqOdgyzo60279047 = -176845691;    float akoMzjMbWeCNHpYqqOdgyzo39287785 = -165547425;    float akoMzjMbWeCNHpYqqOdgyzo23523301 = -903391836;    float akoMzjMbWeCNHpYqqOdgyzo30921062 = -835807086;    float akoMzjMbWeCNHpYqqOdgyzo85990719 = -965853679;    float akoMzjMbWeCNHpYqqOdgyzo47803599 = -359554745;    float akoMzjMbWeCNHpYqqOdgyzo64406052 = -991258210;    float akoMzjMbWeCNHpYqqOdgyzo11522067 = -614535479;    float akoMzjMbWeCNHpYqqOdgyzo76999080 = -157637643;    float akoMzjMbWeCNHpYqqOdgyzo21828142 = -985376470;    float akoMzjMbWeCNHpYqqOdgyzo20263313 = -504695718;    float akoMzjMbWeCNHpYqqOdgyzo39616574 = 47172766;    float akoMzjMbWeCNHpYqqOdgyzo76532847 = -37578024;    float akoMzjMbWeCNHpYqqOdgyzo78388842 = -432914789;    float akoMzjMbWeCNHpYqqOdgyzo9476690 = -283554425;    float akoMzjMbWeCNHpYqqOdgyzo91996718 = -675282869;    float akoMzjMbWeCNHpYqqOdgyzo32041657 = -456829351;    float akoMzjMbWeCNHpYqqOdgyzo14290513 = -382023525;    float akoMzjMbWeCNHpYqqOdgyzo71824800 = -746327853;     akoMzjMbWeCNHpYqqOdgyzo26371766 = akoMzjMbWeCNHpYqqOdgyzo7330204;     akoMzjMbWeCNHpYqqOdgyzo7330204 = akoMzjMbWeCNHpYqqOdgyzo11550548;     akoMzjMbWeCNHpYqqOdgyzo11550548 = akoMzjMbWeCNHpYqqOdgyzo2085017;     akoMzjMbWeCNHpYqqOdgyzo2085017 = akoMzjMbWeCNHpYqqOdgyzo83801571;     akoMzjMbWeCNHpYqqOdgyzo83801571 = akoMzjMbWeCNHpYqqOdgyzo66548167;     akoMzjMbWeCNHpYqqOdgyzo66548167 = akoMzjMbWeCNHpYqqOdgyzo5530480;     akoMzjMbWeCNHpYqqOdgyzo5530480 = akoMzjMbWeCNHpYqqOdgyzo39016260;     akoMzjMbWeCNHpYqqOdgyzo39016260 = akoMzjMbWeCNHpYqqOdgyzo90667541;     akoMzjMbWeCNHpYqqOdgyzo90667541 = akoMzjMbWeCNHpYqqOdgyzo16271353;     akoMzjMbWeCNHpYqqOdgyzo16271353 = akoMzjMbWeCNHpYqqOdgyzo91586670;     akoMzjMbWeCNHpYqqOdgyzo91586670 = akoMzjMbWeCNHpYqqOdgyzo49633233;     akoMzjMbWeCNHpYqqOdgyzo49633233 = akoMzjMbWeCNHpYqqOdgyzo2206308;     akoMzjMbWeCNHpYqqOdgyzo2206308 = akoMzjMbWeCNHpYqqOdgyzo24424764;     akoMzjMbWeCNHpYqqOdgyzo24424764 = akoMzjMbWeCNHpYqqOdgyzo11436522;     akoMzjMbWeCNHpYqqOdgyzo11436522 = akoMzjMbWeCNHpYqqOdgyzo65272192;     akoMzjMbWeCNHpYqqOdgyzo65272192 = akoMzjMbWeCNHpYqqOdgyzo52274817;     akoMzjMbWeCNHpYqqOdgyzo52274817 = akoMzjMbWeCNHpYqqOdgyzo20144583;     akoMzjMbWeCNHpYqqOdgyzo20144583 = akoMzjMbWeCNHpYqqOdgyzo4228135;     akoMzjMbWeCNHpYqqOdgyzo4228135 = akoMzjMbWeCNHpYqqOdgyzo82644481;     akoMzjMbWeCNHpYqqOdgyzo82644481 = akoMzjMbWeCNHpYqqOdgyzo2617667;     akoMzjMbWeCNHpYqqOdgyzo2617667 = akoMzjMbWeCNHpYqqOdgyzo85268329;     akoMzjMbWeCNHpYqqOdgyzo85268329 = akoMzjMbWeCNHpYqqOdgyzo29656966;     akoMzjMbWeCNHpYqqOdgyzo29656966 = akoMzjMbWeCNHpYqqOdgyzo98320230;     akoMzjMbWeCNHpYqqOdgyzo98320230 = akoMzjMbWeCNHpYqqOdgyzo10167762;     akoMzjMbWeCNHpYqqOdgyzo10167762 = akoMzjMbWeCNHpYqqOdgyzo65092858;     akoMzjMbWeCNHpYqqOdgyzo65092858 = akoMzjMbWeCNHpYqqOdgyzo38888572;     akoMzjMbWeCNHpYqqOdgyzo38888572 = akoMzjMbWeCNHpYqqOdgyzo68321557;     akoMzjMbWeCNHpYqqOdgyzo68321557 = akoMzjMbWeCNHpYqqOdgyzo79074683;     akoMzjMbWeCNHpYqqOdgyzo79074683 = akoMzjMbWeCNHpYqqOdgyzo31908188;     akoMzjMbWeCNHpYqqOdgyzo31908188 = akoMzjMbWeCNHpYqqOdgyzo45508480;     akoMzjMbWeCNHpYqqOdgyzo45508480 = akoMzjMbWeCNHpYqqOdgyzo15020653;     akoMzjMbWeCNHpYqqOdgyzo15020653 = akoMzjMbWeCNHpYqqOdgyzo21119463;     akoMzjMbWeCNHpYqqOdgyzo21119463 = akoMzjMbWeCNHpYqqOdgyzo69213958;     akoMzjMbWeCNHpYqqOdgyzo69213958 = akoMzjMbWeCNHpYqqOdgyzo18102516;     akoMzjMbWeCNHpYqqOdgyzo18102516 = akoMzjMbWeCNHpYqqOdgyzo99501379;     akoMzjMbWeCNHpYqqOdgyzo99501379 = akoMzjMbWeCNHpYqqOdgyzo33493631;     akoMzjMbWeCNHpYqqOdgyzo33493631 = akoMzjMbWeCNHpYqqOdgyzo31533829;     akoMzjMbWeCNHpYqqOdgyzo31533829 = akoMzjMbWeCNHpYqqOdgyzo95241561;     akoMzjMbWeCNHpYqqOdgyzo95241561 = akoMzjMbWeCNHpYqqOdgyzo6048438;     akoMzjMbWeCNHpYqqOdgyzo6048438 = akoMzjMbWeCNHpYqqOdgyzo46685612;     akoMzjMbWeCNHpYqqOdgyzo46685612 = akoMzjMbWeCNHpYqqOdgyzo51938295;     akoMzjMbWeCNHpYqqOdgyzo51938295 = akoMzjMbWeCNHpYqqOdgyzo90801011;     akoMzjMbWeCNHpYqqOdgyzo90801011 = akoMzjMbWeCNHpYqqOdgyzo85053385;     akoMzjMbWeCNHpYqqOdgyzo85053385 = akoMzjMbWeCNHpYqqOdgyzo48390819;     akoMzjMbWeCNHpYqqOdgyzo48390819 = akoMzjMbWeCNHpYqqOdgyzo51574875;     akoMzjMbWeCNHpYqqOdgyzo51574875 = akoMzjMbWeCNHpYqqOdgyzo50406143;     akoMzjMbWeCNHpYqqOdgyzo50406143 = akoMzjMbWeCNHpYqqOdgyzo78609524;     akoMzjMbWeCNHpYqqOdgyzo78609524 = akoMzjMbWeCNHpYqqOdgyzo29033773;     akoMzjMbWeCNHpYqqOdgyzo29033773 = akoMzjMbWeCNHpYqqOdgyzo55551383;     akoMzjMbWeCNHpYqqOdgyzo55551383 = akoMzjMbWeCNHpYqqOdgyzo987126;     akoMzjMbWeCNHpYqqOdgyzo987126 = akoMzjMbWeCNHpYqqOdgyzo59517760;     akoMzjMbWeCNHpYqqOdgyzo59517760 = akoMzjMbWeCNHpYqqOdgyzo67217053;     akoMzjMbWeCNHpYqqOdgyzo67217053 = akoMzjMbWeCNHpYqqOdgyzo56713410;     akoMzjMbWeCNHpYqqOdgyzo56713410 = akoMzjMbWeCNHpYqqOdgyzo57691891;     akoMzjMbWeCNHpYqqOdgyzo57691891 = akoMzjMbWeCNHpYqqOdgyzo41103436;     akoMzjMbWeCNHpYqqOdgyzo41103436 = akoMzjMbWeCNHpYqqOdgyzo77673238;     akoMzjMbWeCNHpYqqOdgyzo77673238 = akoMzjMbWeCNHpYqqOdgyzo13230318;     akoMzjMbWeCNHpYqqOdgyzo13230318 = akoMzjMbWeCNHpYqqOdgyzo91917255;     akoMzjMbWeCNHpYqqOdgyzo91917255 = akoMzjMbWeCNHpYqqOdgyzo18708714;     akoMzjMbWeCNHpYqqOdgyzo18708714 = akoMzjMbWeCNHpYqqOdgyzo27659596;     akoMzjMbWeCNHpYqqOdgyzo27659596 = akoMzjMbWeCNHpYqqOdgyzo37208923;     akoMzjMbWeCNHpYqqOdgyzo37208923 = akoMzjMbWeCNHpYqqOdgyzo59941577;     akoMzjMbWeCNHpYqqOdgyzo59941577 = akoMzjMbWeCNHpYqqOdgyzo58759354;     akoMzjMbWeCNHpYqqOdgyzo58759354 = akoMzjMbWeCNHpYqqOdgyzo70762872;     akoMzjMbWeCNHpYqqOdgyzo70762872 = akoMzjMbWeCNHpYqqOdgyzo76566018;     akoMzjMbWeCNHpYqqOdgyzo76566018 = akoMzjMbWeCNHpYqqOdgyzo28513771;     akoMzjMbWeCNHpYqqOdgyzo28513771 = akoMzjMbWeCNHpYqqOdgyzo32992350;     akoMzjMbWeCNHpYqqOdgyzo32992350 = akoMzjMbWeCNHpYqqOdgyzo6322248;     akoMzjMbWeCNHpYqqOdgyzo6322248 = akoMzjMbWeCNHpYqqOdgyzo11935143;     akoMzjMbWeCNHpYqqOdgyzo11935143 = akoMzjMbWeCNHpYqqOdgyzo31778562;     akoMzjMbWeCNHpYqqOdgyzo31778562 = akoMzjMbWeCNHpYqqOdgyzo20740988;     akoMzjMbWeCNHpYqqOdgyzo20740988 = akoMzjMbWeCNHpYqqOdgyzo24903022;     akoMzjMbWeCNHpYqqOdgyzo24903022 = akoMzjMbWeCNHpYqqOdgyzo98179696;     akoMzjMbWeCNHpYqqOdgyzo98179696 = akoMzjMbWeCNHpYqqOdgyzo35958869;     akoMzjMbWeCNHpYqqOdgyzo35958869 = akoMzjMbWeCNHpYqqOdgyzo50679371;     akoMzjMbWeCNHpYqqOdgyzo50679371 = akoMzjMbWeCNHpYqqOdgyzo94467318;     akoMzjMbWeCNHpYqqOdgyzo94467318 = akoMzjMbWeCNHpYqqOdgyzo44603581;     akoMzjMbWeCNHpYqqOdgyzo44603581 = akoMzjMbWeCNHpYqqOdgyzo49929412;     akoMzjMbWeCNHpYqqOdgyzo49929412 = akoMzjMbWeCNHpYqqOdgyzo58592886;     akoMzjMbWeCNHpYqqOdgyzo58592886 = akoMzjMbWeCNHpYqqOdgyzo14686715;     akoMzjMbWeCNHpYqqOdgyzo14686715 = akoMzjMbWeCNHpYqqOdgyzo60279047;     akoMzjMbWeCNHpYqqOdgyzo60279047 = akoMzjMbWeCNHpYqqOdgyzo39287785;     akoMzjMbWeCNHpYqqOdgyzo39287785 = akoMzjMbWeCNHpYqqOdgyzo23523301;     akoMzjMbWeCNHpYqqOdgyzo23523301 = akoMzjMbWeCNHpYqqOdgyzo30921062;     akoMzjMbWeCNHpYqqOdgyzo30921062 = akoMzjMbWeCNHpYqqOdgyzo85990719;     akoMzjMbWeCNHpYqqOdgyzo85990719 = akoMzjMbWeCNHpYqqOdgyzo47803599;     akoMzjMbWeCNHpYqqOdgyzo47803599 = akoMzjMbWeCNHpYqqOdgyzo64406052;     akoMzjMbWeCNHpYqqOdgyzo64406052 = akoMzjMbWeCNHpYqqOdgyzo11522067;     akoMzjMbWeCNHpYqqOdgyzo11522067 = akoMzjMbWeCNHpYqqOdgyzo76999080;     akoMzjMbWeCNHpYqqOdgyzo76999080 = akoMzjMbWeCNHpYqqOdgyzo21828142;     akoMzjMbWeCNHpYqqOdgyzo21828142 = akoMzjMbWeCNHpYqqOdgyzo20263313;     akoMzjMbWeCNHpYqqOdgyzo20263313 = akoMzjMbWeCNHpYqqOdgyzo39616574;     akoMzjMbWeCNHpYqqOdgyzo39616574 = akoMzjMbWeCNHpYqqOdgyzo76532847;     akoMzjMbWeCNHpYqqOdgyzo76532847 = akoMzjMbWeCNHpYqqOdgyzo78388842;     akoMzjMbWeCNHpYqqOdgyzo78388842 = akoMzjMbWeCNHpYqqOdgyzo9476690;     akoMzjMbWeCNHpYqqOdgyzo9476690 = akoMzjMbWeCNHpYqqOdgyzo91996718;     akoMzjMbWeCNHpYqqOdgyzo91996718 = akoMzjMbWeCNHpYqqOdgyzo32041657;     akoMzjMbWeCNHpYqqOdgyzo32041657 = akoMzjMbWeCNHpYqqOdgyzo14290513;     akoMzjMbWeCNHpYqqOdgyzo14290513 = akoMzjMbWeCNHpYqqOdgyzo71824800;     akoMzjMbWeCNHpYqqOdgyzo71824800 = akoMzjMbWeCNHpYqqOdgyzo26371766;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void lVTsxdLnjtJKePgNajScJGwujljOtAknarhojKkJB90295787() {     float ugKcXNOYfAhdZLeZZJMuxuj48765354 = -508207674;    float ugKcXNOYfAhdZLeZZJMuxuj53105388 = -714396204;    float ugKcXNOYfAhdZLeZZJMuxuj39006615 = -487365189;    float ugKcXNOYfAhdZLeZZJMuxuj32011845 = -997781768;    float ugKcXNOYfAhdZLeZZJMuxuj73135724 = -861200647;    float ugKcXNOYfAhdZLeZZJMuxuj46625852 = -278468052;    float ugKcXNOYfAhdZLeZZJMuxuj29138883 = -736688713;    float ugKcXNOYfAhdZLeZZJMuxuj45436068 = 92991601;    float ugKcXNOYfAhdZLeZZJMuxuj5090509 = -942250018;    float ugKcXNOYfAhdZLeZZJMuxuj11395424 = 71203257;    float ugKcXNOYfAhdZLeZZJMuxuj8807925 = -524155041;    float ugKcXNOYfAhdZLeZZJMuxuj91244505 = -51500701;    float ugKcXNOYfAhdZLeZZJMuxuj37361575 = -900748883;    float ugKcXNOYfAhdZLeZZJMuxuj13195296 = -815987648;    float ugKcXNOYfAhdZLeZZJMuxuj2999691 = -620522877;    float ugKcXNOYfAhdZLeZZJMuxuj34963558 = -307685860;    float ugKcXNOYfAhdZLeZZJMuxuj46245409 = -380532734;    float ugKcXNOYfAhdZLeZZJMuxuj3120466 = -654070030;    float ugKcXNOYfAhdZLeZZJMuxuj25081496 = -210898649;    float ugKcXNOYfAhdZLeZZJMuxuj89087001 = -808116321;    float ugKcXNOYfAhdZLeZZJMuxuj23831349 = -964634329;    float ugKcXNOYfAhdZLeZZJMuxuj70787282 = -289589526;    float ugKcXNOYfAhdZLeZZJMuxuj96071892 = -480949633;    float ugKcXNOYfAhdZLeZZJMuxuj81169909 = -260517488;    float ugKcXNOYfAhdZLeZZJMuxuj17265319 = -303688271;    float ugKcXNOYfAhdZLeZZJMuxuj36821776 = -309020558;    float ugKcXNOYfAhdZLeZZJMuxuj15756411 = -664418221;    float ugKcXNOYfAhdZLeZZJMuxuj38829483 = -747415553;    float ugKcXNOYfAhdZLeZZJMuxuj73288797 = -480487408;    float ugKcXNOYfAhdZLeZZJMuxuj64975497 = -953560514;    float ugKcXNOYfAhdZLeZZJMuxuj56386606 = -48713736;    float ugKcXNOYfAhdZLeZZJMuxuj87837986 = -573567318;    float ugKcXNOYfAhdZLeZZJMuxuj16705710 = -993955532;    float ugKcXNOYfAhdZLeZZJMuxuj28319808 = -588294395;    float ugKcXNOYfAhdZLeZZJMuxuj11973843 = -413592897;    float ugKcXNOYfAhdZLeZZJMuxuj98366059 = -165627493;    float ugKcXNOYfAhdZLeZZJMuxuj14991975 = -765385097;    float ugKcXNOYfAhdZLeZZJMuxuj15242250 = -628282094;    float ugKcXNOYfAhdZLeZZJMuxuj8236096 = -691109345;    float ugKcXNOYfAhdZLeZZJMuxuj54361260 = -969368177;    float ugKcXNOYfAhdZLeZZJMuxuj87587315 = -850097978;    float ugKcXNOYfAhdZLeZZJMuxuj54749025 = -797687946;    float ugKcXNOYfAhdZLeZZJMuxuj36067843 = -948233708;    float ugKcXNOYfAhdZLeZZJMuxuj25265606 = -290794192;    float ugKcXNOYfAhdZLeZZJMuxuj32356033 = -1891484;    float ugKcXNOYfAhdZLeZZJMuxuj19247189 = -393841093;    float ugKcXNOYfAhdZLeZZJMuxuj35005748 = -470543152;    float ugKcXNOYfAhdZLeZZJMuxuj47824618 = -78559385;    float ugKcXNOYfAhdZLeZZJMuxuj4835289 = -588333500;    float ugKcXNOYfAhdZLeZZJMuxuj32589706 = -333904141;    float ugKcXNOYfAhdZLeZZJMuxuj96596972 = -549410206;    float ugKcXNOYfAhdZLeZZJMuxuj18821760 = -437310673;    float ugKcXNOYfAhdZLeZZJMuxuj70083108 = -733620202;    float ugKcXNOYfAhdZLeZZJMuxuj6749685 = -419059001;    float ugKcXNOYfAhdZLeZZJMuxuj66464438 = -910118637;    float ugKcXNOYfAhdZLeZZJMuxuj77978072 = -118618149;    float ugKcXNOYfAhdZLeZZJMuxuj57033495 = -133446572;    float ugKcXNOYfAhdZLeZZJMuxuj57836705 = -126847702;    float ugKcXNOYfAhdZLeZZJMuxuj14746526 = -594093498;    float ugKcXNOYfAhdZLeZZJMuxuj36313948 = -452180090;    float ugKcXNOYfAhdZLeZZJMuxuj30869442 = -614049832;    float ugKcXNOYfAhdZLeZZJMuxuj90309400 = -989273160;    float ugKcXNOYfAhdZLeZZJMuxuj72147271 = -426520992;    float ugKcXNOYfAhdZLeZZJMuxuj40115011 = -988689504;    float ugKcXNOYfAhdZLeZZJMuxuj55008817 = -880083007;    float ugKcXNOYfAhdZLeZZJMuxuj20969939 = -950587724;    float ugKcXNOYfAhdZLeZZJMuxuj74538795 = -57545170;    float ugKcXNOYfAhdZLeZZJMuxuj9041767 = -212454488;    float ugKcXNOYfAhdZLeZZJMuxuj1221454 = -302394751;    float ugKcXNOYfAhdZLeZZJMuxuj4633631 = -354895384;    float ugKcXNOYfAhdZLeZZJMuxuj19971583 = -542300764;    float ugKcXNOYfAhdZLeZZJMuxuj31003159 = -752250640;    float ugKcXNOYfAhdZLeZZJMuxuj94884370 = -962960685;    float ugKcXNOYfAhdZLeZZJMuxuj70720235 = -241530473;    float ugKcXNOYfAhdZLeZZJMuxuj1499687 = -958018343;    float ugKcXNOYfAhdZLeZZJMuxuj69082324 = -66946383;    float ugKcXNOYfAhdZLeZZJMuxuj34719439 = -341355818;    float ugKcXNOYfAhdZLeZZJMuxuj70806286 = -90155441;    float ugKcXNOYfAhdZLeZZJMuxuj48813876 = -158626004;    float ugKcXNOYfAhdZLeZZJMuxuj98018129 = -909847179;    float ugKcXNOYfAhdZLeZZJMuxuj1816028 = -838477406;    float ugKcXNOYfAhdZLeZZJMuxuj67931792 = -485858836;    float ugKcXNOYfAhdZLeZZJMuxuj33994195 = -59082053;    float ugKcXNOYfAhdZLeZZJMuxuj40699092 = -46583268;    float ugKcXNOYfAhdZLeZZJMuxuj68378525 = -304150309;    float ugKcXNOYfAhdZLeZZJMuxuj37564846 = -611403063;    float ugKcXNOYfAhdZLeZZJMuxuj17754878 = -839947116;    float ugKcXNOYfAhdZLeZZJMuxuj9956025 = -474896531;    float ugKcXNOYfAhdZLeZZJMuxuj61855370 = -678175759;    float ugKcXNOYfAhdZLeZZJMuxuj33995771 = -194974749;    float ugKcXNOYfAhdZLeZZJMuxuj41332564 = 67819079;    float ugKcXNOYfAhdZLeZZJMuxuj57155270 = -538537395;    float ugKcXNOYfAhdZLeZZJMuxuj495725 = 65811404;    float ugKcXNOYfAhdZLeZZJMuxuj71922147 = -138929255;    float ugKcXNOYfAhdZLeZZJMuxuj23491818 = -255318346;    float ugKcXNOYfAhdZLeZZJMuxuj97277914 = -860824819;    float ugKcXNOYfAhdZLeZZJMuxuj82601754 = -271166955;    float ugKcXNOYfAhdZLeZZJMuxuj95952831 = -959544204;    float ugKcXNOYfAhdZLeZZJMuxuj70256789 = -410711186;    float ugKcXNOYfAhdZLeZZJMuxuj11386094 = -508207674;     ugKcXNOYfAhdZLeZZJMuxuj48765354 = ugKcXNOYfAhdZLeZZJMuxuj53105388;     ugKcXNOYfAhdZLeZZJMuxuj53105388 = ugKcXNOYfAhdZLeZZJMuxuj39006615;     ugKcXNOYfAhdZLeZZJMuxuj39006615 = ugKcXNOYfAhdZLeZZJMuxuj32011845;     ugKcXNOYfAhdZLeZZJMuxuj32011845 = ugKcXNOYfAhdZLeZZJMuxuj73135724;     ugKcXNOYfAhdZLeZZJMuxuj73135724 = ugKcXNOYfAhdZLeZZJMuxuj46625852;     ugKcXNOYfAhdZLeZZJMuxuj46625852 = ugKcXNOYfAhdZLeZZJMuxuj29138883;     ugKcXNOYfAhdZLeZZJMuxuj29138883 = ugKcXNOYfAhdZLeZZJMuxuj45436068;     ugKcXNOYfAhdZLeZZJMuxuj45436068 = ugKcXNOYfAhdZLeZZJMuxuj5090509;     ugKcXNOYfAhdZLeZZJMuxuj5090509 = ugKcXNOYfAhdZLeZZJMuxuj11395424;     ugKcXNOYfAhdZLeZZJMuxuj11395424 = ugKcXNOYfAhdZLeZZJMuxuj8807925;     ugKcXNOYfAhdZLeZZJMuxuj8807925 = ugKcXNOYfAhdZLeZZJMuxuj91244505;     ugKcXNOYfAhdZLeZZJMuxuj91244505 = ugKcXNOYfAhdZLeZZJMuxuj37361575;     ugKcXNOYfAhdZLeZZJMuxuj37361575 = ugKcXNOYfAhdZLeZZJMuxuj13195296;     ugKcXNOYfAhdZLeZZJMuxuj13195296 = ugKcXNOYfAhdZLeZZJMuxuj2999691;     ugKcXNOYfAhdZLeZZJMuxuj2999691 = ugKcXNOYfAhdZLeZZJMuxuj34963558;     ugKcXNOYfAhdZLeZZJMuxuj34963558 = ugKcXNOYfAhdZLeZZJMuxuj46245409;     ugKcXNOYfAhdZLeZZJMuxuj46245409 = ugKcXNOYfAhdZLeZZJMuxuj3120466;     ugKcXNOYfAhdZLeZZJMuxuj3120466 = ugKcXNOYfAhdZLeZZJMuxuj25081496;     ugKcXNOYfAhdZLeZZJMuxuj25081496 = ugKcXNOYfAhdZLeZZJMuxuj89087001;     ugKcXNOYfAhdZLeZZJMuxuj89087001 = ugKcXNOYfAhdZLeZZJMuxuj23831349;     ugKcXNOYfAhdZLeZZJMuxuj23831349 = ugKcXNOYfAhdZLeZZJMuxuj70787282;     ugKcXNOYfAhdZLeZZJMuxuj70787282 = ugKcXNOYfAhdZLeZZJMuxuj96071892;     ugKcXNOYfAhdZLeZZJMuxuj96071892 = ugKcXNOYfAhdZLeZZJMuxuj81169909;     ugKcXNOYfAhdZLeZZJMuxuj81169909 = ugKcXNOYfAhdZLeZZJMuxuj17265319;     ugKcXNOYfAhdZLeZZJMuxuj17265319 = ugKcXNOYfAhdZLeZZJMuxuj36821776;     ugKcXNOYfAhdZLeZZJMuxuj36821776 = ugKcXNOYfAhdZLeZZJMuxuj15756411;     ugKcXNOYfAhdZLeZZJMuxuj15756411 = ugKcXNOYfAhdZLeZZJMuxuj38829483;     ugKcXNOYfAhdZLeZZJMuxuj38829483 = ugKcXNOYfAhdZLeZZJMuxuj73288797;     ugKcXNOYfAhdZLeZZJMuxuj73288797 = ugKcXNOYfAhdZLeZZJMuxuj64975497;     ugKcXNOYfAhdZLeZZJMuxuj64975497 = ugKcXNOYfAhdZLeZZJMuxuj56386606;     ugKcXNOYfAhdZLeZZJMuxuj56386606 = ugKcXNOYfAhdZLeZZJMuxuj87837986;     ugKcXNOYfAhdZLeZZJMuxuj87837986 = ugKcXNOYfAhdZLeZZJMuxuj16705710;     ugKcXNOYfAhdZLeZZJMuxuj16705710 = ugKcXNOYfAhdZLeZZJMuxuj28319808;     ugKcXNOYfAhdZLeZZJMuxuj28319808 = ugKcXNOYfAhdZLeZZJMuxuj11973843;     ugKcXNOYfAhdZLeZZJMuxuj11973843 = ugKcXNOYfAhdZLeZZJMuxuj98366059;     ugKcXNOYfAhdZLeZZJMuxuj98366059 = ugKcXNOYfAhdZLeZZJMuxuj14991975;     ugKcXNOYfAhdZLeZZJMuxuj14991975 = ugKcXNOYfAhdZLeZZJMuxuj15242250;     ugKcXNOYfAhdZLeZZJMuxuj15242250 = ugKcXNOYfAhdZLeZZJMuxuj8236096;     ugKcXNOYfAhdZLeZZJMuxuj8236096 = ugKcXNOYfAhdZLeZZJMuxuj54361260;     ugKcXNOYfAhdZLeZZJMuxuj54361260 = ugKcXNOYfAhdZLeZZJMuxuj87587315;     ugKcXNOYfAhdZLeZZJMuxuj87587315 = ugKcXNOYfAhdZLeZZJMuxuj54749025;     ugKcXNOYfAhdZLeZZJMuxuj54749025 = ugKcXNOYfAhdZLeZZJMuxuj36067843;     ugKcXNOYfAhdZLeZZJMuxuj36067843 = ugKcXNOYfAhdZLeZZJMuxuj25265606;     ugKcXNOYfAhdZLeZZJMuxuj25265606 = ugKcXNOYfAhdZLeZZJMuxuj32356033;     ugKcXNOYfAhdZLeZZJMuxuj32356033 = ugKcXNOYfAhdZLeZZJMuxuj19247189;     ugKcXNOYfAhdZLeZZJMuxuj19247189 = ugKcXNOYfAhdZLeZZJMuxuj35005748;     ugKcXNOYfAhdZLeZZJMuxuj35005748 = ugKcXNOYfAhdZLeZZJMuxuj47824618;     ugKcXNOYfAhdZLeZZJMuxuj47824618 = ugKcXNOYfAhdZLeZZJMuxuj4835289;     ugKcXNOYfAhdZLeZZJMuxuj4835289 = ugKcXNOYfAhdZLeZZJMuxuj32589706;     ugKcXNOYfAhdZLeZZJMuxuj32589706 = ugKcXNOYfAhdZLeZZJMuxuj96596972;     ugKcXNOYfAhdZLeZZJMuxuj96596972 = ugKcXNOYfAhdZLeZZJMuxuj18821760;     ugKcXNOYfAhdZLeZZJMuxuj18821760 = ugKcXNOYfAhdZLeZZJMuxuj70083108;     ugKcXNOYfAhdZLeZZJMuxuj70083108 = ugKcXNOYfAhdZLeZZJMuxuj6749685;     ugKcXNOYfAhdZLeZZJMuxuj6749685 = ugKcXNOYfAhdZLeZZJMuxuj66464438;     ugKcXNOYfAhdZLeZZJMuxuj66464438 = ugKcXNOYfAhdZLeZZJMuxuj77978072;     ugKcXNOYfAhdZLeZZJMuxuj77978072 = ugKcXNOYfAhdZLeZZJMuxuj57033495;     ugKcXNOYfAhdZLeZZJMuxuj57033495 = ugKcXNOYfAhdZLeZZJMuxuj57836705;     ugKcXNOYfAhdZLeZZJMuxuj57836705 = ugKcXNOYfAhdZLeZZJMuxuj14746526;     ugKcXNOYfAhdZLeZZJMuxuj14746526 = ugKcXNOYfAhdZLeZZJMuxuj36313948;     ugKcXNOYfAhdZLeZZJMuxuj36313948 = ugKcXNOYfAhdZLeZZJMuxuj30869442;     ugKcXNOYfAhdZLeZZJMuxuj30869442 = ugKcXNOYfAhdZLeZZJMuxuj90309400;     ugKcXNOYfAhdZLeZZJMuxuj90309400 = ugKcXNOYfAhdZLeZZJMuxuj72147271;     ugKcXNOYfAhdZLeZZJMuxuj72147271 = ugKcXNOYfAhdZLeZZJMuxuj40115011;     ugKcXNOYfAhdZLeZZJMuxuj40115011 = ugKcXNOYfAhdZLeZZJMuxuj55008817;     ugKcXNOYfAhdZLeZZJMuxuj55008817 = ugKcXNOYfAhdZLeZZJMuxuj20969939;     ugKcXNOYfAhdZLeZZJMuxuj20969939 = ugKcXNOYfAhdZLeZZJMuxuj74538795;     ugKcXNOYfAhdZLeZZJMuxuj74538795 = ugKcXNOYfAhdZLeZZJMuxuj9041767;     ugKcXNOYfAhdZLeZZJMuxuj9041767 = ugKcXNOYfAhdZLeZZJMuxuj1221454;     ugKcXNOYfAhdZLeZZJMuxuj1221454 = ugKcXNOYfAhdZLeZZJMuxuj4633631;     ugKcXNOYfAhdZLeZZJMuxuj4633631 = ugKcXNOYfAhdZLeZZJMuxuj19971583;     ugKcXNOYfAhdZLeZZJMuxuj19971583 = ugKcXNOYfAhdZLeZZJMuxuj31003159;     ugKcXNOYfAhdZLeZZJMuxuj31003159 = ugKcXNOYfAhdZLeZZJMuxuj94884370;     ugKcXNOYfAhdZLeZZJMuxuj94884370 = ugKcXNOYfAhdZLeZZJMuxuj70720235;     ugKcXNOYfAhdZLeZZJMuxuj70720235 = ugKcXNOYfAhdZLeZZJMuxuj1499687;     ugKcXNOYfAhdZLeZZJMuxuj1499687 = ugKcXNOYfAhdZLeZZJMuxuj69082324;     ugKcXNOYfAhdZLeZZJMuxuj69082324 = ugKcXNOYfAhdZLeZZJMuxuj34719439;     ugKcXNOYfAhdZLeZZJMuxuj34719439 = ugKcXNOYfAhdZLeZZJMuxuj70806286;     ugKcXNOYfAhdZLeZZJMuxuj70806286 = ugKcXNOYfAhdZLeZZJMuxuj48813876;     ugKcXNOYfAhdZLeZZJMuxuj48813876 = ugKcXNOYfAhdZLeZZJMuxuj98018129;     ugKcXNOYfAhdZLeZZJMuxuj98018129 = ugKcXNOYfAhdZLeZZJMuxuj1816028;     ugKcXNOYfAhdZLeZZJMuxuj1816028 = ugKcXNOYfAhdZLeZZJMuxuj67931792;     ugKcXNOYfAhdZLeZZJMuxuj67931792 = ugKcXNOYfAhdZLeZZJMuxuj33994195;     ugKcXNOYfAhdZLeZZJMuxuj33994195 = ugKcXNOYfAhdZLeZZJMuxuj40699092;     ugKcXNOYfAhdZLeZZJMuxuj40699092 = ugKcXNOYfAhdZLeZZJMuxuj68378525;     ugKcXNOYfAhdZLeZZJMuxuj68378525 = ugKcXNOYfAhdZLeZZJMuxuj37564846;     ugKcXNOYfAhdZLeZZJMuxuj37564846 = ugKcXNOYfAhdZLeZZJMuxuj17754878;     ugKcXNOYfAhdZLeZZJMuxuj17754878 = ugKcXNOYfAhdZLeZZJMuxuj9956025;     ugKcXNOYfAhdZLeZZJMuxuj9956025 = ugKcXNOYfAhdZLeZZJMuxuj61855370;     ugKcXNOYfAhdZLeZZJMuxuj61855370 = ugKcXNOYfAhdZLeZZJMuxuj33995771;     ugKcXNOYfAhdZLeZZJMuxuj33995771 = ugKcXNOYfAhdZLeZZJMuxuj41332564;     ugKcXNOYfAhdZLeZZJMuxuj41332564 = ugKcXNOYfAhdZLeZZJMuxuj57155270;     ugKcXNOYfAhdZLeZZJMuxuj57155270 = ugKcXNOYfAhdZLeZZJMuxuj495725;     ugKcXNOYfAhdZLeZZJMuxuj495725 = ugKcXNOYfAhdZLeZZJMuxuj71922147;     ugKcXNOYfAhdZLeZZJMuxuj71922147 = ugKcXNOYfAhdZLeZZJMuxuj23491818;     ugKcXNOYfAhdZLeZZJMuxuj23491818 = ugKcXNOYfAhdZLeZZJMuxuj97277914;     ugKcXNOYfAhdZLeZZJMuxuj97277914 = ugKcXNOYfAhdZLeZZJMuxuj82601754;     ugKcXNOYfAhdZLeZZJMuxuj82601754 = ugKcXNOYfAhdZLeZZJMuxuj95952831;     ugKcXNOYfAhdZLeZZJMuxuj95952831 = ugKcXNOYfAhdZLeZZJMuxuj70256789;     ugKcXNOYfAhdZLeZZJMuxuj70256789 = ugKcXNOYfAhdZLeZZJMuxuj11386094;     ugKcXNOYfAhdZLeZZJMuxuj11386094 = ugKcXNOYfAhdZLeZZJMuxuj48765354;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void nVVRPcEyIIeModXDCgDgiNfbFweyfvAiIIdhRvpuN72524549() {     float xsNPLRoQGTCNgyZquMSxGTM500805 = -624462507;    float xsNPLRoQGTCNgyZquMSxGTM68779370 = -791295960;    float xsNPLRoQGTCNgyZquMSxGTM87806974 = -284724574;    float xsNPLRoQGTCNgyZquMSxGTM7087247 = -814050911;    float xsNPLRoQGTCNgyZquMSxGTM49859656 = -568851301;    float xsNPLRoQGTCNgyZquMSxGTM71509206 = -437495279;    float xsNPLRoQGTCNgyZquMSxGTM2915727 = -559900309;    float xsNPLRoQGTCNgyZquMSxGTM64227546 = -30787954;    float xsNPLRoQGTCNgyZquMSxGTM56388585 = -733098728;    float xsNPLRoQGTCNgyZquMSxGTM80192547 = -470442725;    float xsNPLRoQGTCNgyZquMSxGTM4100624 = -485877512;    float xsNPLRoQGTCNgyZquMSxGTM1600883 = 13517798;    float xsNPLRoQGTCNgyZquMSxGTM24542368 = -509929144;    float xsNPLRoQGTCNgyZquMSxGTM71963015 = -442668195;    float xsNPLRoQGTCNgyZquMSxGTM57014948 = -98250587;    float xsNPLRoQGTCNgyZquMSxGTM46690830 = -19369816;    float xsNPLRoQGTCNgyZquMSxGTM2215934 = -748627424;    float xsNPLRoQGTCNgyZquMSxGTM88803387 = -16646524;    float xsNPLRoQGTCNgyZquMSxGTM84655344 = -738812832;    float xsNPLRoQGTCNgyZquMSxGTM8816576 = -518384470;    float xsNPLRoQGTCNgyZquMSxGTM69578702 = 52557503;    float xsNPLRoQGTCNgyZquMSxGTM73206736 = -463070533;    float xsNPLRoQGTCNgyZquMSxGTM97421406 = -89187080;    float xsNPLRoQGTCNgyZquMSxGTM73820159 = -132109439;    float xsNPLRoQGTCNgyZquMSxGTM88681177 = -249342708;    float xsNPLRoQGTCNgyZquMSxGTM94527189 = -654630337;    float xsNPLRoQGTCNgyZquMSxGTM54585045 = -26826939;    float xsNPLRoQGTCNgyZquMSxGTM36958707 = -30746239;    float xsNPLRoQGTCNgyZquMSxGTM48038870 = -530386310;    float xsNPLRoQGTCNgyZquMSxGTM34960581 = -315461310;    float xsNPLRoQGTCNgyZquMSxGTM93605414 = -381596202;    float xsNPLRoQGTCNgyZquMSxGTM867717 = -897341510;    float xsNPLRoQGTCNgyZquMSxGTM14799020 = -476337418;    float xsNPLRoQGTCNgyZquMSxGTM22343521 = -248891561;    float xsNPLRoQGTCNgyZquMSxGTM10178971 = -630402540;    float xsNPLRoQGTCNgyZquMSxGTM80065669 = -401796321;    float xsNPLRoQGTCNgyZquMSxGTM64640201 = -309739841;    float xsNPLRoQGTCNgyZquMSxGTM16075863 = -711794458;    float xsNPLRoQGTCNgyZquMSxGTM78010938 = -36426740;    float xsNPLRoQGTCNgyZquMSxGTM79443676 = -487983844;    float xsNPLRoQGTCNgyZquMSxGTM56271402 = -969256766;    float xsNPLRoQGTCNgyZquMSxGTM14774426 = -786207568;    float xsNPLRoQGTCNgyZquMSxGTM92651075 = -849010239;    float xsNPLRoQGTCNgyZquMSxGTM18201425 = -216182870;    float xsNPLRoQGTCNgyZquMSxGTM4385241 = -602388567;    float xsNPLRoQGTCNgyZquMSxGTM20941636 = -817733033;    float xsNPLRoQGTCNgyZquMSxGTM21171943 = -932883606;    float xsNPLRoQGTCNgyZquMSxGTM26809083 = -482964081;    float xsNPLRoQGTCNgyZquMSxGTM93853740 = -552286229;    float xsNPLRoQGTCNgyZquMSxGTM21245965 = -192915521;    float xsNPLRoQGTCNgyZquMSxGTM37276865 = -257914362;    float xsNPLRoQGTCNgyZquMSxGTM50801513 = -898910234;    float xsNPLRoQGTCNgyZquMSxGTM93321854 = -477733390;    float xsNPLRoQGTCNgyZquMSxGTM76808925 = -33858313;    float xsNPLRoQGTCNgyZquMSxGTM2945847 = -939881838;    float xsNPLRoQGTCNgyZquMSxGTM27294069 = -61391974;    float xsNPLRoQGTCNgyZquMSxGTM71357963 = -602108880;    float xsNPLRoQGTCNgyZquMSxGTM13986815 = -52615136;    float xsNPLRoQGTCNgyZquMSxGTM18406069 = -464708204;    float xsNPLRoQGTCNgyZquMSxGTM55332467 = -914220965;    float xsNPLRoQGTCNgyZquMSxGTM16924161 = -310668341;    float xsNPLRoQGTCNgyZquMSxGTM65957019 = -429154071;    float xsNPLRoQGTCNgyZquMSxGTM16188676 = -500401644;    float xsNPLRoQGTCNgyZquMSxGTM21428005 = -317637419;    float xsNPLRoQGTCNgyZquMSxGTM86587132 = 11153477;    float xsNPLRoQGTCNgyZquMSxGTM3232908 = -588536003;    float xsNPLRoQGTCNgyZquMSxGTM86801863 = -510144785;    float xsNPLRoQGTCNgyZquMSxGTM2198848 = -161037583;    float xsNPLRoQGTCNgyZquMSxGTM61784044 = -812265655;    float xsNPLRoQGTCNgyZquMSxGTM76949278 = -696454266;    float xsNPLRoQGTCNgyZquMSxGTM82050628 = -709629975;    float xsNPLRoQGTCNgyZquMSxGTM86140071 = 63167034;    float xsNPLRoQGTCNgyZquMSxGTM10792450 = -980219785;    float xsNPLRoQGTCNgyZquMSxGTM5211669 = -150828989;    float xsNPLRoQGTCNgyZquMSxGTM52545173 = -549127704;    float xsNPLRoQGTCNgyZquMSxGTM54804276 = -161234929;    float xsNPLRoQGTCNgyZquMSxGTM80555661 = -614060294;    float xsNPLRoQGTCNgyZquMSxGTM79219982 = -873004211;    float xsNPLRoQGTCNgyZquMSxGTM69434918 = -529720872;    float xsNPLRoQGTCNgyZquMSxGTM67739541 = -431609675;    float xsNPLRoQGTCNgyZquMSxGTM73355247 = -721746732;    float xsNPLRoQGTCNgyZquMSxGTM27775963 = -543862858;    float xsNPLRoQGTCNgyZquMSxGTM43104967 = -478460010;    float xsNPLRoQGTCNgyZquMSxGTM26792906 = -237470790;    float xsNPLRoQGTCNgyZquMSxGTM97683716 = 42453051;    float xsNPLRoQGTCNgyZquMSxGTM42803902 = -482685969;    float xsNPLRoQGTCNgyZquMSxGTM7545862 = -319608120;    float xsNPLRoQGTCNgyZquMSxGTM37990094 = -342479105;    float xsNPLRoQGTCNgyZquMSxGTM19397674 = -309009724;    float xsNPLRoQGTCNgyZquMSxGTM82884902 = -469010567;    float xsNPLRoQGTCNgyZquMSxGTM8707706 = -799687441;    float xsNPLRoQGTCNgyZquMSxGTM50653386 = -157124706;    float xsNPLRoQGTCNgyZquMSxGTM97669793 = -147086255;    float xsNPLRoQGTCNgyZquMSxGTM22678472 = -122205776;    float xsNPLRoQGTCNgyZquMSxGTM62519515 = -77315504;    float xsNPLRoQGTCNgyZquMSxGTM90314383 = -440102696;    float xsNPLRoQGTCNgyZquMSxGTM98585749 = -185805925;    float xsNPLRoQGTCNgyZquMSxGTM71223071 = -431372821;    float xsNPLRoQGTCNgyZquMSxGTM31614293 = -127336347;    float xsNPLRoQGTCNgyZquMSxGTM1152334 = -624462507;     xsNPLRoQGTCNgyZquMSxGTM500805 = xsNPLRoQGTCNgyZquMSxGTM68779370;     xsNPLRoQGTCNgyZquMSxGTM68779370 = xsNPLRoQGTCNgyZquMSxGTM87806974;     xsNPLRoQGTCNgyZquMSxGTM87806974 = xsNPLRoQGTCNgyZquMSxGTM7087247;     xsNPLRoQGTCNgyZquMSxGTM7087247 = xsNPLRoQGTCNgyZquMSxGTM49859656;     xsNPLRoQGTCNgyZquMSxGTM49859656 = xsNPLRoQGTCNgyZquMSxGTM71509206;     xsNPLRoQGTCNgyZquMSxGTM71509206 = xsNPLRoQGTCNgyZquMSxGTM2915727;     xsNPLRoQGTCNgyZquMSxGTM2915727 = xsNPLRoQGTCNgyZquMSxGTM64227546;     xsNPLRoQGTCNgyZquMSxGTM64227546 = xsNPLRoQGTCNgyZquMSxGTM56388585;     xsNPLRoQGTCNgyZquMSxGTM56388585 = xsNPLRoQGTCNgyZquMSxGTM80192547;     xsNPLRoQGTCNgyZquMSxGTM80192547 = xsNPLRoQGTCNgyZquMSxGTM4100624;     xsNPLRoQGTCNgyZquMSxGTM4100624 = xsNPLRoQGTCNgyZquMSxGTM1600883;     xsNPLRoQGTCNgyZquMSxGTM1600883 = xsNPLRoQGTCNgyZquMSxGTM24542368;     xsNPLRoQGTCNgyZquMSxGTM24542368 = xsNPLRoQGTCNgyZquMSxGTM71963015;     xsNPLRoQGTCNgyZquMSxGTM71963015 = xsNPLRoQGTCNgyZquMSxGTM57014948;     xsNPLRoQGTCNgyZquMSxGTM57014948 = xsNPLRoQGTCNgyZquMSxGTM46690830;     xsNPLRoQGTCNgyZquMSxGTM46690830 = xsNPLRoQGTCNgyZquMSxGTM2215934;     xsNPLRoQGTCNgyZquMSxGTM2215934 = xsNPLRoQGTCNgyZquMSxGTM88803387;     xsNPLRoQGTCNgyZquMSxGTM88803387 = xsNPLRoQGTCNgyZquMSxGTM84655344;     xsNPLRoQGTCNgyZquMSxGTM84655344 = xsNPLRoQGTCNgyZquMSxGTM8816576;     xsNPLRoQGTCNgyZquMSxGTM8816576 = xsNPLRoQGTCNgyZquMSxGTM69578702;     xsNPLRoQGTCNgyZquMSxGTM69578702 = xsNPLRoQGTCNgyZquMSxGTM73206736;     xsNPLRoQGTCNgyZquMSxGTM73206736 = xsNPLRoQGTCNgyZquMSxGTM97421406;     xsNPLRoQGTCNgyZquMSxGTM97421406 = xsNPLRoQGTCNgyZquMSxGTM73820159;     xsNPLRoQGTCNgyZquMSxGTM73820159 = xsNPLRoQGTCNgyZquMSxGTM88681177;     xsNPLRoQGTCNgyZquMSxGTM88681177 = xsNPLRoQGTCNgyZquMSxGTM94527189;     xsNPLRoQGTCNgyZquMSxGTM94527189 = xsNPLRoQGTCNgyZquMSxGTM54585045;     xsNPLRoQGTCNgyZquMSxGTM54585045 = xsNPLRoQGTCNgyZquMSxGTM36958707;     xsNPLRoQGTCNgyZquMSxGTM36958707 = xsNPLRoQGTCNgyZquMSxGTM48038870;     xsNPLRoQGTCNgyZquMSxGTM48038870 = xsNPLRoQGTCNgyZquMSxGTM34960581;     xsNPLRoQGTCNgyZquMSxGTM34960581 = xsNPLRoQGTCNgyZquMSxGTM93605414;     xsNPLRoQGTCNgyZquMSxGTM93605414 = xsNPLRoQGTCNgyZquMSxGTM867717;     xsNPLRoQGTCNgyZquMSxGTM867717 = xsNPLRoQGTCNgyZquMSxGTM14799020;     xsNPLRoQGTCNgyZquMSxGTM14799020 = xsNPLRoQGTCNgyZquMSxGTM22343521;     xsNPLRoQGTCNgyZquMSxGTM22343521 = xsNPLRoQGTCNgyZquMSxGTM10178971;     xsNPLRoQGTCNgyZquMSxGTM10178971 = xsNPLRoQGTCNgyZquMSxGTM80065669;     xsNPLRoQGTCNgyZquMSxGTM80065669 = xsNPLRoQGTCNgyZquMSxGTM64640201;     xsNPLRoQGTCNgyZquMSxGTM64640201 = xsNPLRoQGTCNgyZquMSxGTM16075863;     xsNPLRoQGTCNgyZquMSxGTM16075863 = xsNPLRoQGTCNgyZquMSxGTM78010938;     xsNPLRoQGTCNgyZquMSxGTM78010938 = xsNPLRoQGTCNgyZquMSxGTM79443676;     xsNPLRoQGTCNgyZquMSxGTM79443676 = xsNPLRoQGTCNgyZquMSxGTM56271402;     xsNPLRoQGTCNgyZquMSxGTM56271402 = xsNPLRoQGTCNgyZquMSxGTM14774426;     xsNPLRoQGTCNgyZquMSxGTM14774426 = xsNPLRoQGTCNgyZquMSxGTM92651075;     xsNPLRoQGTCNgyZquMSxGTM92651075 = xsNPLRoQGTCNgyZquMSxGTM18201425;     xsNPLRoQGTCNgyZquMSxGTM18201425 = xsNPLRoQGTCNgyZquMSxGTM4385241;     xsNPLRoQGTCNgyZquMSxGTM4385241 = xsNPLRoQGTCNgyZquMSxGTM20941636;     xsNPLRoQGTCNgyZquMSxGTM20941636 = xsNPLRoQGTCNgyZquMSxGTM21171943;     xsNPLRoQGTCNgyZquMSxGTM21171943 = xsNPLRoQGTCNgyZquMSxGTM26809083;     xsNPLRoQGTCNgyZquMSxGTM26809083 = xsNPLRoQGTCNgyZquMSxGTM93853740;     xsNPLRoQGTCNgyZquMSxGTM93853740 = xsNPLRoQGTCNgyZquMSxGTM21245965;     xsNPLRoQGTCNgyZquMSxGTM21245965 = xsNPLRoQGTCNgyZquMSxGTM37276865;     xsNPLRoQGTCNgyZquMSxGTM37276865 = xsNPLRoQGTCNgyZquMSxGTM50801513;     xsNPLRoQGTCNgyZquMSxGTM50801513 = xsNPLRoQGTCNgyZquMSxGTM93321854;     xsNPLRoQGTCNgyZquMSxGTM93321854 = xsNPLRoQGTCNgyZquMSxGTM76808925;     xsNPLRoQGTCNgyZquMSxGTM76808925 = xsNPLRoQGTCNgyZquMSxGTM2945847;     xsNPLRoQGTCNgyZquMSxGTM2945847 = xsNPLRoQGTCNgyZquMSxGTM27294069;     xsNPLRoQGTCNgyZquMSxGTM27294069 = xsNPLRoQGTCNgyZquMSxGTM71357963;     xsNPLRoQGTCNgyZquMSxGTM71357963 = xsNPLRoQGTCNgyZquMSxGTM13986815;     xsNPLRoQGTCNgyZquMSxGTM13986815 = xsNPLRoQGTCNgyZquMSxGTM18406069;     xsNPLRoQGTCNgyZquMSxGTM18406069 = xsNPLRoQGTCNgyZquMSxGTM55332467;     xsNPLRoQGTCNgyZquMSxGTM55332467 = xsNPLRoQGTCNgyZquMSxGTM16924161;     xsNPLRoQGTCNgyZquMSxGTM16924161 = xsNPLRoQGTCNgyZquMSxGTM65957019;     xsNPLRoQGTCNgyZquMSxGTM65957019 = xsNPLRoQGTCNgyZquMSxGTM16188676;     xsNPLRoQGTCNgyZquMSxGTM16188676 = xsNPLRoQGTCNgyZquMSxGTM21428005;     xsNPLRoQGTCNgyZquMSxGTM21428005 = xsNPLRoQGTCNgyZquMSxGTM86587132;     xsNPLRoQGTCNgyZquMSxGTM86587132 = xsNPLRoQGTCNgyZquMSxGTM3232908;     xsNPLRoQGTCNgyZquMSxGTM3232908 = xsNPLRoQGTCNgyZquMSxGTM86801863;     xsNPLRoQGTCNgyZquMSxGTM86801863 = xsNPLRoQGTCNgyZquMSxGTM2198848;     xsNPLRoQGTCNgyZquMSxGTM2198848 = xsNPLRoQGTCNgyZquMSxGTM61784044;     xsNPLRoQGTCNgyZquMSxGTM61784044 = xsNPLRoQGTCNgyZquMSxGTM76949278;     xsNPLRoQGTCNgyZquMSxGTM76949278 = xsNPLRoQGTCNgyZquMSxGTM82050628;     xsNPLRoQGTCNgyZquMSxGTM82050628 = xsNPLRoQGTCNgyZquMSxGTM86140071;     xsNPLRoQGTCNgyZquMSxGTM86140071 = xsNPLRoQGTCNgyZquMSxGTM10792450;     xsNPLRoQGTCNgyZquMSxGTM10792450 = xsNPLRoQGTCNgyZquMSxGTM5211669;     xsNPLRoQGTCNgyZquMSxGTM5211669 = xsNPLRoQGTCNgyZquMSxGTM52545173;     xsNPLRoQGTCNgyZquMSxGTM52545173 = xsNPLRoQGTCNgyZquMSxGTM54804276;     xsNPLRoQGTCNgyZquMSxGTM54804276 = xsNPLRoQGTCNgyZquMSxGTM80555661;     xsNPLRoQGTCNgyZquMSxGTM80555661 = xsNPLRoQGTCNgyZquMSxGTM79219982;     xsNPLRoQGTCNgyZquMSxGTM79219982 = xsNPLRoQGTCNgyZquMSxGTM69434918;     xsNPLRoQGTCNgyZquMSxGTM69434918 = xsNPLRoQGTCNgyZquMSxGTM67739541;     xsNPLRoQGTCNgyZquMSxGTM67739541 = xsNPLRoQGTCNgyZquMSxGTM73355247;     xsNPLRoQGTCNgyZquMSxGTM73355247 = xsNPLRoQGTCNgyZquMSxGTM27775963;     xsNPLRoQGTCNgyZquMSxGTM27775963 = xsNPLRoQGTCNgyZquMSxGTM43104967;     xsNPLRoQGTCNgyZquMSxGTM43104967 = xsNPLRoQGTCNgyZquMSxGTM26792906;     xsNPLRoQGTCNgyZquMSxGTM26792906 = xsNPLRoQGTCNgyZquMSxGTM97683716;     xsNPLRoQGTCNgyZquMSxGTM97683716 = xsNPLRoQGTCNgyZquMSxGTM42803902;     xsNPLRoQGTCNgyZquMSxGTM42803902 = xsNPLRoQGTCNgyZquMSxGTM7545862;     xsNPLRoQGTCNgyZquMSxGTM7545862 = xsNPLRoQGTCNgyZquMSxGTM37990094;     xsNPLRoQGTCNgyZquMSxGTM37990094 = xsNPLRoQGTCNgyZquMSxGTM19397674;     xsNPLRoQGTCNgyZquMSxGTM19397674 = xsNPLRoQGTCNgyZquMSxGTM82884902;     xsNPLRoQGTCNgyZquMSxGTM82884902 = xsNPLRoQGTCNgyZquMSxGTM8707706;     xsNPLRoQGTCNgyZquMSxGTM8707706 = xsNPLRoQGTCNgyZquMSxGTM50653386;     xsNPLRoQGTCNgyZquMSxGTM50653386 = xsNPLRoQGTCNgyZquMSxGTM97669793;     xsNPLRoQGTCNgyZquMSxGTM97669793 = xsNPLRoQGTCNgyZquMSxGTM22678472;     xsNPLRoQGTCNgyZquMSxGTM22678472 = xsNPLRoQGTCNgyZquMSxGTM62519515;     xsNPLRoQGTCNgyZquMSxGTM62519515 = xsNPLRoQGTCNgyZquMSxGTM90314383;     xsNPLRoQGTCNgyZquMSxGTM90314383 = xsNPLRoQGTCNgyZquMSxGTM98585749;     xsNPLRoQGTCNgyZquMSxGTM98585749 = xsNPLRoQGTCNgyZquMSxGTM71223071;     xsNPLRoQGTCNgyZquMSxGTM71223071 = xsNPLRoQGTCNgyZquMSxGTM31614293;     xsNPLRoQGTCNgyZquMSxGTM31614293 = xsNPLRoQGTCNgyZquMSxGTM1152334;     xsNPLRoQGTCNgyZquMSxGTM1152334 = xsNPLRoQGTCNgyZquMSxGTM500805;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void JwdEVHdHbHuEPIvKzbhObpKQClTBaatSVhlrUczER2510779() {     float FrKVvinGiGGEdXUmNCknchA22894394 = -386342329;    float FrKVvinGiGGEdXUmNCknchA14554555 = -697243889;    float FrKVvinGiGGEdXUmNCknchA15263041 = -567249804;    float FrKVvinGiGGEdXUmNCknchA37014074 = -999917612;    float FrKVvinGiGGEdXUmNCknchA39193809 = -691552981;    float FrKVvinGiGGEdXUmNCknchA51586891 = -598670845;    float FrKVvinGiGGEdXUmNCknchA26524130 = -677351148;    float FrKVvinGiGGEdXUmNCknchA70647354 = -797207281;    float FrKVvinGiGGEdXUmNCknchA70811552 = -903648697;    float FrKVvinGiGGEdXUmNCknchA75316618 = -576377187;    float FrKVvinGiGGEdXUmNCknchA21321879 = -523029841;    float FrKVvinGiGGEdXUmNCknchA43212155 = -501749132;    float FrKVvinGiGGEdXUmNCknchA59697635 = -6987989;    float FrKVvinGiGGEdXUmNCknchA60733547 = -625223900;    float FrKVvinGiGGEdXUmNCknchA48578116 = -863015448;    float FrKVvinGiGGEdXUmNCknchA16382195 = -68241707;    float FrKVvinGiGGEdXUmNCknchA96186526 = -106292674;    float FrKVvinGiGGEdXUmNCknchA71779271 = -71317593;    float FrKVvinGiGGEdXUmNCknchA5508706 = -255932691;    float FrKVvinGiGGEdXUmNCknchA15259096 = -158994472;    float FrKVvinGiGGEdXUmNCknchA90792384 = -228463431;    float FrKVvinGiGGEdXUmNCknchA58725688 = -457844963;    float FrKVvinGiGGEdXUmNCknchA63836333 = -906309830;    float FrKVvinGiGGEdXUmNCknchA56669838 = -815181773;    float FrKVvinGiGGEdXUmNCknchA95778734 = -544207979;    float FrKVvinGiGGEdXUmNCknchA66256107 = -90318633;    float FrKVvinGiGGEdXUmNCknchA31452884 = -583613719;    float FrKVvinGiGGEdXUmNCknchA7466633 = -310233704;    float FrKVvinGiGGEdXUmNCknchA42252984 = -228573115;    float FrKVvinGiGGEdXUmNCknchA68027890 = -560325803;    float FrKVvinGiGGEdXUmNCknchA4483542 = -75819120;    float FrKVvinGiGGEdXUmNCknchA73685050 = -57591103;    float FrKVvinGiGGEdXUmNCknchA10385267 = -803736697;    float FrKVvinGiGGEdXUmNCknchA81449370 = -696336679;    float FrKVvinGiGGEdXUmNCknchA4050298 = -434845038;    float FrKVvinGiGGEdXUmNCknchA78930349 = -637425952;    float FrKVvinGiGGEdXUmNCknchA46138546 = 56965586;    float FrKVvinGiGGEdXUmNCknchA99784283 = -584157251;    float FrKVvinGiGGEdXUmNCknchA91005472 = -824791355;    float FrKVvinGiGGEdXUmNCknchA27756498 = 85223813;    float FrKVvinGiGGEdXUmNCknchA97173105 = -284490534;    float FrKVvinGiGGEdXUmNCknchA17585156 = -350324177;    float FrKVvinGiGGEdXUmNCknchA37917907 = -177410569;    float FrKVvinGiGGEdXUmNCknchA58413646 = -656582075;    float FrKVvinGiGGEdXUmNCknchA88350455 = 61727357;    float FrKVvinGiGGEdXUmNCknchA88613949 = -87917458;    float FrKVvinGiGGEdXUmNCknchA5771548 = 69986763;    float FrKVvinGiGGEdXUmNCknchA96024176 = -730737716;    float FrKVvinGiGGEdXUmNCknchA69655256 = -938239066;    float FrKVvinGiGGEdXUmNCknchA98284287 = -747910894;    float FrKVvinGiGGEdXUmNCknchA32886711 = 65564369;    float FrKVvinGiGGEdXUmNCknchA10105513 = -947583767;    float FrKVvinGiGGEdXUmNCknchA96187909 = -257590612;    float FrKVvinGiGGEdXUmNCknchA26845200 = -877619271;    float FrKVvinGiGGEdXUmNCknchA11718394 = -223686676;    float FrKVvinGiGGEdXUmNCknchA64168705 = -928497366;    float FrKVvinGiGGEdXUmNCknchA50718221 = -790934060;    float FrKVvinGiGGEdXUmNCknchA58593202 = -752068031;    float FrKVvinGiGGEdXUmNCknchA41235340 = -355709634;    float FrKVvinGiGGEdXUmNCknchA72937701 = -501234349;    float FrKVvinGiGGEdXUmNCknchA20134007 = 84942873;    float FrKVvinGiGGEdXUmNCknchA19057497 = -267117445;    float FrKVvinGiGGEdXUmNCknchA28394370 = -468634167;    float FrKVvinGiGGEdXUmNCknchA2783662 = -243322895;    float FrKVvinGiGGEdXUmNCknchA70833077 = -400558067;    float FrKVvinGiGGEdXUmNCknchA47636828 = -365438739;    float FrKVvinGiGGEdXUmNCknchA32826889 = -698012436;    float FrKVvinGiGGEdXUmNCknchA78248264 = -310651311;    float FrKVvinGiGGEdXUmNCknchA56683249 = -90378863;    float FrKVvinGiGGEdXUmNCknchA69647766 = -125589497;    float FrKVvinGiGGEdXUmNCknchA70243649 = -25207294;    float FrKVvinGiGGEdXUmNCknchA96402242 = -522135423;    float FrKVvinGiGGEdXUmNCknchA80773798 = -246526238;    float FrKVvinGiGGEdXUmNCknchA77752207 = -241156505;    float FrKVvinGiGGEdXUmNCknchA18085991 = -874503939;    float FrKVvinGiGGEdXUmNCknchA73207229 = -878139255;    float FrKVvinGiGGEdXUmNCknchA20807782 = -180434395;    float FrKVvinGiGGEdXUmNCknchA5422688 = -149727755;    float FrKVvinGiGGEdXUmNCknchA68319383 = -776909130;    float FrKVvinGiGGEdXUmNCknchA7164785 = -356290522;    float FrKVvinGiGGEdXUmNCknchA60484560 = -60305397;    float FrKVvinGiGGEdXUmNCknchA35428708 = -852876003;    float FrKVvinGiGGEdXUmNCknchA37811376 = -371994638;    float FrKVvinGiGGEdXUmNCknchA43968697 = -480662221;    float FrKVvinGiGGEdXUmNCknchA35141179 = -525890172;    float FrKVvinGiGGEdXUmNCknchA94378029 = -128235353;    float FrKVvinGiGGEdXUmNCknchA77497140 = -800000491;    float FrKVvinGiGGEdXUmNCknchA83540066 = -926117426;    float FrKVvinGiGGEdXUmNCknchA69730976 = -372650004;    float FrKVvinGiGGEdXUmNCknchA39881593 = -506347673;    float FrKVvinGiGGEdXUmNCknchA28212128 = -846491892;    float FrKVvinGiGGEdXUmNCknchA87545343 = -190966383;    float FrKVvinGiGGEdXUmNCknchA58548944 = -128447618;    float FrKVvinGiGGEdXUmNCknchA18067772 = -223557007;    float FrKVvinGiGGEdXUmNCknchA7622491 = -999719061;    float FrKVvinGiGGEdXUmNCknchA78115608 = 82626910;    float FrKVvinGiGGEdXUmNCknchA89190785 = -881690011;    float FrKVvinGiGGEdXUmNCknchA35134245 = -934087674;    float FrKVvinGiGGEdXUmNCknchA87580569 = -156024008;    float FrKVvinGiGGEdXUmNCknchA40713627 = -386342329;     FrKVvinGiGGEdXUmNCknchA22894394 = FrKVvinGiGGEdXUmNCknchA14554555;     FrKVvinGiGGEdXUmNCknchA14554555 = FrKVvinGiGGEdXUmNCknchA15263041;     FrKVvinGiGGEdXUmNCknchA15263041 = FrKVvinGiGGEdXUmNCknchA37014074;     FrKVvinGiGGEdXUmNCknchA37014074 = FrKVvinGiGGEdXUmNCknchA39193809;     FrKVvinGiGGEdXUmNCknchA39193809 = FrKVvinGiGGEdXUmNCknchA51586891;     FrKVvinGiGGEdXUmNCknchA51586891 = FrKVvinGiGGEdXUmNCknchA26524130;     FrKVvinGiGGEdXUmNCknchA26524130 = FrKVvinGiGGEdXUmNCknchA70647354;     FrKVvinGiGGEdXUmNCknchA70647354 = FrKVvinGiGGEdXUmNCknchA70811552;     FrKVvinGiGGEdXUmNCknchA70811552 = FrKVvinGiGGEdXUmNCknchA75316618;     FrKVvinGiGGEdXUmNCknchA75316618 = FrKVvinGiGGEdXUmNCknchA21321879;     FrKVvinGiGGEdXUmNCknchA21321879 = FrKVvinGiGGEdXUmNCknchA43212155;     FrKVvinGiGGEdXUmNCknchA43212155 = FrKVvinGiGGEdXUmNCknchA59697635;     FrKVvinGiGGEdXUmNCknchA59697635 = FrKVvinGiGGEdXUmNCknchA60733547;     FrKVvinGiGGEdXUmNCknchA60733547 = FrKVvinGiGGEdXUmNCknchA48578116;     FrKVvinGiGGEdXUmNCknchA48578116 = FrKVvinGiGGEdXUmNCknchA16382195;     FrKVvinGiGGEdXUmNCknchA16382195 = FrKVvinGiGGEdXUmNCknchA96186526;     FrKVvinGiGGEdXUmNCknchA96186526 = FrKVvinGiGGEdXUmNCknchA71779271;     FrKVvinGiGGEdXUmNCknchA71779271 = FrKVvinGiGGEdXUmNCknchA5508706;     FrKVvinGiGGEdXUmNCknchA5508706 = FrKVvinGiGGEdXUmNCknchA15259096;     FrKVvinGiGGEdXUmNCknchA15259096 = FrKVvinGiGGEdXUmNCknchA90792384;     FrKVvinGiGGEdXUmNCknchA90792384 = FrKVvinGiGGEdXUmNCknchA58725688;     FrKVvinGiGGEdXUmNCknchA58725688 = FrKVvinGiGGEdXUmNCknchA63836333;     FrKVvinGiGGEdXUmNCknchA63836333 = FrKVvinGiGGEdXUmNCknchA56669838;     FrKVvinGiGGEdXUmNCknchA56669838 = FrKVvinGiGGEdXUmNCknchA95778734;     FrKVvinGiGGEdXUmNCknchA95778734 = FrKVvinGiGGEdXUmNCknchA66256107;     FrKVvinGiGGEdXUmNCknchA66256107 = FrKVvinGiGGEdXUmNCknchA31452884;     FrKVvinGiGGEdXUmNCknchA31452884 = FrKVvinGiGGEdXUmNCknchA7466633;     FrKVvinGiGGEdXUmNCknchA7466633 = FrKVvinGiGGEdXUmNCknchA42252984;     FrKVvinGiGGEdXUmNCknchA42252984 = FrKVvinGiGGEdXUmNCknchA68027890;     FrKVvinGiGGEdXUmNCknchA68027890 = FrKVvinGiGGEdXUmNCknchA4483542;     FrKVvinGiGGEdXUmNCknchA4483542 = FrKVvinGiGGEdXUmNCknchA73685050;     FrKVvinGiGGEdXUmNCknchA73685050 = FrKVvinGiGGEdXUmNCknchA10385267;     FrKVvinGiGGEdXUmNCknchA10385267 = FrKVvinGiGGEdXUmNCknchA81449370;     FrKVvinGiGGEdXUmNCknchA81449370 = FrKVvinGiGGEdXUmNCknchA4050298;     FrKVvinGiGGEdXUmNCknchA4050298 = FrKVvinGiGGEdXUmNCknchA78930349;     FrKVvinGiGGEdXUmNCknchA78930349 = FrKVvinGiGGEdXUmNCknchA46138546;     FrKVvinGiGGEdXUmNCknchA46138546 = FrKVvinGiGGEdXUmNCknchA99784283;     FrKVvinGiGGEdXUmNCknchA99784283 = FrKVvinGiGGEdXUmNCknchA91005472;     FrKVvinGiGGEdXUmNCknchA91005472 = FrKVvinGiGGEdXUmNCknchA27756498;     FrKVvinGiGGEdXUmNCknchA27756498 = FrKVvinGiGGEdXUmNCknchA97173105;     FrKVvinGiGGEdXUmNCknchA97173105 = FrKVvinGiGGEdXUmNCknchA17585156;     FrKVvinGiGGEdXUmNCknchA17585156 = FrKVvinGiGGEdXUmNCknchA37917907;     FrKVvinGiGGEdXUmNCknchA37917907 = FrKVvinGiGGEdXUmNCknchA58413646;     FrKVvinGiGGEdXUmNCknchA58413646 = FrKVvinGiGGEdXUmNCknchA88350455;     FrKVvinGiGGEdXUmNCknchA88350455 = FrKVvinGiGGEdXUmNCknchA88613949;     FrKVvinGiGGEdXUmNCknchA88613949 = FrKVvinGiGGEdXUmNCknchA5771548;     FrKVvinGiGGEdXUmNCknchA5771548 = FrKVvinGiGGEdXUmNCknchA96024176;     FrKVvinGiGGEdXUmNCknchA96024176 = FrKVvinGiGGEdXUmNCknchA69655256;     FrKVvinGiGGEdXUmNCknchA69655256 = FrKVvinGiGGEdXUmNCknchA98284287;     FrKVvinGiGGEdXUmNCknchA98284287 = FrKVvinGiGGEdXUmNCknchA32886711;     FrKVvinGiGGEdXUmNCknchA32886711 = FrKVvinGiGGEdXUmNCknchA10105513;     FrKVvinGiGGEdXUmNCknchA10105513 = FrKVvinGiGGEdXUmNCknchA96187909;     FrKVvinGiGGEdXUmNCknchA96187909 = FrKVvinGiGGEdXUmNCknchA26845200;     FrKVvinGiGGEdXUmNCknchA26845200 = FrKVvinGiGGEdXUmNCknchA11718394;     FrKVvinGiGGEdXUmNCknchA11718394 = FrKVvinGiGGEdXUmNCknchA64168705;     FrKVvinGiGGEdXUmNCknchA64168705 = FrKVvinGiGGEdXUmNCknchA50718221;     FrKVvinGiGGEdXUmNCknchA50718221 = FrKVvinGiGGEdXUmNCknchA58593202;     FrKVvinGiGGEdXUmNCknchA58593202 = FrKVvinGiGGEdXUmNCknchA41235340;     FrKVvinGiGGEdXUmNCknchA41235340 = FrKVvinGiGGEdXUmNCknchA72937701;     FrKVvinGiGGEdXUmNCknchA72937701 = FrKVvinGiGGEdXUmNCknchA20134007;     FrKVvinGiGGEdXUmNCknchA20134007 = FrKVvinGiGGEdXUmNCknchA19057497;     FrKVvinGiGGEdXUmNCknchA19057497 = FrKVvinGiGGEdXUmNCknchA28394370;     FrKVvinGiGGEdXUmNCknchA28394370 = FrKVvinGiGGEdXUmNCknchA2783662;     FrKVvinGiGGEdXUmNCknchA2783662 = FrKVvinGiGGEdXUmNCknchA70833077;     FrKVvinGiGGEdXUmNCknchA70833077 = FrKVvinGiGGEdXUmNCknchA47636828;     FrKVvinGiGGEdXUmNCknchA47636828 = FrKVvinGiGGEdXUmNCknchA32826889;     FrKVvinGiGGEdXUmNCknchA32826889 = FrKVvinGiGGEdXUmNCknchA78248264;     FrKVvinGiGGEdXUmNCknchA78248264 = FrKVvinGiGGEdXUmNCknchA56683249;     FrKVvinGiGGEdXUmNCknchA56683249 = FrKVvinGiGGEdXUmNCknchA69647766;     FrKVvinGiGGEdXUmNCknchA69647766 = FrKVvinGiGGEdXUmNCknchA70243649;     FrKVvinGiGGEdXUmNCknchA70243649 = FrKVvinGiGGEdXUmNCknchA96402242;     FrKVvinGiGGEdXUmNCknchA96402242 = FrKVvinGiGGEdXUmNCknchA80773798;     FrKVvinGiGGEdXUmNCknchA80773798 = FrKVvinGiGGEdXUmNCknchA77752207;     FrKVvinGiGGEdXUmNCknchA77752207 = FrKVvinGiGGEdXUmNCknchA18085991;     FrKVvinGiGGEdXUmNCknchA18085991 = FrKVvinGiGGEdXUmNCknchA73207229;     FrKVvinGiGGEdXUmNCknchA73207229 = FrKVvinGiGGEdXUmNCknchA20807782;     FrKVvinGiGGEdXUmNCknchA20807782 = FrKVvinGiGGEdXUmNCknchA5422688;     FrKVvinGiGGEdXUmNCknchA5422688 = FrKVvinGiGGEdXUmNCknchA68319383;     FrKVvinGiGGEdXUmNCknchA68319383 = FrKVvinGiGGEdXUmNCknchA7164785;     FrKVvinGiGGEdXUmNCknchA7164785 = FrKVvinGiGGEdXUmNCknchA60484560;     FrKVvinGiGGEdXUmNCknchA60484560 = FrKVvinGiGGEdXUmNCknchA35428708;     FrKVvinGiGGEdXUmNCknchA35428708 = FrKVvinGiGGEdXUmNCknchA37811376;     FrKVvinGiGGEdXUmNCknchA37811376 = FrKVvinGiGGEdXUmNCknchA43968697;     FrKVvinGiGGEdXUmNCknchA43968697 = FrKVvinGiGGEdXUmNCknchA35141179;     FrKVvinGiGGEdXUmNCknchA35141179 = FrKVvinGiGGEdXUmNCknchA94378029;     FrKVvinGiGGEdXUmNCknchA94378029 = FrKVvinGiGGEdXUmNCknchA77497140;     FrKVvinGiGGEdXUmNCknchA77497140 = FrKVvinGiGGEdXUmNCknchA83540066;     FrKVvinGiGGEdXUmNCknchA83540066 = FrKVvinGiGGEdXUmNCknchA69730976;     FrKVvinGiGGEdXUmNCknchA69730976 = FrKVvinGiGGEdXUmNCknchA39881593;     FrKVvinGiGGEdXUmNCknchA39881593 = FrKVvinGiGGEdXUmNCknchA28212128;     FrKVvinGiGGEdXUmNCknchA28212128 = FrKVvinGiGGEdXUmNCknchA87545343;     FrKVvinGiGGEdXUmNCknchA87545343 = FrKVvinGiGGEdXUmNCknchA58548944;     FrKVvinGiGGEdXUmNCknchA58548944 = FrKVvinGiGGEdXUmNCknchA18067772;     FrKVvinGiGGEdXUmNCknchA18067772 = FrKVvinGiGGEdXUmNCknchA7622491;     FrKVvinGiGGEdXUmNCknchA7622491 = FrKVvinGiGGEdXUmNCknchA78115608;     FrKVvinGiGGEdXUmNCknchA78115608 = FrKVvinGiGGEdXUmNCknchA89190785;     FrKVvinGiGGEdXUmNCknchA89190785 = FrKVvinGiGGEdXUmNCknchA35134245;     FrKVvinGiGGEdXUmNCknchA35134245 = FrKVvinGiGGEdXUmNCknchA87580569;     FrKVvinGiGGEdXUmNCknchA87580569 = FrKVvinGiGGEdXUmNCknchA40713627;     FrKVvinGiGGEdXUmNCknchA40713627 = FrKVvinGiGGEdXUmNCknchA22894394;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void GkIpotTjIsosQSwKNaMXAKpciCETzhBYWUiJovOxa84739540() {     float ecMotyfQkmlyaTvvgHlpzka74629844 = -502597161;    float ecMotyfQkmlyaTvvgHlpzka30228538 = -774143645;    float ecMotyfQkmlyaTvvgHlpzka64063400 = -364609188;    float ecMotyfQkmlyaTvvgHlpzka12089476 = -816186755;    float ecMotyfQkmlyaTvvgHlpzka15917742 = -399203635;    float ecMotyfQkmlyaTvvgHlpzka76470245 = -757698071;    float ecMotyfQkmlyaTvvgHlpzka300973 = -500562745;    float ecMotyfQkmlyaTvvgHlpzka89438832 = -920986835;    float ecMotyfQkmlyaTvvgHlpzka22109629 = -694497408;    float ecMotyfQkmlyaTvvgHlpzka44113742 = -18023169;    float ecMotyfQkmlyaTvvgHlpzka16614577 = -484752313;    float ecMotyfQkmlyaTvvgHlpzka53568533 = -436730633;    float ecMotyfQkmlyaTvvgHlpzka46878428 = -716168251;    float ecMotyfQkmlyaTvvgHlpzka19501266 = -251904447;    float ecMotyfQkmlyaTvvgHlpzka2593374 = -340743158;    float ecMotyfQkmlyaTvvgHlpzka28109467 = -879925663;    float ecMotyfQkmlyaTvvgHlpzka52157051 = -474387364;    float ecMotyfQkmlyaTvvgHlpzka57462193 = -533894088;    float ecMotyfQkmlyaTvvgHlpzka65082555 = -783846874;    float ecMotyfQkmlyaTvvgHlpzka34988670 = -969262621;    float ecMotyfQkmlyaTvvgHlpzka36539738 = -311271599;    float ecMotyfQkmlyaTvvgHlpzka61145142 = -631325971;    float ecMotyfQkmlyaTvvgHlpzka65185848 = -514547277;    float ecMotyfQkmlyaTvvgHlpzka49320089 = -686773724;    float ecMotyfQkmlyaTvvgHlpzka67194593 = -489862416;    float ecMotyfQkmlyaTvvgHlpzka23961522 = -435928412;    float ecMotyfQkmlyaTvvgHlpzka70281518 = 53977564;    float ecMotyfQkmlyaTvvgHlpzka5595858 = -693564390;    float ecMotyfQkmlyaTvvgHlpzka17003058 = -278472017;    float ecMotyfQkmlyaTvvgHlpzka38012974 = 77773401;    float ecMotyfQkmlyaTvvgHlpzka41702350 = -408701586;    float ecMotyfQkmlyaTvvgHlpzka86714780 = -381365294;    float ecMotyfQkmlyaTvvgHlpzka8478577 = -286118583;    float ecMotyfQkmlyaTvvgHlpzka75473082 = -356933845;    float ecMotyfQkmlyaTvvgHlpzka2255426 = -651654681;    float ecMotyfQkmlyaTvvgHlpzka60629959 = -873594780;    float ecMotyfQkmlyaTvvgHlpzka95786771 = -587389158;    float ecMotyfQkmlyaTvvgHlpzka617896 = -667669616;    float ecMotyfQkmlyaTvvgHlpzka60780315 = -170108750;    float ecMotyfQkmlyaTvvgHlpzka52838914 = -533391853;    float ecMotyfQkmlyaTvvgHlpzka65857192 = -403649321;    float ecMotyfQkmlyaTvvgHlpzka77610556 = -338843798;    float ecMotyfQkmlyaTvvgHlpzka94501139 = -78187101;    float ecMotyfQkmlyaTvvgHlpzka51349465 = -581970753;    float ecMotyfQkmlyaTvvgHlpzka60379663 = -538769727;    float ecMotyfQkmlyaTvvgHlpzka90308396 = -511809398;    float ecMotyfQkmlyaTvvgHlpzka91937741 = -392353690;    float ecMotyfQkmlyaTvvgHlpzka75008641 = -35142411;    float ecMotyfQkmlyaTvvgHlpzka58673709 = -902191796;    float ecMotyfQkmlyaTvvgHlpzka86940546 = -606922274;    float ecMotyfQkmlyaTvvgHlpzka73566603 = -742939787;    float ecMotyfQkmlyaTvvgHlpzka42085265 = -309183328;    float ecMotyfQkmlyaTvvgHlpzka19426656 = -1703800;    float ecMotyfQkmlyaTvvgHlpzka96904440 = -492418583;    float ecMotyfQkmlyaTvvgHlpzka48199803 = -253449877;    float ecMotyfQkmlyaTvvgHlpzka13484702 = -871271191;    float ecMotyfQkmlyaTvvgHlpzka65042689 = -159596368;    float ecMotyfQkmlyaTvvgHlpzka14743312 = -677835464;    float ecMotyfQkmlyaTvvgHlpzka44894883 = -226324339;    float ecMotyfQkmlyaTvvgHlpzka91956219 = -963275224;    float ecMotyfQkmlyaTvvgHlpzka6188727 = -711675636;    float ecMotyfQkmlyaTvvgHlpzka94705115 = -806998355;    float ecMotyfQkmlyaTvvgHlpzka72435775 = -542514819;    float ecMotyfQkmlyaTvvgHlpzka84096654 = -672270810;    float ecMotyfQkmlyaTvvgHlpzka2411393 = -609321583;    float ecMotyfQkmlyaTvvgHlpzka29899797 = -3387019;    float ecMotyfQkmlyaTvvgHlpzka45089957 = -50612051;    float ecMotyfQkmlyaTvvgHlpzka71405345 = -259234406;    float ecMotyfQkmlyaTvvgHlpzka17245840 = -600249766;    float ecMotyfQkmlyaTvvgHlpzka41963414 = -467148378;    float ecMotyfQkmlyaTvvgHlpzka32322696 = -192536506;    float ecMotyfQkmlyaTvvgHlpzka51539155 = -806717748;    float ecMotyfQkmlyaTvvgHlpzka96681878 = -263785338;    float ecMotyfQkmlyaTvvgHlpzka12243641 = -150455021;    float ecMotyfQkmlyaTvvgHlpzka69131477 = -465613300;    float ecMotyfQkmlyaTvvgHlpzka58929182 = -972427802;    float ecMotyfQkmlyaTvvgHlpzka66644003 = -453138871;    float ecMotyfQkmlyaTvvgHlpzka13836384 = -932576525;    float ecMotyfQkmlyaTvvgHlpzka88940425 = -48003998;    float ecMotyfQkmlyaTvvgHlpzka76886196 = -978053018;    float ecMotyfQkmlyaTvvgHlpzka32023780 = 56425278;    float ecMotyfQkmlyaTvvgHlpzka95272877 = -910880025;    float ecMotyfQkmlyaTvvgHlpzka46922148 = -791372595;    float ecMotyfQkmlyaTvvgHlpzka30062511 = -671549743;    float ecMotyfQkmlyaTvvgHlpzka64446370 = -179286812;    float ecMotyfQkmlyaTvvgHlpzka99617085 = 481741;    float ecMotyfQkmlyaTvvgHlpzka67288124 = -279661495;    float ecMotyfQkmlyaTvvgHlpzka11574136 = -793700000;    float ecMotyfQkmlyaTvvgHlpzka27273280 = -3483968;    float ecMotyfQkmlyaTvvgHlpzka88770723 = -780383491;    float ecMotyfQkmlyaTvvgHlpzka95587270 = -613998413;    float ecMotyfQkmlyaTvvgHlpzka81043460 = -909553694;    float ecMotyfQkmlyaTvvgHlpzka55723013 = -341345277;    float ecMotyfQkmlyaTvvgHlpzka68824095 = -206833527;    float ecMotyfQkmlyaTvvgHlpzka46650188 = -821716218;    float ecMotyfQkmlyaTvvgHlpzka71152077 = -596650967;    float ecMotyfQkmlyaTvvgHlpzka5174781 = -796328980;    float ecMotyfQkmlyaTvvgHlpzka10404485 = -405916291;    float ecMotyfQkmlyaTvvgHlpzka48938073 = -972649170;    float ecMotyfQkmlyaTvvgHlpzka30479866 = -502597161;     ecMotyfQkmlyaTvvgHlpzka74629844 = ecMotyfQkmlyaTvvgHlpzka30228538;     ecMotyfQkmlyaTvvgHlpzka30228538 = ecMotyfQkmlyaTvvgHlpzka64063400;     ecMotyfQkmlyaTvvgHlpzka64063400 = ecMotyfQkmlyaTvvgHlpzka12089476;     ecMotyfQkmlyaTvvgHlpzka12089476 = ecMotyfQkmlyaTvvgHlpzka15917742;     ecMotyfQkmlyaTvvgHlpzka15917742 = ecMotyfQkmlyaTvvgHlpzka76470245;     ecMotyfQkmlyaTvvgHlpzka76470245 = ecMotyfQkmlyaTvvgHlpzka300973;     ecMotyfQkmlyaTvvgHlpzka300973 = ecMotyfQkmlyaTvvgHlpzka89438832;     ecMotyfQkmlyaTvvgHlpzka89438832 = ecMotyfQkmlyaTvvgHlpzka22109629;     ecMotyfQkmlyaTvvgHlpzka22109629 = ecMotyfQkmlyaTvvgHlpzka44113742;     ecMotyfQkmlyaTvvgHlpzka44113742 = ecMotyfQkmlyaTvvgHlpzka16614577;     ecMotyfQkmlyaTvvgHlpzka16614577 = ecMotyfQkmlyaTvvgHlpzka53568533;     ecMotyfQkmlyaTvvgHlpzka53568533 = ecMotyfQkmlyaTvvgHlpzka46878428;     ecMotyfQkmlyaTvvgHlpzka46878428 = ecMotyfQkmlyaTvvgHlpzka19501266;     ecMotyfQkmlyaTvvgHlpzka19501266 = ecMotyfQkmlyaTvvgHlpzka2593374;     ecMotyfQkmlyaTvvgHlpzka2593374 = ecMotyfQkmlyaTvvgHlpzka28109467;     ecMotyfQkmlyaTvvgHlpzka28109467 = ecMotyfQkmlyaTvvgHlpzka52157051;     ecMotyfQkmlyaTvvgHlpzka52157051 = ecMotyfQkmlyaTvvgHlpzka57462193;     ecMotyfQkmlyaTvvgHlpzka57462193 = ecMotyfQkmlyaTvvgHlpzka65082555;     ecMotyfQkmlyaTvvgHlpzka65082555 = ecMotyfQkmlyaTvvgHlpzka34988670;     ecMotyfQkmlyaTvvgHlpzka34988670 = ecMotyfQkmlyaTvvgHlpzka36539738;     ecMotyfQkmlyaTvvgHlpzka36539738 = ecMotyfQkmlyaTvvgHlpzka61145142;     ecMotyfQkmlyaTvvgHlpzka61145142 = ecMotyfQkmlyaTvvgHlpzka65185848;     ecMotyfQkmlyaTvvgHlpzka65185848 = ecMotyfQkmlyaTvvgHlpzka49320089;     ecMotyfQkmlyaTvvgHlpzka49320089 = ecMotyfQkmlyaTvvgHlpzka67194593;     ecMotyfQkmlyaTvvgHlpzka67194593 = ecMotyfQkmlyaTvvgHlpzka23961522;     ecMotyfQkmlyaTvvgHlpzka23961522 = ecMotyfQkmlyaTvvgHlpzka70281518;     ecMotyfQkmlyaTvvgHlpzka70281518 = ecMotyfQkmlyaTvvgHlpzka5595858;     ecMotyfQkmlyaTvvgHlpzka5595858 = ecMotyfQkmlyaTvvgHlpzka17003058;     ecMotyfQkmlyaTvvgHlpzka17003058 = ecMotyfQkmlyaTvvgHlpzka38012974;     ecMotyfQkmlyaTvvgHlpzka38012974 = ecMotyfQkmlyaTvvgHlpzka41702350;     ecMotyfQkmlyaTvvgHlpzka41702350 = ecMotyfQkmlyaTvvgHlpzka86714780;     ecMotyfQkmlyaTvvgHlpzka86714780 = ecMotyfQkmlyaTvvgHlpzka8478577;     ecMotyfQkmlyaTvvgHlpzka8478577 = ecMotyfQkmlyaTvvgHlpzka75473082;     ecMotyfQkmlyaTvvgHlpzka75473082 = ecMotyfQkmlyaTvvgHlpzka2255426;     ecMotyfQkmlyaTvvgHlpzka2255426 = ecMotyfQkmlyaTvvgHlpzka60629959;     ecMotyfQkmlyaTvvgHlpzka60629959 = ecMotyfQkmlyaTvvgHlpzka95786771;     ecMotyfQkmlyaTvvgHlpzka95786771 = ecMotyfQkmlyaTvvgHlpzka617896;     ecMotyfQkmlyaTvvgHlpzka617896 = ecMotyfQkmlyaTvvgHlpzka60780315;     ecMotyfQkmlyaTvvgHlpzka60780315 = ecMotyfQkmlyaTvvgHlpzka52838914;     ecMotyfQkmlyaTvvgHlpzka52838914 = ecMotyfQkmlyaTvvgHlpzka65857192;     ecMotyfQkmlyaTvvgHlpzka65857192 = ecMotyfQkmlyaTvvgHlpzka77610556;     ecMotyfQkmlyaTvvgHlpzka77610556 = ecMotyfQkmlyaTvvgHlpzka94501139;     ecMotyfQkmlyaTvvgHlpzka94501139 = ecMotyfQkmlyaTvvgHlpzka51349465;     ecMotyfQkmlyaTvvgHlpzka51349465 = ecMotyfQkmlyaTvvgHlpzka60379663;     ecMotyfQkmlyaTvvgHlpzka60379663 = ecMotyfQkmlyaTvvgHlpzka90308396;     ecMotyfQkmlyaTvvgHlpzka90308396 = ecMotyfQkmlyaTvvgHlpzka91937741;     ecMotyfQkmlyaTvvgHlpzka91937741 = ecMotyfQkmlyaTvvgHlpzka75008641;     ecMotyfQkmlyaTvvgHlpzka75008641 = ecMotyfQkmlyaTvvgHlpzka58673709;     ecMotyfQkmlyaTvvgHlpzka58673709 = ecMotyfQkmlyaTvvgHlpzka86940546;     ecMotyfQkmlyaTvvgHlpzka86940546 = ecMotyfQkmlyaTvvgHlpzka73566603;     ecMotyfQkmlyaTvvgHlpzka73566603 = ecMotyfQkmlyaTvvgHlpzka42085265;     ecMotyfQkmlyaTvvgHlpzka42085265 = ecMotyfQkmlyaTvvgHlpzka19426656;     ecMotyfQkmlyaTvvgHlpzka19426656 = ecMotyfQkmlyaTvvgHlpzka96904440;     ecMotyfQkmlyaTvvgHlpzka96904440 = ecMotyfQkmlyaTvvgHlpzka48199803;     ecMotyfQkmlyaTvvgHlpzka48199803 = ecMotyfQkmlyaTvvgHlpzka13484702;     ecMotyfQkmlyaTvvgHlpzka13484702 = ecMotyfQkmlyaTvvgHlpzka65042689;     ecMotyfQkmlyaTvvgHlpzka65042689 = ecMotyfQkmlyaTvvgHlpzka14743312;     ecMotyfQkmlyaTvvgHlpzka14743312 = ecMotyfQkmlyaTvvgHlpzka44894883;     ecMotyfQkmlyaTvvgHlpzka44894883 = ecMotyfQkmlyaTvvgHlpzka91956219;     ecMotyfQkmlyaTvvgHlpzka91956219 = ecMotyfQkmlyaTvvgHlpzka6188727;     ecMotyfQkmlyaTvvgHlpzka6188727 = ecMotyfQkmlyaTvvgHlpzka94705115;     ecMotyfQkmlyaTvvgHlpzka94705115 = ecMotyfQkmlyaTvvgHlpzka72435775;     ecMotyfQkmlyaTvvgHlpzka72435775 = ecMotyfQkmlyaTvvgHlpzka84096654;     ecMotyfQkmlyaTvvgHlpzka84096654 = ecMotyfQkmlyaTvvgHlpzka2411393;     ecMotyfQkmlyaTvvgHlpzka2411393 = ecMotyfQkmlyaTvvgHlpzka29899797;     ecMotyfQkmlyaTvvgHlpzka29899797 = ecMotyfQkmlyaTvvgHlpzka45089957;     ecMotyfQkmlyaTvvgHlpzka45089957 = ecMotyfQkmlyaTvvgHlpzka71405345;     ecMotyfQkmlyaTvvgHlpzka71405345 = ecMotyfQkmlyaTvvgHlpzka17245840;     ecMotyfQkmlyaTvvgHlpzka17245840 = ecMotyfQkmlyaTvvgHlpzka41963414;     ecMotyfQkmlyaTvvgHlpzka41963414 = ecMotyfQkmlyaTvvgHlpzka32322696;     ecMotyfQkmlyaTvvgHlpzka32322696 = ecMotyfQkmlyaTvvgHlpzka51539155;     ecMotyfQkmlyaTvvgHlpzka51539155 = ecMotyfQkmlyaTvvgHlpzka96681878;     ecMotyfQkmlyaTvvgHlpzka96681878 = ecMotyfQkmlyaTvvgHlpzka12243641;     ecMotyfQkmlyaTvvgHlpzka12243641 = ecMotyfQkmlyaTvvgHlpzka69131477;     ecMotyfQkmlyaTvvgHlpzka69131477 = ecMotyfQkmlyaTvvgHlpzka58929182;     ecMotyfQkmlyaTvvgHlpzka58929182 = ecMotyfQkmlyaTvvgHlpzka66644003;     ecMotyfQkmlyaTvvgHlpzka66644003 = ecMotyfQkmlyaTvvgHlpzka13836384;     ecMotyfQkmlyaTvvgHlpzka13836384 = ecMotyfQkmlyaTvvgHlpzka88940425;     ecMotyfQkmlyaTvvgHlpzka88940425 = ecMotyfQkmlyaTvvgHlpzka76886196;     ecMotyfQkmlyaTvvgHlpzka76886196 = ecMotyfQkmlyaTvvgHlpzka32023780;     ecMotyfQkmlyaTvvgHlpzka32023780 = ecMotyfQkmlyaTvvgHlpzka95272877;     ecMotyfQkmlyaTvvgHlpzka95272877 = ecMotyfQkmlyaTvvgHlpzka46922148;     ecMotyfQkmlyaTvvgHlpzka46922148 = ecMotyfQkmlyaTvvgHlpzka30062511;     ecMotyfQkmlyaTvvgHlpzka30062511 = ecMotyfQkmlyaTvvgHlpzka64446370;     ecMotyfQkmlyaTvvgHlpzka64446370 = ecMotyfQkmlyaTvvgHlpzka99617085;     ecMotyfQkmlyaTvvgHlpzka99617085 = ecMotyfQkmlyaTvvgHlpzka67288124;     ecMotyfQkmlyaTvvgHlpzka67288124 = ecMotyfQkmlyaTvvgHlpzka11574136;     ecMotyfQkmlyaTvvgHlpzka11574136 = ecMotyfQkmlyaTvvgHlpzka27273280;     ecMotyfQkmlyaTvvgHlpzka27273280 = ecMotyfQkmlyaTvvgHlpzka88770723;     ecMotyfQkmlyaTvvgHlpzka88770723 = ecMotyfQkmlyaTvvgHlpzka95587270;     ecMotyfQkmlyaTvvgHlpzka95587270 = ecMotyfQkmlyaTvvgHlpzka81043460;     ecMotyfQkmlyaTvvgHlpzka81043460 = ecMotyfQkmlyaTvvgHlpzka55723013;     ecMotyfQkmlyaTvvgHlpzka55723013 = ecMotyfQkmlyaTvvgHlpzka68824095;     ecMotyfQkmlyaTvvgHlpzka68824095 = ecMotyfQkmlyaTvvgHlpzka46650188;     ecMotyfQkmlyaTvvgHlpzka46650188 = ecMotyfQkmlyaTvvgHlpzka71152077;     ecMotyfQkmlyaTvvgHlpzka71152077 = ecMotyfQkmlyaTvvgHlpzka5174781;     ecMotyfQkmlyaTvvgHlpzka5174781 = ecMotyfQkmlyaTvvgHlpzka10404485;     ecMotyfQkmlyaTvvgHlpzka10404485 = ecMotyfQkmlyaTvvgHlpzka48938073;     ecMotyfQkmlyaTvvgHlpzka48938073 = ecMotyfQkmlyaTvvgHlpzka30479866;     ecMotyfQkmlyaTvvgHlpzka30479866 = ecMotyfQkmlyaTvvgHlpzka74629844;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void ykUsEWWUEkMoOjtWfZFcWiuhuTCGWbmArNgnNEZMZ14725771() {     float cWHzSZAZNRfHmuQpmykTPyd97023432 = -264476983;    float cWHzSZAZNRfHmuQpmykTPyd76003721 = -680091574;    float cWHzSZAZNRfHmuQpmykTPyd91519467 = -647134419;    float cWHzSZAZNRfHmuQpmykTPyd42016303 = 97946544;    float cWHzSZAZNRfHmuQpmykTPyd5251894 = -521905315;    float cWHzSZAZNRfHmuQpmykTPyd56547930 = -918873637;    float cWHzSZAZNRfHmuQpmykTPyd23909376 = -618013584;    float cWHzSZAZNRfHmuQpmykTPyd95858640 = -587406162;    float cWHzSZAZNRfHmuQpmykTPyd36532596 = -865047377;    float cWHzSZAZNRfHmuQpmykTPyd39237813 = -123957631;    float cWHzSZAZNRfHmuQpmykTPyd33835832 = -521904641;    float cWHzSZAZNRfHmuQpmykTPyd95179804 = -951997563;    float cWHzSZAZNRfHmuQpmykTPyd82033695 = -213227096;    float cWHzSZAZNRfHmuQpmykTPyd8271798 = -434460152;    float cWHzSZAZNRfHmuQpmykTPyd94156541 = -5508019;    float cWHzSZAZNRfHmuQpmykTPyd97800832 = -928797555;    float cWHzSZAZNRfHmuQpmykTPyd46127643 = -932052614;    float cWHzSZAZNRfHmuQpmykTPyd40438077 = -588565157;    float cWHzSZAZNRfHmuQpmykTPyd85935916 = -300966733;    float cWHzSZAZNRfHmuQpmykTPyd41431190 = -609872623;    float cWHzSZAZNRfHmuQpmykTPyd57753420 = -592292534;    float cWHzSZAZNRfHmuQpmykTPyd46664095 = -626100401;    float cWHzSZAZNRfHmuQpmykTPyd31600775 = -231670027;    float cWHzSZAZNRfHmuQpmykTPyd32169768 = -269846059;    float cWHzSZAZNRfHmuQpmykTPyd74292150 = -784727687;    float cWHzSZAZNRfHmuQpmykTPyd95690438 = -971616707;    float cWHzSZAZNRfHmuQpmykTPyd47149357 = -502809216;    float cWHzSZAZNRfHmuQpmykTPyd76103782 = -973051855;    float cWHzSZAZNRfHmuQpmykTPyd11217172 = 23341179;    float cWHzSZAZNRfHmuQpmykTPyd71080283 = -167091092;    float cWHzSZAZNRfHmuQpmykTPyd52580476 = -102924504;    float cWHzSZAZNRfHmuQpmykTPyd59532113 = -641614888;    float cWHzSZAZNRfHmuQpmykTPyd4064824 = -613517861;    float cWHzSZAZNRfHmuQpmykTPyd34578933 = -804378962;    float cWHzSZAZNRfHmuQpmykTPyd96126752 = -456097179;    float cWHzSZAZNRfHmuQpmykTPyd59494639 = -9224410;    float cWHzSZAZNRfHmuQpmykTPyd77285116 = -220683731;    float cWHzSZAZNRfHmuQpmykTPyd84326317 = -540032409;    float cWHzSZAZNRfHmuQpmykTPyd73774850 = -958473366;    float cWHzSZAZNRfHmuQpmykTPyd1151736 = 39815803;    float cWHzSZAZNRfHmuQpmykTPyd6758896 = -818883089;    float cWHzSZAZNRfHmuQpmykTPyd80421286 = 97039593;    float cWHzSZAZNRfHmuQpmykTPyd39767971 = -506587430;    float cWHzSZAZNRfHmuQpmykTPyd91561685 = 77630042;    float cWHzSZAZNRfHmuQpmykTPyd44344877 = -974653803;    float cWHzSZAZNRfHmuQpmykTPyd57980710 = -881993823;    float cWHzSZAZNRfHmuQpmykTPyd76537346 = -489483321;    float cWHzSZAZNRfHmuQpmykTPyd44223735 = -282916046;    float cWHzSZAZNRfHmuQpmykTPyd34475225 = -188144633;    float cWHzSZAZNRfHmuQpmykTPyd63978869 = -61917647;    float cWHzSZAZNRfHmuQpmykTPyd69176450 = -419461057;    float cWHzSZAZNRfHmuQpmykTPyd1389265 = -357856861;    float cWHzSZAZNRfHmuQpmykTPyd22292711 = -881561022;    float cWHzSZAZNRfHmuQpmykTPyd46940715 = -236179540;    float cWHzSZAZNRfHmuQpmykTPyd56972350 = -637254714;    float cWHzSZAZNRfHmuQpmykTPyd50359338 = -638376582;    float cWHzSZAZNRfHmuQpmykTPyd44402947 = -348421547;    float cWHzSZAZNRfHmuQpmykTPyd59349700 = -277288360;    float cWHzSZAZNRfHmuQpmykTPyd67724153 = -117325770;    float cWHzSZAZNRfHmuQpmykTPyd9561455 = -550288608;    float cWHzSZAZNRfHmuQpmykTPyd9398573 = -316064422;    float cWHzSZAZNRfHmuQpmykTPyd47805593 = -644961729;    float cWHzSZAZNRfHmuQpmykTPyd84641469 = -510747342;    float cWHzSZAZNRfHmuQpmykTPyd65452312 = -597956286;    float cWHzSZAZNRfHmuQpmykTPyd86657336 = 78966872;    float cWHzSZAZNRfHmuQpmykTPyd74303718 = -880289754;    float cWHzSZAZNRfHmuQpmykTPyd91114981 = -238479703;    float cWHzSZAZNRfHmuQpmykTPyd47454762 = -408848134;    float cWHzSZAZNRfHmuQpmykTPyd12145046 = -978362974;    float cWHzSZAZNRfHmuQpmykTPyd34661903 = -996283609;    float cWHzSZAZNRfHmuQpmykTPyd20515716 = -608113824;    float cWHzSZAZNRfHmuQpmykTPyd61801326 = -292020206;    float cWHzSZAZNRfHmuQpmykTPyd66663227 = -630091791;    float cWHzSZAZNRfHmuQpmykTPyd84784180 = -240782537;    float cWHzSZAZNRfHmuQpmykTPyd34672295 = -790989535;    float cWHzSZAZNRfHmuQpmykTPyd77332134 = -589332128;    float cWHzSZAZNRfHmuQpmykTPyd6896124 = -19512971;    float cWHzSZAZNRfHmuQpmykTPyd40039089 = -209300069;    float cWHzSZAZNRfHmuQpmykTPyd87824890 = -295192257;    float cWHzSZAZNRfHmuQpmykTPyd16311440 = -902733865;    float cWHzSZAZNRfHmuQpmykTPyd19153093 = -382133387;    float cWHzSZAZNRfHmuQpmykTPyd2925623 = -119893171;    float cWHzSZAZNRfHmuQpmykTPyd41628558 = -684907223;    float cWHzSZAZNRfHmuQpmykTPyd47238302 = -914741175;    float cWHzSZAZNRfHmuQpmykTPyd1903834 = -747630035;    float cWHzSZAZNRfHmuQpmykTPyd51191212 = -745067643;    float cWHzSZAZNRfHmuQpmykTPyd37239403 = -760053866;    float cWHzSZAZNRfHmuQpmykTPyd57124108 = -277338322;    float cWHzSZAZNRfHmuQpmykTPyd77606583 = -67124249;    float cWHzSZAZNRfHmuQpmykTPyd45767414 = -817720597;    float cWHzSZAZNRfHmuQpmykTPyd15091693 = -660802864;    float cWHzSZAZNRfHmuQpmykTPyd17935417 = -943395371;    float cWHzSZAZNRfHmuQpmykTPyd16602164 = -322706640;    float cWHzSZAZNRfHmuQpmykTPyd64213395 = -308184758;    float cWHzSZAZNRfHmuQpmykTPyd91753163 = -644119775;    float cWHzSZAZNRfHmuQpmykTPyd58953303 = -73921361;    float cWHzSZAZNRfHmuQpmykTPyd95779816 = -392213066;    float cWHzSZAZNRfHmuQpmykTPyd74315659 = -908631145;    float cWHzSZAZNRfHmuQpmykTPyd4904349 = 98663169;    float cWHzSZAZNRfHmuQpmykTPyd70041159 = -264476983;     cWHzSZAZNRfHmuQpmykTPyd97023432 = cWHzSZAZNRfHmuQpmykTPyd76003721;     cWHzSZAZNRfHmuQpmykTPyd76003721 = cWHzSZAZNRfHmuQpmykTPyd91519467;     cWHzSZAZNRfHmuQpmykTPyd91519467 = cWHzSZAZNRfHmuQpmykTPyd42016303;     cWHzSZAZNRfHmuQpmykTPyd42016303 = cWHzSZAZNRfHmuQpmykTPyd5251894;     cWHzSZAZNRfHmuQpmykTPyd5251894 = cWHzSZAZNRfHmuQpmykTPyd56547930;     cWHzSZAZNRfHmuQpmykTPyd56547930 = cWHzSZAZNRfHmuQpmykTPyd23909376;     cWHzSZAZNRfHmuQpmykTPyd23909376 = cWHzSZAZNRfHmuQpmykTPyd95858640;     cWHzSZAZNRfHmuQpmykTPyd95858640 = cWHzSZAZNRfHmuQpmykTPyd36532596;     cWHzSZAZNRfHmuQpmykTPyd36532596 = cWHzSZAZNRfHmuQpmykTPyd39237813;     cWHzSZAZNRfHmuQpmykTPyd39237813 = cWHzSZAZNRfHmuQpmykTPyd33835832;     cWHzSZAZNRfHmuQpmykTPyd33835832 = cWHzSZAZNRfHmuQpmykTPyd95179804;     cWHzSZAZNRfHmuQpmykTPyd95179804 = cWHzSZAZNRfHmuQpmykTPyd82033695;     cWHzSZAZNRfHmuQpmykTPyd82033695 = cWHzSZAZNRfHmuQpmykTPyd8271798;     cWHzSZAZNRfHmuQpmykTPyd8271798 = cWHzSZAZNRfHmuQpmykTPyd94156541;     cWHzSZAZNRfHmuQpmykTPyd94156541 = cWHzSZAZNRfHmuQpmykTPyd97800832;     cWHzSZAZNRfHmuQpmykTPyd97800832 = cWHzSZAZNRfHmuQpmykTPyd46127643;     cWHzSZAZNRfHmuQpmykTPyd46127643 = cWHzSZAZNRfHmuQpmykTPyd40438077;     cWHzSZAZNRfHmuQpmykTPyd40438077 = cWHzSZAZNRfHmuQpmykTPyd85935916;     cWHzSZAZNRfHmuQpmykTPyd85935916 = cWHzSZAZNRfHmuQpmykTPyd41431190;     cWHzSZAZNRfHmuQpmykTPyd41431190 = cWHzSZAZNRfHmuQpmykTPyd57753420;     cWHzSZAZNRfHmuQpmykTPyd57753420 = cWHzSZAZNRfHmuQpmykTPyd46664095;     cWHzSZAZNRfHmuQpmykTPyd46664095 = cWHzSZAZNRfHmuQpmykTPyd31600775;     cWHzSZAZNRfHmuQpmykTPyd31600775 = cWHzSZAZNRfHmuQpmykTPyd32169768;     cWHzSZAZNRfHmuQpmykTPyd32169768 = cWHzSZAZNRfHmuQpmykTPyd74292150;     cWHzSZAZNRfHmuQpmykTPyd74292150 = cWHzSZAZNRfHmuQpmykTPyd95690438;     cWHzSZAZNRfHmuQpmykTPyd95690438 = cWHzSZAZNRfHmuQpmykTPyd47149357;     cWHzSZAZNRfHmuQpmykTPyd47149357 = cWHzSZAZNRfHmuQpmykTPyd76103782;     cWHzSZAZNRfHmuQpmykTPyd76103782 = cWHzSZAZNRfHmuQpmykTPyd11217172;     cWHzSZAZNRfHmuQpmykTPyd11217172 = cWHzSZAZNRfHmuQpmykTPyd71080283;     cWHzSZAZNRfHmuQpmykTPyd71080283 = cWHzSZAZNRfHmuQpmykTPyd52580476;     cWHzSZAZNRfHmuQpmykTPyd52580476 = cWHzSZAZNRfHmuQpmykTPyd59532113;     cWHzSZAZNRfHmuQpmykTPyd59532113 = cWHzSZAZNRfHmuQpmykTPyd4064824;     cWHzSZAZNRfHmuQpmykTPyd4064824 = cWHzSZAZNRfHmuQpmykTPyd34578933;     cWHzSZAZNRfHmuQpmykTPyd34578933 = cWHzSZAZNRfHmuQpmykTPyd96126752;     cWHzSZAZNRfHmuQpmykTPyd96126752 = cWHzSZAZNRfHmuQpmykTPyd59494639;     cWHzSZAZNRfHmuQpmykTPyd59494639 = cWHzSZAZNRfHmuQpmykTPyd77285116;     cWHzSZAZNRfHmuQpmykTPyd77285116 = cWHzSZAZNRfHmuQpmykTPyd84326317;     cWHzSZAZNRfHmuQpmykTPyd84326317 = cWHzSZAZNRfHmuQpmykTPyd73774850;     cWHzSZAZNRfHmuQpmykTPyd73774850 = cWHzSZAZNRfHmuQpmykTPyd1151736;     cWHzSZAZNRfHmuQpmykTPyd1151736 = cWHzSZAZNRfHmuQpmykTPyd6758896;     cWHzSZAZNRfHmuQpmykTPyd6758896 = cWHzSZAZNRfHmuQpmykTPyd80421286;     cWHzSZAZNRfHmuQpmykTPyd80421286 = cWHzSZAZNRfHmuQpmykTPyd39767971;     cWHzSZAZNRfHmuQpmykTPyd39767971 = cWHzSZAZNRfHmuQpmykTPyd91561685;     cWHzSZAZNRfHmuQpmykTPyd91561685 = cWHzSZAZNRfHmuQpmykTPyd44344877;     cWHzSZAZNRfHmuQpmykTPyd44344877 = cWHzSZAZNRfHmuQpmykTPyd57980710;     cWHzSZAZNRfHmuQpmykTPyd57980710 = cWHzSZAZNRfHmuQpmykTPyd76537346;     cWHzSZAZNRfHmuQpmykTPyd76537346 = cWHzSZAZNRfHmuQpmykTPyd44223735;     cWHzSZAZNRfHmuQpmykTPyd44223735 = cWHzSZAZNRfHmuQpmykTPyd34475225;     cWHzSZAZNRfHmuQpmykTPyd34475225 = cWHzSZAZNRfHmuQpmykTPyd63978869;     cWHzSZAZNRfHmuQpmykTPyd63978869 = cWHzSZAZNRfHmuQpmykTPyd69176450;     cWHzSZAZNRfHmuQpmykTPyd69176450 = cWHzSZAZNRfHmuQpmykTPyd1389265;     cWHzSZAZNRfHmuQpmykTPyd1389265 = cWHzSZAZNRfHmuQpmykTPyd22292711;     cWHzSZAZNRfHmuQpmykTPyd22292711 = cWHzSZAZNRfHmuQpmykTPyd46940715;     cWHzSZAZNRfHmuQpmykTPyd46940715 = cWHzSZAZNRfHmuQpmykTPyd56972350;     cWHzSZAZNRfHmuQpmykTPyd56972350 = cWHzSZAZNRfHmuQpmykTPyd50359338;     cWHzSZAZNRfHmuQpmykTPyd50359338 = cWHzSZAZNRfHmuQpmykTPyd44402947;     cWHzSZAZNRfHmuQpmykTPyd44402947 = cWHzSZAZNRfHmuQpmykTPyd59349700;     cWHzSZAZNRfHmuQpmykTPyd59349700 = cWHzSZAZNRfHmuQpmykTPyd67724153;     cWHzSZAZNRfHmuQpmykTPyd67724153 = cWHzSZAZNRfHmuQpmykTPyd9561455;     cWHzSZAZNRfHmuQpmykTPyd9561455 = cWHzSZAZNRfHmuQpmykTPyd9398573;     cWHzSZAZNRfHmuQpmykTPyd9398573 = cWHzSZAZNRfHmuQpmykTPyd47805593;     cWHzSZAZNRfHmuQpmykTPyd47805593 = cWHzSZAZNRfHmuQpmykTPyd84641469;     cWHzSZAZNRfHmuQpmykTPyd84641469 = cWHzSZAZNRfHmuQpmykTPyd65452312;     cWHzSZAZNRfHmuQpmykTPyd65452312 = cWHzSZAZNRfHmuQpmykTPyd86657336;     cWHzSZAZNRfHmuQpmykTPyd86657336 = cWHzSZAZNRfHmuQpmykTPyd74303718;     cWHzSZAZNRfHmuQpmykTPyd74303718 = cWHzSZAZNRfHmuQpmykTPyd91114981;     cWHzSZAZNRfHmuQpmykTPyd91114981 = cWHzSZAZNRfHmuQpmykTPyd47454762;     cWHzSZAZNRfHmuQpmykTPyd47454762 = cWHzSZAZNRfHmuQpmykTPyd12145046;     cWHzSZAZNRfHmuQpmykTPyd12145046 = cWHzSZAZNRfHmuQpmykTPyd34661903;     cWHzSZAZNRfHmuQpmykTPyd34661903 = cWHzSZAZNRfHmuQpmykTPyd20515716;     cWHzSZAZNRfHmuQpmykTPyd20515716 = cWHzSZAZNRfHmuQpmykTPyd61801326;     cWHzSZAZNRfHmuQpmykTPyd61801326 = cWHzSZAZNRfHmuQpmykTPyd66663227;     cWHzSZAZNRfHmuQpmykTPyd66663227 = cWHzSZAZNRfHmuQpmykTPyd84784180;     cWHzSZAZNRfHmuQpmykTPyd84784180 = cWHzSZAZNRfHmuQpmykTPyd34672295;     cWHzSZAZNRfHmuQpmykTPyd34672295 = cWHzSZAZNRfHmuQpmykTPyd77332134;     cWHzSZAZNRfHmuQpmykTPyd77332134 = cWHzSZAZNRfHmuQpmykTPyd6896124;     cWHzSZAZNRfHmuQpmykTPyd6896124 = cWHzSZAZNRfHmuQpmykTPyd40039089;     cWHzSZAZNRfHmuQpmykTPyd40039089 = cWHzSZAZNRfHmuQpmykTPyd87824890;     cWHzSZAZNRfHmuQpmykTPyd87824890 = cWHzSZAZNRfHmuQpmykTPyd16311440;     cWHzSZAZNRfHmuQpmykTPyd16311440 = cWHzSZAZNRfHmuQpmykTPyd19153093;     cWHzSZAZNRfHmuQpmykTPyd19153093 = cWHzSZAZNRfHmuQpmykTPyd2925623;     cWHzSZAZNRfHmuQpmykTPyd2925623 = cWHzSZAZNRfHmuQpmykTPyd41628558;     cWHzSZAZNRfHmuQpmykTPyd41628558 = cWHzSZAZNRfHmuQpmykTPyd47238302;     cWHzSZAZNRfHmuQpmykTPyd47238302 = cWHzSZAZNRfHmuQpmykTPyd1903834;     cWHzSZAZNRfHmuQpmykTPyd1903834 = cWHzSZAZNRfHmuQpmykTPyd51191212;     cWHzSZAZNRfHmuQpmykTPyd51191212 = cWHzSZAZNRfHmuQpmykTPyd37239403;     cWHzSZAZNRfHmuQpmykTPyd37239403 = cWHzSZAZNRfHmuQpmykTPyd57124108;     cWHzSZAZNRfHmuQpmykTPyd57124108 = cWHzSZAZNRfHmuQpmykTPyd77606583;     cWHzSZAZNRfHmuQpmykTPyd77606583 = cWHzSZAZNRfHmuQpmykTPyd45767414;     cWHzSZAZNRfHmuQpmykTPyd45767414 = cWHzSZAZNRfHmuQpmykTPyd15091693;     cWHzSZAZNRfHmuQpmykTPyd15091693 = cWHzSZAZNRfHmuQpmykTPyd17935417;     cWHzSZAZNRfHmuQpmykTPyd17935417 = cWHzSZAZNRfHmuQpmykTPyd16602164;     cWHzSZAZNRfHmuQpmykTPyd16602164 = cWHzSZAZNRfHmuQpmykTPyd64213395;     cWHzSZAZNRfHmuQpmykTPyd64213395 = cWHzSZAZNRfHmuQpmykTPyd91753163;     cWHzSZAZNRfHmuQpmykTPyd91753163 = cWHzSZAZNRfHmuQpmykTPyd58953303;     cWHzSZAZNRfHmuQpmykTPyd58953303 = cWHzSZAZNRfHmuQpmykTPyd95779816;     cWHzSZAZNRfHmuQpmykTPyd95779816 = cWHzSZAZNRfHmuQpmykTPyd74315659;     cWHzSZAZNRfHmuQpmykTPyd74315659 = cWHzSZAZNRfHmuQpmykTPyd4904349;     cWHzSZAZNRfHmuQpmykTPyd4904349 = cWHzSZAZNRfHmuQpmykTPyd70041159;     cWHzSZAZNRfHmuQpmykTPyd70041159 = cWHzSZAZNRfHmuQpmykTPyd97023432;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void VPLYIrviYPJUAbSbUaBrGJaZbCZAGvRCoqZrqgqqH21384515() {     long NbALWuoUHutRkfMplxGRucd97016961 = -137001124;    long NbALWuoUHutRkfMplxGRucd14576038 = -722686699;    long NbALWuoUHutRkfMplxGRucd92832679 = -604263032;    long NbALWuoUHutRkfMplxGRucd27096164 = -822594286;    long NbALWuoUHutRkfMplxGRucd14091996 = -990260636;    long NbALWuoUHutRkfMplxGRucd91353362 = -618306449;    long NbALWuoUHutRkfMplxGRucd92456711 = -322550051;    long NbALWuoUHutRkfMplxGRucd65072691 = -291583479;    long NbALWuoUHutRkfMplxGRucd19272760 = -578693447;    long NbALWuoUHutRkfMplxGRucd35877327 = -860764502;    long NbALWuoUHutRkfMplxGRucd54156437 = -481376713;    long NbALWuoUHutRkfMplxGRucd9471482 = -687475926;    long NbALWuoUHutRkfMplxGRucd13886609 = -234885570;    long NbALWuoUHutRkfMplxGRucd62116018 = -779613204;    long NbALWuoUHutRkfMplxGRucd39328651 = 31779129;    long NbALWuoUHutRkfMplxGRucd72365380 = -161593206;    long NbALWuoUHutRkfMplxGRucd1980403 = -751667184;    long NbALWuoUHutRkfMplxGRucd63438609 = -985636779;    long NbALWuoUHutRkfMplxGRucd6364186 = -918948999;    long NbALWuoUHutRkfMplxGRucd13504954 = -121897074;    long NbALWuoUHutRkfMplxGRucd37422845 = -302758908;    long NbALWuoUHutRkfMplxGRucd24960361 = -36092284;    long NbALWuoUHutRkfMplxGRucd68479171 = -690627869;    long NbALWuoUHutRkfMplxGRucd75819875 = -150766581;    long NbALWuoUHutRkfMplxGRucd2734840 = -111421540;    long NbALWuoUHutRkfMplxGRucd12264516 = -879822636;    long NbALWuoUHutRkfMplxGRucd17370939 = -803608929;    long NbALWuoUHutRkfMplxGRucd11507308 = -482018844;    long NbALWuoUHutRkfMplxGRucd23895618 = -622729136;    long NbALWuoUHutRkfMplxGRucd47170153 = -942522465;    long NbALWuoUHutRkfMplxGRucd85993155 = -490017738;    long NbALWuoUHutRkfMplxGRucd44255971 = 66563351;    long NbALWuoUHutRkfMplxGRucd89517246 = -815462077;    long NbALWuoUHutRkfMplxGRucd34861770 = -681060695;    long NbALWuoUHutRkfMplxGRucd78484790 = -715411104;    long NbALWuoUHutRkfMplxGRucd2322829 = -88990157;    long NbALWuoUHutRkfMplxGRucd89226484 = -320337109;    long NbALWuoUHutRkfMplxGRucd54243997 = -535295088;    long NbALWuoUHutRkfMplxGRucd9088447 = -571154782;    long NbALWuoUHutRkfMplxGRucd73024629 = -669615883;    long NbALWuoUHutRkfMplxGRucd94614563 = -906826988;    long NbALWuoUHutRkfMplxGRucd66118947 = -96752489;    long NbALWuoUHutRkfMplxGRucd51332 = 34282316;    long NbALWuoUHutRkfMplxGRucd50793584 = -579334402;    long NbALWuoUHutRkfMplxGRucd28362930 = -347913204;    long NbALWuoUHutRkfMplxGRucd98408678 = -694038494;    long NbALWuoUHutRkfMplxGRucd4235139 = -970763943;    long NbALWuoUHutRkfMplxGRucd19607316 = -891677402;    long NbALWuoUHutRkfMplxGRucd53133614 = -851908494;    long NbALWuoUHutRkfMplxGRucd84024292 = -748942533;    long NbALWuoUHutRkfMplxGRucd82435819 = 1983936;    long NbALWuoUHutRkfMplxGRucd15936522 = -740002610;    long NbALWuoUHutRkfMplxGRucd97741058 = -773615030;    long NbALWuoUHutRkfMplxGRucd57190986 = -768099391;    long NbALWuoUHutRkfMplxGRucd83961670 = -394153992;    long NbALWuoUHutRkfMplxGRucd72056601 = -908840;    long NbALWuoUHutRkfMplxGRucd46096867 = 67941169;    long NbALWuoUHutRkfMplxGRucd17012804 = -353496451;    long NbALWuoUHutRkfMplxGRucd24361325 = -611172747;    long NbALWuoUHutRkfMplxGRucd1827480 = -10438001;    long NbALWuoUHutRkfMplxGRucd73982423 = -814697521;    long NbALWuoUHutRkfMplxGRucd80949404 = -840531207;    long NbALWuoUHutRkfMplxGRucd41177073 = -668854344;    long NbALWuoUHutRkfMplxGRucd72102606 = -636170982;    long NbALWuoUHutRkfMplxGRucd49884172 = -270746764;    long NbALWuoUHutRkfMplxGRucd9900466 = -447940065;    long NbALWuoUHutRkfMplxGRucd19954235 = -872013849;    long NbALWuoUHutRkfMplxGRucd79024839 = -553824876;    long NbALWuoUHutRkfMplxGRucd83631227 = 35797899;    long NbALWuoUHutRkfMplxGRucd37005822 = -879230714;    long NbALWuoUHutRkfMplxGRucd83138895 = -841256097;    long NbALWuoUHutRkfMplxGRucd47736406 = -116372096;    long NbALWuoUHutRkfMplxGRucd54350163 = -314481997;    long NbALWuoUHutRkfMplxGRucd33339557 = -149333117;    long NbALWuoUHutRkfMplxGRucd18890390 = -215070087;    long NbALWuoUHutRkfMplxGRucd71303897 = -106006419;    long NbALWuoUHutRkfMplxGRucd24909030 = 29625400;    long NbALWuoUHutRkfMplxGRucd17685587 = -11293468;    long NbALWuoUHutRkfMplxGRucd47456946 = -802853378;    long NbALWuoUHutRkfMplxGRucd4326162 = -417383047;    long NbALWuoUHutRkfMplxGRucd8029377 = -909058693;    long NbALWuoUHutRkfMplxGRucd97763623 = -911931527;    long NbALWuoUHutRkfMplxGRucd58373693 = -630110350;    long NbALWuoUHutRkfMplxGRucd39871326 = -873786603;    long NbALWuoUHutRkfMplxGRucd64734333 = -844506401;    long NbALWuoUHutRkfMplxGRucd70056633 = -750015129;    long NbALWuoUHutRkfMplxGRucd46514912 = -159821619;    long NbALWuoUHutRkfMplxGRucd32326261 = 52637314;    long NbALWuoUHutRkfMplxGRucd50900100 = -186906703;    long NbALWuoUHutRkfMplxGRucd6428190 = -614502264;    long NbALWuoUHutRkfMplxGRucd56225962 = -56931327;    long NbALWuoUHutRkfMplxGRucd72213680 = -966840659;    long NbALWuoUHutRkfMplxGRucd29882672 = -924122342;    long NbALWuoUHutRkfMplxGRucd7260967 = -460716781;    long NbALWuoUHutRkfMplxGRucd99042205 = -854918363;    long NbALWuoUHutRkfMplxGRucd13665160 = 33704219;    long NbALWuoUHutRkfMplxGRucd24941874 = -427898146;    long NbALWuoUHutRkfMplxGRucd27948725 = -329546703;    long NbALWuoUHutRkfMplxGRucd909413 = -208587638;    long NbALWuoUHutRkfMplxGRucd18462464 = -137001124;     NbALWuoUHutRkfMplxGRucd97016961 = NbALWuoUHutRkfMplxGRucd14576038;     NbALWuoUHutRkfMplxGRucd14576038 = NbALWuoUHutRkfMplxGRucd92832679;     NbALWuoUHutRkfMplxGRucd92832679 = NbALWuoUHutRkfMplxGRucd27096164;     NbALWuoUHutRkfMplxGRucd27096164 = NbALWuoUHutRkfMplxGRucd14091996;     NbALWuoUHutRkfMplxGRucd14091996 = NbALWuoUHutRkfMplxGRucd91353362;     NbALWuoUHutRkfMplxGRucd91353362 = NbALWuoUHutRkfMplxGRucd92456711;     NbALWuoUHutRkfMplxGRucd92456711 = NbALWuoUHutRkfMplxGRucd65072691;     NbALWuoUHutRkfMplxGRucd65072691 = NbALWuoUHutRkfMplxGRucd19272760;     NbALWuoUHutRkfMplxGRucd19272760 = NbALWuoUHutRkfMplxGRucd35877327;     NbALWuoUHutRkfMplxGRucd35877327 = NbALWuoUHutRkfMplxGRucd54156437;     NbALWuoUHutRkfMplxGRucd54156437 = NbALWuoUHutRkfMplxGRucd9471482;     NbALWuoUHutRkfMplxGRucd9471482 = NbALWuoUHutRkfMplxGRucd13886609;     NbALWuoUHutRkfMplxGRucd13886609 = NbALWuoUHutRkfMplxGRucd62116018;     NbALWuoUHutRkfMplxGRucd62116018 = NbALWuoUHutRkfMplxGRucd39328651;     NbALWuoUHutRkfMplxGRucd39328651 = NbALWuoUHutRkfMplxGRucd72365380;     NbALWuoUHutRkfMplxGRucd72365380 = NbALWuoUHutRkfMplxGRucd1980403;     NbALWuoUHutRkfMplxGRucd1980403 = NbALWuoUHutRkfMplxGRucd63438609;     NbALWuoUHutRkfMplxGRucd63438609 = NbALWuoUHutRkfMplxGRucd6364186;     NbALWuoUHutRkfMplxGRucd6364186 = NbALWuoUHutRkfMplxGRucd13504954;     NbALWuoUHutRkfMplxGRucd13504954 = NbALWuoUHutRkfMplxGRucd37422845;     NbALWuoUHutRkfMplxGRucd37422845 = NbALWuoUHutRkfMplxGRucd24960361;     NbALWuoUHutRkfMplxGRucd24960361 = NbALWuoUHutRkfMplxGRucd68479171;     NbALWuoUHutRkfMplxGRucd68479171 = NbALWuoUHutRkfMplxGRucd75819875;     NbALWuoUHutRkfMplxGRucd75819875 = NbALWuoUHutRkfMplxGRucd2734840;     NbALWuoUHutRkfMplxGRucd2734840 = NbALWuoUHutRkfMplxGRucd12264516;     NbALWuoUHutRkfMplxGRucd12264516 = NbALWuoUHutRkfMplxGRucd17370939;     NbALWuoUHutRkfMplxGRucd17370939 = NbALWuoUHutRkfMplxGRucd11507308;     NbALWuoUHutRkfMplxGRucd11507308 = NbALWuoUHutRkfMplxGRucd23895618;     NbALWuoUHutRkfMplxGRucd23895618 = NbALWuoUHutRkfMplxGRucd47170153;     NbALWuoUHutRkfMplxGRucd47170153 = NbALWuoUHutRkfMplxGRucd85993155;     NbALWuoUHutRkfMplxGRucd85993155 = NbALWuoUHutRkfMplxGRucd44255971;     NbALWuoUHutRkfMplxGRucd44255971 = NbALWuoUHutRkfMplxGRucd89517246;     NbALWuoUHutRkfMplxGRucd89517246 = NbALWuoUHutRkfMplxGRucd34861770;     NbALWuoUHutRkfMplxGRucd34861770 = NbALWuoUHutRkfMplxGRucd78484790;     NbALWuoUHutRkfMplxGRucd78484790 = NbALWuoUHutRkfMplxGRucd2322829;     NbALWuoUHutRkfMplxGRucd2322829 = NbALWuoUHutRkfMplxGRucd89226484;     NbALWuoUHutRkfMplxGRucd89226484 = NbALWuoUHutRkfMplxGRucd54243997;     NbALWuoUHutRkfMplxGRucd54243997 = NbALWuoUHutRkfMplxGRucd9088447;     NbALWuoUHutRkfMplxGRucd9088447 = NbALWuoUHutRkfMplxGRucd73024629;     NbALWuoUHutRkfMplxGRucd73024629 = NbALWuoUHutRkfMplxGRucd94614563;     NbALWuoUHutRkfMplxGRucd94614563 = NbALWuoUHutRkfMplxGRucd66118947;     NbALWuoUHutRkfMplxGRucd66118947 = NbALWuoUHutRkfMplxGRucd51332;     NbALWuoUHutRkfMplxGRucd51332 = NbALWuoUHutRkfMplxGRucd50793584;     NbALWuoUHutRkfMplxGRucd50793584 = NbALWuoUHutRkfMplxGRucd28362930;     NbALWuoUHutRkfMplxGRucd28362930 = NbALWuoUHutRkfMplxGRucd98408678;     NbALWuoUHutRkfMplxGRucd98408678 = NbALWuoUHutRkfMplxGRucd4235139;     NbALWuoUHutRkfMplxGRucd4235139 = NbALWuoUHutRkfMplxGRucd19607316;     NbALWuoUHutRkfMplxGRucd19607316 = NbALWuoUHutRkfMplxGRucd53133614;     NbALWuoUHutRkfMplxGRucd53133614 = NbALWuoUHutRkfMplxGRucd84024292;     NbALWuoUHutRkfMplxGRucd84024292 = NbALWuoUHutRkfMplxGRucd82435819;     NbALWuoUHutRkfMplxGRucd82435819 = NbALWuoUHutRkfMplxGRucd15936522;     NbALWuoUHutRkfMplxGRucd15936522 = NbALWuoUHutRkfMplxGRucd97741058;     NbALWuoUHutRkfMplxGRucd97741058 = NbALWuoUHutRkfMplxGRucd57190986;     NbALWuoUHutRkfMplxGRucd57190986 = NbALWuoUHutRkfMplxGRucd83961670;     NbALWuoUHutRkfMplxGRucd83961670 = NbALWuoUHutRkfMplxGRucd72056601;     NbALWuoUHutRkfMplxGRucd72056601 = NbALWuoUHutRkfMplxGRucd46096867;     NbALWuoUHutRkfMplxGRucd46096867 = NbALWuoUHutRkfMplxGRucd17012804;     NbALWuoUHutRkfMplxGRucd17012804 = NbALWuoUHutRkfMplxGRucd24361325;     NbALWuoUHutRkfMplxGRucd24361325 = NbALWuoUHutRkfMplxGRucd1827480;     NbALWuoUHutRkfMplxGRucd1827480 = NbALWuoUHutRkfMplxGRucd73982423;     NbALWuoUHutRkfMplxGRucd73982423 = NbALWuoUHutRkfMplxGRucd80949404;     NbALWuoUHutRkfMplxGRucd80949404 = NbALWuoUHutRkfMplxGRucd41177073;     NbALWuoUHutRkfMplxGRucd41177073 = NbALWuoUHutRkfMplxGRucd72102606;     NbALWuoUHutRkfMplxGRucd72102606 = NbALWuoUHutRkfMplxGRucd49884172;     NbALWuoUHutRkfMplxGRucd49884172 = NbALWuoUHutRkfMplxGRucd9900466;     NbALWuoUHutRkfMplxGRucd9900466 = NbALWuoUHutRkfMplxGRucd19954235;     NbALWuoUHutRkfMplxGRucd19954235 = NbALWuoUHutRkfMplxGRucd79024839;     NbALWuoUHutRkfMplxGRucd79024839 = NbALWuoUHutRkfMplxGRucd83631227;     NbALWuoUHutRkfMplxGRucd83631227 = NbALWuoUHutRkfMplxGRucd37005822;     NbALWuoUHutRkfMplxGRucd37005822 = NbALWuoUHutRkfMplxGRucd83138895;     NbALWuoUHutRkfMplxGRucd83138895 = NbALWuoUHutRkfMplxGRucd47736406;     NbALWuoUHutRkfMplxGRucd47736406 = NbALWuoUHutRkfMplxGRucd54350163;     NbALWuoUHutRkfMplxGRucd54350163 = NbALWuoUHutRkfMplxGRucd33339557;     NbALWuoUHutRkfMplxGRucd33339557 = NbALWuoUHutRkfMplxGRucd18890390;     NbALWuoUHutRkfMplxGRucd18890390 = NbALWuoUHutRkfMplxGRucd71303897;     NbALWuoUHutRkfMplxGRucd71303897 = NbALWuoUHutRkfMplxGRucd24909030;     NbALWuoUHutRkfMplxGRucd24909030 = NbALWuoUHutRkfMplxGRucd17685587;     NbALWuoUHutRkfMplxGRucd17685587 = NbALWuoUHutRkfMplxGRucd47456946;     NbALWuoUHutRkfMplxGRucd47456946 = NbALWuoUHutRkfMplxGRucd4326162;     NbALWuoUHutRkfMplxGRucd4326162 = NbALWuoUHutRkfMplxGRucd8029377;     NbALWuoUHutRkfMplxGRucd8029377 = NbALWuoUHutRkfMplxGRucd97763623;     NbALWuoUHutRkfMplxGRucd97763623 = NbALWuoUHutRkfMplxGRucd58373693;     NbALWuoUHutRkfMplxGRucd58373693 = NbALWuoUHutRkfMplxGRucd39871326;     NbALWuoUHutRkfMplxGRucd39871326 = NbALWuoUHutRkfMplxGRucd64734333;     NbALWuoUHutRkfMplxGRucd64734333 = NbALWuoUHutRkfMplxGRucd70056633;     NbALWuoUHutRkfMplxGRucd70056633 = NbALWuoUHutRkfMplxGRucd46514912;     NbALWuoUHutRkfMplxGRucd46514912 = NbALWuoUHutRkfMplxGRucd32326261;     NbALWuoUHutRkfMplxGRucd32326261 = NbALWuoUHutRkfMplxGRucd50900100;     NbALWuoUHutRkfMplxGRucd50900100 = NbALWuoUHutRkfMplxGRucd6428190;     NbALWuoUHutRkfMplxGRucd6428190 = NbALWuoUHutRkfMplxGRucd56225962;     NbALWuoUHutRkfMplxGRucd56225962 = NbALWuoUHutRkfMplxGRucd72213680;     NbALWuoUHutRkfMplxGRucd72213680 = NbALWuoUHutRkfMplxGRucd29882672;     NbALWuoUHutRkfMplxGRucd29882672 = NbALWuoUHutRkfMplxGRucd7260967;     NbALWuoUHutRkfMplxGRucd7260967 = NbALWuoUHutRkfMplxGRucd99042205;     NbALWuoUHutRkfMplxGRucd99042205 = NbALWuoUHutRkfMplxGRucd13665160;     NbALWuoUHutRkfMplxGRucd13665160 = NbALWuoUHutRkfMplxGRucd24941874;     NbALWuoUHutRkfMplxGRucd24941874 = NbALWuoUHutRkfMplxGRucd27948725;     NbALWuoUHutRkfMplxGRucd27948725 = NbALWuoUHutRkfMplxGRucd909413;     NbALWuoUHutRkfMplxGRucd909413 = NbALWuoUHutRkfMplxGRucd18462464;     NbALWuoUHutRkfMplxGRucd18462464 = NbALWuoUHutRkfMplxGRucd97016961;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void qrzGxIurhLoijeRLahMlxswfibvhQIfzgzgsTtwwN51370745() {     long vhWlEAYEtEylTrxuTYVNMaZ19410550 = -998880946;    long vhWlEAYEtEylTrxuTYVNMaZ60351221 = -628634629;    long vhWlEAYEtEylTrxuTYVNMaZ20288746 = -886788263;    long vhWlEAYEtEylTrxuTYVNMaZ57022992 = 91539012;    long vhWlEAYEtEylTrxuTYVNMaZ3426148 = -12962316;    long vhWlEAYEtEylTrxuTYVNMaZ71431047 = -779482015;    long vhWlEAYEtEylTrxuTYVNMaZ16065115 = -440000890;    long vhWlEAYEtEylTrxuTYVNMaZ71492499 = 41997193;    long vhWlEAYEtEylTrxuTYVNMaZ33695727 = -749243416;    long vhWlEAYEtEylTrxuTYVNMaZ31001398 = -966698964;    long vhWlEAYEtEylTrxuTYVNMaZ71377691 = -518529042;    long vhWlEAYEtEylTrxuTYVNMaZ51082753 = -102742857;    long vhWlEAYEtEylTrxuTYVNMaZ49041876 = -831944415;    long vhWlEAYEtEylTrxuTYVNMaZ50886550 = -962168909;    long vhWlEAYEtEylTrxuTYVNMaZ30891819 = -732985732;    long vhWlEAYEtEylTrxuTYVNMaZ42056745 = -210465097;    long vhWlEAYEtEylTrxuTYVNMaZ95950995 = -109332434;    long vhWlEAYEtEylTrxuTYVNMaZ46414493 = 59692153;    long vhWlEAYEtEylTrxuTYVNMaZ27217547 = -436068858;    long vhWlEAYEtEylTrxuTYVNMaZ19947474 = -862507077;    long vhWlEAYEtEylTrxuTYVNMaZ58636528 = -583779843;    long vhWlEAYEtEylTrxuTYVNMaZ10479313 = -30866714;    long vhWlEAYEtEylTrxuTYVNMaZ34894098 = -407750619;    long vhWlEAYEtEylTrxuTYVNMaZ58669555 = -833838916;    long vhWlEAYEtEylTrxuTYVNMaZ9832397 = -406286812;    long vhWlEAYEtEylTrxuTYVNMaZ83993433 = -315510931;    long vhWlEAYEtEylTrxuTYVNMaZ94238777 = -260395709;    long vhWlEAYEtEylTrxuTYVNMaZ82015232 = -761506309;    long vhWlEAYEtEylTrxuTYVNMaZ18109732 = -320915940;    long vhWlEAYEtEylTrxuTYVNMaZ80237463 = -87386958;    long vhWlEAYEtEylTrxuTYVNMaZ96871281 = -184240656;    long vhWlEAYEtEylTrxuTYVNMaZ17073305 = -193686242;    long vhWlEAYEtEylTrxuTYVNMaZ85103493 = -42861356;    long vhWlEAYEtEylTrxuTYVNMaZ93967620 = -28505812;    long vhWlEAYEtEylTrxuTYVNMaZ72356117 = -519853601;    long vhWlEAYEtEylTrxuTYVNMaZ1187509 = -324619787;    long vhWlEAYEtEylTrxuTYVNMaZ70724828 = 46368317;    long vhWlEAYEtEylTrxuTYVNMaZ37952418 = -407657881;    long vhWlEAYEtEylTrxuTYVNMaZ22082981 = -259519398;    long vhWlEAYEtEylTrxuTYVNMaZ21337451 = -96408226;    long vhWlEAYEtEylTrxuTYVNMaZ35516267 = -222060755;    long vhWlEAYEtEylTrxuTYVNMaZ68929677 = -760869098;    long vhWlEAYEtEylTrxuTYVNMaZ45318163 = -394118014;    long vhWlEAYEtEylTrxuTYVNMaZ91005805 = 80266393;    long vhWlEAYEtEylTrxuTYVNMaZ12328144 = -783797280;    long vhWlEAYEtEylTrxuTYVNMaZ66080992 = 35777082;    long vhWlEAYEtEylTrxuTYVNMaZ88834743 = 32106426;    long vhWlEAYEtEylTrxuTYVNMaZ88822409 = -39451037;    long vhWlEAYEtEylTrxuTYVNMaZ28935130 = -137861331;    long vhWlEAYEtEylTrxuTYVNMaZ61062615 = -203937906;    long vhWlEAYEtEylTrxuTYVNMaZ78045666 = -774537334;    long vhWlEAYEtEylTrxuTYVNMaZ75240522 = -788676144;    long vhWlEAYEtEylTrxuTYVNMaZ607114 = -553472252;    long vhWlEAYEtEylTrxuTYVNMaZ7227260 = -511860349;    long vhWlEAYEtEylTrxuTYVNMaZ92734217 = -777958829;    long vhWlEAYEtEylTrxuTYVNMaZ8931237 = -868014232;    long vhWlEAYEtEylTrxuTYVNMaZ25457124 = -120884010;    long vhWlEAYEtEylTrxuTYVNMaZ61619191 = 47050653;    long vhWlEAYEtEylTrxuTYVNMaZ47190595 = -502174177;    long vhWlEAYEtEylTrxuTYVNMaZ19432714 = -697451385;    long vhWlEAYEtEylTrxuTYVNMaZ77192269 = -419086307;    long vhWlEAYEtEylTrxuTYVNMaZ34049882 = -678494581;    long vhWlEAYEtEylTrxuTYVNMaZ53382767 = -637086867;    long vhWlEAYEtEylTrxuTYVNMaZ53458264 = -561856459;    long vhWlEAYEtEylTrxuTYVNMaZ34130116 = -682458309;    long vhWlEAYEtEylTrxuTYVNMaZ54304387 = -224842801;    long vhWlEAYEtEylTrxuTYVNMaZ65979260 = 40118499;    long vhWlEAYEtEylTrxuTYVNMaZ55074255 = -703438604;    long vhWlEAYEtEylTrxuTYVNMaZ78530433 = -342315308;    long vhWlEAYEtEylTrxuTYVNMaZ29704311 = -308365945;    long vhWlEAYEtEylTrxuTYVNMaZ71331916 = -156833415;    long vhWlEAYEtEylTrxuTYVNMaZ57998577 = -701674554;    long vhWlEAYEtEylTrxuTYVNMaZ24331512 = -680788450;    long vhWlEAYEtEylTrxuTYVNMaZ5880097 = -239660633;    long vhWlEAYEtEylTrxuTYVNMaZ84431207 = -540446322;    long vhWlEAYEtEylTrxuTYVNMaZ89706850 = -822910745;    long vhWlEAYEtEylTrxuTYVNMaZ65161150 = -636748701;    long vhWlEAYEtEylTrxuTYVNMaZ43888293 = -388017013;    long vhWlEAYEtEylTrxuTYVNMaZ46341411 = 49958364;    long vhWlEAYEtEylTrxuTYVNMaZ43751405 = -342063894;    long vhWlEAYEtEylTrxuTYVNMaZ95158689 = -247617358;    long vhWlEAYEtEylTrxuTYVNMaZ5416369 = -120944673;    long vhWlEAYEtEylTrxuTYVNMaZ53080103 = -523644979;    long vhWlEAYEtEylTrxuTYVNMaZ57047117 = -16978035;    long vhWlEAYEtEylTrxuTYVNMaZ2191797 = -312849625;    long vhWlEAYEtEylTrxuTYVNMaZ21630760 = -395564513;    long vhWlEAYEtEylTrxuTYVNMaZ16466191 = -640213991;    long vhWlEAYEtEylTrxuTYVNMaZ77876233 = -531001008;    long vhWlEAYEtEylTrxuTYVNMaZ1233403 = -250546983;    long vhWlEAYEtEylTrxuTYVNMaZ63424880 = -651839370;    long vhWlEAYEtEylTrxuTYVNMaZ75730384 = -103735777;    long vhWlEAYEtEylTrxuTYVNMaZ9105638 = 99317664;    long vhWlEAYEtEylTrxuTYVNMaZ90761823 = -905483704;    long vhWlEAYEtEylTrxuTYVNMaZ2650268 = -562068013;    long vhWlEAYEtEylTrxuTYVNMaZ44145182 = -677321920;    long vhWlEAYEtEylTrxuTYVNMaZ1466385 = -543566174;    long vhWlEAYEtEylTrxuTYVNMaZ15546910 = -23782232;    long vhWlEAYEtEylTrxuTYVNMaZ91859899 = -832261556;    long vhWlEAYEtEylTrxuTYVNMaZ56875689 = -237275299;    long vhWlEAYEtEylTrxuTYVNMaZ58023757 = -998880946;     vhWlEAYEtEylTrxuTYVNMaZ19410550 = vhWlEAYEtEylTrxuTYVNMaZ60351221;     vhWlEAYEtEylTrxuTYVNMaZ60351221 = vhWlEAYEtEylTrxuTYVNMaZ20288746;     vhWlEAYEtEylTrxuTYVNMaZ20288746 = vhWlEAYEtEylTrxuTYVNMaZ57022992;     vhWlEAYEtEylTrxuTYVNMaZ57022992 = vhWlEAYEtEylTrxuTYVNMaZ3426148;     vhWlEAYEtEylTrxuTYVNMaZ3426148 = vhWlEAYEtEylTrxuTYVNMaZ71431047;     vhWlEAYEtEylTrxuTYVNMaZ71431047 = vhWlEAYEtEylTrxuTYVNMaZ16065115;     vhWlEAYEtEylTrxuTYVNMaZ16065115 = vhWlEAYEtEylTrxuTYVNMaZ71492499;     vhWlEAYEtEylTrxuTYVNMaZ71492499 = vhWlEAYEtEylTrxuTYVNMaZ33695727;     vhWlEAYEtEylTrxuTYVNMaZ33695727 = vhWlEAYEtEylTrxuTYVNMaZ31001398;     vhWlEAYEtEylTrxuTYVNMaZ31001398 = vhWlEAYEtEylTrxuTYVNMaZ71377691;     vhWlEAYEtEylTrxuTYVNMaZ71377691 = vhWlEAYEtEylTrxuTYVNMaZ51082753;     vhWlEAYEtEylTrxuTYVNMaZ51082753 = vhWlEAYEtEylTrxuTYVNMaZ49041876;     vhWlEAYEtEylTrxuTYVNMaZ49041876 = vhWlEAYEtEylTrxuTYVNMaZ50886550;     vhWlEAYEtEylTrxuTYVNMaZ50886550 = vhWlEAYEtEylTrxuTYVNMaZ30891819;     vhWlEAYEtEylTrxuTYVNMaZ30891819 = vhWlEAYEtEylTrxuTYVNMaZ42056745;     vhWlEAYEtEylTrxuTYVNMaZ42056745 = vhWlEAYEtEylTrxuTYVNMaZ95950995;     vhWlEAYEtEylTrxuTYVNMaZ95950995 = vhWlEAYEtEylTrxuTYVNMaZ46414493;     vhWlEAYEtEylTrxuTYVNMaZ46414493 = vhWlEAYEtEylTrxuTYVNMaZ27217547;     vhWlEAYEtEylTrxuTYVNMaZ27217547 = vhWlEAYEtEylTrxuTYVNMaZ19947474;     vhWlEAYEtEylTrxuTYVNMaZ19947474 = vhWlEAYEtEylTrxuTYVNMaZ58636528;     vhWlEAYEtEylTrxuTYVNMaZ58636528 = vhWlEAYEtEylTrxuTYVNMaZ10479313;     vhWlEAYEtEylTrxuTYVNMaZ10479313 = vhWlEAYEtEylTrxuTYVNMaZ34894098;     vhWlEAYEtEylTrxuTYVNMaZ34894098 = vhWlEAYEtEylTrxuTYVNMaZ58669555;     vhWlEAYEtEylTrxuTYVNMaZ58669555 = vhWlEAYEtEylTrxuTYVNMaZ9832397;     vhWlEAYEtEylTrxuTYVNMaZ9832397 = vhWlEAYEtEylTrxuTYVNMaZ83993433;     vhWlEAYEtEylTrxuTYVNMaZ83993433 = vhWlEAYEtEylTrxuTYVNMaZ94238777;     vhWlEAYEtEylTrxuTYVNMaZ94238777 = vhWlEAYEtEylTrxuTYVNMaZ82015232;     vhWlEAYEtEylTrxuTYVNMaZ82015232 = vhWlEAYEtEylTrxuTYVNMaZ18109732;     vhWlEAYEtEylTrxuTYVNMaZ18109732 = vhWlEAYEtEylTrxuTYVNMaZ80237463;     vhWlEAYEtEylTrxuTYVNMaZ80237463 = vhWlEAYEtEylTrxuTYVNMaZ96871281;     vhWlEAYEtEylTrxuTYVNMaZ96871281 = vhWlEAYEtEylTrxuTYVNMaZ17073305;     vhWlEAYEtEylTrxuTYVNMaZ17073305 = vhWlEAYEtEylTrxuTYVNMaZ85103493;     vhWlEAYEtEylTrxuTYVNMaZ85103493 = vhWlEAYEtEylTrxuTYVNMaZ93967620;     vhWlEAYEtEylTrxuTYVNMaZ93967620 = vhWlEAYEtEylTrxuTYVNMaZ72356117;     vhWlEAYEtEylTrxuTYVNMaZ72356117 = vhWlEAYEtEylTrxuTYVNMaZ1187509;     vhWlEAYEtEylTrxuTYVNMaZ1187509 = vhWlEAYEtEylTrxuTYVNMaZ70724828;     vhWlEAYEtEylTrxuTYVNMaZ70724828 = vhWlEAYEtEylTrxuTYVNMaZ37952418;     vhWlEAYEtEylTrxuTYVNMaZ37952418 = vhWlEAYEtEylTrxuTYVNMaZ22082981;     vhWlEAYEtEylTrxuTYVNMaZ22082981 = vhWlEAYEtEylTrxuTYVNMaZ21337451;     vhWlEAYEtEylTrxuTYVNMaZ21337451 = vhWlEAYEtEylTrxuTYVNMaZ35516267;     vhWlEAYEtEylTrxuTYVNMaZ35516267 = vhWlEAYEtEylTrxuTYVNMaZ68929677;     vhWlEAYEtEylTrxuTYVNMaZ68929677 = vhWlEAYEtEylTrxuTYVNMaZ45318163;     vhWlEAYEtEylTrxuTYVNMaZ45318163 = vhWlEAYEtEylTrxuTYVNMaZ91005805;     vhWlEAYEtEylTrxuTYVNMaZ91005805 = vhWlEAYEtEylTrxuTYVNMaZ12328144;     vhWlEAYEtEylTrxuTYVNMaZ12328144 = vhWlEAYEtEylTrxuTYVNMaZ66080992;     vhWlEAYEtEylTrxuTYVNMaZ66080992 = vhWlEAYEtEylTrxuTYVNMaZ88834743;     vhWlEAYEtEylTrxuTYVNMaZ88834743 = vhWlEAYEtEylTrxuTYVNMaZ88822409;     vhWlEAYEtEylTrxuTYVNMaZ88822409 = vhWlEAYEtEylTrxuTYVNMaZ28935130;     vhWlEAYEtEylTrxuTYVNMaZ28935130 = vhWlEAYEtEylTrxuTYVNMaZ61062615;     vhWlEAYEtEylTrxuTYVNMaZ61062615 = vhWlEAYEtEylTrxuTYVNMaZ78045666;     vhWlEAYEtEylTrxuTYVNMaZ78045666 = vhWlEAYEtEylTrxuTYVNMaZ75240522;     vhWlEAYEtEylTrxuTYVNMaZ75240522 = vhWlEAYEtEylTrxuTYVNMaZ607114;     vhWlEAYEtEylTrxuTYVNMaZ607114 = vhWlEAYEtEylTrxuTYVNMaZ7227260;     vhWlEAYEtEylTrxuTYVNMaZ7227260 = vhWlEAYEtEylTrxuTYVNMaZ92734217;     vhWlEAYEtEylTrxuTYVNMaZ92734217 = vhWlEAYEtEylTrxuTYVNMaZ8931237;     vhWlEAYEtEylTrxuTYVNMaZ8931237 = vhWlEAYEtEylTrxuTYVNMaZ25457124;     vhWlEAYEtEylTrxuTYVNMaZ25457124 = vhWlEAYEtEylTrxuTYVNMaZ61619191;     vhWlEAYEtEylTrxuTYVNMaZ61619191 = vhWlEAYEtEylTrxuTYVNMaZ47190595;     vhWlEAYEtEylTrxuTYVNMaZ47190595 = vhWlEAYEtEylTrxuTYVNMaZ19432714;     vhWlEAYEtEylTrxuTYVNMaZ19432714 = vhWlEAYEtEylTrxuTYVNMaZ77192269;     vhWlEAYEtEylTrxuTYVNMaZ77192269 = vhWlEAYEtEylTrxuTYVNMaZ34049882;     vhWlEAYEtEylTrxuTYVNMaZ34049882 = vhWlEAYEtEylTrxuTYVNMaZ53382767;     vhWlEAYEtEylTrxuTYVNMaZ53382767 = vhWlEAYEtEylTrxuTYVNMaZ53458264;     vhWlEAYEtEylTrxuTYVNMaZ53458264 = vhWlEAYEtEylTrxuTYVNMaZ34130116;     vhWlEAYEtEylTrxuTYVNMaZ34130116 = vhWlEAYEtEylTrxuTYVNMaZ54304387;     vhWlEAYEtEylTrxuTYVNMaZ54304387 = vhWlEAYEtEylTrxuTYVNMaZ65979260;     vhWlEAYEtEylTrxuTYVNMaZ65979260 = vhWlEAYEtEylTrxuTYVNMaZ55074255;     vhWlEAYEtEylTrxuTYVNMaZ55074255 = vhWlEAYEtEylTrxuTYVNMaZ78530433;     vhWlEAYEtEylTrxuTYVNMaZ78530433 = vhWlEAYEtEylTrxuTYVNMaZ29704311;     vhWlEAYEtEylTrxuTYVNMaZ29704311 = vhWlEAYEtEylTrxuTYVNMaZ71331916;     vhWlEAYEtEylTrxuTYVNMaZ71331916 = vhWlEAYEtEylTrxuTYVNMaZ57998577;     vhWlEAYEtEylTrxuTYVNMaZ57998577 = vhWlEAYEtEylTrxuTYVNMaZ24331512;     vhWlEAYEtEylTrxuTYVNMaZ24331512 = vhWlEAYEtEylTrxuTYVNMaZ5880097;     vhWlEAYEtEylTrxuTYVNMaZ5880097 = vhWlEAYEtEylTrxuTYVNMaZ84431207;     vhWlEAYEtEylTrxuTYVNMaZ84431207 = vhWlEAYEtEylTrxuTYVNMaZ89706850;     vhWlEAYEtEylTrxuTYVNMaZ89706850 = vhWlEAYEtEylTrxuTYVNMaZ65161150;     vhWlEAYEtEylTrxuTYVNMaZ65161150 = vhWlEAYEtEylTrxuTYVNMaZ43888293;     vhWlEAYEtEylTrxuTYVNMaZ43888293 = vhWlEAYEtEylTrxuTYVNMaZ46341411;     vhWlEAYEtEylTrxuTYVNMaZ46341411 = vhWlEAYEtEylTrxuTYVNMaZ43751405;     vhWlEAYEtEylTrxuTYVNMaZ43751405 = vhWlEAYEtEylTrxuTYVNMaZ95158689;     vhWlEAYEtEylTrxuTYVNMaZ95158689 = vhWlEAYEtEylTrxuTYVNMaZ5416369;     vhWlEAYEtEylTrxuTYVNMaZ5416369 = vhWlEAYEtEylTrxuTYVNMaZ53080103;     vhWlEAYEtEylTrxuTYVNMaZ53080103 = vhWlEAYEtEylTrxuTYVNMaZ57047117;     vhWlEAYEtEylTrxuTYVNMaZ57047117 = vhWlEAYEtEylTrxuTYVNMaZ2191797;     vhWlEAYEtEylTrxuTYVNMaZ2191797 = vhWlEAYEtEylTrxuTYVNMaZ21630760;     vhWlEAYEtEylTrxuTYVNMaZ21630760 = vhWlEAYEtEylTrxuTYVNMaZ16466191;     vhWlEAYEtEylTrxuTYVNMaZ16466191 = vhWlEAYEtEylTrxuTYVNMaZ77876233;     vhWlEAYEtEylTrxuTYVNMaZ77876233 = vhWlEAYEtEylTrxuTYVNMaZ1233403;     vhWlEAYEtEylTrxuTYVNMaZ1233403 = vhWlEAYEtEylTrxuTYVNMaZ63424880;     vhWlEAYEtEylTrxuTYVNMaZ63424880 = vhWlEAYEtEylTrxuTYVNMaZ75730384;     vhWlEAYEtEylTrxuTYVNMaZ75730384 = vhWlEAYEtEylTrxuTYVNMaZ9105638;     vhWlEAYEtEylTrxuTYVNMaZ9105638 = vhWlEAYEtEylTrxuTYVNMaZ90761823;     vhWlEAYEtEylTrxuTYVNMaZ90761823 = vhWlEAYEtEylTrxuTYVNMaZ2650268;     vhWlEAYEtEylTrxuTYVNMaZ2650268 = vhWlEAYEtEylTrxuTYVNMaZ44145182;     vhWlEAYEtEylTrxuTYVNMaZ44145182 = vhWlEAYEtEylTrxuTYVNMaZ1466385;     vhWlEAYEtEylTrxuTYVNMaZ1466385 = vhWlEAYEtEylTrxuTYVNMaZ15546910;     vhWlEAYEtEylTrxuTYVNMaZ15546910 = vhWlEAYEtEylTrxuTYVNMaZ91859899;     vhWlEAYEtEylTrxuTYVNMaZ91859899 = vhWlEAYEtEylTrxuTYVNMaZ56875689;     vhWlEAYEtEylTrxuTYVNMaZ56875689 = vhWlEAYEtEylTrxuTYVNMaZ58023757;     vhWlEAYEtEylTrxuTYVNMaZ58023757 = vhWlEAYEtEylTrxuTYVNMaZ19410550;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void FqlZmkrADBJzeZlBEtkyuWiyTcDhYJCAIHzPbtNWE33599507() {     long rUzjigsjcfzApbjInGKhKbu71146000 = -15135779;    long rUzjigsjcfzApbjInGKhKbu76025204 = -705534384;    long rUzjigsjcfzApbjInGKhKbu69089105 = -684147647;    long rUzjigsjcfzApbjInGKhKbu32098394 = -824730130;    long rUzjigsjcfzApbjInGKhKbu80150080 = -820612970;    long rUzjigsjcfzApbjInGKhKbu96314401 = -938509242;    long rUzjigsjcfzApbjInGKhKbu89841957 = -263212486;    long rUzjigsjcfzApbjInGKhKbu90283977 = -81782361;    long rUzjigsjcfzApbjInGKhKbu84993803 = -540092127;    long rUzjigsjcfzApbjInGKhKbu99798521 = -408344947;    long rUzjigsjcfzApbjInGKhKbu66670390 = -480251514;    long rUzjigsjcfzApbjInGKhKbu61439131 = -37724357;    long rUzjigsjcfzApbjInGKhKbu36222669 = -441124677;    long rUzjigsjcfzApbjInGKhKbu9654269 = -588849456;    long rUzjigsjcfzApbjInGKhKbu84907076 = -210713442;    long rUzjigsjcfzApbjInGKhKbu53784017 = 77850947;    long rUzjigsjcfzApbjInGKhKbu51921520 = -477427124;    long rUzjigsjcfzApbjInGKhKbu32097415 = -402884342;    long rUzjigsjcfzApbjInGKhKbu86791396 = -963983041;    long rUzjigsjcfzApbjInGKhKbu39677048 = -572775226;    long rUzjigsjcfzApbjInGKhKbu4383881 = -666588011;    long rUzjigsjcfzApbjInGKhKbu12898767 = -204347722;    long rUzjigsjcfzApbjInGKhKbu36243612 = -15988067;    long rUzjigsjcfzApbjInGKhKbu51319805 = -705430867;    long rUzjigsjcfzApbjInGKhKbu81248255 = -351941248;    long rUzjigsjcfzApbjInGKhKbu41698847 = -661120710;    long rUzjigsjcfzApbjInGKhKbu33067413 = -722804427;    long rUzjigsjcfzApbjInGKhKbu80144457 = -44836995;    long rUzjigsjcfzApbjInGKhKbu92859805 = -370814842;    long rUzjigsjcfzApbjInGKhKbu50222546 = -549287754;    long rUzjigsjcfzApbjInGKhKbu34090090 = -517123122;    long rUzjigsjcfzApbjInGKhKbu30103035 = -517460434;    long rUzjigsjcfzApbjInGKhKbu83196803 = -625243242;    long rUzjigsjcfzApbjInGKhKbu87991332 = -789102978;    long rUzjigsjcfzApbjInGKhKbu70561245 = -736663244;    long rUzjigsjcfzApbjInGKhKbu82887118 = -560788615;    long rUzjigsjcfzApbjInGKhKbu20373055 = -597986427;    long rUzjigsjcfzApbjInGKhKbu38786031 = -491170245;    long rUzjigsjcfzApbjInGKhKbu91857823 = -704836793;    long rUzjigsjcfzApbjInGKhKbu46419867 = -715023893;    long rUzjigsjcfzApbjInGKhKbu4200354 = -341219543;    long rUzjigsjcfzApbjInGKhKbu28955078 = -749388720;    long rUzjigsjcfzApbjInGKhKbu1901396 = -294894546;    long rUzjigsjcfzApbjInGKhKbu83941623 = -945122285;    long rUzjigsjcfzApbjInGKhKbu84357352 = -284294363;    long rUzjigsjcfzApbjInGKhKbu67775439 = -388114859;    long rUzjigsjcfzApbjInGKhKbu75000938 = -430234027;    long rUzjigsjcfzApbjInGKhKbu67806874 = -443855733;    long rUzjigsjcfzApbjInGKhKbu17953583 = -101814060;    long rUzjigsjcfzApbjInGKhKbu49718874 = -62949286;    long rUzjigsjcfzApbjInGKhKbu18725559 = -483041490;    long rUzjigsjcfzApbjInGKhKbu7220275 = -150275704;    long rUzjigsjcfzApbjInGKhKbu23845860 = -297585440;    long rUzjigsjcfzApbjInGKhKbu77286500 = -126659661;    long rUzjigsjcfzApbjInGKhKbu29215626 = -807722030;    long rUzjigsjcfzApbjInGKhKbu58247234 = -810788057;    long rUzjigsjcfzApbjInGKhKbu39781592 = -589546318;    long rUzjigsjcfzApbjInGKhKbu17769301 = -978716780;    long rUzjigsjcfzApbjInGKhKbu50850138 = -372788882;    long rUzjigsjcfzApbjInGKhKbu38451233 = -59492260;    long rUzjigsjcfzApbjInGKhKbu63246988 = -115704816;    long rUzjigsjcfzApbjInGKhKbu9697501 = -118375492;    long rUzjigsjcfzApbjInGKhKbu97424172 = -710967519;    long rUzjigsjcfzApbjInGKhKbu34771257 = -990804373;    long rUzjigsjcfzApbjInGKhKbu65708431 = -891221825;    long rUzjigsjcfzApbjInGKhKbu36567356 = -962791080;    long rUzjigsjcfzApbjInGKhKbu78242328 = -412481115;    long rUzjigsjcfzApbjInGKhKbu48231337 = -652021699;    long rUzjigsjcfzApbjInGKhKbu39093023 = -852186212;    long rUzjigsjcfzApbjInGKhKbu2019958 = -649924827;    long rUzjigsjcfzApbjInGKhKbu33410963 = -324162627;    long rUzjigsjcfzApbjInGKhKbu13135490 = -986256879;    long rUzjigsjcfzApbjInGKhKbu40239591 = -698047550;    long rUzjigsjcfzApbjInGKhKbu40371529 = -148959149;    long rUzjigsjcfzApbjInGKhKbu35476694 = -131555683;    long rUzjigsjcfzApbjInGKhKbu75428803 = -917199292;    long rUzjigsjcfzApbjInGKhKbu10997372 = -909453177;    long rUzjigsjcfzApbjInGKhKbu52301988 = -70865782;    long rUzjigsjcfzApbjInGKhKbu66962453 = -321136504;    long rUzjigsjcfzApbjInGKhKbu13472817 = -963826390;    long rUzjigsjcfzApbjInGKhKbu66697909 = -130886684;    long rUzjigsjcfzApbjInGKhKbu65260539 = -178948695;    long rUzjigsjcfzApbjInGKhKbu62190875 = -943022936;    long rUzjigsjcfzApbjInGKhKbu43140931 = -207865557;    long rUzjigsjcfzApbjInGKhKbu31496988 = 33753735;    long rUzjigsjcfzApbjInGKhKbu26869816 = -266847419;    long rUzjigsjcfzApbjInGKhKbu6257175 = -119874994;    long rUzjigsjcfzApbjInGKhKbu5910303 = -398583582;    long rUzjigsjcfzApbjInGKhKbu58775706 = -981380948;    long rUzjigsjcfzApbjInGKhKbu12314012 = -925875188;    long rUzjigsjcfzApbjInGKhKbu43105526 = -971242298;    long rUzjigsjcfzApbjInGKhKbu2603755 = -619269647;    long rUzjigsjcfzApbjInGKhKbu87935892 = -18381363;    long rUzjigsjcfzApbjInGKhKbu53406591 = -545344533;    long rUzjigsjcfzApbjInGKhKbu83172878 = -499319077;    long rUzjigsjcfzApbjInGKhKbu94502853 = -122844052;    long rUzjigsjcfzApbjInGKhKbu31530905 = 61578799;    long rUzjigsjcfzApbjInGKhKbu67130138 = -304090173;    long rUzjigsjcfzApbjInGKhKbu18233193 = 46099539;    long rUzjigsjcfzApbjInGKhKbu47789996 = -15135779;     rUzjigsjcfzApbjInGKhKbu71146000 = rUzjigsjcfzApbjInGKhKbu76025204;     rUzjigsjcfzApbjInGKhKbu76025204 = rUzjigsjcfzApbjInGKhKbu69089105;     rUzjigsjcfzApbjInGKhKbu69089105 = rUzjigsjcfzApbjInGKhKbu32098394;     rUzjigsjcfzApbjInGKhKbu32098394 = rUzjigsjcfzApbjInGKhKbu80150080;     rUzjigsjcfzApbjInGKhKbu80150080 = rUzjigsjcfzApbjInGKhKbu96314401;     rUzjigsjcfzApbjInGKhKbu96314401 = rUzjigsjcfzApbjInGKhKbu89841957;     rUzjigsjcfzApbjInGKhKbu89841957 = rUzjigsjcfzApbjInGKhKbu90283977;     rUzjigsjcfzApbjInGKhKbu90283977 = rUzjigsjcfzApbjInGKhKbu84993803;     rUzjigsjcfzApbjInGKhKbu84993803 = rUzjigsjcfzApbjInGKhKbu99798521;     rUzjigsjcfzApbjInGKhKbu99798521 = rUzjigsjcfzApbjInGKhKbu66670390;     rUzjigsjcfzApbjInGKhKbu66670390 = rUzjigsjcfzApbjInGKhKbu61439131;     rUzjigsjcfzApbjInGKhKbu61439131 = rUzjigsjcfzApbjInGKhKbu36222669;     rUzjigsjcfzApbjInGKhKbu36222669 = rUzjigsjcfzApbjInGKhKbu9654269;     rUzjigsjcfzApbjInGKhKbu9654269 = rUzjigsjcfzApbjInGKhKbu84907076;     rUzjigsjcfzApbjInGKhKbu84907076 = rUzjigsjcfzApbjInGKhKbu53784017;     rUzjigsjcfzApbjInGKhKbu53784017 = rUzjigsjcfzApbjInGKhKbu51921520;     rUzjigsjcfzApbjInGKhKbu51921520 = rUzjigsjcfzApbjInGKhKbu32097415;     rUzjigsjcfzApbjInGKhKbu32097415 = rUzjigsjcfzApbjInGKhKbu86791396;     rUzjigsjcfzApbjInGKhKbu86791396 = rUzjigsjcfzApbjInGKhKbu39677048;     rUzjigsjcfzApbjInGKhKbu39677048 = rUzjigsjcfzApbjInGKhKbu4383881;     rUzjigsjcfzApbjInGKhKbu4383881 = rUzjigsjcfzApbjInGKhKbu12898767;     rUzjigsjcfzApbjInGKhKbu12898767 = rUzjigsjcfzApbjInGKhKbu36243612;     rUzjigsjcfzApbjInGKhKbu36243612 = rUzjigsjcfzApbjInGKhKbu51319805;     rUzjigsjcfzApbjInGKhKbu51319805 = rUzjigsjcfzApbjInGKhKbu81248255;     rUzjigsjcfzApbjInGKhKbu81248255 = rUzjigsjcfzApbjInGKhKbu41698847;     rUzjigsjcfzApbjInGKhKbu41698847 = rUzjigsjcfzApbjInGKhKbu33067413;     rUzjigsjcfzApbjInGKhKbu33067413 = rUzjigsjcfzApbjInGKhKbu80144457;     rUzjigsjcfzApbjInGKhKbu80144457 = rUzjigsjcfzApbjInGKhKbu92859805;     rUzjigsjcfzApbjInGKhKbu92859805 = rUzjigsjcfzApbjInGKhKbu50222546;     rUzjigsjcfzApbjInGKhKbu50222546 = rUzjigsjcfzApbjInGKhKbu34090090;     rUzjigsjcfzApbjInGKhKbu34090090 = rUzjigsjcfzApbjInGKhKbu30103035;     rUzjigsjcfzApbjInGKhKbu30103035 = rUzjigsjcfzApbjInGKhKbu83196803;     rUzjigsjcfzApbjInGKhKbu83196803 = rUzjigsjcfzApbjInGKhKbu87991332;     rUzjigsjcfzApbjInGKhKbu87991332 = rUzjigsjcfzApbjInGKhKbu70561245;     rUzjigsjcfzApbjInGKhKbu70561245 = rUzjigsjcfzApbjInGKhKbu82887118;     rUzjigsjcfzApbjInGKhKbu82887118 = rUzjigsjcfzApbjInGKhKbu20373055;     rUzjigsjcfzApbjInGKhKbu20373055 = rUzjigsjcfzApbjInGKhKbu38786031;     rUzjigsjcfzApbjInGKhKbu38786031 = rUzjigsjcfzApbjInGKhKbu91857823;     rUzjigsjcfzApbjInGKhKbu91857823 = rUzjigsjcfzApbjInGKhKbu46419867;     rUzjigsjcfzApbjInGKhKbu46419867 = rUzjigsjcfzApbjInGKhKbu4200354;     rUzjigsjcfzApbjInGKhKbu4200354 = rUzjigsjcfzApbjInGKhKbu28955078;     rUzjigsjcfzApbjInGKhKbu28955078 = rUzjigsjcfzApbjInGKhKbu1901396;     rUzjigsjcfzApbjInGKhKbu1901396 = rUzjigsjcfzApbjInGKhKbu83941623;     rUzjigsjcfzApbjInGKhKbu83941623 = rUzjigsjcfzApbjInGKhKbu84357352;     rUzjigsjcfzApbjInGKhKbu84357352 = rUzjigsjcfzApbjInGKhKbu67775439;     rUzjigsjcfzApbjInGKhKbu67775439 = rUzjigsjcfzApbjInGKhKbu75000938;     rUzjigsjcfzApbjInGKhKbu75000938 = rUzjigsjcfzApbjInGKhKbu67806874;     rUzjigsjcfzApbjInGKhKbu67806874 = rUzjigsjcfzApbjInGKhKbu17953583;     rUzjigsjcfzApbjInGKhKbu17953583 = rUzjigsjcfzApbjInGKhKbu49718874;     rUzjigsjcfzApbjInGKhKbu49718874 = rUzjigsjcfzApbjInGKhKbu18725559;     rUzjigsjcfzApbjInGKhKbu18725559 = rUzjigsjcfzApbjInGKhKbu7220275;     rUzjigsjcfzApbjInGKhKbu7220275 = rUzjigsjcfzApbjInGKhKbu23845860;     rUzjigsjcfzApbjInGKhKbu23845860 = rUzjigsjcfzApbjInGKhKbu77286500;     rUzjigsjcfzApbjInGKhKbu77286500 = rUzjigsjcfzApbjInGKhKbu29215626;     rUzjigsjcfzApbjInGKhKbu29215626 = rUzjigsjcfzApbjInGKhKbu58247234;     rUzjigsjcfzApbjInGKhKbu58247234 = rUzjigsjcfzApbjInGKhKbu39781592;     rUzjigsjcfzApbjInGKhKbu39781592 = rUzjigsjcfzApbjInGKhKbu17769301;     rUzjigsjcfzApbjInGKhKbu17769301 = rUzjigsjcfzApbjInGKhKbu50850138;     rUzjigsjcfzApbjInGKhKbu50850138 = rUzjigsjcfzApbjInGKhKbu38451233;     rUzjigsjcfzApbjInGKhKbu38451233 = rUzjigsjcfzApbjInGKhKbu63246988;     rUzjigsjcfzApbjInGKhKbu63246988 = rUzjigsjcfzApbjInGKhKbu9697501;     rUzjigsjcfzApbjInGKhKbu9697501 = rUzjigsjcfzApbjInGKhKbu97424172;     rUzjigsjcfzApbjInGKhKbu97424172 = rUzjigsjcfzApbjInGKhKbu34771257;     rUzjigsjcfzApbjInGKhKbu34771257 = rUzjigsjcfzApbjInGKhKbu65708431;     rUzjigsjcfzApbjInGKhKbu65708431 = rUzjigsjcfzApbjInGKhKbu36567356;     rUzjigsjcfzApbjInGKhKbu36567356 = rUzjigsjcfzApbjInGKhKbu78242328;     rUzjigsjcfzApbjInGKhKbu78242328 = rUzjigsjcfzApbjInGKhKbu48231337;     rUzjigsjcfzApbjInGKhKbu48231337 = rUzjigsjcfzApbjInGKhKbu39093023;     rUzjigsjcfzApbjInGKhKbu39093023 = rUzjigsjcfzApbjInGKhKbu2019958;     rUzjigsjcfzApbjInGKhKbu2019958 = rUzjigsjcfzApbjInGKhKbu33410963;     rUzjigsjcfzApbjInGKhKbu33410963 = rUzjigsjcfzApbjInGKhKbu13135490;     rUzjigsjcfzApbjInGKhKbu13135490 = rUzjigsjcfzApbjInGKhKbu40239591;     rUzjigsjcfzApbjInGKhKbu40239591 = rUzjigsjcfzApbjInGKhKbu40371529;     rUzjigsjcfzApbjInGKhKbu40371529 = rUzjigsjcfzApbjInGKhKbu35476694;     rUzjigsjcfzApbjInGKhKbu35476694 = rUzjigsjcfzApbjInGKhKbu75428803;     rUzjigsjcfzApbjInGKhKbu75428803 = rUzjigsjcfzApbjInGKhKbu10997372;     rUzjigsjcfzApbjInGKhKbu10997372 = rUzjigsjcfzApbjInGKhKbu52301988;     rUzjigsjcfzApbjInGKhKbu52301988 = rUzjigsjcfzApbjInGKhKbu66962453;     rUzjigsjcfzApbjInGKhKbu66962453 = rUzjigsjcfzApbjInGKhKbu13472817;     rUzjigsjcfzApbjInGKhKbu13472817 = rUzjigsjcfzApbjInGKhKbu66697909;     rUzjigsjcfzApbjInGKhKbu66697909 = rUzjigsjcfzApbjInGKhKbu65260539;     rUzjigsjcfzApbjInGKhKbu65260539 = rUzjigsjcfzApbjInGKhKbu62190875;     rUzjigsjcfzApbjInGKhKbu62190875 = rUzjigsjcfzApbjInGKhKbu43140931;     rUzjigsjcfzApbjInGKhKbu43140931 = rUzjigsjcfzApbjInGKhKbu31496988;     rUzjigsjcfzApbjInGKhKbu31496988 = rUzjigsjcfzApbjInGKhKbu26869816;     rUzjigsjcfzApbjInGKhKbu26869816 = rUzjigsjcfzApbjInGKhKbu6257175;     rUzjigsjcfzApbjInGKhKbu6257175 = rUzjigsjcfzApbjInGKhKbu5910303;     rUzjigsjcfzApbjInGKhKbu5910303 = rUzjigsjcfzApbjInGKhKbu58775706;     rUzjigsjcfzApbjInGKhKbu58775706 = rUzjigsjcfzApbjInGKhKbu12314012;     rUzjigsjcfzApbjInGKhKbu12314012 = rUzjigsjcfzApbjInGKhKbu43105526;     rUzjigsjcfzApbjInGKhKbu43105526 = rUzjigsjcfzApbjInGKhKbu2603755;     rUzjigsjcfzApbjInGKhKbu2603755 = rUzjigsjcfzApbjInGKhKbu87935892;     rUzjigsjcfzApbjInGKhKbu87935892 = rUzjigsjcfzApbjInGKhKbu53406591;     rUzjigsjcfzApbjInGKhKbu53406591 = rUzjigsjcfzApbjInGKhKbu83172878;     rUzjigsjcfzApbjInGKhKbu83172878 = rUzjigsjcfzApbjInGKhKbu94502853;     rUzjigsjcfzApbjInGKhKbu94502853 = rUzjigsjcfzApbjInGKhKbu31530905;     rUzjigsjcfzApbjInGKhKbu31530905 = rUzjigsjcfzApbjInGKhKbu67130138;     rUzjigsjcfzApbjInGKhKbu67130138 = rUzjigsjcfzApbjInGKhKbu18233193;     rUzjigsjcfzApbjInGKhKbu18233193 = rUzjigsjcfzApbjInGKhKbu47789996;     rUzjigsjcfzApbjInGKhKbu47789996 = rUzjigsjcfzApbjInGKhKbu71146000;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void ouFuCkkwPtOrMshxqfCnuXsKviXAKEXPKpYLoAGzr63585736() {     long zdiKPmBHEARKWjQCuzTMklL93539589 = -877015600;    long zdiKPmBHEARKWjQCuzTMklL21800389 = -611482314;    long zdiKPmBHEARKWjQCuzTMklL96545172 = -966672877;    long zdiKPmBHEARKWjQCuzTMklL62025221 = 89403168;    long zdiKPmBHEARKWjQCuzTMklL69484232 = -943314650;    long zdiKPmBHEARKWjQCuzTMklL76392086 = 315192;    long zdiKPmBHEARKWjQCuzTMklL13450361 = -380663325;    long zdiKPmBHEARKWjQCuzTMklL96703785 = -848201688;    long zdiKPmBHEARKWjQCuzTMklL99416770 = -710642096;    long zdiKPmBHEARKWjQCuzTMklL94922592 = -514279408;    long zdiKPmBHEARKWjQCuzTMklL83891644 = -517403843;    long zdiKPmBHEARKWjQCuzTMklL3050404 = -552991288;    long zdiKPmBHEARKWjQCuzTMklL71377936 = 61816478;    long zdiKPmBHEARKWjQCuzTMklL98424800 = -771405162;    long zdiKPmBHEARKWjQCuzTMklL76470244 = -975478303;    long zdiKPmBHEARKWjQCuzTMklL23475383 = 28979055;    long zdiKPmBHEARKWjQCuzTMklL45892112 = -935092374;    long zdiKPmBHEARKWjQCuzTMklL15073299 = -457555411;    long zdiKPmBHEARKWjQCuzTMklL7644757 = -481102900;    long zdiKPmBHEARKWjQCuzTMklL46119568 = -213385228;    long zdiKPmBHEARKWjQCuzTMklL25597564 = -947608945;    long zdiKPmBHEARKWjQCuzTMklL98417719 = -199122152;    long zdiKPmBHEARKWjQCuzTMklL2658539 = -833110817;    long zdiKPmBHEARKWjQCuzTMklL34169484 = -288503202;    long zdiKPmBHEARKWjQCuzTMklL88345812 = -646806520;    long zdiKPmBHEARKWjQCuzTMklL13427765 = -96809006;    long zdiKPmBHEARKWjQCuzTMklL9935252 = -179591207;    long zdiKPmBHEARKWjQCuzTMklL50652383 = -324324460;    long zdiKPmBHEARKWjQCuzTMklL87073919 = -69001647;    long zdiKPmBHEARKWjQCuzTMklL83289856 = -794152247;    long zdiKPmBHEARKWjQCuzTMklL44968217 = -211346040;    long zdiKPmBHEARKWjQCuzTMklL2920369 = -777710027;    long zdiKPmBHEARKWjQCuzTMklL78783050 = -952642521;    long zdiKPmBHEARKWjQCuzTMklL47097183 = -136548096;    long zdiKPmBHEARKWjQCuzTMklL64432572 = -541105742;    long zdiKPmBHEARKWjQCuzTMklL81751797 = -796418246;    long zdiKPmBHEARKWjQCuzTMklL1871400 = -231281000;    long zdiKPmBHEARKWjQCuzTMklL22494452 = -363533038;    long zdiKPmBHEARKWjQCuzTMklL4852359 = -393201408;    long zdiKPmBHEARKWjQCuzTMklL94732688 = -141816236;    long zdiKPmBHEARKWjQCuzTMklL45102057 = -756453311;    long zdiKPmBHEARKWjQCuzTMklL31765808 = -313505328;    long zdiKPmBHEARKWjQCuzTMklL47168227 = -723294875;    long zdiKPmBHEARKWjQCuzTMklL24153845 = -285521490;    long zdiKPmBHEARKWjQCuzTMklL68322566 = -720178440;    long zdiKPmBHEARKWjQCuzTMklL35447753 = -758299283;    long zdiKPmBHEARKWjQCuzTMklL59600543 = -527363658;    long zdiKPmBHEARKWjQCuzTMklL37021967 = -691629367;    long zdiKPmBHEARKWjQCuzTMklL93755098 = -487766897;    long zdiKPmBHEARKWjQCuzTMklL26757197 = -617944659;    long zdiKPmBHEARKWjQCuzTMklL14335406 = -159562760;    long zdiKPmBHEARKWjQCuzTMklL66524274 = -198949238;    long zdiKPmBHEARKWjQCuzTMklL26711915 = -77442662;    long zdiKPmBHEARKWjQCuzTMklL27322775 = -970420619;    long zdiKPmBHEARKWjQCuzTMklL37988173 = -91526868;    long zdiKPmBHEARKWjQCuzTMklL95121870 = -577893449;    long zdiKPmBHEARKWjQCuzTMklL19141850 = -778371498;    long zdiKPmBHEARKWjQCuzTMklL62375688 = -578169676;    long zdiKPmBHEARKWjQCuzTMklL73679409 = -263790312;    long zdiKPmBHEARKWjQCuzTMklL56056467 = -746505645;    long zdiKPmBHEARKWjQCuzTMklL66456834 = -820093602;    long zdiKPmBHEARKWjQCuzTMklL62797978 = 43661135;    long zdiKPmBHEARKWjQCuzTMklL9629867 = -679200042;    long zdiKPmBHEARKWjQCuzTMklL16126915 = -916489849;    long zdiKPmBHEARKWjQCuzTMklL49954376 = -202933369;    long zdiKPmBHEARKWjQCuzTMklL80971276 = -739693816;    long zdiKPmBHEARKWjQCuzTMklL24267353 = -600348767;    long zdiKPmBHEARKWjQCuzTMklL24280754 = -801635427;    long zdiKPmBHEARKWjQCuzTMklL33992229 = -130299420;    long zdiKPmBHEARKWjQCuzTMklL94718446 = -79060058;    long zdiKPmBHEARKWjQCuzTMklL21603984 = -739739946;    long zdiKPmBHEARKWjQCuzTMklL23397661 = -471559336;    long zdiKPmBHEARKWjQCuzTMklL10220941 = 35645997;    long zdiKPmBHEARKWjQCuzTMklL12912069 = -239286665;    long zdiKPmBHEARKWjQCuzTMklL1017512 = -456931918;    long zdiKPmBHEARKWjQCuzTMklL93831755 = -534103618;    long zdiKPmBHEARKWjQCuzTMklL51249492 = -475827277;    long zdiKPmBHEARKWjQCuzTMklL78504694 = -447589327;    long zdiKPmBHEARKWjQCuzTMklL65846917 = -568324763;    long zdiKPmBHEARKWjQCuzTMklL52898060 = -888507237;    long zdiKPmBHEARKWjQCuzTMklL53827222 = -569445348;    long zdiKPmBHEARKWjQCuzTMklL72913284 = -487961840;    long zdiKPmBHEARKWjQCuzTMklL56897285 = -836557564;    long zdiKPmBHEARKWjQCuzTMklL60316722 = -451056988;    long zdiKPmBHEARKWjQCuzTMklL68954450 = -534589488;    long zdiKPmBHEARKWjQCuzTMklL78443942 = 87603197;    long zdiKPmBHEARKWjQCuzTMklL76208453 = -600267365;    long zdiKPmBHEARKWjQCuzTMklL51460275 = -982221903;    long zdiKPmBHEARKWjQCuzTMklL9109010 = 54978772;    long zdiKPmBHEARKWjQCuzTMklL69310702 = -963212294;    long zdiKPmBHEARKWjQCuzTMklL62609948 = 81953251;    long zdiKPmBHEARKWjQCuzTMklL39495711 = -653111324;    long zdiKPmBHEARKWjQCuzTMklL48815043 = 257274;    long zdiKPmBHEARKWjQCuzTMklL48795891 = -646695764;    long zdiKPmBHEARKWjQCuzTMklL28275855 = -321722634;    long zdiKPmBHEARKWjQCuzTMklL82304079 = -700114446;    long zdiKPmBHEARKWjQCuzTMklL22135941 = -634305287;    long zdiKPmBHEARKWjQCuzTMklL31041313 = -806805026;    long zdiKPmBHEARKWjQCuzTMklL74199468 = 17411878;    long zdiKPmBHEARKWjQCuzTMklL87351289 = -877015600;     zdiKPmBHEARKWjQCuzTMklL93539589 = zdiKPmBHEARKWjQCuzTMklL21800389;     zdiKPmBHEARKWjQCuzTMklL21800389 = zdiKPmBHEARKWjQCuzTMklL96545172;     zdiKPmBHEARKWjQCuzTMklL96545172 = zdiKPmBHEARKWjQCuzTMklL62025221;     zdiKPmBHEARKWjQCuzTMklL62025221 = zdiKPmBHEARKWjQCuzTMklL69484232;     zdiKPmBHEARKWjQCuzTMklL69484232 = zdiKPmBHEARKWjQCuzTMklL76392086;     zdiKPmBHEARKWjQCuzTMklL76392086 = zdiKPmBHEARKWjQCuzTMklL13450361;     zdiKPmBHEARKWjQCuzTMklL13450361 = zdiKPmBHEARKWjQCuzTMklL96703785;     zdiKPmBHEARKWjQCuzTMklL96703785 = zdiKPmBHEARKWjQCuzTMklL99416770;     zdiKPmBHEARKWjQCuzTMklL99416770 = zdiKPmBHEARKWjQCuzTMklL94922592;     zdiKPmBHEARKWjQCuzTMklL94922592 = zdiKPmBHEARKWjQCuzTMklL83891644;     zdiKPmBHEARKWjQCuzTMklL83891644 = zdiKPmBHEARKWjQCuzTMklL3050404;     zdiKPmBHEARKWjQCuzTMklL3050404 = zdiKPmBHEARKWjQCuzTMklL71377936;     zdiKPmBHEARKWjQCuzTMklL71377936 = zdiKPmBHEARKWjQCuzTMklL98424800;     zdiKPmBHEARKWjQCuzTMklL98424800 = zdiKPmBHEARKWjQCuzTMklL76470244;     zdiKPmBHEARKWjQCuzTMklL76470244 = zdiKPmBHEARKWjQCuzTMklL23475383;     zdiKPmBHEARKWjQCuzTMklL23475383 = zdiKPmBHEARKWjQCuzTMklL45892112;     zdiKPmBHEARKWjQCuzTMklL45892112 = zdiKPmBHEARKWjQCuzTMklL15073299;     zdiKPmBHEARKWjQCuzTMklL15073299 = zdiKPmBHEARKWjQCuzTMklL7644757;     zdiKPmBHEARKWjQCuzTMklL7644757 = zdiKPmBHEARKWjQCuzTMklL46119568;     zdiKPmBHEARKWjQCuzTMklL46119568 = zdiKPmBHEARKWjQCuzTMklL25597564;     zdiKPmBHEARKWjQCuzTMklL25597564 = zdiKPmBHEARKWjQCuzTMklL98417719;     zdiKPmBHEARKWjQCuzTMklL98417719 = zdiKPmBHEARKWjQCuzTMklL2658539;     zdiKPmBHEARKWjQCuzTMklL2658539 = zdiKPmBHEARKWjQCuzTMklL34169484;     zdiKPmBHEARKWjQCuzTMklL34169484 = zdiKPmBHEARKWjQCuzTMklL88345812;     zdiKPmBHEARKWjQCuzTMklL88345812 = zdiKPmBHEARKWjQCuzTMklL13427765;     zdiKPmBHEARKWjQCuzTMklL13427765 = zdiKPmBHEARKWjQCuzTMklL9935252;     zdiKPmBHEARKWjQCuzTMklL9935252 = zdiKPmBHEARKWjQCuzTMklL50652383;     zdiKPmBHEARKWjQCuzTMklL50652383 = zdiKPmBHEARKWjQCuzTMklL87073919;     zdiKPmBHEARKWjQCuzTMklL87073919 = zdiKPmBHEARKWjQCuzTMklL83289856;     zdiKPmBHEARKWjQCuzTMklL83289856 = zdiKPmBHEARKWjQCuzTMklL44968217;     zdiKPmBHEARKWjQCuzTMklL44968217 = zdiKPmBHEARKWjQCuzTMklL2920369;     zdiKPmBHEARKWjQCuzTMklL2920369 = zdiKPmBHEARKWjQCuzTMklL78783050;     zdiKPmBHEARKWjQCuzTMklL78783050 = zdiKPmBHEARKWjQCuzTMklL47097183;     zdiKPmBHEARKWjQCuzTMklL47097183 = zdiKPmBHEARKWjQCuzTMklL64432572;     zdiKPmBHEARKWjQCuzTMklL64432572 = zdiKPmBHEARKWjQCuzTMklL81751797;     zdiKPmBHEARKWjQCuzTMklL81751797 = zdiKPmBHEARKWjQCuzTMklL1871400;     zdiKPmBHEARKWjQCuzTMklL1871400 = zdiKPmBHEARKWjQCuzTMklL22494452;     zdiKPmBHEARKWjQCuzTMklL22494452 = zdiKPmBHEARKWjQCuzTMklL4852359;     zdiKPmBHEARKWjQCuzTMklL4852359 = zdiKPmBHEARKWjQCuzTMklL94732688;     zdiKPmBHEARKWjQCuzTMklL94732688 = zdiKPmBHEARKWjQCuzTMklL45102057;     zdiKPmBHEARKWjQCuzTMklL45102057 = zdiKPmBHEARKWjQCuzTMklL31765808;     zdiKPmBHEARKWjQCuzTMklL31765808 = zdiKPmBHEARKWjQCuzTMklL47168227;     zdiKPmBHEARKWjQCuzTMklL47168227 = zdiKPmBHEARKWjQCuzTMklL24153845;     zdiKPmBHEARKWjQCuzTMklL24153845 = zdiKPmBHEARKWjQCuzTMklL68322566;     zdiKPmBHEARKWjQCuzTMklL68322566 = zdiKPmBHEARKWjQCuzTMklL35447753;     zdiKPmBHEARKWjQCuzTMklL35447753 = zdiKPmBHEARKWjQCuzTMklL59600543;     zdiKPmBHEARKWjQCuzTMklL59600543 = zdiKPmBHEARKWjQCuzTMklL37021967;     zdiKPmBHEARKWjQCuzTMklL37021967 = zdiKPmBHEARKWjQCuzTMklL93755098;     zdiKPmBHEARKWjQCuzTMklL93755098 = zdiKPmBHEARKWjQCuzTMklL26757197;     zdiKPmBHEARKWjQCuzTMklL26757197 = zdiKPmBHEARKWjQCuzTMklL14335406;     zdiKPmBHEARKWjQCuzTMklL14335406 = zdiKPmBHEARKWjQCuzTMklL66524274;     zdiKPmBHEARKWjQCuzTMklL66524274 = zdiKPmBHEARKWjQCuzTMklL26711915;     zdiKPmBHEARKWjQCuzTMklL26711915 = zdiKPmBHEARKWjQCuzTMklL27322775;     zdiKPmBHEARKWjQCuzTMklL27322775 = zdiKPmBHEARKWjQCuzTMklL37988173;     zdiKPmBHEARKWjQCuzTMklL37988173 = zdiKPmBHEARKWjQCuzTMklL95121870;     zdiKPmBHEARKWjQCuzTMklL95121870 = zdiKPmBHEARKWjQCuzTMklL19141850;     zdiKPmBHEARKWjQCuzTMklL19141850 = zdiKPmBHEARKWjQCuzTMklL62375688;     zdiKPmBHEARKWjQCuzTMklL62375688 = zdiKPmBHEARKWjQCuzTMklL73679409;     zdiKPmBHEARKWjQCuzTMklL73679409 = zdiKPmBHEARKWjQCuzTMklL56056467;     zdiKPmBHEARKWjQCuzTMklL56056467 = zdiKPmBHEARKWjQCuzTMklL66456834;     zdiKPmBHEARKWjQCuzTMklL66456834 = zdiKPmBHEARKWjQCuzTMklL62797978;     zdiKPmBHEARKWjQCuzTMklL62797978 = zdiKPmBHEARKWjQCuzTMklL9629867;     zdiKPmBHEARKWjQCuzTMklL9629867 = zdiKPmBHEARKWjQCuzTMklL16126915;     zdiKPmBHEARKWjQCuzTMklL16126915 = zdiKPmBHEARKWjQCuzTMklL49954376;     zdiKPmBHEARKWjQCuzTMklL49954376 = zdiKPmBHEARKWjQCuzTMklL80971276;     zdiKPmBHEARKWjQCuzTMklL80971276 = zdiKPmBHEARKWjQCuzTMklL24267353;     zdiKPmBHEARKWjQCuzTMklL24267353 = zdiKPmBHEARKWjQCuzTMklL24280754;     zdiKPmBHEARKWjQCuzTMklL24280754 = zdiKPmBHEARKWjQCuzTMklL33992229;     zdiKPmBHEARKWjQCuzTMklL33992229 = zdiKPmBHEARKWjQCuzTMklL94718446;     zdiKPmBHEARKWjQCuzTMklL94718446 = zdiKPmBHEARKWjQCuzTMklL21603984;     zdiKPmBHEARKWjQCuzTMklL21603984 = zdiKPmBHEARKWjQCuzTMklL23397661;     zdiKPmBHEARKWjQCuzTMklL23397661 = zdiKPmBHEARKWjQCuzTMklL10220941;     zdiKPmBHEARKWjQCuzTMklL10220941 = zdiKPmBHEARKWjQCuzTMklL12912069;     zdiKPmBHEARKWjQCuzTMklL12912069 = zdiKPmBHEARKWjQCuzTMklL1017512;     zdiKPmBHEARKWjQCuzTMklL1017512 = zdiKPmBHEARKWjQCuzTMklL93831755;     zdiKPmBHEARKWjQCuzTMklL93831755 = zdiKPmBHEARKWjQCuzTMklL51249492;     zdiKPmBHEARKWjQCuzTMklL51249492 = zdiKPmBHEARKWjQCuzTMklL78504694;     zdiKPmBHEARKWjQCuzTMklL78504694 = zdiKPmBHEARKWjQCuzTMklL65846917;     zdiKPmBHEARKWjQCuzTMklL65846917 = zdiKPmBHEARKWjQCuzTMklL52898060;     zdiKPmBHEARKWjQCuzTMklL52898060 = zdiKPmBHEARKWjQCuzTMklL53827222;     zdiKPmBHEARKWjQCuzTMklL53827222 = zdiKPmBHEARKWjQCuzTMklL72913284;     zdiKPmBHEARKWjQCuzTMklL72913284 = zdiKPmBHEARKWjQCuzTMklL56897285;     zdiKPmBHEARKWjQCuzTMklL56897285 = zdiKPmBHEARKWjQCuzTMklL60316722;     zdiKPmBHEARKWjQCuzTMklL60316722 = zdiKPmBHEARKWjQCuzTMklL68954450;     zdiKPmBHEARKWjQCuzTMklL68954450 = zdiKPmBHEARKWjQCuzTMklL78443942;     zdiKPmBHEARKWjQCuzTMklL78443942 = zdiKPmBHEARKWjQCuzTMklL76208453;     zdiKPmBHEARKWjQCuzTMklL76208453 = zdiKPmBHEARKWjQCuzTMklL51460275;     zdiKPmBHEARKWjQCuzTMklL51460275 = zdiKPmBHEARKWjQCuzTMklL9109010;     zdiKPmBHEARKWjQCuzTMklL9109010 = zdiKPmBHEARKWjQCuzTMklL69310702;     zdiKPmBHEARKWjQCuzTMklL69310702 = zdiKPmBHEARKWjQCuzTMklL62609948;     zdiKPmBHEARKWjQCuzTMklL62609948 = zdiKPmBHEARKWjQCuzTMklL39495711;     zdiKPmBHEARKWjQCuzTMklL39495711 = zdiKPmBHEARKWjQCuzTMklL48815043;     zdiKPmBHEARKWjQCuzTMklL48815043 = zdiKPmBHEARKWjQCuzTMklL48795891;     zdiKPmBHEARKWjQCuzTMklL48795891 = zdiKPmBHEARKWjQCuzTMklL28275855;     zdiKPmBHEARKWjQCuzTMklL28275855 = zdiKPmBHEARKWjQCuzTMklL82304079;     zdiKPmBHEARKWjQCuzTMklL82304079 = zdiKPmBHEARKWjQCuzTMklL22135941;     zdiKPmBHEARKWjQCuzTMklL22135941 = zdiKPmBHEARKWjQCuzTMklL31041313;     zdiKPmBHEARKWjQCuzTMklL31041313 = zdiKPmBHEARKWjQCuzTMklL74199468;     zdiKPmBHEARKWjQCuzTMklL74199468 = zdiKPmBHEARKWjQCuzTMklL87351289;     zdiKPmBHEARKWjQCuzTMklL87351289 = zdiKPmBHEARKWjQCuzTMklL93539589;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void CpVJhOKBhIIDEqKrsXMOprZSHsjZZEqhfuYKYTJdG93249597() {     double CPkdXDVDdsouuoLQDCpelcc98195604 = 28587851;    double CPkdXDVDdsouuoLQDCpelcc34154929 = -80398346;    double CPkdXDVDdsouuoLQDCpelcc81949515 = -537775337;    double CPkdXDVDdsouuoLQDCpelcc37190198 = -786564035;    double CPkdXDVDdsouuoLQDCpelcc41725877 = 51338941;    double CPkdXDVDdsouuoLQDCpelcc81865124 = -203977441;    double CPkdXDVDdsouuoLQDCpelcc92414230 = 68578119;    double CPkdXDVDdsouuoLQDCpelcc58575376 = -872725591;    double CPkdXDVDdsouuoLQDCpelcc16506140 = -554083949;    double CPkdXDVDdsouuoLQDCpelcc78394699 = -58878960;    double CPkdXDVDdsouuoLQDCpelcc57422788 = -602892397;    double CPkdXDVDdsouuoLQDCpelcc62242197 = -255545786;    double CPkdXDVDdsouuoLQDCpelcc77232022 = -11309208;    double CPkdXDVDdsouuoLQDCpelcc2930177 = -847220477;    double CPkdXDVDdsouuoLQDCpelcc45401290 = -891921721;    double CPkdXDVDdsouuoLQDCpelcc19601782 = -342981596;    double CPkdXDVDdsouuoLQDCpelcc31760686 = -903788560;    double CPkdXDVDdsouuoLQDCpelcc1919753 = -696851973;    double CPkdXDVDdsouuoLQDCpelcc28758291 = -62418881;    double CPkdXDVDdsouuoLQDCpelcc95735682 = -955745262;    double CPkdXDVDdsouuoLQDCpelcc39854595 = 61924497;    double CPkdXDVDdsouuoLQDCpelcc5096242 = -513068289;    double CPkdXDVDdsouuoLQDCpelcc29908771 = -480114777;    double CPkdXDVDdsouuoLQDCpelcc74685325 = -567313888;    double CPkdXDVDdsouuoLQDCpelcc1987757 = -638046509;    double CPkdXDVDdsouuoLQDCpelcc25525193 = -673466309;    double CPkdXDVDdsouuoLQDCpelcc19369780 = -659235557;    double CPkdXDVDdsouuoLQDCpelcc95050501 = -730134574;    double CPkdXDVDdsouuoLQDCpelcc73801984 = -562728943;    double CPkdXDVDdsouuoLQDCpelcc83702797 = -66052372;    double CPkdXDVDdsouuoLQDCpelcc88320575 = -113445257;    double CPkdXDVDdsouuoLQDCpelcc37731014 = -541251115;    double CPkdXDVDdsouuoLQDCpelcc75075821 = -633674082;    double CPkdXDVDdsouuoLQDCpelcc41682366 = -122498472;    double CPkdXDVDdsouuoLQDCpelcc28347219 = -694140521;    double CPkdXDVDdsouuoLQDCpelcc58371292 = -749472406;    double CPkdXDVDdsouuoLQDCpelcc98590545 = -331794276;    double CPkdXDVDdsouuoLQDCpelcc67992271 = -238646389;    double CPkdXDVDdsouuoLQDCpelcc96793607 = -321979656;    double CPkdXDVDdsouuoLQDCpelcc25750861 = -172766913;    double CPkdXDVDdsouuoLQDCpelcc4097541 = -22017494;    double CPkdXDVDdsouuoLQDCpelcc72016051 = -872589395;    double CPkdXDVDdsouuoLQDCpelcc48097570 = -974017630;    double CPkdXDVDdsouuoLQDCpelcc93340269 = -969960045;    double CPkdXDVDdsouuoLQDCpelcc57302116 = 90618813;    double CPkdXDVDdsouuoLQDCpelcc80674362 = -49077730;    double CPkdXDVDdsouuoLQDCpelcc19149807 = -984100886;    double CPkdXDVDdsouuoLQDCpelcc16603382 = -792091400;    double CPkdXDVDdsouuoLQDCpelcc6433268 = -221556121;    double CPkdXDVDdsouuoLQDCpelcc16587504 = -961207732;    double CPkdXDVDdsouuoLQDCpelcc36134103 = 77860490;    double CPkdXDVDdsouuoLQDCpelcc2269610 = -343478783;    double CPkdXDVDdsouuoLQDCpelcc14577831 = -669344617;    double CPkdXDVDdsouuoLQDCpelcc32175965 = 91672860;    double CPkdXDVDdsouuoLQDCpelcc53395003 = -548210729;    double CPkdXDVDdsouuoLQDCpelcc93099362 = -458343860;    double CPkdXDVDdsouuoLQDCpelcc4246158 = -600283570;    double CPkdXDVDdsouuoLQDCpelcc7264190 = -970461450;    double CPkdXDVDdsouuoLQDCpelcc35202442 = -48517527;    double CPkdXDVDdsouuoLQDCpelcc16200685 = -275194751;    double CPkdXDVDdsouuoLQDCpelcc62495345 = -544741884;    double CPkdXDVDdsouuoLQDCpelcc97363728 = -201287308;    double CPkdXDVDdsouuoLQDCpelcc84773392 = -209996649;    double CPkdXDVDdsouuoLQDCpelcc32803343 = -388031578;    double CPkdXDVDdsouuoLQDCpelcc90074124 = -945433704;    double CPkdXDVDdsouuoLQDCpelcc19691774 = 38358718;    double CPkdXDVDdsouuoLQDCpelcc87166375 = -621871705;    double CPkdXDVDdsouuoLQDCpelcc35549656 = -888810736;    double CPkdXDVDdsouuoLQDCpelcc74582957 = -53079957;    double CPkdXDVDdsouuoLQDCpelcc87029997 = -42449316;    double CPkdXDVDdsouuoLQDCpelcc21011237 = 88812679;    double CPkdXDVDdsouuoLQDCpelcc63768415 = -565142171;    double CPkdXDVDdsouuoLQDCpelcc5126145 = -274872318;    double CPkdXDVDdsouuoLQDCpelcc3007430 = -889651968;    double CPkdXDVDdsouuoLQDCpelcc91638141 = -833727768;    double CPkdXDVDdsouuoLQDCpelcc67838544 = -65486109;    double CPkdXDVDdsouuoLQDCpelcc56998672 = -539050660;    double CPkdXDVDdsouuoLQDCpelcc36568502 = -510154733;    double CPkdXDVDdsouuoLQDCpelcc17383209 = -557932701;    double CPkdXDVDdsouuoLQDCpelcc21313394 = -488968779;    double CPkdXDVDdsouuoLQDCpelcc6375387 = -689365423;    double CPkdXDVDdsouuoLQDCpelcc2766399 = -867144157;    double CPkdXDVDdsouuoLQDCpelcc88617234 = -408578454;    double CPkdXDVDdsouuoLQDCpelcc57214480 = -601521212;    double CPkdXDVDdsouuoLQDCpelcc47568695 = -43912862;    double CPkdXDVDdsouuoLQDCpelcc86050966 = -769966474;    double CPkdXDVDdsouuoLQDCpelcc23153183 = -871906498;    double CPkdXDVDdsouuoLQDCpelcc42899857 = -625346942;    double CPkdXDVDdsouuoLQDCpelcc88287363 = -574287743;    double CPkdXDVDdsouuoLQDCpelcc35247856 = -135796661;    double CPkdXDVDdsouuoLQDCpelcc54125135 = -49188837;    double CPkdXDVDdsouuoLQDCpelcc91326355 = -361332826;    double CPkdXDVDdsouuoLQDCpelcc32789830 = -90128862;    double CPkdXDVDdsouuoLQDCpelcc80592923 = 53215095;    double CPkdXDVDdsouuoLQDCpelcc63255516 = -628025030;    double CPkdXDVDdsouuoLQDCpelcc6733812 = -820730187;    double CPkdXDVDdsouuoLQDCpelcc87242658 = -562592747;    double CPkdXDVDdsouuoLQDCpelcc15294228 = -485986052;    double CPkdXDVDdsouuoLQDCpelcc3266146 = 75473658;    double CPkdXDVDdsouuoLQDCpelcc37610343 = 28587851;     CPkdXDVDdsouuoLQDCpelcc98195604 = CPkdXDVDdsouuoLQDCpelcc34154929;     CPkdXDVDdsouuoLQDCpelcc34154929 = CPkdXDVDdsouuoLQDCpelcc81949515;     CPkdXDVDdsouuoLQDCpelcc81949515 = CPkdXDVDdsouuoLQDCpelcc37190198;     CPkdXDVDdsouuoLQDCpelcc37190198 = CPkdXDVDdsouuoLQDCpelcc41725877;     CPkdXDVDdsouuoLQDCpelcc41725877 = CPkdXDVDdsouuoLQDCpelcc81865124;     CPkdXDVDdsouuoLQDCpelcc81865124 = CPkdXDVDdsouuoLQDCpelcc92414230;     CPkdXDVDdsouuoLQDCpelcc92414230 = CPkdXDVDdsouuoLQDCpelcc58575376;     CPkdXDVDdsouuoLQDCpelcc58575376 = CPkdXDVDdsouuoLQDCpelcc16506140;     CPkdXDVDdsouuoLQDCpelcc16506140 = CPkdXDVDdsouuoLQDCpelcc78394699;     CPkdXDVDdsouuoLQDCpelcc78394699 = CPkdXDVDdsouuoLQDCpelcc57422788;     CPkdXDVDdsouuoLQDCpelcc57422788 = CPkdXDVDdsouuoLQDCpelcc62242197;     CPkdXDVDdsouuoLQDCpelcc62242197 = CPkdXDVDdsouuoLQDCpelcc77232022;     CPkdXDVDdsouuoLQDCpelcc77232022 = CPkdXDVDdsouuoLQDCpelcc2930177;     CPkdXDVDdsouuoLQDCpelcc2930177 = CPkdXDVDdsouuoLQDCpelcc45401290;     CPkdXDVDdsouuoLQDCpelcc45401290 = CPkdXDVDdsouuoLQDCpelcc19601782;     CPkdXDVDdsouuoLQDCpelcc19601782 = CPkdXDVDdsouuoLQDCpelcc31760686;     CPkdXDVDdsouuoLQDCpelcc31760686 = CPkdXDVDdsouuoLQDCpelcc1919753;     CPkdXDVDdsouuoLQDCpelcc1919753 = CPkdXDVDdsouuoLQDCpelcc28758291;     CPkdXDVDdsouuoLQDCpelcc28758291 = CPkdXDVDdsouuoLQDCpelcc95735682;     CPkdXDVDdsouuoLQDCpelcc95735682 = CPkdXDVDdsouuoLQDCpelcc39854595;     CPkdXDVDdsouuoLQDCpelcc39854595 = CPkdXDVDdsouuoLQDCpelcc5096242;     CPkdXDVDdsouuoLQDCpelcc5096242 = CPkdXDVDdsouuoLQDCpelcc29908771;     CPkdXDVDdsouuoLQDCpelcc29908771 = CPkdXDVDdsouuoLQDCpelcc74685325;     CPkdXDVDdsouuoLQDCpelcc74685325 = CPkdXDVDdsouuoLQDCpelcc1987757;     CPkdXDVDdsouuoLQDCpelcc1987757 = CPkdXDVDdsouuoLQDCpelcc25525193;     CPkdXDVDdsouuoLQDCpelcc25525193 = CPkdXDVDdsouuoLQDCpelcc19369780;     CPkdXDVDdsouuoLQDCpelcc19369780 = CPkdXDVDdsouuoLQDCpelcc95050501;     CPkdXDVDdsouuoLQDCpelcc95050501 = CPkdXDVDdsouuoLQDCpelcc73801984;     CPkdXDVDdsouuoLQDCpelcc73801984 = CPkdXDVDdsouuoLQDCpelcc83702797;     CPkdXDVDdsouuoLQDCpelcc83702797 = CPkdXDVDdsouuoLQDCpelcc88320575;     CPkdXDVDdsouuoLQDCpelcc88320575 = CPkdXDVDdsouuoLQDCpelcc37731014;     CPkdXDVDdsouuoLQDCpelcc37731014 = CPkdXDVDdsouuoLQDCpelcc75075821;     CPkdXDVDdsouuoLQDCpelcc75075821 = CPkdXDVDdsouuoLQDCpelcc41682366;     CPkdXDVDdsouuoLQDCpelcc41682366 = CPkdXDVDdsouuoLQDCpelcc28347219;     CPkdXDVDdsouuoLQDCpelcc28347219 = CPkdXDVDdsouuoLQDCpelcc58371292;     CPkdXDVDdsouuoLQDCpelcc58371292 = CPkdXDVDdsouuoLQDCpelcc98590545;     CPkdXDVDdsouuoLQDCpelcc98590545 = CPkdXDVDdsouuoLQDCpelcc67992271;     CPkdXDVDdsouuoLQDCpelcc67992271 = CPkdXDVDdsouuoLQDCpelcc96793607;     CPkdXDVDdsouuoLQDCpelcc96793607 = CPkdXDVDdsouuoLQDCpelcc25750861;     CPkdXDVDdsouuoLQDCpelcc25750861 = CPkdXDVDdsouuoLQDCpelcc4097541;     CPkdXDVDdsouuoLQDCpelcc4097541 = CPkdXDVDdsouuoLQDCpelcc72016051;     CPkdXDVDdsouuoLQDCpelcc72016051 = CPkdXDVDdsouuoLQDCpelcc48097570;     CPkdXDVDdsouuoLQDCpelcc48097570 = CPkdXDVDdsouuoLQDCpelcc93340269;     CPkdXDVDdsouuoLQDCpelcc93340269 = CPkdXDVDdsouuoLQDCpelcc57302116;     CPkdXDVDdsouuoLQDCpelcc57302116 = CPkdXDVDdsouuoLQDCpelcc80674362;     CPkdXDVDdsouuoLQDCpelcc80674362 = CPkdXDVDdsouuoLQDCpelcc19149807;     CPkdXDVDdsouuoLQDCpelcc19149807 = CPkdXDVDdsouuoLQDCpelcc16603382;     CPkdXDVDdsouuoLQDCpelcc16603382 = CPkdXDVDdsouuoLQDCpelcc6433268;     CPkdXDVDdsouuoLQDCpelcc6433268 = CPkdXDVDdsouuoLQDCpelcc16587504;     CPkdXDVDdsouuoLQDCpelcc16587504 = CPkdXDVDdsouuoLQDCpelcc36134103;     CPkdXDVDdsouuoLQDCpelcc36134103 = CPkdXDVDdsouuoLQDCpelcc2269610;     CPkdXDVDdsouuoLQDCpelcc2269610 = CPkdXDVDdsouuoLQDCpelcc14577831;     CPkdXDVDdsouuoLQDCpelcc14577831 = CPkdXDVDdsouuoLQDCpelcc32175965;     CPkdXDVDdsouuoLQDCpelcc32175965 = CPkdXDVDdsouuoLQDCpelcc53395003;     CPkdXDVDdsouuoLQDCpelcc53395003 = CPkdXDVDdsouuoLQDCpelcc93099362;     CPkdXDVDdsouuoLQDCpelcc93099362 = CPkdXDVDdsouuoLQDCpelcc4246158;     CPkdXDVDdsouuoLQDCpelcc4246158 = CPkdXDVDdsouuoLQDCpelcc7264190;     CPkdXDVDdsouuoLQDCpelcc7264190 = CPkdXDVDdsouuoLQDCpelcc35202442;     CPkdXDVDdsouuoLQDCpelcc35202442 = CPkdXDVDdsouuoLQDCpelcc16200685;     CPkdXDVDdsouuoLQDCpelcc16200685 = CPkdXDVDdsouuoLQDCpelcc62495345;     CPkdXDVDdsouuoLQDCpelcc62495345 = CPkdXDVDdsouuoLQDCpelcc97363728;     CPkdXDVDdsouuoLQDCpelcc97363728 = CPkdXDVDdsouuoLQDCpelcc84773392;     CPkdXDVDdsouuoLQDCpelcc84773392 = CPkdXDVDdsouuoLQDCpelcc32803343;     CPkdXDVDdsouuoLQDCpelcc32803343 = CPkdXDVDdsouuoLQDCpelcc90074124;     CPkdXDVDdsouuoLQDCpelcc90074124 = CPkdXDVDdsouuoLQDCpelcc19691774;     CPkdXDVDdsouuoLQDCpelcc19691774 = CPkdXDVDdsouuoLQDCpelcc87166375;     CPkdXDVDdsouuoLQDCpelcc87166375 = CPkdXDVDdsouuoLQDCpelcc35549656;     CPkdXDVDdsouuoLQDCpelcc35549656 = CPkdXDVDdsouuoLQDCpelcc74582957;     CPkdXDVDdsouuoLQDCpelcc74582957 = CPkdXDVDdsouuoLQDCpelcc87029997;     CPkdXDVDdsouuoLQDCpelcc87029997 = CPkdXDVDdsouuoLQDCpelcc21011237;     CPkdXDVDdsouuoLQDCpelcc21011237 = CPkdXDVDdsouuoLQDCpelcc63768415;     CPkdXDVDdsouuoLQDCpelcc63768415 = CPkdXDVDdsouuoLQDCpelcc5126145;     CPkdXDVDdsouuoLQDCpelcc5126145 = CPkdXDVDdsouuoLQDCpelcc3007430;     CPkdXDVDdsouuoLQDCpelcc3007430 = CPkdXDVDdsouuoLQDCpelcc91638141;     CPkdXDVDdsouuoLQDCpelcc91638141 = CPkdXDVDdsouuoLQDCpelcc67838544;     CPkdXDVDdsouuoLQDCpelcc67838544 = CPkdXDVDdsouuoLQDCpelcc56998672;     CPkdXDVDdsouuoLQDCpelcc56998672 = CPkdXDVDdsouuoLQDCpelcc36568502;     CPkdXDVDdsouuoLQDCpelcc36568502 = CPkdXDVDdsouuoLQDCpelcc17383209;     CPkdXDVDdsouuoLQDCpelcc17383209 = CPkdXDVDdsouuoLQDCpelcc21313394;     CPkdXDVDdsouuoLQDCpelcc21313394 = CPkdXDVDdsouuoLQDCpelcc6375387;     CPkdXDVDdsouuoLQDCpelcc6375387 = CPkdXDVDdsouuoLQDCpelcc2766399;     CPkdXDVDdsouuoLQDCpelcc2766399 = CPkdXDVDdsouuoLQDCpelcc88617234;     CPkdXDVDdsouuoLQDCpelcc88617234 = CPkdXDVDdsouuoLQDCpelcc57214480;     CPkdXDVDdsouuoLQDCpelcc57214480 = CPkdXDVDdsouuoLQDCpelcc47568695;     CPkdXDVDdsouuoLQDCpelcc47568695 = CPkdXDVDdsouuoLQDCpelcc86050966;     CPkdXDVDdsouuoLQDCpelcc86050966 = CPkdXDVDdsouuoLQDCpelcc23153183;     CPkdXDVDdsouuoLQDCpelcc23153183 = CPkdXDVDdsouuoLQDCpelcc42899857;     CPkdXDVDdsouuoLQDCpelcc42899857 = CPkdXDVDdsouuoLQDCpelcc88287363;     CPkdXDVDdsouuoLQDCpelcc88287363 = CPkdXDVDdsouuoLQDCpelcc35247856;     CPkdXDVDdsouuoLQDCpelcc35247856 = CPkdXDVDdsouuoLQDCpelcc54125135;     CPkdXDVDdsouuoLQDCpelcc54125135 = CPkdXDVDdsouuoLQDCpelcc91326355;     CPkdXDVDdsouuoLQDCpelcc91326355 = CPkdXDVDdsouuoLQDCpelcc32789830;     CPkdXDVDdsouuoLQDCpelcc32789830 = CPkdXDVDdsouuoLQDCpelcc80592923;     CPkdXDVDdsouuoLQDCpelcc80592923 = CPkdXDVDdsouuoLQDCpelcc63255516;     CPkdXDVDdsouuoLQDCpelcc63255516 = CPkdXDVDdsouuoLQDCpelcc6733812;     CPkdXDVDdsouuoLQDCpelcc6733812 = CPkdXDVDdsouuoLQDCpelcc87242658;     CPkdXDVDdsouuoLQDCpelcc87242658 = CPkdXDVDdsouuoLQDCpelcc15294228;     CPkdXDVDdsouuoLQDCpelcc15294228 = CPkdXDVDdsouuoLQDCpelcc3266146;     CPkdXDVDdsouuoLQDCpelcc3266146 = CPkdXDVDdsouuoLQDCpelcc37610343;     CPkdXDVDdsouuoLQDCpelcc37610343 = CPkdXDVDdsouuoLQDCpelcc98195604;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void WGzLtXbizPKBZmBAFKqEApQdLOBlrGMdoZJsdgkLu75478359() {     double lVHraodjYQWfZrhpWAfVqqs49931055 = -87666982;    double lVHraodjYQWfZrhpWAfVqqs49828912 = -157298102;    double lVHraodjYQWfZrhpWAfVqqs30749875 = -335134722;    double lVHraodjYQWfZrhpWAfVqqs12265600 = -602833178;    double lVHraodjYQWfZrhpWAfVqqs18449810 = -756311713;    double lVHraodjYQWfZrhpWAfVqqs6748480 = -363004668;    double lVHraodjYQWfZrhpWAfVqqs66191074 = -854633477;    double lVHraodjYQWfZrhpWAfVqqs77366854 = -996505146;    double lVHraodjYQWfZrhpWAfVqqs67804216 = -344932659;    double lVHraodjYQWfZrhpWAfVqqs47191824 = -600524943;    double lVHraodjYQWfZrhpWAfVqqs52715487 = -564614868;    double lVHraodjYQWfZrhpWAfVqqs72598575 = -190527287;    double lVHraodjYQWfZrhpWAfVqqs64412816 = -720489469;    double lVHraodjYQWfZrhpWAfVqqs61697895 = -473901024;    double lVHraodjYQWfZrhpWAfVqqs99416547 = -369649431;    double lVHraodjYQWfZrhpWAfVqqs31329054 = -54665552;    double lVHraodjYQWfZrhpWAfVqqs87731211 = -171883249;    double lVHraodjYQWfZrhpWAfVqqs87602674 = -59428468;    double lVHraodjYQWfZrhpWAfVqqs88332139 = -590333064;    double lVHraodjYQWfZrhpWAfVqqs15465257 = -666013410;    double lVHraodjYQWfZrhpWAfVqqs85601948 = -20883671;    double lVHraodjYQWfZrhpWAfVqqs7515696 = -686549297;    double lVHraodjYQWfZrhpWAfVqqs31258286 = -88352225;    double lVHraodjYQWfZrhpWAfVqqs67335575 = -438905839;    double lVHraodjYQWfZrhpWAfVqqs73403614 = -583700945;    double lVHraodjYQWfZrhpWAfVqqs83230606 = 80923912;    double lVHraodjYQWfZrhpWAfVqqs58198415 = -21644275;    double lVHraodjYQWfZrhpWAfVqqs93179726 = -13465260;    double lVHraodjYQWfZrhpWAfVqqs48552057 = -612627845;    double lVHraodjYQWfZrhpWAfVqqs53687881 = -527953168;    double lVHraodjYQWfZrhpWAfVqqs25539384 = -446327724;    double lVHraodjYQWfZrhpWAfVqqs50760744 = -865025307;    double lVHraodjYQWfZrhpWAfVqqs73169131 = -116055968;    double lVHraodjYQWfZrhpWAfVqqs35706078 = -883095638;    double lVHraodjYQWfZrhpWAfVqqs26552348 = -910950164;    double lVHraodjYQWfZrhpWAfVqqs40070903 = -985641234;    double lVHraodjYQWfZrhpWAfVqqs48238771 = -976149020;    double lVHraodjYQWfZrhpWAfVqqs68825883 = -322158753;    double lVHraodjYQWfZrhpWAfVqqs66568450 = -767297051;    double lVHraodjYQWfZrhpWAfVqqs50833277 = -791382580;    double lVHraodjYQWfZrhpWAfVqqs72781628 = -141176282;    double lVHraodjYQWfZrhpWAfVqqs32041451 = -861109016;    double lVHraodjYQWfZrhpWAfVqqs4680802 = -874794161;    double lVHraodjYQWfZrhpWAfVqqs86276088 = -895348723;    double lVHraodjYQWfZrhpWAfVqqs29331325 = -509878270;    double lVHraodjYQWfZrhpWAfVqqs82368809 = -472969671;    double lVHraodjYQWfZrhpWAfVqqs5316001 = -346441340;    double lVHraodjYQWfZrhpWAfVqqs95587845 = -96496096;    double lVHraodjYQWfZrhpWAfVqqs95451720 = -185508850;    double lVHraodjYQWfZrhpWAfVqqs5243763 = -820219112;    double lVHraodjYQWfZrhpWAfVqqs76813994 = -730643666;    double lVHraodjYQWfZrhpWAfVqqs34249362 = -805078344;    double lVHraodjYQWfZrhpWAfVqqs37816577 = -413457805;    double lVHraodjYQWfZrhpWAfVqqs2235206 = -623126452;    double lVHraodjYQWfZrhpWAfVqqs89876411 = -577973930;    double lVHraodjYQWfZrhpWAfVqqs42415360 = -401117685;    double lVHraodjYQWfZrhpWAfVqqs18570626 = 31054122;    double lVHraodjYQWfZrhpWAfVqqs63414299 = -896228883;    double lVHraodjYQWfZrhpWAfVqqs38861985 = 80867767;    double lVHraodjYQWfZrhpWAfVqqs35219203 = -737235626;    double lVHraodjYQWfZrhpWAfVqqs48550064 = -241360393;    double lVHraodjYQWfZrhpWAfVqqs73011347 = -741168218;    double lVHraodjYQWfZrhpWAfVqqs28814798 = -283877301;    double lVHraodjYQWfZrhpWAfVqqs14116336 = -816979492;    double lVHraodjYQWfZrhpWAfVqqs21652440 = -54197220;    double lVHraodjYQWfZrhpWAfVqqs1954743 = -699589562;    double lVHraodjYQWfZrhpWAfVqqs99429443 = 25528680;    double lVHraodjYQWfZrhpWAfVqqs28706738 = -837393832;    double lVHraodjYQWfZrhpWAfVqqs35145548 = -562950861;    double lVHraodjYQWfZrhpWAfVqqs59345645 = -384008197;    double lVHraodjYQWfZrhpWAfVqqs83090282 = -78516533;    double lVHraodjYQWfZrhpWAfVqqs18905328 = -849724496;    double lVHraodjYQWfZrhpWAfVqqs21034224 = -292131417;    double lVHraodjYQWfZrhpWAfVqqs37498863 = -798950485;    double lVHraodjYQWfZrhpWAfVqqs42683629 = -424837129;    double lVHraodjYQWfZrhpWAfVqqs53560497 = -159774655;    double lVHraodjYQWfZrhpWAfVqqs2834894 = -811755136;    double lVHraodjYQWfZrhpWAfVqqs44982197 = -193003502;    double lVHraodjYQWfZrhpWAfVqqs38004251 = -929027569;    double lVHraodjYQWfZrhpWAfVqqs91034805 = -10731275;    double lVHraodjYQWfZrhpWAfVqqs77914606 = -572634748;    double lVHraodjYQWfZrhpWAfVqqs62610569 = -925148179;    double lVHraodjYQWfZrhpWAfVqqs97728006 = -827956410;    double lVHraodjYQWfZrhpWAfVqqs43308294 = -792408734;    double lVHraodjYQWfZrhpWAfVqqs76873886 = -797309503;    double lVHraodjYQWfZrhpWAfVqqs91290022 = -641249381;    double lVHraodjYQWfZrhpWAfVqqs12944168 = -351567502;    double lVHraodjYQWfZrhpWAfVqqs70933925 = -492929516;    double lVHraodjYQWfZrhpWAfVqqs45829667 = -205121708;    double lVHraodjYQWfZrhpWAfVqqs84136987 = -409832479;    double lVHraodjYQWfZrhpWAfVqqs21500277 = -916695357;    double lVHraodjYQWfZrhpWAfVqqs84824472 = 20079863;    double lVHraodjYQWfZrhpWAfVqqs29963899 = -303026521;    double lVHraodjYQWfZrhpWAfVqqs31349247 = 69938575;    double lVHraodjYQWfZrhpWAfVqqs2283213 = -450022187;    double lVHraodjYQWfZrhpWAfVqqs99770280 = -400008064;    double lVHraodjYQWfZrhpWAfVqqs3226654 = -477231716;    double lVHraodjYQWfZrhpWAfVqqs90564466 = 42185331;    double lVHraodjYQWfZrhpWAfVqqs64623649 = -741151504;    double lVHraodjYQWfZrhpWAfVqqs27376582 = -87666982;     lVHraodjYQWfZrhpWAfVqqs49931055 = lVHraodjYQWfZrhpWAfVqqs49828912;     lVHraodjYQWfZrhpWAfVqqs49828912 = lVHraodjYQWfZrhpWAfVqqs30749875;     lVHraodjYQWfZrhpWAfVqqs30749875 = lVHraodjYQWfZrhpWAfVqqs12265600;     lVHraodjYQWfZrhpWAfVqqs12265600 = lVHraodjYQWfZrhpWAfVqqs18449810;     lVHraodjYQWfZrhpWAfVqqs18449810 = lVHraodjYQWfZrhpWAfVqqs6748480;     lVHraodjYQWfZrhpWAfVqqs6748480 = lVHraodjYQWfZrhpWAfVqqs66191074;     lVHraodjYQWfZrhpWAfVqqs66191074 = lVHraodjYQWfZrhpWAfVqqs77366854;     lVHraodjYQWfZrhpWAfVqqs77366854 = lVHraodjYQWfZrhpWAfVqqs67804216;     lVHraodjYQWfZrhpWAfVqqs67804216 = lVHraodjYQWfZrhpWAfVqqs47191824;     lVHraodjYQWfZrhpWAfVqqs47191824 = lVHraodjYQWfZrhpWAfVqqs52715487;     lVHraodjYQWfZrhpWAfVqqs52715487 = lVHraodjYQWfZrhpWAfVqqs72598575;     lVHraodjYQWfZrhpWAfVqqs72598575 = lVHraodjYQWfZrhpWAfVqqs64412816;     lVHraodjYQWfZrhpWAfVqqs64412816 = lVHraodjYQWfZrhpWAfVqqs61697895;     lVHraodjYQWfZrhpWAfVqqs61697895 = lVHraodjYQWfZrhpWAfVqqs99416547;     lVHraodjYQWfZrhpWAfVqqs99416547 = lVHraodjYQWfZrhpWAfVqqs31329054;     lVHraodjYQWfZrhpWAfVqqs31329054 = lVHraodjYQWfZrhpWAfVqqs87731211;     lVHraodjYQWfZrhpWAfVqqs87731211 = lVHraodjYQWfZrhpWAfVqqs87602674;     lVHraodjYQWfZrhpWAfVqqs87602674 = lVHraodjYQWfZrhpWAfVqqs88332139;     lVHraodjYQWfZrhpWAfVqqs88332139 = lVHraodjYQWfZrhpWAfVqqs15465257;     lVHraodjYQWfZrhpWAfVqqs15465257 = lVHraodjYQWfZrhpWAfVqqs85601948;     lVHraodjYQWfZrhpWAfVqqs85601948 = lVHraodjYQWfZrhpWAfVqqs7515696;     lVHraodjYQWfZrhpWAfVqqs7515696 = lVHraodjYQWfZrhpWAfVqqs31258286;     lVHraodjYQWfZrhpWAfVqqs31258286 = lVHraodjYQWfZrhpWAfVqqs67335575;     lVHraodjYQWfZrhpWAfVqqs67335575 = lVHraodjYQWfZrhpWAfVqqs73403614;     lVHraodjYQWfZrhpWAfVqqs73403614 = lVHraodjYQWfZrhpWAfVqqs83230606;     lVHraodjYQWfZrhpWAfVqqs83230606 = lVHraodjYQWfZrhpWAfVqqs58198415;     lVHraodjYQWfZrhpWAfVqqs58198415 = lVHraodjYQWfZrhpWAfVqqs93179726;     lVHraodjYQWfZrhpWAfVqqs93179726 = lVHraodjYQWfZrhpWAfVqqs48552057;     lVHraodjYQWfZrhpWAfVqqs48552057 = lVHraodjYQWfZrhpWAfVqqs53687881;     lVHraodjYQWfZrhpWAfVqqs53687881 = lVHraodjYQWfZrhpWAfVqqs25539384;     lVHraodjYQWfZrhpWAfVqqs25539384 = lVHraodjYQWfZrhpWAfVqqs50760744;     lVHraodjYQWfZrhpWAfVqqs50760744 = lVHraodjYQWfZrhpWAfVqqs73169131;     lVHraodjYQWfZrhpWAfVqqs73169131 = lVHraodjYQWfZrhpWAfVqqs35706078;     lVHraodjYQWfZrhpWAfVqqs35706078 = lVHraodjYQWfZrhpWAfVqqs26552348;     lVHraodjYQWfZrhpWAfVqqs26552348 = lVHraodjYQWfZrhpWAfVqqs40070903;     lVHraodjYQWfZrhpWAfVqqs40070903 = lVHraodjYQWfZrhpWAfVqqs48238771;     lVHraodjYQWfZrhpWAfVqqs48238771 = lVHraodjYQWfZrhpWAfVqqs68825883;     lVHraodjYQWfZrhpWAfVqqs68825883 = lVHraodjYQWfZrhpWAfVqqs66568450;     lVHraodjYQWfZrhpWAfVqqs66568450 = lVHraodjYQWfZrhpWAfVqqs50833277;     lVHraodjYQWfZrhpWAfVqqs50833277 = lVHraodjYQWfZrhpWAfVqqs72781628;     lVHraodjYQWfZrhpWAfVqqs72781628 = lVHraodjYQWfZrhpWAfVqqs32041451;     lVHraodjYQWfZrhpWAfVqqs32041451 = lVHraodjYQWfZrhpWAfVqqs4680802;     lVHraodjYQWfZrhpWAfVqqs4680802 = lVHraodjYQWfZrhpWAfVqqs86276088;     lVHraodjYQWfZrhpWAfVqqs86276088 = lVHraodjYQWfZrhpWAfVqqs29331325;     lVHraodjYQWfZrhpWAfVqqs29331325 = lVHraodjYQWfZrhpWAfVqqs82368809;     lVHraodjYQWfZrhpWAfVqqs82368809 = lVHraodjYQWfZrhpWAfVqqs5316001;     lVHraodjYQWfZrhpWAfVqqs5316001 = lVHraodjYQWfZrhpWAfVqqs95587845;     lVHraodjYQWfZrhpWAfVqqs95587845 = lVHraodjYQWfZrhpWAfVqqs95451720;     lVHraodjYQWfZrhpWAfVqqs95451720 = lVHraodjYQWfZrhpWAfVqqs5243763;     lVHraodjYQWfZrhpWAfVqqs5243763 = lVHraodjYQWfZrhpWAfVqqs76813994;     lVHraodjYQWfZrhpWAfVqqs76813994 = lVHraodjYQWfZrhpWAfVqqs34249362;     lVHraodjYQWfZrhpWAfVqqs34249362 = lVHraodjYQWfZrhpWAfVqqs37816577;     lVHraodjYQWfZrhpWAfVqqs37816577 = lVHraodjYQWfZrhpWAfVqqs2235206;     lVHraodjYQWfZrhpWAfVqqs2235206 = lVHraodjYQWfZrhpWAfVqqs89876411;     lVHraodjYQWfZrhpWAfVqqs89876411 = lVHraodjYQWfZrhpWAfVqqs42415360;     lVHraodjYQWfZrhpWAfVqqs42415360 = lVHraodjYQWfZrhpWAfVqqs18570626;     lVHraodjYQWfZrhpWAfVqqs18570626 = lVHraodjYQWfZrhpWAfVqqs63414299;     lVHraodjYQWfZrhpWAfVqqs63414299 = lVHraodjYQWfZrhpWAfVqqs38861985;     lVHraodjYQWfZrhpWAfVqqs38861985 = lVHraodjYQWfZrhpWAfVqqs35219203;     lVHraodjYQWfZrhpWAfVqqs35219203 = lVHraodjYQWfZrhpWAfVqqs48550064;     lVHraodjYQWfZrhpWAfVqqs48550064 = lVHraodjYQWfZrhpWAfVqqs73011347;     lVHraodjYQWfZrhpWAfVqqs73011347 = lVHraodjYQWfZrhpWAfVqqs28814798;     lVHraodjYQWfZrhpWAfVqqs28814798 = lVHraodjYQWfZrhpWAfVqqs14116336;     lVHraodjYQWfZrhpWAfVqqs14116336 = lVHraodjYQWfZrhpWAfVqqs21652440;     lVHraodjYQWfZrhpWAfVqqs21652440 = lVHraodjYQWfZrhpWAfVqqs1954743;     lVHraodjYQWfZrhpWAfVqqs1954743 = lVHraodjYQWfZrhpWAfVqqs99429443;     lVHraodjYQWfZrhpWAfVqqs99429443 = lVHraodjYQWfZrhpWAfVqqs28706738;     lVHraodjYQWfZrhpWAfVqqs28706738 = lVHraodjYQWfZrhpWAfVqqs35145548;     lVHraodjYQWfZrhpWAfVqqs35145548 = lVHraodjYQWfZrhpWAfVqqs59345645;     lVHraodjYQWfZrhpWAfVqqs59345645 = lVHraodjYQWfZrhpWAfVqqs83090282;     lVHraodjYQWfZrhpWAfVqqs83090282 = lVHraodjYQWfZrhpWAfVqqs18905328;     lVHraodjYQWfZrhpWAfVqqs18905328 = lVHraodjYQWfZrhpWAfVqqs21034224;     lVHraodjYQWfZrhpWAfVqqs21034224 = lVHraodjYQWfZrhpWAfVqqs37498863;     lVHraodjYQWfZrhpWAfVqqs37498863 = lVHraodjYQWfZrhpWAfVqqs42683629;     lVHraodjYQWfZrhpWAfVqqs42683629 = lVHraodjYQWfZrhpWAfVqqs53560497;     lVHraodjYQWfZrhpWAfVqqs53560497 = lVHraodjYQWfZrhpWAfVqqs2834894;     lVHraodjYQWfZrhpWAfVqqs2834894 = lVHraodjYQWfZrhpWAfVqqs44982197;     lVHraodjYQWfZrhpWAfVqqs44982197 = lVHraodjYQWfZrhpWAfVqqs38004251;     lVHraodjYQWfZrhpWAfVqqs38004251 = lVHraodjYQWfZrhpWAfVqqs91034805;     lVHraodjYQWfZrhpWAfVqqs91034805 = lVHraodjYQWfZrhpWAfVqqs77914606;     lVHraodjYQWfZrhpWAfVqqs77914606 = lVHraodjYQWfZrhpWAfVqqs62610569;     lVHraodjYQWfZrhpWAfVqqs62610569 = lVHraodjYQWfZrhpWAfVqqs97728006;     lVHraodjYQWfZrhpWAfVqqs97728006 = lVHraodjYQWfZrhpWAfVqqs43308294;     lVHraodjYQWfZrhpWAfVqqs43308294 = lVHraodjYQWfZrhpWAfVqqs76873886;     lVHraodjYQWfZrhpWAfVqqs76873886 = lVHraodjYQWfZrhpWAfVqqs91290022;     lVHraodjYQWfZrhpWAfVqqs91290022 = lVHraodjYQWfZrhpWAfVqqs12944168;     lVHraodjYQWfZrhpWAfVqqs12944168 = lVHraodjYQWfZrhpWAfVqqs70933925;     lVHraodjYQWfZrhpWAfVqqs70933925 = lVHraodjYQWfZrhpWAfVqqs45829667;     lVHraodjYQWfZrhpWAfVqqs45829667 = lVHraodjYQWfZrhpWAfVqqs84136987;     lVHraodjYQWfZrhpWAfVqqs84136987 = lVHraodjYQWfZrhpWAfVqqs21500277;     lVHraodjYQWfZrhpWAfVqqs21500277 = lVHraodjYQWfZrhpWAfVqqs84824472;     lVHraodjYQWfZrhpWAfVqqs84824472 = lVHraodjYQWfZrhpWAfVqqs29963899;     lVHraodjYQWfZrhpWAfVqqs29963899 = lVHraodjYQWfZrhpWAfVqqs31349247;     lVHraodjYQWfZrhpWAfVqqs31349247 = lVHraodjYQWfZrhpWAfVqqs2283213;     lVHraodjYQWfZrhpWAfVqqs2283213 = lVHraodjYQWfZrhpWAfVqqs99770280;     lVHraodjYQWfZrhpWAfVqqs99770280 = lVHraodjYQWfZrhpWAfVqqs3226654;     lVHraodjYQWfZrhpWAfVqqs3226654 = lVHraodjYQWfZrhpWAfVqqs90564466;     lVHraodjYQWfZrhpWAfVqqs90564466 = lVHraodjYQWfZrhpWAfVqqs64623649;     lVHraodjYQWfZrhpWAfVqqs64623649 = lVHraodjYQWfZrhpWAfVqqs27376582;     lVHraodjYQWfZrhpWAfVqqs27376582 = lVHraodjYQWfZrhpWAfVqqs49931055;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void fZnHXpjDHFJaZGmiiNTUBGAFBwedZrhvlpDPpbxpl5464590() {     double QQJRpZPFoureLRZYhGbLFeQ72324643 = -949546803;    double QQJRpZPFoureLRZYhGbLFeQ95604095 = -63246031;    double QQJRpZPFoureLRZYhGbLFeQ58205941 = -617659952;    double QQJRpZPFoureLRZYhGbLFeQ42192427 = -788699879;    double QQJRpZPFoureLRZYhGbLFeQ7783962 = -879013393;    double QQJRpZPFoureLRZYhGbLFeQ86826163 = -524180234;    double QQJRpZPFoureLRZYhGbLFeQ89799476 = -972084316;    double QQJRpZPFoureLRZYhGbLFeQ83786662 = -662924473;    double QQJRpZPFoureLRZYhGbLFeQ82227183 = -515482629;    double QQJRpZPFoureLRZYhGbLFeQ42315895 = -706459405;    double QQJRpZPFoureLRZYhGbLFeQ69936741 = -601767197;    double QQJRpZPFoureLRZYhGbLFeQ14209847 = -705794217;    double QQJRpZPFoureLRZYhGbLFeQ99568082 = -217548314;    double QQJRpZPFoureLRZYhGbLFeQ50468427 = -656456729;    double QQJRpZPFoureLRZYhGbLFeQ90979716 = -34414292;    double QQJRpZPFoureLRZYhGbLFeQ1020419 = -103537444;    double QQJRpZPFoureLRZYhGbLFeQ81701803 = -629548499;    double QQJRpZPFoureLRZYhGbLFeQ70578557 = -114099536;    double QQJRpZPFoureLRZYhGbLFeQ9185501 = -107452923;    double QQJRpZPFoureLRZYhGbLFeQ21907777 = -306623413;    double QQJRpZPFoureLRZYhGbLFeQ6815631 = -301904606;    double QQJRpZPFoureLRZYhGbLFeQ93034647 = -681323727;    double QQJRpZPFoureLRZYhGbLFeQ97673212 = -905474975;    double QQJRpZPFoureLRZYhGbLFeQ50185254 = -21978173;    double QQJRpZPFoureLRZYhGbLFeQ80501171 = -878566217;    double QQJRpZPFoureLRZYhGbLFeQ54959524 = -454764383;    double QQJRpZPFoureLRZYhGbLFeQ35066254 = -578431055;    double QQJRpZPFoureLRZYhGbLFeQ63687652 = -292952725;    double QQJRpZPFoureLRZYhGbLFeQ42766171 = -310814650;    double QQJRpZPFoureLRZYhGbLFeQ86755190 = -772817661;    double QQJRpZPFoureLRZYhGbLFeQ36417511 = -140550641;    double QQJRpZPFoureLRZYhGbLFeQ23578078 = -25274900;    double QQJRpZPFoureLRZYhGbLFeQ68755378 = -443455246;    double QQJRpZPFoureLRZYhGbLFeQ94811928 = -230540755;    double QQJRpZPFoureLRZYhGbLFeQ20423674 = -715392661;    double QQJRpZPFoureLRZYhGbLFeQ38935582 = -121270865;    double QQJRpZPFoureLRZYhGbLFeQ29737116 = -609443593;    double QQJRpZPFoureLRZYhGbLFeQ52534304 = -194521546;    double QQJRpZPFoureLRZYhGbLFeQ79562985 = -455661666;    double QQJRpZPFoureLRZYhGbLFeQ99146098 = -218174923;    double QQJRpZPFoureLRZYhGbLFeQ13683332 = -556410049;    double QQJRpZPFoureLRZYhGbLFeQ34852181 = -425225625;    double QQJRpZPFoureLRZYhGbLFeQ49947634 = -203194491;    double QQJRpZPFoureLRZYhGbLFeQ26488309 = -235747928;    double QQJRpZPFoureLRZYhGbLFeQ13296539 = -945762346;    double QQJRpZPFoureLRZYhGbLFeQ50041123 = -843154095;    double QQJRpZPFoureLRZYhGbLFeQ89915605 = -443570970;    double QQJRpZPFoureLRZYhGbLFeQ64802939 = -344269731;    double QQJRpZPFoureLRZYhGbLFeQ71253236 = -571461687;    double QQJRpZPFoureLRZYhGbLFeQ82282085 = -275214485;    double QQJRpZPFoureLRZYhGbLFeQ72423841 = -407164935;    double QQJRpZPFoureLRZYhGbLFeQ93553362 = -853751877;    double QQJRpZPFoureLRZYhGbLFeQ40682632 = -193315027;    double QQJRpZPFoureLRZYhGbLFeQ52271480 = -366887410;    double QQJRpZPFoureLRZYhGbLFeQ98648958 = -961778768;    double QQJRpZPFoureLRZYhGbLFeQ79289996 = -168223077;    double QQJRpZPFoureLRZYhGbLFeQ97930883 = -157771057;    double QQJRpZPFoureLRZYhGbLFeQ8020688 = -495681779;    double QQJRpZPFoureLRZYhGbLFeQ61691255 = -910133663;    double QQJRpZPFoureLRZYhGbLFeQ52824438 = -324249010;    double QQJRpZPFoureLRZYhGbLFeQ51759910 = -945749179;    double QQJRpZPFoureLRZYhGbLFeQ26111825 = -579131592;    double QQJRpZPFoureLRZYhGbLFeQ41020492 = -252109824;    double QQJRpZPFoureLRZYhGbLFeQ95471992 = -742664969;    double QQJRpZPFoureLRZYhGbLFeQ5898384 = -465908764;    double QQJRpZPFoureLRZYhGbLFeQ46358664 = -476492298;    double QQJRpZPFoureLRZYhGbLFeQ45454469 = -162338971;    double QQJRpZPFoureLRZYhGbLFeQ4756154 = -987007560;    double QQJRpZPFoureLRZYhGbLFeQ30044753 = -941064068;    double QQJRpZPFoureLRZYhGbLFeQ52044134 = -913143428;    double QQJRpZPFoureLRZYhGbLFeQ71283303 = -494093852;    double QQJRpZPFoureLRZYhGbLFeQ29167499 = -335026954;    double QQJRpZPFoureLRZYhGbLFeQ91015572 = -658437871;    double QQJRpZPFoureLRZYhGbLFeQ10039403 = -889278000;    double QQJRpZPFoureLRZYhGbLFeQ8224446 = -750213364;    double QQJRpZPFoureLRZYhGbLFeQ71963449 = -876678981;    double QQJRpZPFoureLRZYhGbLFeQ43087014 = -378129237;    double QQJRpZPFoureLRZYhGbLFeQ71184903 = -569727047;    double QQJRpZPFoureLRZYhGbLFeQ36888716 = -76215828;    double QQJRpZPFoureLRZYhGbLFeQ30460049 = 64587878;    double QQJRpZPFoureLRZYhGbLFeQ65043918 = 88806587;    double QQJRpZPFoureLRZYhGbLFeQ70263314 = -134161325;    double QQJRpZPFoureLRZYhGbLFeQ92434416 = -721491039;    double QQJRpZPFoureLRZYhGbLFeQ60484086 = 64399834;    double QQJRpZPFoureLRZYhGbLFeQ14331350 = -265652726;    double QQJRpZPFoureLRZYhGbLFeQ42864149 = -286798764;    double QQJRpZPFoureLRZYhGbLFeQ82895445 = -831959873;    double QQJRpZPFoureLRZYhGbLFeQ16483899 = 23432163;    double QQJRpZPFoureLRZYhGbLFeQ96162969 = -268761988;    double QQJRpZPFoureLRZYhGbLFeQ41133678 = -447169585;    double QQJRpZPFoureLRZYhGbLFeQ41004699 = -963499808;    double QQJRpZPFoureLRZYhGbLFeQ21716429 = -13761814;    double QQJRpZPFoureLRZYhGbLFeQ90843049 = -284387884;    double QQJRpZPFoureLRZYhGbLFeQ26738548 = -31412657;    double QQJRpZPFoureLRZYhGbLFeQ47386188 = -272425744;    double QQJRpZPFoureLRZYhGbLFeQ87571506 = -977278458;    double QQJRpZPFoureLRZYhGbLFeQ93831689 = -73115802;    double QQJRpZPFoureLRZYhGbLFeQ54475641 = -460529523;    double QQJRpZPFoureLRZYhGbLFeQ20589926 = -769839165;    double QQJRpZPFoureLRZYhGbLFeQ66937875 = -949546803;     QQJRpZPFoureLRZYhGbLFeQ72324643 = QQJRpZPFoureLRZYhGbLFeQ95604095;     QQJRpZPFoureLRZYhGbLFeQ95604095 = QQJRpZPFoureLRZYhGbLFeQ58205941;     QQJRpZPFoureLRZYhGbLFeQ58205941 = QQJRpZPFoureLRZYhGbLFeQ42192427;     QQJRpZPFoureLRZYhGbLFeQ42192427 = QQJRpZPFoureLRZYhGbLFeQ7783962;     QQJRpZPFoureLRZYhGbLFeQ7783962 = QQJRpZPFoureLRZYhGbLFeQ86826163;     QQJRpZPFoureLRZYhGbLFeQ86826163 = QQJRpZPFoureLRZYhGbLFeQ89799476;     QQJRpZPFoureLRZYhGbLFeQ89799476 = QQJRpZPFoureLRZYhGbLFeQ83786662;     QQJRpZPFoureLRZYhGbLFeQ83786662 = QQJRpZPFoureLRZYhGbLFeQ82227183;     QQJRpZPFoureLRZYhGbLFeQ82227183 = QQJRpZPFoureLRZYhGbLFeQ42315895;     QQJRpZPFoureLRZYhGbLFeQ42315895 = QQJRpZPFoureLRZYhGbLFeQ69936741;     QQJRpZPFoureLRZYhGbLFeQ69936741 = QQJRpZPFoureLRZYhGbLFeQ14209847;     QQJRpZPFoureLRZYhGbLFeQ14209847 = QQJRpZPFoureLRZYhGbLFeQ99568082;     QQJRpZPFoureLRZYhGbLFeQ99568082 = QQJRpZPFoureLRZYhGbLFeQ50468427;     QQJRpZPFoureLRZYhGbLFeQ50468427 = QQJRpZPFoureLRZYhGbLFeQ90979716;     QQJRpZPFoureLRZYhGbLFeQ90979716 = QQJRpZPFoureLRZYhGbLFeQ1020419;     QQJRpZPFoureLRZYhGbLFeQ1020419 = QQJRpZPFoureLRZYhGbLFeQ81701803;     QQJRpZPFoureLRZYhGbLFeQ81701803 = QQJRpZPFoureLRZYhGbLFeQ70578557;     QQJRpZPFoureLRZYhGbLFeQ70578557 = QQJRpZPFoureLRZYhGbLFeQ9185501;     QQJRpZPFoureLRZYhGbLFeQ9185501 = QQJRpZPFoureLRZYhGbLFeQ21907777;     QQJRpZPFoureLRZYhGbLFeQ21907777 = QQJRpZPFoureLRZYhGbLFeQ6815631;     QQJRpZPFoureLRZYhGbLFeQ6815631 = QQJRpZPFoureLRZYhGbLFeQ93034647;     QQJRpZPFoureLRZYhGbLFeQ93034647 = QQJRpZPFoureLRZYhGbLFeQ97673212;     QQJRpZPFoureLRZYhGbLFeQ97673212 = QQJRpZPFoureLRZYhGbLFeQ50185254;     QQJRpZPFoureLRZYhGbLFeQ50185254 = QQJRpZPFoureLRZYhGbLFeQ80501171;     QQJRpZPFoureLRZYhGbLFeQ80501171 = QQJRpZPFoureLRZYhGbLFeQ54959524;     QQJRpZPFoureLRZYhGbLFeQ54959524 = QQJRpZPFoureLRZYhGbLFeQ35066254;     QQJRpZPFoureLRZYhGbLFeQ35066254 = QQJRpZPFoureLRZYhGbLFeQ63687652;     QQJRpZPFoureLRZYhGbLFeQ63687652 = QQJRpZPFoureLRZYhGbLFeQ42766171;     QQJRpZPFoureLRZYhGbLFeQ42766171 = QQJRpZPFoureLRZYhGbLFeQ86755190;     QQJRpZPFoureLRZYhGbLFeQ86755190 = QQJRpZPFoureLRZYhGbLFeQ36417511;     QQJRpZPFoureLRZYhGbLFeQ36417511 = QQJRpZPFoureLRZYhGbLFeQ23578078;     QQJRpZPFoureLRZYhGbLFeQ23578078 = QQJRpZPFoureLRZYhGbLFeQ68755378;     QQJRpZPFoureLRZYhGbLFeQ68755378 = QQJRpZPFoureLRZYhGbLFeQ94811928;     QQJRpZPFoureLRZYhGbLFeQ94811928 = QQJRpZPFoureLRZYhGbLFeQ20423674;     QQJRpZPFoureLRZYhGbLFeQ20423674 = QQJRpZPFoureLRZYhGbLFeQ38935582;     QQJRpZPFoureLRZYhGbLFeQ38935582 = QQJRpZPFoureLRZYhGbLFeQ29737116;     QQJRpZPFoureLRZYhGbLFeQ29737116 = QQJRpZPFoureLRZYhGbLFeQ52534304;     QQJRpZPFoureLRZYhGbLFeQ52534304 = QQJRpZPFoureLRZYhGbLFeQ79562985;     QQJRpZPFoureLRZYhGbLFeQ79562985 = QQJRpZPFoureLRZYhGbLFeQ99146098;     QQJRpZPFoureLRZYhGbLFeQ99146098 = QQJRpZPFoureLRZYhGbLFeQ13683332;     QQJRpZPFoureLRZYhGbLFeQ13683332 = QQJRpZPFoureLRZYhGbLFeQ34852181;     QQJRpZPFoureLRZYhGbLFeQ34852181 = QQJRpZPFoureLRZYhGbLFeQ49947634;     QQJRpZPFoureLRZYhGbLFeQ49947634 = QQJRpZPFoureLRZYhGbLFeQ26488309;     QQJRpZPFoureLRZYhGbLFeQ26488309 = QQJRpZPFoureLRZYhGbLFeQ13296539;     QQJRpZPFoureLRZYhGbLFeQ13296539 = QQJRpZPFoureLRZYhGbLFeQ50041123;     QQJRpZPFoureLRZYhGbLFeQ50041123 = QQJRpZPFoureLRZYhGbLFeQ89915605;     QQJRpZPFoureLRZYhGbLFeQ89915605 = QQJRpZPFoureLRZYhGbLFeQ64802939;     QQJRpZPFoureLRZYhGbLFeQ64802939 = QQJRpZPFoureLRZYhGbLFeQ71253236;     QQJRpZPFoureLRZYhGbLFeQ71253236 = QQJRpZPFoureLRZYhGbLFeQ82282085;     QQJRpZPFoureLRZYhGbLFeQ82282085 = QQJRpZPFoureLRZYhGbLFeQ72423841;     QQJRpZPFoureLRZYhGbLFeQ72423841 = QQJRpZPFoureLRZYhGbLFeQ93553362;     QQJRpZPFoureLRZYhGbLFeQ93553362 = QQJRpZPFoureLRZYhGbLFeQ40682632;     QQJRpZPFoureLRZYhGbLFeQ40682632 = QQJRpZPFoureLRZYhGbLFeQ52271480;     QQJRpZPFoureLRZYhGbLFeQ52271480 = QQJRpZPFoureLRZYhGbLFeQ98648958;     QQJRpZPFoureLRZYhGbLFeQ98648958 = QQJRpZPFoureLRZYhGbLFeQ79289996;     QQJRpZPFoureLRZYhGbLFeQ79289996 = QQJRpZPFoureLRZYhGbLFeQ97930883;     QQJRpZPFoureLRZYhGbLFeQ97930883 = QQJRpZPFoureLRZYhGbLFeQ8020688;     QQJRpZPFoureLRZYhGbLFeQ8020688 = QQJRpZPFoureLRZYhGbLFeQ61691255;     QQJRpZPFoureLRZYhGbLFeQ61691255 = QQJRpZPFoureLRZYhGbLFeQ52824438;     QQJRpZPFoureLRZYhGbLFeQ52824438 = QQJRpZPFoureLRZYhGbLFeQ51759910;     QQJRpZPFoureLRZYhGbLFeQ51759910 = QQJRpZPFoureLRZYhGbLFeQ26111825;     QQJRpZPFoureLRZYhGbLFeQ26111825 = QQJRpZPFoureLRZYhGbLFeQ41020492;     QQJRpZPFoureLRZYhGbLFeQ41020492 = QQJRpZPFoureLRZYhGbLFeQ95471992;     QQJRpZPFoureLRZYhGbLFeQ95471992 = QQJRpZPFoureLRZYhGbLFeQ5898384;     QQJRpZPFoureLRZYhGbLFeQ5898384 = QQJRpZPFoureLRZYhGbLFeQ46358664;     QQJRpZPFoureLRZYhGbLFeQ46358664 = QQJRpZPFoureLRZYhGbLFeQ45454469;     QQJRpZPFoureLRZYhGbLFeQ45454469 = QQJRpZPFoureLRZYhGbLFeQ4756154;     QQJRpZPFoureLRZYhGbLFeQ4756154 = QQJRpZPFoureLRZYhGbLFeQ30044753;     QQJRpZPFoureLRZYhGbLFeQ30044753 = QQJRpZPFoureLRZYhGbLFeQ52044134;     QQJRpZPFoureLRZYhGbLFeQ52044134 = QQJRpZPFoureLRZYhGbLFeQ71283303;     QQJRpZPFoureLRZYhGbLFeQ71283303 = QQJRpZPFoureLRZYhGbLFeQ29167499;     QQJRpZPFoureLRZYhGbLFeQ29167499 = QQJRpZPFoureLRZYhGbLFeQ91015572;     QQJRpZPFoureLRZYhGbLFeQ91015572 = QQJRpZPFoureLRZYhGbLFeQ10039403;     QQJRpZPFoureLRZYhGbLFeQ10039403 = QQJRpZPFoureLRZYhGbLFeQ8224446;     QQJRpZPFoureLRZYhGbLFeQ8224446 = QQJRpZPFoureLRZYhGbLFeQ71963449;     QQJRpZPFoureLRZYhGbLFeQ71963449 = QQJRpZPFoureLRZYhGbLFeQ43087014;     QQJRpZPFoureLRZYhGbLFeQ43087014 = QQJRpZPFoureLRZYhGbLFeQ71184903;     QQJRpZPFoureLRZYhGbLFeQ71184903 = QQJRpZPFoureLRZYhGbLFeQ36888716;     QQJRpZPFoureLRZYhGbLFeQ36888716 = QQJRpZPFoureLRZYhGbLFeQ30460049;     QQJRpZPFoureLRZYhGbLFeQ30460049 = QQJRpZPFoureLRZYhGbLFeQ65043918;     QQJRpZPFoureLRZYhGbLFeQ65043918 = QQJRpZPFoureLRZYhGbLFeQ70263314;     QQJRpZPFoureLRZYhGbLFeQ70263314 = QQJRpZPFoureLRZYhGbLFeQ92434416;     QQJRpZPFoureLRZYhGbLFeQ92434416 = QQJRpZPFoureLRZYhGbLFeQ60484086;     QQJRpZPFoureLRZYhGbLFeQ60484086 = QQJRpZPFoureLRZYhGbLFeQ14331350;     QQJRpZPFoureLRZYhGbLFeQ14331350 = QQJRpZPFoureLRZYhGbLFeQ42864149;     QQJRpZPFoureLRZYhGbLFeQ42864149 = QQJRpZPFoureLRZYhGbLFeQ82895445;     QQJRpZPFoureLRZYhGbLFeQ82895445 = QQJRpZPFoureLRZYhGbLFeQ16483899;     QQJRpZPFoureLRZYhGbLFeQ16483899 = QQJRpZPFoureLRZYhGbLFeQ96162969;     QQJRpZPFoureLRZYhGbLFeQ96162969 = QQJRpZPFoureLRZYhGbLFeQ41133678;     QQJRpZPFoureLRZYhGbLFeQ41133678 = QQJRpZPFoureLRZYhGbLFeQ41004699;     QQJRpZPFoureLRZYhGbLFeQ41004699 = QQJRpZPFoureLRZYhGbLFeQ21716429;     QQJRpZPFoureLRZYhGbLFeQ21716429 = QQJRpZPFoureLRZYhGbLFeQ90843049;     QQJRpZPFoureLRZYhGbLFeQ90843049 = QQJRpZPFoureLRZYhGbLFeQ26738548;     QQJRpZPFoureLRZYhGbLFeQ26738548 = QQJRpZPFoureLRZYhGbLFeQ47386188;     QQJRpZPFoureLRZYhGbLFeQ47386188 = QQJRpZPFoureLRZYhGbLFeQ87571506;     QQJRpZPFoureLRZYhGbLFeQ87571506 = QQJRpZPFoureLRZYhGbLFeQ93831689;     QQJRpZPFoureLRZYhGbLFeQ93831689 = QQJRpZPFoureLRZYhGbLFeQ54475641;     QQJRpZPFoureLRZYhGbLFeQ54475641 = QQJRpZPFoureLRZYhGbLFeQ20589926;     QQJRpZPFoureLRZYhGbLFeQ20589926 = QQJRpZPFoureLRZYhGbLFeQ66937875;     QQJRpZPFoureLRZYhGbLFeQ66937875 = QQJRpZPFoureLRZYhGbLFeQ72324643;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void mYdFrWhnICjVekYJjXedABBnaYcnkPhaJHnYoNXfJ85293549() {     float qfXklfhlYJBKsjkWqeSutCs99650224 = -861441631;    float qfXklfhlYJBKsjkWqeSutCs3745985 = -363677220;    float qfXklfhlYJBKsjkWqeSutCs13900568 = 25365588;    float qfXklfhlYJBKsjkWqeSutCs74179863 = 78113708;    float qfXklfhlYJBKsjkWqeSutCs47219823 = -832319843;    float qfXklfhlYJBKsjkWqeSutCs2614721 = 36386145;    float qfXklfhlYJBKsjkWqeSutCs42486663 = -224164769;    float qfXklfhlYJBKsjkWqeSutCs15677727 = -839252918;    float qfXklfhlYJBKsjkWqeSutCs46799430 = -192320831;    float qfXklfhlYJBKsjkWqeSutCs32791766 = -480061757;    float qfXklfhlYJBKsjkWqeSutCs64322540 = -354313501;    float qfXklfhlYJBKsjkWqeSutCs49165123 = -732875852;    float qfXklfhlYJBKsjkWqeSutCs89439968 = -399733085;    float qfXklfhlYJBKsjkWqeSutCs35412698 = -548796781;    float qfXklfhlYJBKsjkWqeSutCs17384780 = -528653321;    float qfXklfhlYJBKsjkWqeSutCs39545324 = -276816139;    float qfXklfhlYJBKsjkWqeSutCs95580874 = -271252056;    float qfXklfhlYJBKsjkWqeSutCs35126984 = -520149676;    float qfXklfhlYJBKsjkWqeSutCs89902868 = -404854263;    float qfXklfhlYJBKsjkWqeSutCs98743495 = -82312599;    float qfXklfhlYJBKsjkWqeSutCs93820180 = -513562775;    float qfXklfhlYJBKsjkWqeSutCs63235008 = -617043752;    float qfXklfhlYJBKsjkWqeSutCs75127727 = 61413854;    float qfXklfhlYJBKsjkWqeSutCs61811966 = -391728712;    float qfXklfhlYJBKsjkWqeSutCs60488152 = -346696406;    float qfXklfhlYJBKsjkWqeSutCs54723517 = -983670258;    float qfXklfhlYJBKsjkWqeSutCs78616611 = -381053123;    float qfXklfhlYJBKsjkWqeSutCs99163033 = -999220402;    float qfXklfhlYJBKsjkWqeSutCs65884621 = -937454666;    float qfXklfhlYJBKsjkWqeSutCs27995363 = -287054488;    float qfXklfhlYJBKsjkWqeSutCs70623444 = -511760213;    float qfXklfhlYJBKsjkWqeSutCs85254847 = -878978604;    float qfXklfhlYJBKsjkWqeSutCs73946422 = 52799892;    float qfXklfhlYJBKsjkWqeSutCs42210584 = -864771593;    float qfXklfhlYJBKsjkWqeSutCs8265262 = -339152772;    float qfXklfhlYJBKsjkWqeSutCs93305900 = 9789900;    float qfXklfhlYJBKsjkWqeSutCs95074701 = -284570248;    float qfXklfhlYJBKsjkWqeSutCs26502344 = -130301727;    float qfXklfhlYJBKsjkWqeSutCs13776209 = 193679;    float qfXklfhlYJBKsjkWqeSutCs54107519 = -224687144;    float qfXklfhlYJBKsjkWqeSutCs38626949 = -909671103;    float qfXklfhlYJBKsjkWqeSutCs49613926 = -777439689;    float qfXklfhlYJBKsjkWqeSutCs85518565 = -263229713;    float qfXklfhlYJBKsjkWqeSutCs70793483 = -961828872;    float qfXklfhlYJBKsjkWqeSutCs64293083 = -855335995;    float qfXklfhlYJBKsjkWqeSutCs87814916 = -555560071;    float qfXklfhlYJBKsjkWqeSutCs5076910 = -27419818;    float qfXklfhlYJBKsjkWqeSutCs20362489 = -210286256;    float qfXklfhlYJBKsjkWqeSutCs22089217 = -137267746;    float qfXklfhlYJBKsjkWqeSutCs59714273 = -291980353;    float qfXklfhlYJBKsjkWqeSutCs63295453 = -680411438;    float qfXklfhlYJBKsjkWqeSutCs91881251 = -381821306;    float qfXklfhlYJBKsjkWqeSutCs50408721 = -861286258;    float qfXklfhlYJBKsjkWqeSutCs33541926 = -722810615;    float qfXklfhlYJBKsjkWqeSutCs91473368 = -548957928;    float qfXklfhlYJBKsjkWqeSutCs36415216 = -144397879;    float qfXklfhlYJBKsjkWqeSutCs28618257 = -325091075;    float qfXklfhlYJBKsjkWqeSutCs52088602 = -582905700;    float qfXklfhlYJBKsjkWqeSutCs13691711 = -575189887;    float qfXklfhlYJBKsjkWqeSutCs92496305 = -848649586;    float qfXklfhlYJBKsjkWqeSutCs23998110 = -582560733;    float qfXklfhlYJBKsjkWqeSutCs43323630 = -224944368;    float qfXklfhlYJBKsjkWqeSutCs49793106 = -901798253;    float qfXklfhlYJBKsjkWqeSutCs18804068 = -905266344;    float qfXklfhlYJBKsjkWqeSutCs62168321 = -968301545;    float qfXklfhlYJBKsjkWqeSutCs79067692 = -475334897;    float qfXklfhlYJBKsjkWqeSutCs75218700 = -685675745;    float qfXklfhlYJBKsjkWqeSutCs47229384 = -534961492;    float qfXklfhlYJBKsjkWqeSutCs27147436 = -109644009;    float qfXklfhlYJBKsjkWqeSutCs24078880 = -438443222;    float qfXklfhlYJBKsjkWqeSutCs44470622 = -992245892;    float qfXklfhlYJBKsjkWqeSutCs69078531 = -40950330;    float qfXklfhlYJBKsjkWqeSutCs21350776 = -420343355;    float qfXklfhlYJBKsjkWqeSutCs35795350 = -80167119;    float qfXklfhlYJBKsjkWqeSutCs60116547 = -172641496;    float qfXklfhlYJBKsjkWqeSutCs44206255 = -736123086;    float qfXklfhlYJBKsjkWqeSutCs77716443 = -253814039;    float qfXklfhlYJBKsjkWqeSutCs4334244 = 23242726;    float qfXklfhlYJBKsjkWqeSutCs97518882 = -536392717;    float qfXklfhlYJBKsjkWqeSutCs72673236 = -791136336;    float qfXklfhlYJBKsjkWqeSutCs49646607 = -856250440;    float qfXklfhlYJBKsjkWqeSutCs58254122 = -70766867;    float qfXklfhlYJBKsjkWqeSutCs77073816 = -761952656;    float qfXklfhlYJBKsjkWqeSutCs6170349 = -545474313;    float qfXklfhlYJBKsjkWqeSutCs64699909 = -606643050;    float qfXklfhlYJBKsjkWqeSutCs78742193 = -29938907;    float qfXklfhlYJBKsjkWqeSutCs34846127 = 82307653;    float qfXklfhlYJBKsjkWqeSutCs40404496 = -224389493;    float qfXklfhlYJBKsjkWqeSutCs50737216 = -215813666;    float qfXklfhlYJBKsjkWqeSutCs71850046 = -94754894;    float qfXklfhlYJBKsjkWqeSutCs64687643 = -665119025;    float qfXklfhlYJBKsjkWqeSutCs42986100 = -701664548;    float qfXklfhlYJBKsjkWqeSutCs12810633 = -555111840;    float qfXklfhlYJBKsjkWqeSutCs21279903 = -151156736;    float qfXklfhlYJBKsjkWqeSutCs30109410 = -642126412;    float qfXklfhlYJBKsjkWqeSutCs95303318 = -584726736;    float qfXklfhlYJBKsjkWqeSutCs99820819 = -875641437;    float qfXklfhlYJBKsjkWqeSutCs66714498 = -357963370;    float qfXklfhlYJBKsjkWqeSutCs8625163 = -993527327;    float qfXklfhlYJBKsjkWqeSutCs85225390 = -861441631;     qfXklfhlYJBKsjkWqeSutCs99650224 = qfXklfhlYJBKsjkWqeSutCs3745985;     qfXklfhlYJBKsjkWqeSutCs3745985 = qfXklfhlYJBKsjkWqeSutCs13900568;     qfXklfhlYJBKsjkWqeSutCs13900568 = qfXklfhlYJBKsjkWqeSutCs74179863;     qfXklfhlYJBKsjkWqeSutCs74179863 = qfXklfhlYJBKsjkWqeSutCs47219823;     qfXklfhlYJBKsjkWqeSutCs47219823 = qfXklfhlYJBKsjkWqeSutCs2614721;     qfXklfhlYJBKsjkWqeSutCs2614721 = qfXklfhlYJBKsjkWqeSutCs42486663;     qfXklfhlYJBKsjkWqeSutCs42486663 = qfXklfhlYJBKsjkWqeSutCs15677727;     qfXklfhlYJBKsjkWqeSutCs15677727 = qfXklfhlYJBKsjkWqeSutCs46799430;     qfXklfhlYJBKsjkWqeSutCs46799430 = qfXklfhlYJBKsjkWqeSutCs32791766;     qfXklfhlYJBKsjkWqeSutCs32791766 = qfXklfhlYJBKsjkWqeSutCs64322540;     qfXklfhlYJBKsjkWqeSutCs64322540 = qfXklfhlYJBKsjkWqeSutCs49165123;     qfXklfhlYJBKsjkWqeSutCs49165123 = qfXklfhlYJBKsjkWqeSutCs89439968;     qfXklfhlYJBKsjkWqeSutCs89439968 = qfXklfhlYJBKsjkWqeSutCs35412698;     qfXklfhlYJBKsjkWqeSutCs35412698 = qfXklfhlYJBKsjkWqeSutCs17384780;     qfXklfhlYJBKsjkWqeSutCs17384780 = qfXklfhlYJBKsjkWqeSutCs39545324;     qfXklfhlYJBKsjkWqeSutCs39545324 = qfXklfhlYJBKsjkWqeSutCs95580874;     qfXklfhlYJBKsjkWqeSutCs95580874 = qfXklfhlYJBKsjkWqeSutCs35126984;     qfXklfhlYJBKsjkWqeSutCs35126984 = qfXklfhlYJBKsjkWqeSutCs89902868;     qfXklfhlYJBKsjkWqeSutCs89902868 = qfXklfhlYJBKsjkWqeSutCs98743495;     qfXklfhlYJBKsjkWqeSutCs98743495 = qfXklfhlYJBKsjkWqeSutCs93820180;     qfXklfhlYJBKsjkWqeSutCs93820180 = qfXklfhlYJBKsjkWqeSutCs63235008;     qfXklfhlYJBKsjkWqeSutCs63235008 = qfXklfhlYJBKsjkWqeSutCs75127727;     qfXklfhlYJBKsjkWqeSutCs75127727 = qfXklfhlYJBKsjkWqeSutCs61811966;     qfXklfhlYJBKsjkWqeSutCs61811966 = qfXklfhlYJBKsjkWqeSutCs60488152;     qfXklfhlYJBKsjkWqeSutCs60488152 = qfXklfhlYJBKsjkWqeSutCs54723517;     qfXklfhlYJBKsjkWqeSutCs54723517 = qfXklfhlYJBKsjkWqeSutCs78616611;     qfXklfhlYJBKsjkWqeSutCs78616611 = qfXklfhlYJBKsjkWqeSutCs99163033;     qfXklfhlYJBKsjkWqeSutCs99163033 = qfXklfhlYJBKsjkWqeSutCs65884621;     qfXklfhlYJBKsjkWqeSutCs65884621 = qfXklfhlYJBKsjkWqeSutCs27995363;     qfXklfhlYJBKsjkWqeSutCs27995363 = qfXklfhlYJBKsjkWqeSutCs70623444;     qfXklfhlYJBKsjkWqeSutCs70623444 = qfXklfhlYJBKsjkWqeSutCs85254847;     qfXklfhlYJBKsjkWqeSutCs85254847 = qfXklfhlYJBKsjkWqeSutCs73946422;     qfXklfhlYJBKsjkWqeSutCs73946422 = qfXklfhlYJBKsjkWqeSutCs42210584;     qfXklfhlYJBKsjkWqeSutCs42210584 = qfXklfhlYJBKsjkWqeSutCs8265262;     qfXklfhlYJBKsjkWqeSutCs8265262 = qfXklfhlYJBKsjkWqeSutCs93305900;     qfXklfhlYJBKsjkWqeSutCs93305900 = qfXklfhlYJBKsjkWqeSutCs95074701;     qfXklfhlYJBKsjkWqeSutCs95074701 = qfXklfhlYJBKsjkWqeSutCs26502344;     qfXklfhlYJBKsjkWqeSutCs26502344 = qfXklfhlYJBKsjkWqeSutCs13776209;     qfXklfhlYJBKsjkWqeSutCs13776209 = qfXklfhlYJBKsjkWqeSutCs54107519;     qfXklfhlYJBKsjkWqeSutCs54107519 = qfXklfhlYJBKsjkWqeSutCs38626949;     qfXklfhlYJBKsjkWqeSutCs38626949 = qfXklfhlYJBKsjkWqeSutCs49613926;     qfXklfhlYJBKsjkWqeSutCs49613926 = qfXklfhlYJBKsjkWqeSutCs85518565;     qfXklfhlYJBKsjkWqeSutCs85518565 = qfXklfhlYJBKsjkWqeSutCs70793483;     qfXklfhlYJBKsjkWqeSutCs70793483 = qfXklfhlYJBKsjkWqeSutCs64293083;     qfXklfhlYJBKsjkWqeSutCs64293083 = qfXklfhlYJBKsjkWqeSutCs87814916;     qfXklfhlYJBKsjkWqeSutCs87814916 = qfXklfhlYJBKsjkWqeSutCs5076910;     qfXklfhlYJBKsjkWqeSutCs5076910 = qfXklfhlYJBKsjkWqeSutCs20362489;     qfXklfhlYJBKsjkWqeSutCs20362489 = qfXklfhlYJBKsjkWqeSutCs22089217;     qfXklfhlYJBKsjkWqeSutCs22089217 = qfXklfhlYJBKsjkWqeSutCs59714273;     qfXklfhlYJBKsjkWqeSutCs59714273 = qfXklfhlYJBKsjkWqeSutCs63295453;     qfXklfhlYJBKsjkWqeSutCs63295453 = qfXklfhlYJBKsjkWqeSutCs91881251;     qfXklfhlYJBKsjkWqeSutCs91881251 = qfXklfhlYJBKsjkWqeSutCs50408721;     qfXklfhlYJBKsjkWqeSutCs50408721 = qfXklfhlYJBKsjkWqeSutCs33541926;     qfXklfhlYJBKsjkWqeSutCs33541926 = qfXklfhlYJBKsjkWqeSutCs91473368;     qfXklfhlYJBKsjkWqeSutCs91473368 = qfXklfhlYJBKsjkWqeSutCs36415216;     qfXklfhlYJBKsjkWqeSutCs36415216 = qfXklfhlYJBKsjkWqeSutCs28618257;     qfXklfhlYJBKsjkWqeSutCs28618257 = qfXklfhlYJBKsjkWqeSutCs52088602;     qfXklfhlYJBKsjkWqeSutCs52088602 = qfXklfhlYJBKsjkWqeSutCs13691711;     qfXklfhlYJBKsjkWqeSutCs13691711 = qfXklfhlYJBKsjkWqeSutCs92496305;     qfXklfhlYJBKsjkWqeSutCs92496305 = qfXklfhlYJBKsjkWqeSutCs23998110;     qfXklfhlYJBKsjkWqeSutCs23998110 = qfXklfhlYJBKsjkWqeSutCs43323630;     qfXklfhlYJBKsjkWqeSutCs43323630 = qfXklfhlYJBKsjkWqeSutCs49793106;     qfXklfhlYJBKsjkWqeSutCs49793106 = qfXklfhlYJBKsjkWqeSutCs18804068;     qfXklfhlYJBKsjkWqeSutCs18804068 = qfXklfhlYJBKsjkWqeSutCs62168321;     qfXklfhlYJBKsjkWqeSutCs62168321 = qfXklfhlYJBKsjkWqeSutCs79067692;     qfXklfhlYJBKsjkWqeSutCs79067692 = qfXklfhlYJBKsjkWqeSutCs75218700;     qfXklfhlYJBKsjkWqeSutCs75218700 = qfXklfhlYJBKsjkWqeSutCs47229384;     qfXklfhlYJBKsjkWqeSutCs47229384 = qfXklfhlYJBKsjkWqeSutCs27147436;     qfXklfhlYJBKsjkWqeSutCs27147436 = qfXklfhlYJBKsjkWqeSutCs24078880;     qfXklfhlYJBKsjkWqeSutCs24078880 = qfXklfhlYJBKsjkWqeSutCs44470622;     qfXklfhlYJBKsjkWqeSutCs44470622 = qfXklfhlYJBKsjkWqeSutCs69078531;     qfXklfhlYJBKsjkWqeSutCs69078531 = qfXklfhlYJBKsjkWqeSutCs21350776;     qfXklfhlYJBKsjkWqeSutCs21350776 = qfXklfhlYJBKsjkWqeSutCs35795350;     qfXklfhlYJBKsjkWqeSutCs35795350 = qfXklfhlYJBKsjkWqeSutCs60116547;     qfXklfhlYJBKsjkWqeSutCs60116547 = qfXklfhlYJBKsjkWqeSutCs44206255;     qfXklfhlYJBKsjkWqeSutCs44206255 = qfXklfhlYJBKsjkWqeSutCs77716443;     qfXklfhlYJBKsjkWqeSutCs77716443 = qfXklfhlYJBKsjkWqeSutCs4334244;     qfXklfhlYJBKsjkWqeSutCs4334244 = qfXklfhlYJBKsjkWqeSutCs97518882;     qfXklfhlYJBKsjkWqeSutCs97518882 = qfXklfhlYJBKsjkWqeSutCs72673236;     qfXklfhlYJBKsjkWqeSutCs72673236 = qfXklfhlYJBKsjkWqeSutCs49646607;     qfXklfhlYJBKsjkWqeSutCs49646607 = qfXklfhlYJBKsjkWqeSutCs58254122;     qfXklfhlYJBKsjkWqeSutCs58254122 = qfXklfhlYJBKsjkWqeSutCs77073816;     qfXklfhlYJBKsjkWqeSutCs77073816 = qfXklfhlYJBKsjkWqeSutCs6170349;     qfXklfhlYJBKsjkWqeSutCs6170349 = qfXklfhlYJBKsjkWqeSutCs64699909;     qfXklfhlYJBKsjkWqeSutCs64699909 = qfXklfhlYJBKsjkWqeSutCs78742193;     qfXklfhlYJBKsjkWqeSutCs78742193 = qfXklfhlYJBKsjkWqeSutCs34846127;     qfXklfhlYJBKsjkWqeSutCs34846127 = qfXklfhlYJBKsjkWqeSutCs40404496;     qfXklfhlYJBKsjkWqeSutCs40404496 = qfXklfhlYJBKsjkWqeSutCs50737216;     qfXklfhlYJBKsjkWqeSutCs50737216 = qfXklfhlYJBKsjkWqeSutCs71850046;     qfXklfhlYJBKsjkWqeSutCs71850046 = qfXklfhlYJBKsjkWqeSutCs64687643;     qfXklfhlYJBKsjkWqeSutCs64687643 = qfXklfhlYJBKsjkWqeSutCs42986100;     qfXklfhlYJBKsjkWqeSutCs42986100 = qfXklfhlYJBKsjkWqeSutCs12810633;     qfXklfhlYJBKsjkWqeSutCs12810633 = qfXklfhlYJBKsjkWqeSutCs21279903;     qfXklfhlYJBKsjkWqeSutCs21279903 = qfXklfhlYJBKsjkWqeSutCs30109410;     qfXklfhlYJBKsjkWqeSutCs30109410 = qfXklfhlYJBKsjkWqeSutCs95303318;     qfXklfhlYJBKsjkWqeSutCs95303318 = qfXklfhlYJBKsjkWqeSutCs99820819;     qfXklfhlYJBKsjkWqeSutCs99820819 = qfXklfhlYJBKsjkWqeSutCs66714498;     qfXklfhlYJBKsjkWqeSutCs66714498 = qfXklfhlYJBKsjkWqeSutCs8625163;     qfXklfhlYJBKsjkWqeSutCs8625163 = qfXklfhlYJBKsjkWqeSutCs85225390;     qfXklfhlYJBKsjkWqeSutCs85225390 = qfXklfhlYJBKsjkWqeSutCs99650224;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void eREivVxAJraGAqhfhIthhuIyncoeCwBHrvbCnaKrR67522310() {     float oDrVPKZbehBcVZkJGuSgTyN51385675 = -977696463;    float oDrVPKZbehBcVZkJGuSgTyN19419967 = -440576975;    float oDrVPKZbehBcVZkJGuSgTyN62700927 = -871993797;    float oDrVPKZbehBcVZkJGuSgTyN49255265 = -838155435;    float oDrVPKZbehBcVZkJGuSgTyN23943756 = -539970497;    float oDrVPKZbehBcVZkJGuSgTyN27498075 = -122641081;    float oDrVPKZbehBcVZkJGuSgTyN16263506 = -47376365;    float oDrVPKZbehBcVZkJGuSgTyN34469205 = -963032473;    float oDrVPKZbehBcVZkJGuSgTyN98097506 = 16830458;    float oDrVPKZbehBcVZkJGuSgTyN1588890 = 78292261;    float oDrVPKZbehBcVZkJGuSgTyN59615239 = -316035973;    float oDrVPKZbehBcVZkJGuSgTyN59521500 = -667857353;    float oDrVPKZbehBcVZkJGuSgTyN76620761 = -8913347;    float oDrVPKZbehBcVZkJGuSgTyN94180416 = -175477328;    float oDrVPKZbehBcVZkJGuSgTyN71400037 = -6381031;    float oDrVPKZbehBcVZkJGuSgTyN51272596 = 11499906;    float oDrVPKZbehBcVZkJGuSgTyN51551400 = -639346746;    float oDrVPKZbehBcVZkJGuSgTyN20809907 = -982726170;    float oDrVPKZbehBcVZkJGuSgTyN49476718 = -932768446;    float oDrVPKZbehBcVZkJGuSgTyN18473070 = -892580748;    float oDrVPKZbehBcVZkJGuSgTyN39567534 = -596370943;    float oDrVPKZbehBcVZkJGuSgTyN65654462 = -790524759;    float oDrVPKZbehBcVZkJGuSgTyN76477241 = -646823593;    float oDrVPKZbehBcVZkJGuSgTyN54462216 = -263320663;    float oDrVPKZbehBcVZkJGuSgTyN31904011 = -292350843;    float oDrVPKZbehBcVZkJGuSgTyN12428932 = -229280037;    float oDrVPKZbehBcVZkJGuSgTyN17445246 = -843461840;    float oDrVPKZbehBcVZkJGuSgTyN97292257 = -282551088;    float oDrVPKZbehBcVZkJGuSgTyN40634695 = -987353568;    float oDrVPKZbehBcVZkJGuSgTyN97980446 = -748955284;    float oDrVPKZbehBcVZkJGuSgTyN7842254 = -844642679;    float oDrVPKZbehBcVZkJGuSgTyN98284577 = -102752796;    float oDrVPKZbehBcVZkJGuSgTyN72039732 = -529581994;    float oDrVPKZbehBcVZkJGuSgTyN36234296 = -525368759;    float oDrVPKZbehBcVZkJGuSgTyN6470390 = -555962415;    float oDrVPKZbehBcVZkJGuSgTyN75005511 = -226378928;    float oDrVPKZbehBcVZkJGuSgTyN44722928 = -928924992;    float oDrVPKZbehBcVZkJGuSgTyN27335956 = -213814091;    float oDrVPKZbehBcVZkJGuSgTyN83551051 = -445123716;    float oDrVPKZbehBcVZkJGuSgTyN79189935 = -843302811;    float oDrVPKZbehBcVZkJGuSgTyN7311036 = 71170109;    float oDrVPKZbehBcVZkJGuSgTyN9639326 = -765959310;    float oDrVPKZbehBcVZkJGuSgTyN42101797 = -164006245;    float oDrVPKZbehBcVZkJGuSgTyN63729302 = -887217549;    float oDrVPKZbehBcVZkJGuSgTyN36322292 = -355833079;    float oDrVPKZbehBcVZkJGuSgTyN89509363 = -979452011;    float oDrVPKZbehBcVZkJGuSgTyN91243104 = -489760271;    float oDrVPKZbehBcVZkJGuSgTyN99346953 = -614690951;    float oDrVPKZbehBcVZkJGuSgTyN11107670 = -101220475;    float oDrVPKZbehBcVZkJGuSgTyN48370532 = -150991734;    float oDrVPKZbehBcVZkJGuSgTyN3975346 = -388915594;    float oDrVPKZbehBcVZkJGuSgTyN23861004 = -843420866;    float oDrVPKZbehBcVZkJGuSgTyN73647466 = -605399446;    float oDrVPKZbehBcVZkJGuSgTyN3601167 = -337609927;    float oDrVPKZbehBcVZkJGuSgTyN27954777 = -578721129;    float oDrVPKZbehBcVZkJGuSgTyN85731212 = -87171704;    float oDrVPKZbehBcVZkJGuSgTyN42942726 = -793753383;    float oDrVPKZbehBcVZkJGuSgTyN8238712 = -508673134;    float oDrVPKZbehBcVZkJGuSgTyN17351254 = -445804592;    float oDrVPKZbehBcVZkJGuSgTyN11514825 = -210690461;    float oDrVPKZbehBcVZkJGuSgTyN10052829 = -279179242;    float oDrVPKZbehBcVZkJGuSgTyN18971248 = -764825278;    float oDrVPKZbehBcVZkJGuSgTyN93834510 = -975678905;    float oDrVPKZbehBcVZkJGuSgTyN117061 = -234214258;    float oDrVPKZbehBcVZkJGuSgTyN93746636 = -77065061;    float oDrVPKZbehBcVZkJGuSgTyN61330661 = -113283177;    float oDrVPKZbehBcVZkJGuSgTyN87481768 = -38275360;    float oDrVPKZbehBcVZkJGuSgTyN40386466 = -483544588;    float oDrVPKZbehBcVZkJGuSgTyN87710026 = -619514913;    float oDrVPKZbehBcVZkJGuSgTyN96394526 = -780002103;    float oDrVPKZbehBcVZkJGuSgTyN6549668 = -59575103;    float oDrVPKZbehBcVZkJGuSgTyN24215444 = -325532656;    float oDrVPKZbehBcVZkJGuSgTyN37258855 = -437602455;    float oDrVPKZbehBcVZkJGuSgTyN70286782 = 10534364;    float oDrVPKZbehBcVZkJGuSgTyN11162035 = -863750857;    float oDrVPKZbehBcVZkJGuSgTyN29928208 = -830411633;    float oDrVPKZbehBcVZkJGuSgTyN23552665 = -526518515;    float oDrVPKZbehBcVZkJGuSgTyN12747940 = -759606044;    float oDrVPKZbehBcVZkJGuSgTyN18139925 = -907487585;    float oDrVPKZbehBcVZkJGuSgTyN42394648 = -312898832;    float oDrVPKZbehBcVZkJGuSgTyN21185827 = -739519766;    float oDrVPKZbehBcVZkJGuSgTyN18098292 = -128770889;    float oDrVPKZbehBcVZkJGuSgTyN86184588 = -81330613;    float oDrVPKZbehBcVZkJGuSgTyN92264162 = -736361835;    float oDrVPKZbehBcVZkJGuSgTyN94005100 = -260039690;    float oDrVPKZbehBcVZkJGuSgTyN83981249 = 98778187;    float oDrVPKZbehBcVZkJGuSgTyN24637111 = -497353350;    float oDrVPKZbehBcVZkJGuSgTyN68438565 = -91972067;    float oDrVPKZbehBcVZkJGuSgTyN8279520 = -946647631;    float oDrVPKZbehBcVZkJGuSgTyN20739178 = -368790712;    float oDrVPKZbehBcVZkJGuSgTyN32062785 = -432625546;    float oDrVPKZbehBcVZkJGuSgTyN36484217 = -320251858;    float oDrVPKZbehBcVZkJGuSgTyN9984702 = -768009499;    float oDrVPKZbehBcVZkJGuSgTyN72036227 = -134433256;    float oDrVPKZbehBcVZkJGuSgTyN69137106 = -464123570;    float oDrVPKZbehBcVZkJGuSgTyN88339787 = -164004613;    float oDrVPKZbehBcVZkJGuSgTyN15804815 = -790280406;    float oDrVPKZbehBcVZkJGuSgTyN41984737 = -929791987;    float oDrVPKZbehBcVZkJGuSgTyN69982666 = -710152489;    float oDrVPKZbehBcVZkJGuSgTyN74991630 = -977696463;     oDrVPKZbehBcVZkJGuSgTyN51385675 = oDrVPKZbehBcVZkJGuSgTyN19419967;     oDrVPKZbehBcVZkJGuSgTyN19419967 = oDrVPKZbehBcVZkJGuSgTyN62700927;     oDrVPKZbehBcVZkJGuSgTyN62700927 = oDrVPKZbehBcVZkJGuSgTyN49255265;     oDrVPKZbehBcVZkJGuSgTyN49255265 = oDrVPKZbehBcVZkJGuSgTyN23943756;     oDrVPKZbehBcVZkJGuSgTyN23943756 = oDrVPKZbehBcVZkJGuSgTyN27498075;     oDrVPKZbehBcVZkJGuSgTyN27498075 = oDrVPKZbehBcVZkJGuSgTyN16263506;     oDrVPKZbehBcVZkJGuSgTyN16263506 = oDrVPKZbehBcVZkJGuSgTyN34469205;     oDrVPKZbehBcVZkJGuSgTyN34469205 = oDrVPKZbehBcVZkJGuSgTyN98097506;     oDrVPKZbehBcVZkJGuSgTyN98097506 = oDrVPKZbehBcVZkJGuSgTyN1588890;     oDrVPKZbehBcVZkJGuSgTyN1588890 = oDrVPKZbehBcVZkJGuSgTyN59615239;     oDrVPKZbehBcVZkJGuSgTyN59615239 = oDrVPKZbehBcVZkJGuSgTyN59521500;     oDrVPKZbehBcVZkJGuSgTyN59521500 = oDrVPKZbehBcVZkJGuSgTyN76620761;     oDrVPKZbehBcVZkJGuSgTyN76620761 = oDrVPKZbehBcVZkJGuSgTyN94180416;     oDrVPKZbehBcVZkJGuSgTyN94180416 = oDrVPKZbehBcVZkJGuSgTyN71400037;     oDrVPKZbehBcVZkJGuSgTyN71400037 = oDrVPKZbehBcVZkJGuSgTyN51272596;     oDrVPKZbehBcVZkJGuSgTyN51272596 = oDrVPKZbehBcVZkJGuSgTyN51551400;     oDrVPKZbehBcVZkJGuSgTyN51551400 = oDrVPKZbehBcVZkJGuSgTyN20809907;     oDrVPKZbehBcVZkJGuSgTyN20809907 = oDrVPKZbehBcVZkJGuSgTyN49476718;     oDrVPKZbehBcVZkJGuSgTyN49476718 = oDrVPKZbehBcVZkJGuSgTyN18473070;     oDrVPKZbehBcVZkJGuSgTyN18473070 = oDrVPKZbehBcVZkJGuSgTyN39567534;     oDrVPKZbehBcVZkJGuSgTyN39567534 = oDrVPKZbehBcVZkJGuSgTyN65654462;     oDrVPKZbehBcVZkJGuSgTyN65654462 = oDrVPKZbehBcVZkJGuSgTyN76477241;     oDrVPKZbehBcVZkJGuSgTyN76477241 = oDrVPKZbehBcVZkJGuSgTyN54462216;     oDrVPKZbehBcVZkJGuSgTyN54462216 = oDrVPKZbehBcVZkJGuSgTyN31904011;     oDrVPKZbehBcVZkJGuSgTyN31904011 = oDrVPKZbehBcVZkJGuSgTyN12428932;     oDrVPKZbehBcVZkJGuSgTyN12428932 = oDrVPKZbehBcVZkJGuSgTyN17445246;     oDrVPKZbehBcVZkJGuSgTyN17445246 = oDrVPKZbehBcVZkJGuSgTyN97292257;     oDrVPKZbehBcVZkJGuSgTyN97292257 = oDrVPKZbehBcVZkJGuSgTyN40634695;     oDrVPKZbehBcVZkJGuSgTyN40634695 = oDrVPKZbehBcVZkJGuSgTyN97980446;     oDrVPKZbehBcVZkJGuSgTyN97980446 = oDrVPKZbehBcVZkJGuSgTyN7842254;     oDrVPKZbehBcVZkJGuSgTyN7842254 = oDrVPKZbehBcVZkJGuSgTyN98284577;     oDrVPKZbehBcVZkJGuSgTyN98284577 = oDrVPKZbehBcVZkJGuSgTyN72039732;     oDrVPKZbehBcVZkJGuSgTyN72039732 = oDrVPKZbehBcVZkJGuSgTyN36234296;     oDrVPKZbehBcVZkJGuSgTyN36234296 = oDrVPKZbehBcVZkJGuSgTyN6470390;     oDrVPKZbehBcVZkJGuSgTyN6470390 = oDrVPKZbehBcVZkJGuSgTyN75005511;     oDrVPKZbehBcVZkJGuSgTyN75005511 = oDrVPKZbehBcVZkJGuSgTyN44722928;     oDrVPKZbehBcVZkJGuSgTyN44722928 = oDrVPKZbehBcVZkJGuSgTyN27335956;     oDrVPKZbehBcVZkJGuSgTyN27335956 = oDrVPKZbehBcVZkJGuSgTyN83551051;     oDrVPKZbehBcVZkJGuSgTyN83551051 = oDrVPKZbehBcVZkJGuSgTyN79189935;     oDrVPKZbehBcVZkJGuSgTyN79189935 = oDrVPKZbehBcVZkJGuSgTyN7311036;     oDrVPKZbehBcVZkJGuSgTyN7311036 = oDrVPKZbehBcVZkJGuSgTyN9639326;     oDrVPKZbehBcVZkJGuSgTyN9639326 = oDrVPKZbehBcVZkJGuSgTyN42101797;     oDrVPKZbehBcVZkJGuSgTyN42101797 = oDrVPKZbehBcVZkJGuSgTyN63729302;     oDrVPKZbehBcVZkJGuSgTyN63729302 = oDrVPKZbehBcVZkJGuSgTyN36322292;     oDrVPKZbehBcVZkJGuSgTyN36322292 = oDrVPKZbehBcVZkJGuSgTyN89509363;     oDrVPKZbehBcVZkJGuSgTyN89509363 = oDrVPKZbehBcVZkJGuSgTyN91243104;     oDrVPKZbehBcVZkJGuSgTyN91243104 = oDrVPKZbehBcVZkJGuSgTyN99346953;     oDrVPKZbehBcVZkJGuSgTyN99346953 = oDrVPKZbehBcVZkJGuSgTyN11107670;     oDrVPKZbehBcVZkJGuSgTyN11107670 = oDrVPKZbehBcVZkJGuSgTyN48370532;     oDrVPKZbehBcVZkJGuSgTyN48370532 = oDrVPKZbehBcVZkJGuSgTyN3975346;     oDrVPKZbehBcVZkJGuSgTyN3975346 = oDrVPKZbehBcVZkJGuSgTyN23861004;     oDrVPKZbehBcVZkJGuSgTyN23861004 = oDrVPKZbehBcVZkJGuSgTyN73647466;     oDrVPKZbehBcVZkJGuSgTyN73647466 = oDrVPKZbehBcVZkJGuSgTyN3601167;     oDrVPKZbehBcVZkJGuSgTyN3601167 = oDrVPKZbehBcVZkJGuSgTyN27954777;     oDrVPKZbehBcVZkJGuSgTyN27954777 = oDrVPKZbehBcVZkJGuSgTyN85731212;     oDrVPKZbehBcVZkJGuSgTyN85731212 = oDrVPKZbehBcVZkJGuSgTyN42942726;     oDrVPKZbehBcVZkJGuSgTyN42942726 = oDrVPKZbehBcVZkJGuSgTyN8238712;     oDrVPKZbehBcVZkJGuSgTyN8238712 = oDrVPKZbehBcVZkJGuSgTyN17351254;     oDrVPKZbehBcVZkJGuSgTyN17351254 = oDrVPKZbehBcVZkJGuSgTyN11514825;     oDrVPKZbehBcVZkJGuSgTyN11514825 = oDrVPKZbehBcVZkJGuSgTyN10052829;     oDrVPKZbehBcVZkJGuSgTyN10052829 = oDrVPKZbehBcVZkJGuSgTyN18971248;     oDrVPKZbehBcVZkJGuSgTyN18971248 = oDrVPKZbehBcVZkJGuSgTyN93834510;     oDrVPKZbehBcVZkJGuSgTyN93834510 = oDrVPKZbehBcVZkJGuSgTyN117061;     oDrVPKZbehBcVZkJGuSgTyN117061 = oDrVPKZbehBcVZkJGuSgTyN93746636;     oDrVPKZbehBcVZkJGuSgTyN93746636 = oDrVPKZbehBcVZkJGuSgTyN61330661;     oDrVPKZbehBcVZkJGuSgTyN61330661 = oDrVPKZbehBcVZkJGuSgTyN87481768;     oDrVPKZbehBcVZkJGuSgTyN87481768 = oDrVPKZbehBcVZkJGuSgTyN40386466;     oDrVPKZbehBcVZkJGuSgTyN40386466 = oDrVPKZbehBcVZkJGuSgTyN87710026;     oDrVPKZbehBcVZkJGuSgTyN87710026 = oDrVPKZbehBcVZkJGuSgTyN96394526;     oDrVPKZbehBcVZkJGuSgTyN96394526 = oDrVPKZbehBcVZkJGuSgTyN6549668;     oDrVPKZbehBcVZkJGuSgTyN6549668 = oDrVPKZbehBcVZkJGuSgTyN24215444;     oDrVPKZbehBcVZkJGuSgTyN24215444 = oDrVPKZbehBcVZkJGuSgTyN37258855;     oDrVPKZbehBcVZkJGuSgTyN37258855 = oDrVPKZbehBcVZkJGuSgTyN70286782;     oDrVPKZbehBcVZkJGuSgTyN70286782 = oDrVPKZbehBcVZkJGuSgTyN11162035;     oDrVPKZbehBcVZkJGuSgTyN11162035 = oDrVPKZbehBcVZkJGuSgTyN29928208;     oDrVPKZbehBcVZkJGuSgTyN29928208 = oDrVPKZbehBcVZkJGuSgTyN23552665;     oDrVPKZbehBcVZkJGuSgTyN23552665 = oDrVPKZbehBcVZkJGuSgTyN12747940;     oDrVPKZbehBcVZkJGuSgTyN12747940 = oDrVPKZbehBcVZkJGuSgTyN18139925;     oDrVPKZbehBcVZkJGuSgTyN18139925 = oDrVPKZbehBcVZkJGuSgTyN42394648;     oDrVPKZbehBcVZkJGuSgTyN42394648 = oDrVPKZbehBcVZkJGuSgTyN21185827;     oDrVPKZbehBcVZkJGuSgTyN21185827 = oDrVPKZbehBcVZkJGuSgTyN18098292;     oDrVPKZbehBcVZkJGuSgTyN18098292 = oDrVPKZbehBcVZkJGuSgTyN86184588;     oDrVPKZbehBcVZkJGuSgTyN86184588 = oDrVPKZbehBcVZkJGuSgTyN92264162;     oDrVPKZbehBcVZkJGuSgTyN92264162 = oDrVPKZbehBcVZkJGuSgTyN94005100;     oDrVPKZbehBcVZkJGuSgTyN94005100 = oDrVPKZbehBcVZkJGuSgTyN83981249;     oDrVPKZbehBcVZkJGuSgTyN83981249 = oDrVPKZbehBcVZkJGuSgTyN24637111;     oDrVPKZbehBcVZkJGuSgTyN24637111 = oDrVPKZbehBcVZkJGuSgTyN68438565;     oDrVPKZbehBcVZkJGuSgTyN68438565 = oDrVPKZbehBcVZkJGuSgTyN8279520;     oDrVPKZbehBcVZkJGuSgTyN8279520 = oDrVPKZbehBcVZkJGuSgTyN20739178;     oDrVPKZbehBcVZkJGuSgTyN20739178 = oDrVPKZbehBcVZkJGuSgTyN32062785;     oDrVPKZbehBcVZkJGuSgTyN32062785 = oDrVPKZbehBcVZkJGuSgTyN36484217;     oDrVPKZbehBcVZkJGuSgTyN36484217 = oDrVPKZbehBcVZkJGuSgTyN9984702;     oDrVPKZbehBcVZkJGuSgTyN9984702 = oDrVPKZbehBcVZkJGuSgTyN72036227;     oDrVPKZbehBcVZkJGuSgTyN72036227 = oDrVPKZbehBcVZkJGuSgTyN69137106;     oDrVPKZbehBcVZkJGuSgTyN69137106 = oDrVPKZbehBcVZkJGuSgTyN88339787;     oDrVPKZbehBcVZkJGuSgTyN88339787 = oDrVPKZbehBcVZkJGuSgTyN15804815;     oDrVPKZbehBcVZkJGuSgTyN15804815 = oDrVPKZbehBcVZkJGuSgTyN41984737;     oDrVPKZbehBcVZkJGuSgTyN41984737 = oDrVPKZbehBcVZkJGuSgTyN69982666;     oDrVPKZbehBcVZkJGuSgTyN69982666 = oDrVPKZbehBcVZkJGuSgTyN74991630;     oDrVPKZbehBcVZkJGuSgTyN74991630 = oDrVPKZbehBcVZkJGuSgTyN51385675;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void sSCBNbXOEGlowDSoxzDIssgQrNMJUlJbyxilerfBz4159457() {     int lNKoJtlZvanGTNzmmJAPNtS46171235 = -744587142;    int lNKoJtlZvanGTNzmmJAPNtS45613414 = -263121615;    int lNKoJtlZvanGTNzmmJAPNtS92941363 = -51326411;    int lNKoJtlZvanGTNzmmJAPNtS5378886 = -340024045;    int lNKoJtlZvanGTNzmmJAPNtS4822086 = -352462687;    int lNKoJtlZvanGTNzmmJAPNtS96354802 = -369850416;    int lNKoJtlZvanGTNzmmJAPNtS5617146 = 66587840;    int lNKoJtlZvanGTNzmmJAPNtS14612334 = -771915456;    int lNKoJtlZvanGTNzmmJAPNtS97628481 = -527680998;    int lNKoJtlZvanGTNzmmJAPNtS90996910 = -867778381;    int lNKoJtlZvanGTNzmmJAPNtS99137898 = -930208648;    int lNKoJtlZvanGTNzmmJAPNtS46316964 = 17739195;    int lNKoJtlZvanGTNzmmJAPNtS4894524 = -933445656;    int lNKoJtlZvanGTNzmmJAPNtS60182535 = -76877002;    int lNKoJtlZvanGTNzmmJAPNtS15819401 = -426588966;    int lNKoJtlZvanGTNzmmJAPNtS84296463 = -444442791;    int lNKoJtlZvanGTNzmmJAPNtS53455774 = -959580889;    int lNKoJtlZvanGTNzmmJAPNtS67511806 = -916336213;    int lNKoJtlZvanGTNzmmJAPNtS71290507 = -671503730;    int lNKoJtlZvanGTNzmmJAPNtS99376551 = -876806865;    int lNKoJtlZvanGTNzmmJAPNtS1912256 = -536029406;    int lNKoJtlZvanGTNzmmJAPNtS81266433 = -632571590;    int lNKoJtlZvanGTNzmmJAPNtS18526694 = 79191447;    int lNKoJtlZvanGTNzmmJAPNtS81074101 = 50304537;    int lNKoJtlZvanGTNzmmJAPNtS28209798 = -163754849;    int lNKoJtlZvanGTNzmmJAPNtS85030285 = -727708110;    int lNKoJtlZvanGTNzmmJAPNtS63736319 = -932235328;    int lNKoJtlZvanGTNzmmJAPNtS47158990 = -443767766;    int lNKoJtlZvanGTNzmmJAPNtS82232534 = -270244755;    int lNKoJtlZvanGTNzmmJAPNtS58137533 = -57542113;    int lNKoJtlZvanGTNzmmJAPNtS37951676 = -879861823;    int lNKoJtlZvanGTNzmmJAPNtS40100209 = -171207423;    int lNKoJtlZvanGTNzmmJAPNtS34575332 = -959866605;    int lNKoJtlZvanGTNzmmJAPNtS54516706 = -14429427;    int lNKoJtlZvanGTNzmmJAPNtS64802553 = -229675892;    int lNKoJtlZvanGTNzmmJAPNtS83441917 = -992579625;    int lNKoJtlZvanGTNzmmJAPNtS85704958 = 54572517;    int lNKoJtlZvanGTNzmmJAPNtS62232219 = 42644654;    int lNKoJtlZvanGTNzmmJAPNtS68368519 = -275023301;    int lNKoJtlZvanGTNzmmJAPNtS68783802 = -424245419;    int lNKoJtlZvanGTNzmmJAPNtS86078359 = -506283401;    int lNKoJtlZvanGTNzmmJAPNtS11685202 = 57359452;    int lNKoJtlZvanGTNzmmJAPNtS22706302 = -610589468;    int lNKoJtlZvanGTNzmmJAPNtS83961718 = -557257071;    int lNKoJtlZvanGTNzmmJAPNtS75257233 = 29083919;    int lNKoJtlZvanGTNzmmJAPNtS34960982 = -297832028;    int lNKoJtlZvanGTNzmmJAPNtS17366762 = -254339688;    int lNKoJtlZvanGTNzmmJAPNtS81623036 = -987428560;    int lNKoJtlZvanGTNzmmJAPNtS92375297 = 60932885;    int lNKoJtlZvanGTNzmmJAPNtS57458533 = -57738700;    int lNKoJtlZvanGTNzmmJAPNtS48509881 = -736596885;    int lNKoJtlZvanGTNzmmJAPNtS96105817 = -211304371;    int lNKoJtlZvanGTNzmmJAPNtS23241664 = -413127392;    int lNKoJtlZvanGTNzmmJAPNtS56236283 = -783111805;    int lNKoJtlZvanGTNzmmJAPNtS2247202 = -185555623;    int lNKoJtlZvanGTNzmmJAPNtS64904801 = -12015552;    int lNKoJtlZvanGTNzmmJAPNtS27086720 = -242313062;    int lNKoJtlZvanGTNzmmJAPNtS11867263 = -1630948;    int lNKoJtlZvanGTNzmmJAPNtS77169088 = -76269197;    int lNKoJtlZvanGTNzmmJAPNtS19791800 = -624754577;    int lNKoJtlZvanGTNzmmJAPNtS32618484 = -437615089;    int lNKoJtlZvanGTNzmmJAPNtS58458156 = -489644395;    int lNKoJtlZvanGTNzmmJAPNtS32379800 = -401670701;    int lNKoJtlZvanGTNzmmJAPNtS39490949 = -370138885;    int lNKoJtlZvanGTNzmmJAPNtS53045234 = -987916559;    int lNKoJtlZvanGTNzmmJAPNtS59037690 = -659001226;    int lNKoJtlZvanGTNzmmJAPNtS11741632 = -22394200;    int lNKoJtlZvanGTNzmmJAPNtS50377818 = -819016229;    int lNKoJtlZvanGTNzmmJAPNtS95379982 = -847201110;    int lNKoJtlZvanGTNzmmJAPNtS32377484 = -434009342;    int lNKoJtlZvanGTNzmmJAPNtS98591504 = -399015309;    int lNKoJtlZvanGTNzmmJAPNtS91223555 = -902225543;    int lNKoJtlZvanGTNzmmJAPNtS99143286 = -541312913;    int lNKoJtlZvanGTNzmmJAPNtS2506705 = -147258312;    int lNKoJtlZvanGTNzmmJAPNtS13298193 = -270523465;    int lNKoJtlZvanGTNzmmJAPNtS90227054 = -493388858;    int lNKoJtlZvanGTNzmmJAPNtS58560132 = 78017877;    int lNKoJtlZvanGTNzmmJAPNtS34564975 = -363551483;    int lNKoJtlZvanGTNzmmJAPNtS5816868 = -978779383;    int lNKoJtlZvanGTNzmmJAPNtS93248815 = -865922821;    int lNKoJtlZvanGTNzmmJAPNtS67663524 = -373368422;    int lNKoJtlZvanGTNzmmJAPNtS82113282 = -944806769;    int lNKoJtlZvanGTNzmmJAPNtS54783692 = -404700651;    int lNKoJtlZvanGTNzmmJAPNtS24774001 = -112506055;    int lNKoJtlZvanGTNzmmJAPNtS9627652 = -320945228;    int lNKoJtlZvanGTNzmmJAPNtS41845858 = -568557452;    int lNKoJtlZvanGTNzmmJAPNtS16858545 = -758080031;    int lNKoJtlZvanGTNzmmJAPNtS78339048 = -76754801;    int lNKoJtlZvanGTNzmmJAPNtS52269504 = -828873805;    int lNKoJtlZvanGTNzmmJAPNtS99897751 = -117660341;    int lNKoJtlZvanGTNzmmJAPNtS56355197 = -650266563;    int lNKoJtlZvanGTNzmmJAPNtS73837696 = -943796535;    int lNKoJtlZvanGTNzmmJAPNtS85063131 = -881086150;    int lNKoJtlZvanGTNzmmJAPNtS48576720 = -650268724;    int lNKoJtlZvanGTNzmmJAPNtS36165319 = -986630331;    int lNKoJtlZvanGTNzmmJAPNtS27620203 = 83360994;    int lNKoJtlZvanGTNzmmJAPNtS79305401 = -540969848;    int lNKoJtlZvanGTNzmmJAPNtS83215352 = -140450583;    int lNKoJtlZvanGTNzmmJAPNtS30916485 = -569340513;    int lNKoJtlZvanGTNzmmJAPNtS16219543 = -744587142;     lNKoJtlZvanGTNzmmJAPNtS46171235 = lNKoJtlZvanGTNzmmJAPNtS45613414;     lNKoJtlZvanGTNzmmJAPNtS45613414 = lNKoJtlZvanGTNzmmJAPNtS92941363;     lNKoJtlZvanGTNzmmJAPNtS92941363 = lNKoJtlZvanGTNzmmJAPNtS5378886;     lNKoJtlZvanGTNzmmJAPNtS5378886 = lNKoJtlZvanGTNzmmJAPNtS4822086;     lNKoJtlZvanGTNzmmJAPNtS4822086 = lNKoJtlZvanGTNzmmJAPNtS96354802;     lNKoJtlZvanGTNzmmJAPNtS96354802 = lNKoJtlZvanGTNzmmJAPNtS5617146;     lNKoJtlZvanGTNzmmJAPNtS5617146 = lNKoJtlZvanGTNzmmJAPNtS14612334;     lNKoJtlZvanGTNzmmJAPNtS14612334 = lNKoJtlZvanGTNzmmJAPNtS97628481;     lNKoJtlZvanGTNzmmJAPNtS97628481 = lNKoJtlZvanGTNzmmJAPNtS90996910;     lNKoJtlZvanGTNzmmJAPNtS90996910 = lNKoJtlZvanGTNzmmJAPNtS99137898;     lNKoJtlZvanGTNzmmJAPNtS99137898 = lNKoJtlZvanGTNzmmJAPNtS46316964;     lNKoJtlZvanGTNzmmJAPNtS46316964 = lNKoJtlZvanGTNzmmJAPNtS4894524;     lNKoJtlZvanGTNzmmJAPNtS4894524 = lNKoJtlZvanGTNzmmJAPNtS60182535;     lNKoJtlZvanGTNzmmJAPNtS60182535 = lNKoJtlZvanGTNzmmJAPNtS15819401;     lNKoJtlZvanGTNzmmJAPNtS15819401 = lNKoJtlZvanGTNzmmJAPNtS84296463;     lNKoJtlZvanGTNzmmJAPNtS84296463 = lNKoJtlZvanGTNzmmJAPNtS53455774;     lNKoJtlZvanGTNzmmJAPNtS53455774 = lNKoJtlZvanGTNzmmJAPNtS67511806;     lNKoJtlZvanGTNzmmJAPNtS67511806 = lNKoJtlZvanGTNzmmJAPNtS71290507;     lNKoJtlZvanGTNzmmJAPNtS71290507 = lNKoJtlZvanGTNzmmJAPNtS99376551;     lNKoJtlZvanGTNzmmJAPNtS99376551 = lNKoJtlZvanGTNzmmJAPNtS1912256;     lNKoJtlZvanGTNzmmJAPNtS1912256 = lNKoJtlZvanGTNzmmJAPNtS81266433;     lNKoJtlZvanGTNzmmJAPNtS81266433 = lNKoJtlZvanGTNzmmJAPNtS18526694;     lNKoJtlZvanGTNzmmJAPNtS18526694 = lNKoJtlZvanGTNzmmJAPNtS81074101;     lNKoJtlZvanGTNzmmJAPNtS81074101 = lNKoJtlZvanGTNzmmJAPNtS28209798;     lNKoJtlZvanGTNzmmJAPNtS28209798 = lNKoJtlZvanGTNzmmJAPNtS85030285;     lNKoJtlZvanGTNzmmJAPNtS85030285 = lNKoJtlZvanGTNzmmJAPNtS63736319;     lNKoJtlZvanGTNzmmJAPNtS63736319 = lNKoJtlZvanGTNzmmJAPNtS47158990;     lNKoJtlZvanGTNzmmJAPNtS47158990 = lNKoJtlZvanGTNzmmJAPNtS82232534;     lNKoJtlZvanGTNzmmJAPNtS82232534 = lNKoJtlZvanGTNzmmJAPNtS58137533;     lNKoJtlZvanGTNzmmJAPNtS58137533 = lNKoJtlZvanGTNzmmJAPNtS37951676;     lNKoJtlZvanGTNzmmJAPNtS37951676 = lNKoJtlZvanGTNzmmJAPNtS40100209;     lNKoJtlZvanGTNzmmJAPNtS40100209 = lNKoJtlZvanGTNzmmJAPNtS34575332;     lNKoJtlZvanGTNzmmJAPNtS34575332 = lNKoJtlZvanGTNzmmJAPNtS54516706;     lNKoJtlZvanGTNzmmJAPNtS54516706 = lNKoJtlZvanGTNzmmJAPNtS64802553;     lNKoJtlZvanGTNzmmJAPNtS64802553 = lNKoJtlZvanGTNzmmJAPNtS83441917;     lNKoJtlZvanGTNzmmJAPNtS83441917 = lNKoJtlZvanGTNzmmJAPNtS85704958;     lNKoJtlZvanGTNzmmJAPNtS85704958 = lNKoJtlZvanGTNzmmJAPNtS62232219;     lNKoJtlZvanGTNzmmJAPNtS62232219 = lNKoJtlZvanGTNzmmJAPNtS68368519;     lNKoJtlZvanGTNzmmJAPNtS68368519 = lNKoJtlZvanGTNzmmJAPNtS68783802;     lNKoJtlZvanGTNzmmJAPNtS68783802 = lNKoJtlZvanGTNzmmJAPNtS86078359;     lNKoJtlZvanGTNzmmJAPNtS86078359 = lNKoJtlZvanGTNzmmJAPNtS11685202;     lNKoJtlZvanGTNzmmJAPNtS11685202 = lNKoJtlZvanGTNzmmJAPNtS22706302;     lNKoJtlZvanGTNzmmJAPNtS22706302 = lNKoJtlZvanGTNzmmJAPNtS83961718;     lNKoJtlZvanGTNzmmJAPNtS83961718 = lNKoJtlZvanGTNzmmJAPNtS75257233;     lNKoJtlZvanGTNzmmJAPNtS75257233 = lNKoJtlZvanGTNzmmJAPNtS34960982;     lNKoJtlZvanGTNzmmJAPNtS34960982 = lNKoJtlZvanGTNzmmJAPNtS17366762;     lNKoJtlZvanGTNzmmJAPNtS17366762 = lNKoJtlZvanGTNzmmJAPNtS81623036;     lNKoJtlZvanGTNzmmJAPNtS81623036 = lNKoJtlZvanGTNzmmJAPNtS92375297;     lNKoJtlZvanGTNzmmJAPNtS92375297 = lNKoJtlZvanGTNzmmJAPNtS57458533;     lNKoJtlZvanGTNzmmJAPNtS57458533 = lNKoJtlZvanGTNzmmJAPNtS48509881;     lNKoJtlZvanGTNzmmJAPNtS48509881 = lNKoJtlZvanGTNzmmJAPNtS96105817;     lNKoJtlZvanGTNzmmJAPNtS96105817 = lNKoJtlZvanGTNzmmJAPNtS23241664;     lNKoJtlZvanGTNzmmJAPNtS23241664 = lNKoJtlZvanGTNzmmJAPNtS56236283;     lNKoJtlZvanGTNzmmJAPNtS56236283 = lNKoJtlZvanGTNzmmJAPNtS2247202;     lNKoJtlZvanGTNzmmJAPNtS2247202 = lNKoJtlZvanGTNzmmJAPNtS64904801;     lNKoJtlZvanGTNzmmJAPNtS64904801 = lNKoJtlZvanGTNzmmJAPNtS27086720;     lNKoJtlZvanGTNzmmJAPNtS27086720 = lNKoJtlZvanGTNzmmJAPNtS11867263;     lNKoJtlZvanGTNzmmJAPNtS11867263 = lNKoJtlZvanGTNzmmJAPNtS77169088;     lNKoJtlZvanGTNzmmJAPNtS77169088 = lNKoJtlZvanGTNzmmJAPNtS19791800;     lNKoJtlZvanGTNzmmJAPNtS19791800 = lNKoJtlZvanGTNzmmJAPNtS32618484;     lNKoJtlZvanGTNzmmJAPNtS32618484 = lNKoJtlZvanGTNzmmJAPNtS58458156;     lNKoJtlZvanGTNzmmJAPNtS58458156 = lNKoJtlZvanGTNzmmJAPNtS32379800;     lNKoJtlZvanGTNzmmJAPNtS32379800 = lNKoJtlZvanGTNzmmJAPNtS39490949;     lNKoJtlZvanGTNzmmJAPNtS39490949 = lNKoJtlZvanGTNzmmJAPNtS53045234;     lNKoJtlZvanGTNzmmJAPNtS53045234 = lNKoJtlZvanGTNzmmJAPNtS59037690;     lNKoJtlZvanGTNzmmJAPNtS59037690 = lNKoJtlZvanGTNzmmJAPNtS11741632;     lNKoJtlZvanGTNzmmJAPNtS11741632 = lNKoJtlZvanGTNzmmJAPNtS50377818;     lNKoJtlZvanGTNzmmJAPNtS50377818 = lNKoJtlZvanGTNzmmJAPNtS95379982;     lNKoJtlZvanGTNzmmJAPNtS95379982 = lNKoJtlZvanGTNzmmJAPNtS32377484;     lNKoJtlZvanGTNzmmJAPNtS32377484 = lNKoJtlZvanGTNzmmJAPNtS98591504;     lNKoJtlZvanGTNzmmJAPNtS98591504 = lNKoJtlZvanGTNzmmJAPNtS91223555;     lNKoJtlZvanGTNzmmJAPNtS91223555 = lNKoJtlZvanGTNzmmJAPNtS99143286;     lNKoJtlZvanGTNzmmJAPNtS99143286 = lNKoJtlZvanGTNzmmJAPNtS2506705;     lNKoJtlZvanGTNzmmJAPNtS2506705 = lNKoJtlZvanGTNzmmJAPNtS13298193;     lNKoJtlZvanGTNzmmJAPNtS13298193 = lNKoJtlZvanGTNzmmJAPNtS90227054;     lNKoJtlZvanGTNzmmJAPNtS90227054 = lNKoJtlZvanGTNzmmJAPNtS58560132;     lNKoJtlZvanGTNzmmJAPNtS58560132 = lNKoJtlZvanGTNzmmJAPNtS34564975;     lNKoJtlZvanGTNzmmJAPNtS34564975 = lNKoJtlZvanGTNzmmJAPNtS5816868;     lNKoJtlZvanGTNzmmJAPNtS5816868 = lNKoJtlZvanGTNzmmJAPNtS93248815;     lNKoJtlZvanGTNzmmJAPNtS93248815 = lNKoJtlZvanGTNzmmJAPNtS67663524;     lNKoJtlZvanGTNzmmJAPNtS67663524 = lNKoJtlZvanGTNzmmJAPNtS82113282;     lNKoJtlZvanGTNzmmJAPNtS82113282 = lNKoJtlZvanGTNzmmJAPNtS54783692;     lNKoJtlZvanGTNzmmJAPNtS54783692 = lNKoJtlZvanGTNzmmJAPNtS24774001;     lNKoJtlZvanGTNzmmJAPNtS24774001 = lNKoJtlZvanGTNzmmJAPNtS9627652;     lNKoJtlZvanGTNzmmJAPNtS9627652 = lNKoJtlZvanGTNzmmJAPNtS41845858;     lNKoJtlZvanGTNzmmJAPNtS41845858 = lNKoJtlZvanGTNzmmJAPNtS16858545;     lNKoJtlZvanGTNzmmJAPNtS16858545 = lNKoJtlZvanGTNzmmJAPNtS78339048;     lNKoJtlZvanGTNzmmJAPNtS78339048 = lNKoJtlZvanGTNzmmJAPNtS52269504;     lNKoJtlZvanGTNzmmJAPNtS52269504 = lNKoJtlZvanGTNzmmJAPNtS99897751;     lNKoJtlZvanGTNzmmJAPNtS99897751 = lNKoJtlZvanGTNzmmJAPNtS56355197;     lNKoJtlZvanGTNzmmJAPNtS56355197 = lNKoJtlZvanGTNzmmJAPNtS73837696;     lNKoJtlZvanGTNzmmJAPNtS73837696 = lNKoJtlZvanGTNzmmJAPNtS85063131;     lNKoJtlZvanGTNzmmJAPNtS85063131 = lNKoJtlZvanGTNzmmJAPNtS48576720;     lNKoJtlZvanGTNzmmJAPNtS48576720 = lNKoJtlZvanGTNzmmJAPNtS36165319;     lNKoJtlZvanGTNzmmJAPNtS36165319 = lNKoJtlZvanGTNzmmJAPNtS27620203;     lNKoJtlZvanGTNzmmJAPNtS27620203 = lNKoJtlZvanGTNzmmJAPNtS79305401;     lNKoJtlZvanGTNzmmJAPNtS79305401 = lNKoJtlZvanGTNzmmJAPNtS83215352;     lNKoJtlZvanGTNzmmJAPNtS83215352 = lNKoJtlZvanGTNzmmJAPNtS30916485;     lNKoJtlZvanGTNzmmJAPNtS30916485 = lNKoJtlZvanGTNzmmJAPNtS16219543;     lNKoJtlZvanGTNzmmJAPNtS16219543 = lNKoJtlZvanGTNzmmJAPNtS46171235;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void UWMGcHNMvwCJBTkOqsEOMmmvclOapIFRZuIwvjuNn86388218() {     int sWSLgfvgwBWddThjRersnWn97906684 = -860841975;    int sWSLgfvgwBWddThjRersnWn61287397 = -340021371;    int sWSLgfvgwBWddThjRersnWn41741723 = -948685795;    int sWSLgfvgwBWddThjRersnWn80454287 = -156293187;    int sWSLgfvgwBWddThjRersnWn81546017 = -60113341;    int sWSLgfvgwBWddThjRersnWn21238157 = -528877643;    int sWSLgfvgwBWddThjRersnWn79393989 = -856623757;    int sWSLgfvgwBWddThjRersnWn33403812 = -895695010;    int sWSLgfvgwBWddThjRersnWn48926558 = -318529708;    int sWSLgfvgwBWddThjRersnWn59794034 = -309424363;    int sWSLgfvgwBWddThjRersnWn94430597 = -891931120;    int sWSLgfvgwBWddThjRersnWn56673341 = 82757695;    int sWSLgfvgwBWddThjRersnWn92075317 = -542625917;    int sWSLgfvgwBWddThjRersnWn18950254 = -803557549;    int sWSLgfvgwBWddThjRersnWn69834658 = 95683324;    int sWSLgfvgwBWddThjRersnWn96023735 = -156126746;    int sWSLgfvgwBWddThjRersnWn9426300 = -227675579;    int sWSLgfvgwBWddThjRersnWn53194728 = -278912708;    int sWSLgfvgwBWddThjRersnWn30864357 = -99417913;    int sWSLgfvgwBWddThjRersnWn19106126 = -587075014;    int sWSLgfvgwBWddThjRersnWn47659608 = -618837574;    int sWSLgfvgwBWddThjRersnWn83685887 = -806052598;    int sWSLgfvgwBWddThjRersnWn19876209 = -629046001;    int sWSLgfvgwBWddThjRersnWn73724351 = -921287414;    int sWSLgfvgwBWddThjRersnWn99625655 = -109409286;    int sWSLgfvgwBWddThjRersnWn42735700 = 26682111;    int sWSLgfvgwBWddThjRersnWn2564954 = -294644046;    int sWSLgfvgwBWddThjRersnWn45288214 = -827098452;    int sWSLgfvgwBWddThjRersnWn56982607 = -320143657;    int sWSLgfvgwBWddThjRersnWn28122617 = -519442909;    int sWSLgfvgwBWddThjRersnWn75170484 = -112744289;    int sWSLgfvgwBWddThjRersnWn53129939 = -494981614;    int sWSLgfvgwBWddThjRersnWn32668642 = -442248491;    int sWSLgfvgwBWddThjRersnWn48540418 = -775026593;    int sWSLgfvgwBWddThjRersnWn63007681 = -446485535;    int sWSLgfvgwBWddThjRersnWn65141527 = -128748454;    int sWSLgfvgwBWddThjRersnWn35353185 = -589782226;    int sWSLgfvgwBWddThjRersnWn63065831 = -40867711;    int sWSLgfvgwBWddThjRersnWn38143362 = -720340696;    int sWSLgfvgwBWddThjRersnWn93866218 = 57138915;    int sWSLgfvgwBWddThjRersnWn54762446 = -625442188;    int sWSLgfvgwBWddThjRersnWn71710601 = 68839830;    int sWSLgfvgwBWddThjRersnWn79289533 = -511365999;    int sWSLgfvgwBWddThjRersnWn76897537 = -482645749;    int sWSLgfvgwBWddThjRersnWn47286441 = -571413164;    int sWSLgfvgwBWddThjRersnWn36655429 = -721723968;    int sWSLgfvgwBWddThjRersnWn3532957 = -716680142;    int sWSLgfvgwBWddThjRersnWn60607501 = -291833255;    int sWSLgfvgwBWddThjRersnWn81393750 = 96980156;    int sWSLgfvgwBWddThjRersnWn46114792 = 83249919;    int sWSLgfvgwBWddThjRersnWn89189773 = -445101041;    int sWSLgfvgwBWddThjRersnWn28085571 = -672903931;    int sWSLgfvgwBWddThjRersnWn46480410 = -157240580;    int sWSLgfvgwBWddThjRersnWn26295524 = -397911117;    int sWSLgfvgwBWddThjRersnWn38728610 = -215318824;    int sWSLgfvgwBWddThjRersnWn14220798 = 45210623;    int sWSLgfvgwBWddThjRersnWn41411189 = -710975370;    int sWSLgfvgwBWddThjRersnWn68017372 = 72601619;    int sWSLgfvgwBWddThjRersnWn80828631 = 53116098;    int sWSLgfvgwBWddThjRersnWn38810318 = 13204548;    int sWSLgfvgwBWddThjRersnWn18673203 = -134233597;    int sWSLgfvgwBWddThjRersnWn34105775 = 70474694;    int sWSLgfvgwBWddThjRersnWn76421205 = -475551353;    int sWSLgfvgwBWddThjRersnWn20803942 = -799086800;    int sWSLgfvgwBWddThjRersnWn84623549 = -96680075;    int sWSLgfvgwBWddThjRersnWn41300659 = -296949506;    int sWSLgfvgwBWddThjRersnWn24004700 = -474993814;    int sWSLgfvgwBWddThjRersnWn43534899 = -767599324;    int sWSLgfvgwBWddThjRersnWn55942573 = -257072014;    int sWSLgfvgwBWddThjRersnWn4693132 = -775568223;    int sWSLgfvgwBWddThjRersnWn60670550 = -566344520;    int sWSLgfvgwBWddThjRersnWn46360468 = -86807868;    int sWSLgfvgwBWddThjRersnWn15051367 = -558572012;    int sWSLgfvgwBWddThjRersnWn36998138 = -56556828;    int sWSLgfvgwBWddThjRersnWn64343679 = -961632826;    int sWSLgfvgwBWddThjRersnWn75949006 = -587677404;    int sWSLgfvgwBWddThjRersnWn4396354 = -194686599;    int sWSLgfvgwBWddThjRersnWn42978671 = -46400253;    int sWSLgfvgwBWddThjRersnWn26437910 = -249874251;    int sWSLgfvgwBWddThjRersnWn62970226 = -387685318;    int sWSLgfvgwBWddThjRersnWn39202743 = -256637747;    int sWSLgfvgwBWddThjRersnWn41957453 = 97189209;    int sWSLgfvgwBWddThjRersnWn63894464 = -824078608;    int sWSLgfvgwBWddThjRersnWn10867815 = -303393577;    int sWSLgfvgwBWddThjRersnWn38932843 = 25658132;    int sWSLgfvgwBWddThjRersnWn47084914 = -439840359;    int sWSLgfvgwBWddThjRersnWn6649530 = -237741035;    int sWSLgfvgwBWddThjRersnWn6373118 = 55662625;    int sWSLgfvgwBWddThjRersnWn9811808 = -459707770;    int sWSLgfvgwBWddThjRersnWn48786883 = -391696159;    int sWSLgfvgwBWddThjRersnWn23730339 = -417773084;    int sWSLgfvgwBWddThjRersnWn67335813 = -562383846;    int sWSLgfvgwBWddThjRersnWn82237199 = 6016191;    int sWSLgfvgwBWddThjRersnWn99333043 = -633545245;    int sWSLgfvgwBWddThjRersnWn75193016 = -808627488;    int sWSLgfvgwBWddThjRersnWn20656671 = -595916883;    int sWSLgfvgwBWddThjRersnWn95289396 = -455608817;    int sWSLgfvgwBWddThjRersnWn58485591 = -712279200;    int sWSLgfvgwBWddThjRersnWn92273988 = -285965674;    int sWSLgfvgwBWddThjRersnWn5985783 = -860841975;     sWSLgfvgwBWddThjRersnWn97906684 = sWSLgfvgwBWddThjRersnWn61287397;     sWSLgfvgwBWddThjRersnWn61287397 = sWSLgfvgwBWddThjRersnWn41741723;     sWSLgfvgwBWddThjRersnWn41741723 = sWSLgfvgwBWddThjRersnWn80454287;     sWSLgfvgwBWddThjRersnWn80454287 = sWSLgfvgwBWddThjRersnWn81546017;     sWSLgfvgwBWddThjRersnWn81546017 = sWSLgfvgwBWddThjRersnWn21238157;     sWSLgfvgwBWddThjRersnWn21238157 = sWSLgfvgwBWddThjRersnWn79393989;     sWSLgfvgwBWddThjRersnWn79393989 = sWSLgfvgwBWddThjRersnWn33403812;     sWSLgfvgwBWddThjRersnWn33403812 = sWSLgfvgwBWddThjRersnWn48926558;     sWSLgfvgwBWddThjRersnWn48926558 = sWSLgfvgwBWddThjRersnWn59794034;     sWSLgfvgwBWddThjRersnWn59794034 = sWSLgfvgwBWddThjRersnWn94430597;     sWSLgfvgwBWddThjRersnWn94430597 = sWSLgfvgwBWddThjRersnWn56673341;     sWSLgfvgwBWddThjRersnWn56673341 = sWSLgfvgwBWddThjRersnWn92075317;     sWSLgfvgwBWddThjRersnWn92075317 = sWSLgfvgwBWddThjRersnWn18950254;     sWSLgfvgwBWddThjRersnWn18950254 = sWSLgfvgwBWddThjRersnWn69834658;     sWSLgfvgwBWddThjRersnWn69834658 = sWSLgfvgwBWddThjRersnWn96023735;     sWSLgfvgwBWddThjRersnWn96023735 = sWSLgfvgwBWddThjRersnWn9426300;     sWSLgfvgwBWddThjRersnWn9426300 = sWSLgfvgwBWddThjRersnWn53194728;     sWSLgfvgwBWddThjRersnWn53194728 = sWSLgfvgwBWddThjRersnWn30864357;     sWSLgfvgwBWddThjRersnWn30864357 = sWSLgfvgwBWddThjRersnWn19106126;     sWSLgfvgwBWddThjRersnWn19106126 = sWSLgfvgwBWddThjRersnWn47659608;     sWSLgfvgwBWddThjRersnWn47659608 = sWSLgfvgwBWddThjRersnWn83685887;     sWSLgfvgwBWddThjRersnWn83685887 = sWSLgfvgwBWddThjRersnWn19876209;     sWSLgfvgwBWddThjRersnWn19876209 = sWSLgfvgwBWddThjRersnWn73724351;     sWSLgfvgwBWddThjRersnWn73724351 = sWSLgfvgwBWddThjRersnWn99625655;     sWSLgfvgwBWddThjRersnWn99625655 = sWSLgfvgwBWddThjRersnWn42735700;     sWSLgfvgwBWddThjRersnWn42735700 = sWSLgfvgwBWddThjRersnWn2564954;     sWSLgfvgwBWddThjRersnWn2564954 = sWSLgfvgwBWddThjRersnWn45288214;     sWSLgfvgwBWddThjRersnWn45288214 = sWSLgfvgwBWddThjRersnWn56982607;     sWSLgfvgwBWddThjRersnWn56982607 = sWSLgfvgwBWddThjRersnWn28122617;     sWSLgfvgwBWddThjRersnWn28122617 = sWSLgfvgwBWddThjRersnWn75170484;     sWSLgfvgwBWddThjRersnWn75170484 = sWSLgfvgwBWddThjRersnWn53129939;     sWSLgfvgwBWddThjRersnWn53129939 = sWSLgfvgwBWddThjRersnWn32668642;     sWSLgfvgwBWddThjRersnWn32668642 = sWSLgfvgwBWddThjRersnWn48540418;     sWSLgfvgwBWddThjRersnWn48540418 = sWSLgfvgwBWddThjRersnWn63007681;     sWSLgfvgwBWddThjRersnWn63007681 = sWSLgfvgwBWddThjRersnWn65141527;     sWSLgfvgwBWddThjRersnWn65141527 = sWSLgfvgwBWddThjRersnWn35353185;     sWSLgfvgwBWddThjRersnWn35353185 = sWSLgfvgwBWddThjRersnWn63065831;     sWSLgfvgwBWddThjRersnWn63065831 = sWSLgfvgwBWddThjRersnWn38143362;     sWSLgfvgwBWddThjRersnWn38143362 = sWSLgfvgwBWddThjRersnWn93866218;     sWSLgfvgwBWddThjRersnWn93866218 = sWSLgfvgwBWddThjRersnWn54762446;     sWSLgfvgwBWddThjRersnWn54762446 = sWSLgfvgwBWddThjRersnWn71710601;     sWSLgfvgwBWddThjRersnWn71710601 = sWSLgfvgwBWddThjRersnWn79289533;     sWSLgfvgwBWddThjRersnWn79289533 = sWSLgfvgwBWddThjRersnWn76897537;     sWSLgfvgwBWddThjRersnWn76897537 = sWSLgfvgwBWddThjRersnWn47286441;     sWSLgfvgwBWddThjRersnWn47286441 = sWSLgfvgwBWddThjRersnWn36655429;     sWSLgfvgwBWddThjRersnWn36655429 = sWSLgfvgwBWddThjRersnWn3532957;     sWSLgfvgwBWddThjRersnWn3532957 = sWSLgfvgwBWddThjRersnWn60607501;     sWSLgfvgwBWddThjRersnWn60607501 = sWSLgfvgwBWddThjRersnWn81393750;     sWSLgfvgwBWddThjRersnWn81393750 = sWSLgfvgwBWddThjRersnWn46114792;     sWSLgfvgwBWddThjRersnWn46114792 = sWSLgfvgwBWddThjRersnWn89189773;     sWSLgfvgwBWddThjRersnWn89189773 = sWSLgfvgwBWddThjRersnWn28085571;     sWSLgfvgwBWddThjRersnWn28085571 = sWSLgfvgwBWddThjRersnWn46480410;     sWSLgfvgwBWddThjRersnWn46480410 = sWSLgfvgwBWddThjRersnWn26295524;     sWSLgfvgwBWddThjRersnWn26295524 = sWSLgfvgwBWddThjRersnWn38728610;     sWSLgfvgwBWddThjRersnWn38728610 = sWSLgfvgwBWddThjRersnWn14220798;     sWSLgfvgwBWddThjRersnWn14220798 = sWSLgfvgwBWddThjRersnWn41411189;     sWSLgfvgwBWddThjRersnWn41411189 = sWSLgfvgwBWddThjRersnWn68017372;     sWSLgfvgwBWddThjRersnWn68017372 = sWSLgfvgwBWddThjRersnWn80828631;     sWSLgfvgwBWddThjRersnWn80828631 = sWSLgfvgwBWddThjRersnWn38810318;     sWSLgfvgwBWddThjRersnWn38810318 = sWSLgfvgwBWddThjRersnWn18673203;     sWSLgfvgwBWddThjRersnWn18673203 = sWSLgfvgwBWddThjRersnWn34105775;     sWSLgfvgwBWddThjRersnWn34105775 = sWSLgfvgwBWddThjRersnWn76421205;     sWSLgfvgwBWddThjRersnWn76421205 = sWSLgfvgwBWddThjRersnWn20803942;     sWSLgfvgwBWddThjRersnWn20803942 = sWSLgfvgwBWddThjRersnWn84623549;     sWSLgfvgwBWddThjRersnWn84623549 = sWSLgfvgwBWddThjRersnWn41300659;     sWSLgfvgwBWddThjRersnWn41300659 = sWSLgfvgwBWddThjRersnWn24004700;     sWSLgfvgwBWddThjRersnWn24004700 = sWSLgfvgwBWddThjRersnWn43534899;     sWSLgfvgwBWddThjRersnWn43534899 = sWSLgfvgwBWddThjRersnWn55942573;     sWSLgfvgwBWddThjRersnWn55942573 = sWSLgfvgwBWddThjRersnWn4693132;     sWSLgfvgwBWddThjRersnWn4693132 = sWSLgfvgwBWddThjRersnWn60670550;     sWSLgfvgwBWddThjRersnWn60670550 = sWSLgfvgwBWddThjRersnWn46360468;     sWSLgfvgwBWddThjRersnWn46360468 = sWSLgfvgwBWddThjRersnWn15051367;     sWSLgfvgwBWddThjRersnWn15051367 = sWSLgfvgwBWddThjRersnWn36998138;     sWSLgfvgwBWddThjRersnWn36998138 = sWSLgfvgwBWddThjRersnWn64343679;     sWSLgfvgwBWddThjRersnWn64343679 = sWSLgfvgwBWddThjRersnWn75949006;     sWSLgfvgwBWddThjRersnWn75949006 = sWSLgfvgwBWddThjRersnWn4396354;     sWSLgfvgwBWddThjRersnWn4396354 = sWSLgfvgwBWddThjRersnWn42978671;     sWSLgfvgwBWddThjRersnWn42978671 = sWSLgfvgwBWddThjRersnWn26437910;     sWSLgfvgwBWddThjRersnWn26437910 = sWSLgfvgwBWddThjRersnWn62970226;     sWSLgfvgwBWddThjRersnWn62970226 = sWSLgfvgwBWddThjRersnWn39202743;     sWSLgfvgwBWddThjRersnWn39202743 = sWSLgfvgwBWddThjRersnWn41957453;     sWSLgfvgwBWddThjRersnWn41957453 = sWSLgfvgwBWddThjRersnWn63894464;     sWSLgfvgwBWddThjRersnWn63894464 = sWSLgfvgwBWddThjRersnWn10867815;     sWSLgfvgwBWddThjRersnWn10867815 = sWSLgfvgwBWddThjRersnWn38932843;     sWSLgfvgwBWddThjRersnWn38932843 = sWSLgfvgwBWddThjRersnWn47084914;     sWSLgfvgwBWddThjRersnWn47084914 = sWSLgfvgwBWddThjRersnWn6649530;     sWSLgfvgwBWddThjRersnWn6649530 = sWSLgfvgwBWddThjRersnWn6373118;     sWSLgfvgwBWddThjRersnWn6373118 = sWSLgfvgwBWddThjRersnWn9811808;     sWSLgfvgwBWddThjRersnWn9811808 = sWSLgfvgwBWddThjRersnWn48786883;     sWSLgfvgwBWddThjRersnWn48786883 = sWSLgfvgwBWddThjRersnWn23730339;     sWSLgfvgwBWddThjRersnWn23730339 = sWSLgfvgwBWddThjRersnWn67335813;     sWSLgfvgwBWddThjRersnWn67335813 = sWSLgfvgwBWddThjRersnWn82237199;     sWSLgfvgwBWddThjRersnWn82237199 = sWSLgfvgwBWddThjRersnWn99333043;     sWSLgfvgwBWddThjRersnWn99333043 = sWSLgfvgwBWddThjRersnWn75193016;     sWSLgfvgwBWddThjRersnWn75193016 = sWSLgfvgwBWddThjRersnWn20656671;     sWSLgfvgwBWddThjRersnWn20656671 = sWSLgfvgwBWddThjRersnWn95289396;     sWSLgfvgwBWddThjRersnWn95289396 = sWSLgfvgwBWddThjRersnWn58485591;     sWSLgfvgwBWddThjRersnWn58485591 = sWSLgfvgwBWddThjRersnWn92273988;     sWSLgfvgwBWddThjRersnWn92273988 = sWSLgfvgwBWddThjRersnWn5985783;     sWSLgfvgwBWddThjRersnWn5985783 = sWSLgfvgwBWddThjRersnWn97906684;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void IPlcwylontyIZBmXoaozwwNukkkDYFmQWYvEYUfxC16374449() {     int QCyEgIveISxDqyMCrsLNiQi20300274 = -622721796;    int QCyEgIveISxDqyMCrsLNiQi7062581 = -245969300;    int QCyEgIveISxDqyMCrsLNiQi69197790 = -131211025;    int QCyEgIveISxDqyMCrsLNiQi10381115 = -342159889;    int QCyEgIveISxDqyMCrsLNiQi70880170 = -182815021;    int QCyEgIveISxDqyMCrsLNiQi1315842 = -690053209;    int QCyEgIveISxDqyMCrsLNiQi3002393 = -974074596;    int QCyEgIveISxDqyMCrsLNiQi39823620 = -562114337;    int QCyEgIveISxDqyMCrsLNiQi63349525 = -489079677;    int QCyEgIveISxDqyMCrsLNiQi54918105 = -415358825;    int QCyEgIveISxDqyMCrsLNiQi11651852 = -929083449;    int QCyEgIveISxDqyMCrsLNiQi98284613 = -432509236;    int QCyEgIveISxDqyMCrsLNiQi27230584 = -39684762;    int QCyEgIveISxDqyMCrsLNiQi7720787 = -986113254;    int QCyEgIveISxDqyMCrsLNiQi61397826 = -669081537;    int QCyEgIveISxDqyMCrsLNiQi65715101 = -204998638;    int QCyEgIveISxDqyMCrsLNiQi3396892 = -685340829;    int QCyEgIveISxDqyMCrsLNiQi36170612 = -333583777;    int QCyEgIveISxDqyMCrsLNiQi51717718 = -716537772;    int QCyEgIveISxDqyMCrsLNiQi25548646 = -227685016;    int QCyEgIveISxDqyMCrsLNiQi68873291 = -899858508;    int QCyEgIveISxDqyMCrsLNiQi69204840 = -800827028;    int QCyEgIveISxDqyMCrsLNiQi86291135 = -346168751;    int QCyEgIveISxDqyMCrsLNiQi56574030 = -504359749;    int QCyEgIveISxDqyMCrsLNiQi6723213 = -404274557;    int QCyEgIveISxDqyMCrsLNiQi14464617 = -509006184;    int QCyEgIveISxDqyMCrsLNiQi79432792 = -851430826;    int QCyEgIveISxDqyMCrsLNiQi15796140 = -6585917;    int QCyEgIveISxDqyMCrsLNiQi51196721 = -18330462;    int QCyEgIveISxDqyMCrsLNiQi61189926 = -764307402;    int QCyEgIveISxDqyMCrsLNiQi86048611 = -906967207;    int QCyEgIveISxDqyMCrsLNiQi25947273 = -755231208;    int QCyEgIveISxDqyMCrsLNiQi28254889 = -769647770;    int QCyEgIveISxDqyMCrsLNiQi7646269 = -122471711;    int QCyEgIveISxDqyMCrsLNiQi56879008 = -250928033;    int QCyEgIveISxDqyMCrsLNiQi64006207 = -364378084;    int QCyEgIveISxDqyMCrsLNiQi16851530 = -223076800;    int QCyEgIveISxDqyMCrsLNiQi46774252 = 86769496;    int QCyEgIveISxDqyMCrsLNiQi51137897 = -408705312;    int QCyEgIveISxDqyMCrsLNiQi42179041 = -469653429;    int QCyEgIveISxDqyMCrsLNiQi95664149 = 59324044;    int QCyEgIveISxDqyMCrsLNiQi74521332 = -595276779;    int QCyEgIveISxDqyMCrsLNiQi24556366 = -939766329;    int QCyEgIveISxDqyMCrsLNiQi17109759 = -923044954;    int QCyEgIveISxDqyMCrsLNiQi31251655 = 92702760;    int QCyEgIveISxDqyMCrsLNiQi4327743 = 8091607;    int QCyEgIveISxDqyMCrsLNiQi88132561 = -813809773;    int QCyEgIveISxDqyMCrsLNiQi29822595 = -539606890;    int QCyEgIveISxDqyMCrsLNiQi57195266 = -288972681;    int QCyEgIveISxDqyMCrsLNiQi23153115 = -471745453;    int QCyEgIveISxDqyMCrsLNiQi84799620 = -121622311;    int QCyEgIveISxDqyMCrsLNiQi87389570 = -721577465;    int QCyEgIveISxDqyMCrsLNiQi49346465 = 62902198;    int QCyEgIveISxDqyMCrsLNiQi76331798 = -141672074;    int QCyEgIveISxDqyMCrsLNiQi47501157 = -599123662;    int QCyEgIveISxDqyMCrsLNiQi51095434 = -821894769;    int QCyEgIveISxDqyMCrsLNiQi20771446 = -899800550;    int QCyEgIveISxDqyMCrsLNiQi12623760 = -626851277;    int QCyEgIveISxDqyMCrsLNiQi3657902 = -937885332;    int QCyEgIveISxDqyMCrsLNiQi56415553 = -673808837;    int QCyEgIveISxDqyMCrsLNiQi21883049 = -838622384;    int QCyEgIveISxDqyMCrsLNiQi87206252 = -867488680;    int QCyEgIveISxDqyMCrsLNiQi88626899 = -443783876;    int QCyEgIveISxDqyMCrsLNiQi2159600 = -724772276;    int QCyEgIveISxDqyMCrsLNiQi68869494 = -508391619;    int QCyEgIveISxDqyMCrsLNiQi85704579 = -73852241;    int QCyEgIveISxDqyMCrsLNiQi70029724 = -662861466;    int QCyEgIveISxDqyMCrsLNiQi19584316 = -917213052;    int QCyEgIveISxDqyMCrsLNiQi50841778 = -635185222;    int QCyEgIveISxDqyMCrsLNiQi97391619 = -204703454;    int QCyEgIveISxDqyMCrsLNiQi48863571 = -981921839;    int QCyEgIveISxDqyMCrsLNiQi56622639 = -672110325;    int QCyEgIveISxDqyMCrsLNiQi85032715 = -924878466;    int QCyEgIveISxDqyMCrsLNiQi9538678 = -146884344;    int QCyEgIveISxDqyMCrsLNiQi29884497 = -187009061;    int QCyEgIveISxDqyMCrsLNiQi94351959 = -204581730;    int QCyEgIveISxDqyMCrsLNiQi44648475 = -861060700;    int QCyEgIveISxDqyMCrsLNiQi69181376 = -423123797;    int QCyEgIveISxDqyMCrsLNiQi25322375 = -497062509;    int QCyEgIveISxDqyMCrsLNiQi2395471 = -312366164;    int QCyEgIveISxDqyMCrsLNiQi26332056 = -695196412;    int QCyEgIveISxDqyMCrsLNiQi49610198 = -211823936;    int QCyEgIveISxDqyMCrsLNiQi58600873 = -717613236;    int QCyEgIveISxDqyMCrsLNiQi28043606 = -546585009;    int QCyEgIveISxDqyMCrsLNiQi76390305 = -542685092;    int QCyEgIveISxDqyMCrsLNiQi98659040 = -85389742;    int QCyEgIveISxDqyMCrsLNiQi76600807 = -718133406;    int QCyEgIveISxDqyMCrsLNiQi51923090 = -527975697;    int QCyEgIveISxDqyMCrsLNiQi60145111 = -523348050;    int QCyEgIveISxDqyMCrsLNiQi5783574 = -429033265;    int QCyEgIveISxDqyMCrsLNiQi43234761 = -464577535;    int QCyEgIveISxDqyMCrsLNiQi4227770 = -596225523;    int QCyEgIveISxDqyMCrsLNiQi43116351 = 24654828;    int QCyEgIveISxDqyMCrsLNiQi94722343 = -734896476;    int QCyEgIveISxDqyMCrsLNiQi20295992 = -631031045;    int QCyEgIveISxDqyMCrsLNiQi8457897 = -73187277;    int QCyEgIveISxDqyMCrsLNiQi85894432 = -51492903;    int QCyEgIveISxDqyMCrsLNiQi22396766 = -114994053;    int QCyEgIveISxDqyMCrsLNiQi48240265 = -314653336;    int QCyEgIveISxDqyMCrsLNiQi45547076 = -622721796;     QCyEgIveISxDqyMCrsLNiQi20300274 = QCyEgIveISxDqyMCrsLNiQi7062581;     QCyEgIveISxDqyMCrsLNiQi7062581 = QCyEgIveISxDqyMCrsLNiQi69197790;     QCyEgIveISxDqyMCrsLNiQi69197790 = QCyEgIveISxDqyMCrsLNiQi10381115;     QCyEgIveISxDqyMCrsLNiQi10381115 = QCyEgIveISxDqyMCrsLNiQi70880170;     QCyEgIveISxDqyMCrsLNiQi70880170 = QCyEgIveISxDqyMCrsLNiQi1315842;     QCyEgIveISxDqyMCrsLNiQi1315842 = QCyEgIveISxDqyMCrsLNiQi3002393;     QCyEgIveISxDqyMCrsLNiQi3002393 = QCyEgIveISxDqyMCrsLNiQi39823620;     QCyEgIveISxDqyMCrsLNiQi39823620 = QCyEgIveISxDqyMCrsLNiQi63349525;     QCyEgIveISxDqyMCrsLNiQi63349525 = QCyEgIveISxDqyMCrsLNiQi54918105;     QCyEgIveISxDqyMCrsLNiQi54918105 = QCyEgIveISxDqyMCrsLNiQi11651852;     QCyEgIveISxDqyMCrsLNiQi11651852 = QCyEgIveISxDqyMCrsLNiQi98284613;     QCyEgIveISxDqyMCrsLNiQi98284613 = QCyEgIveISxDqyMCrsLNiQi27230584;     QCyEgIveISxDqyMCrsLNiQi27230584 = QCyEgIveISxDqyMCrsLNiQi7720787;     QCyEgIveISxDqyMCrsLNiQi7720787 = QCyEgIveISxDqyMCrsLNiQi61397826;     QCyEgIveISxDqyMCrsLNiQi61397826 = QCyEgIveISxDqyMCrsLNiQi65715101;     QCyEgIveISxDqyMCrsLNiQi65715101 = QCyEgIveISxDqyMCrsLNiQi3396892;     QCyEgIveISxDqyMCrsLNiQi3396892 = QCyEgIveISxDqyMCrsLNiQi36170612;     QCyEgIveISxDqyMCrsLNiQi36170612 = QCyEgIveISxDqyMCrsLNiQi51717718;     QCyEgIveISxDqyMCrsLNiQi51717718 = QCyEgIveISxDqyMCrsLNiQi25548646;     QCyEgIveISxDqyMCrsLNiQi25548646 = QCyEgIveISxDqyMCrsLNiQi68873291;     QCyEgIveISxDqyMCrsLNiQi68873291 = QCyEgIveISxDqyMCrsLNiQi69204840;     QCyEgIveISxDqyMCrsLNiQi69204840 = QCyEgIveISxDqyMCrsLNiQi86291135;     QCyEgIveISxDqyMCrsLNiQi86291135 = QCyEgIveISxDqyMCrsLNiQi56574030;     QCyEgIveISxDqyMCrsLNiQi56574030 = QCyEgIveISxDqyMCrsLNiQi6723213;     QCyEgIveISxDqyMCrsLNiQi6723213 = QCyEgIveISxDqyMCrsLNiQi14464617;     QCyEgIveISxDqyMCrsLNiQi14464617 = QCyEgIveISxDqyMCrsLNiQi79432792;     QCyEgIveISxDqyMCrsLNiQi79432792 = QCyEgIveISxDqyMCrsLNiQi15796140;     QCyEgIveISxDqyMCrsLNiQi15796140 = QCyEgIveISxDqyMCrsLNiQi51196721;     QCyEgIveISxDqyMCrsLNiQi51196721 = QCyEgIveISxDqyMCrsLNiQi61189926;     QCyEgIveISxDqyMCrsLNiQi61189926 = QCyEgIveISxDqyMCrsLNiQi86048611;     QCyEgIveISxDqyMCrsLNiQi86048611 = QCyEgIveISxDqyMCrsLNiQi25947273;     QCyEgIveISxDqyMCrsLNiQi25947273 = QCyEgIveISxDqyMCrsLNiQi28254889;     QCyEgIveISxDqyMCrsLNiQi28254889 = QCyEgIveISxDqyMCrsLNiQi7646269;     QCyEgIveISxDqyMCrsLNiQi7646269 = QCyEgIveISxDqyMCrsLNiQi56879008;     QCyEgIveISxDqyMCrsLNiQi56879008 = QCyEgIveISxDqyMCrsLNiQi64006207;     QCyEgIveISxDqyMCrsLNiQi64006207 = QCyEgIveISxDqyMCrsLNiQi16851530;     QCyEgIveISxDqyMCrsLNiQi16851530 = QCyEgIveISxDqyMCrsLNiQi46774252;     QCyEgIveISxDqyMCrsLNiQi46774252 = QCyEgIveISxDqyMCrsLNiQi51137897;     QCyEgIveISxDqyMCrsLNiQi51137897 = QCyEgIveISxDqyMCrsLNiQi42179041;     QCyEgIveISxDqyMCrsLNiQi42179041 = QCyEgIveISxDqyMCrsLNiQi95664149;     QCyEgIveISxDqyMCrsLNiQi95664149 = QCyEgIveISxDqyMCrsLNiQi74521332;     QCyEgIveISxDqyMCrsLNiQi74521332 = QCyEgIveISxDqyMCrsLNiQi24556366;     QCyEgIveISxDqyMCrsLNiQi24556366 = QCyEgIveISxDqyMCrsLNiQi17109759;     QCyEgIveISxDqyMCrsLNiQi17109759 = QCyEgIveISxDqyMCrsLNiQi31251655;     QCyEgIveISxDqyMCrsLNiQi31251655 = QCyEgIveISxDqyMCrsLNiQi4327743;     QCyEgIveISxDqyMCrsLNiQi4327743 = QCyEgIveISxDqyMCrsLNiQi88132561;     QCyEgIveISxDqyMCrsLNiQi88132561 = QCyEgIveISxDqyMCrsLNiQi29822595;     QCyEgIveISxDqyMCrsLNiQi29822595 = QCyEgIveISxDqyMCrsLNiQi57195266;     QCyEgIveISxDqyMCrsLNiQi57195266 = QCyEgIveISxDqyMCrsLNiQi23153115;     QCyEgIveISxDqyMCrsLNiQi23153115 = QCyEgIveISxDqyMCrsLNiQi84799620;     QCyEgIveISxDqyMCrsLNiQi84799620 = QCyEgIveISxDqyMCrsLNiQi87389570;     QCyEgIveISxDqyMCrsLNiQi87389570 = QCyEgIveISxDqyMCrsLNiQi49346465;     QCyEgIveISxDqyMCrsLNiQi49346465 = QCyEgIveISxDqyMCrsLNiQi76331798;     QCyEgIveISxDqyMCrsLNiQi76331798 = QCyEgIveISxDqyMCrsLNiQi47501157;     QCyEgIveISxDqyMCrsLNiQi47501157 = QCyEgIveISxDqyMCrsLNiQi51095434;     QCyEgIveISxDqyMCrsLNiQi51095434 = QCyEgIveISxDqyMCrsLNiQi20771446;     QCyEgIveISxDqyMCrsLNiQi20771446 = QCyEgIveISxDqyMCrsLNiQi12623760;     QCyEgIveISxDqyMCrsLNiQi12623760 = QCyEgIveISxDqyMCrsLNiQi3657902;     QCyEgIveISxDqyMCrsLNiQi3657902 = QCyEgIveISxDqyMCrsLNiQi56415553;     QCyEgIveISxDqyMCrsLNiQi56415553 = QCyEgIveISxDqyMCrsLNiQi21883049;     QCyEgIveISxDqyMCrsLNiQi21883049 = QCyEgIveISxDqyMCrsLNiQi87206252;     QCyEgIveISxDqyMCrsLNiQi87206252 = QCyEgIveISxDqyMCrsLNiQi88626899;     QCyEgIveISxDqyMCrsLNiQi88626899 = QCyEgIveISxDqyMCrsLNiQi2159600;     QCyEgIveISxDqyMCrsLNiQi2159600 = QCyEgIveISxDqyMCrsLNiQi68869494;     QCyEgIveISxDqyMCrsLNiQi68869494 = QCyEgIveISxDqyMCrsLNiQi85704579;     QCyEgIveISxDqyMCrsLNiQi85704579 = QCyEgIveISxDqyMCrsLNiQi70029724;     QCyEgIveISxDqyMCrsLNiQi70029724 = QCyEgIveISxDqyMCrsLNiQi19584316;     QCyEgIveISxDqyMCrsLNiQi19584316 = QCyEgIveISxDqyMCrsLNiQi50841778;     QCyEgIveISxDqyMCrsLNiQi50841778 = QCyEgIveISxDqyMCrsLNiQi97391619;     QCyEgIveISxDqyMCrsLNiQi97391619 = QCyEgIveISxDqyMCrsLNiQi48863571;     QCyEgIveISxDqyMCrsLNiQi48863571 = QCyEgIveISxDqyMCrsLNiQi56622639;     QCyEgIveISxDqyMCrsLNiQi56622639 = QCyEgIveISxDqyMCrsLNiQi85032715;     QCyEgIveISxDqyMCrsLNiQi85032715 = QCyEgIveISxDqyMCrsLNiQi9538678;     QCyEgIveISxDqyMCrsLNiQi9538678 = QCyEgIveISxDqyMCrsLNiQi29884497;     QCyEgIveISxDqyMCrsLNiQi29884497 = QCyEgIveISxDqyMCrsLNiQi94351959;     QCyEgIveISxDqyMCrsLNiQi94351959 = QCyEgIveISxDqyMCrsLNiQi44648475;     QCyEgIveISxDqyMCrsLNiQi44648475 = QCyEgIveISxDqyMCrsLNiQi69181376;     QCyEgIveISxDqyMCrsLNiQi69181376 = QCyEgIveISxDqyMCrsLNiQi25322375;     QCyEgIveISxDqyMCrsLNiQi25322375 = QCyEgIveISxDqyMCrsLNiQi2395471;     QCyEgIveISxDqyMCrsLNiQi2395471 = QCyEgIveISxDqyMCrsLNiQi26332056;     QCyEgIveISxDqyMCrsLNiQi26332056 = QCyEgIveISxDqyMCrsLNiQi49610198;     QCyEgIveISxDqyMCrsLNiQi49610198 = QCyEgIveISxDqyMCrsLNiQi58600873;     QCyEgIveISxDqyMCrsLNiQi58600873 = QCyEgIveISxDqyMCrsLNiQi28043606;     QCyEgIveISxDqyMCrsLNiQi28043606 = QCyEgIveISxDqyMCrsLNiQi76390305;     QCyEgIveISxDqyMCrsLNiQi76390305 = QCyEgIveISxDqyMCrsLNiQi98659040;     QCyEgIveISxDqyMCrsLNiQi98659040 = QCyEgIveISxDqyMCrsLNiQi76600807;     QCyEgIveISxDqyMCrsLNiQi76600807 = QCyEgIveISxDqyMCrsLNiQi51923090;     QCyEgIveISxDqyMCrsLNiQi51923090 = QCyEgIveISxDqyMCrsLNiQi60145111;     QCyEgIveISxDqyMCrsLNiQi60145111 = QCyEgIveISxDqyMCrsLNiQi5783574;     QCyEgIveISxDqyMCrsLNiQi5783574 = QCyEgIveISxDqyMCrsLNiQi43234761;     QCyEgIveISxDqyMCrsLNiQi43234761 = QCyEgIveISxDqyMCrsLNiQi4227770;     QCyEgIveISxDqyMCrsLNiQi4227770 = QCyEgIveISxDqyMCrsLNiQi43116351;     QCyEgIveISxDqyMCrsLNiQi43116351 = QCyEgIveISxDqyMCrsLNiQi94722343;     QCyEgIveISxDqyMCrsLNiQi94722343 = QCyEgIveISxDqyMCrsLNiQi20295992;     QCyEgIveISxDqyMCrsLNiQi20295992 = QCyEgIveISxDqyMCrsLNiQi8457897;     QCyEgIveISxDqyMCrsLNiQi8457897 = QCyEgIveISxDqyMCrsLNiQi85894432;     QCyEgIveISxDqyMCrsLNiQi85894432 = QCyEgIveISxDqyMCrsLNiQi22396766;     QCyEgIveISxDqyMCrsLNiQi22396766 = QCyEgIveISxDqyMCrsLNiQi48240265;     QCyEgIveISxDqyMCrsLNiQi48240265 = QCyEgIveISxDqyMCrsLNiQi45547076;     QCyEgIveISxDqyMCrsLNiQi45547076 = QCyEgIveISxDqyMCrsLNiQi20300274;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void RnvHvcsNIeeQbhTTRZkXeiZHMjldEUQfkSOTUadDT98603209() {     int cmbJESccfXjvjjiOnuLrOIn72035724 = -738976629;    int cmbJESccfXjvjjiOnuLrOIn22736564 = -322869056;    int cmbJESccfXjvjjiOnuLrOIn17998150 = 71429590;    int cmbJESccfXjvjjiOnuLrOIn85456516 = -158429031;    int cmbJESccfXjvjjiOnuLrOIn47604103 = -990465674;    int cmbJESccfXjvjjiOnuLrOIn26199196 = -849080436;    int cmbJESccfXjvjjiOnuLrOIn76779235 = -797286192;    int cmbJESccfXjvjjiOnuLrOIn58615098 = -685893892;    int cmbJESccfXjvjjiOnuLrOIn14647602 = -279928388;    int cmbJESccfXjvjjiOnuLrOIn23715229 = -957004808;    int cmbJESccfXjvjjiOnuLrOIn6944551 = -890805920;    int cmbJESccfXjvjjiOnuLrOIn8640991 = -367490736;    int cmbJESccfXjvjjiOnuLrOIn14411378 = -748865023;    int cmbJESccfXjvjjiOnuLrOIn66488505 = -612793801;    int cmbJESccfXjvjjiOnuLrOIn15413085 = -146809247;    int cmbJESccfXjvjjiOnuLrOIn77442373 = 83317406;    int cmbJESccfXjvjjiOnuLrOIn59367416 = 46564482;    int cmbJESccfXjvjjiOnuLrOIn21853534 = -796160272;    int cmbJESccfXjvjjiOnuLrOIn11291567 = -144451955;    int cmbJESccfXjvjjiOnuLrOIn45278220 = 62046835;    int cmbJESccfXjvjjiOnuLrOIn14620644 = -982666677;    int cmbJESccfXjvjjiOnuLrOIn71624293 = -974308036;    int cmbJESccfXjvjjiOnuLrOIn87640649 = 45593802;    int cmbJESccfXjvjjiOnuLrOIn49224280 = -375951700;    int cmbJESccfXjvjjiOnuLrOIn78139071 = -349928994;    int cmbJESccfXjvjjiOnuLrOIn72170031 = -854615964;    int cmbJESccfXjvjjiOnuLrOIn18261427 = -213839544;    int cmbJESccfXjvjjiOnuLrOIn13925365 = -389916603;    int cmbJESccfXjvjjiOnuLrOIn25946794 = -68229364;    int cmbJESccfXjvjjiOnuLrOIn31175010 = -126208198;    int cmbJESccfXjvjjiOnuLrOIn23267420 = -139849673;    int cmbJESccfXjvjjiOnuLrOIn38977003 = 20994601;    int cmbJESccfXjvjjiOnuLrOIn26348199 = -252029656;    int cmbJESccfXjvjjiOnuLrOIn1669981 = -883068877;    int cmbJESccfXjvjjiOnuLrOIn55084136 = -467737676;    int cmbJESccfXjvjjiOnuLrOIn45705817 = -600546913;    int cmbJESccfXjvjjiOnuLrOIn66499756 = -867431544;    int cmbJESccfXjvjjiOnuLrOIn47607865 = 3257132;    int cmbJESccfXjvjjiOnuLrOIn20912739 = -854022707;    int cmbJESccfXjvjjiOnuLrOIn67261457 = 11730905;    int cmbJESccfXjvjjiOnuLrOIn64348236 = -59834744;    int cmbJESccfXjvjjiOnuLrOIn34546732 = -583796400;    int cmbJESccfXjvjjiOnuLrOIn81139597 = -840542861;    int cmbJESccfXjvjjiOnuLrOIn10045578 = -848433632;    int cmbJESccfXjvjjiOnuLrOIn3280864 = -507794324;    int cmbJESccfXjvjjiOnuLrOIn6022190 = -415800334;    int cmbJESccfXjvjjiOnuLrOIn74298755 = -176150226;    int cmbJESccfXjvjjiOnuLrOIn8807059 = -944011586;    int cmbJESccfXjvjjiOnuLrOIn46213719 = -252925410;    int cmbJESccfXjvjjiOnuLrOIn11809374 = -330756834;    int cmbJESccfXjvjjiOnuLrOIn25479513 = -930126467;    int cmbJESccfXjvjjiOnuLrOIn19369323 = -83177025;    int cmbJESccfXjvjjiOnuLrOIn72585211 = -781210990;    int cmbJESccfXjvjjiOnuLrOIn46391039 = -856471386;    int cmbJESccfXjvjjiOnuLrOIn83982566 = -628886862;    int cmbJESccfXjvjjiOnuLrOIn411431 = -764668594;    int cmbJESccfXjvjjiOnuLrOIn35095914 = -268462858;    int cmbJESccfXjvjjiOnuLrOIn68773869 = -552618710;    int cmbJESccfXjvjjiOnuLrOIn7317445 = -808500038;    int cmbJESccfXjvjjiOnuLrOIn75434071 = -35849711;    int cmbJESccfXjvjjiOnuLrOIn7937769 = -535240893;    int cmbJESccfXjvjjiOnuLrOIn62853871 = -307369590;    int cmbJESccfXjvjjiOnuLrOIn32668305 = -517664528;    int cmbJESccfXjvjjiOnuLrOIn83472592 = -53720190;    int cmbJESccfXjvjjiOnuLrOIn447810 = -717155135;    int cmbJESccfXjvjjiOnuLrOIn67967548 = -811800521;    int cmbJESccfXjvjjiOnuLrOIn82292792 = -15461080;    int cmbJESccfXjvjjiOnuLrOIn12741397 = -865796147;    int cmbJESccfXjvjjiOnuLrOIn11404369 = -45056125;    int cmbJESccfXjvjjiOnuLrOIn69707267 = -546262335;    int cmbJESccfXjvjjiOnuLrOIn10942618 = -49251051;    int cmbJESccfXjvjjiOnuLrOIn11759552 = -956692651;    int cmbJESccfXjvjjiOnuLrOIn940795 = -942137565;    int cmbJESccfXjvjjiOnuLrOIn44030110 = -56182860;    int cmbJESccfXjvjjiOnuLrOIn80929983 = -878118422;    int cmbJESccfXjvjjiOnuLrOIn80073912 = -298870277;    int cmbJESccfXjvjjiOnuLrOIn90484696 = -33765176;    int cmbJESccfXjvjjiOnuLrOIn77595072 = -105972567;    int cmbJESccfXjvjjiOnuLrOIn45943417 = -868157377;    int cmbJESccfXjvjjiOnuLrOIn72116881 = -934128661;    int cmbJESccfXjvjjiOnuLrOIn97871275 = -578465738;    int cmbJESccfXjvjjiOnuLrOIn9454368 = -269827958;    int cmbJESccfXjvjjiOnuLrOIn67711645 = -36991193;    int cmbJESccfXjvjjiOnuLrOIn14137420 = -737472531;    int cmbJESccfXjvjjiOnuLrOIn5695498 = -196081732;    int cmbJESccfXjvjjiOnuLrOIn3898097 = 43327351;    int cmbJESccfXjvjjiOnuLrOIn66391792 = -197794410;    int cmbJESccfXjvjjiOnuLrOIn79957159 = -395558270;    int cmbJESccfXjvjjiOnuLrOIn17687415 = -154182015;    int cmbJESccfXjvjjiOnuLrOIn54672705 = -703069083;    int cmbJESccfXjvjjiOnuLrOIn10609903 = -232084055;    int cmbJESccfXjvjjiOnuLrOIn97725886 = -214812834;    int cmbJESccfXjvjjiOnuLrOIn40290420 = -188242831;    int cmbJESccfXjvjjiOnuLrOIn45478668 = -718172996;    int cmbJESccfXjvjjiOnuLrOIn59323688 = -453028203;    int cmbJESccfXjvjjiOnuLrOIn1494366 = -752465154;    int cmbJESccfXjvjjiOnuLrOIn1878428 = 33868127;    int cmbJESccfXjvjjiOnuLrOIn97667005 = -686822671;    int cmbJESccfXjvjjiOnuLrOIn9597769 = -31278497;    int cmbJESccfXjvjjiOnuLrOIn35313315 = -738976629;     cmbJESccfXjvjjiOnuLrOIn72035724 = cmbJESccfXjvjjiOnuLrOIn22736564;     cmbJESccfXjvjjiOnuLrOIn22736564 = cmbJESccfXjvjjiOnuLrOIn17998150;     cmbJESccfXjvjjiOnuLrOIn17998150 = cmbJESccfXjvjjiOnuLrOIn85456516;     cmbJESccfXjvjjiOnuLrOIn85456516 = cmbJESccfXjvjjiOnuLrOIn47604103;     cmbJESccfXjvjjiOnuLrOIn47604103 = cmbJESccfXjvjjiOnuLrOIn26199196;     cmbJESccfXjvjjiOnuLrOIn26199196 = cmbJESccfXjvjjiOnuLrOIn76779235;     cmbJESccfXjvjjiOnuLrOIn76779235 = cmbJESccfXjvjjiOnuLrOIn58615098;     cmbJESccfXjvjjiOnuLrOIn58615098 = cmbJESccfXjvjjiOnuLrOIn14647602;     cmbJESccfXjvjjiOnuLrOIn14647602 = cmbJESccfXjvjjiOnuLrOIn23715229;     cmbJESccfXjvjjiOnuLrOIn23715229 = cmbJESccfXjvjjiOnuLrOIn6944551;     cmbJESccfXjvjjiOnuLrOIn6944551 = cmbJESccfXjvjjiOnuLrOIn8640991;     cmbJESccfXjvjjiOnuLrOIn8640991 = cmbJESccfXjvjjiOnuLrOIn14411378;     cmbJESccfXjvjjiOnuLrOIn14411378 = cmbJESccfXjvjjiOnuLrOIn66488505;     cmbJESccfXjvjjiOnuLrOIn66488505 = cmbJESccfXjvjjiOnuLrOIn15413085;     cmbJESccfXjvjjiOnuLrOIn15413085 = cmbJESccfXjvjjiOnuLrOIn77442373;     cmbJESccfXjvjjiOnuLrOIn77442373 = cmbJESccfXjvjjiOnuLrOIn59367416;     cmbJESccfXjvjjiOnuLrOIn59367416 = cmbJESccfXjvjjiOnuLrOIn21853534;     cmbJESccfXjvjjiOnuLrOIn21853534 = cmbJESccfXjvjjiOnuLrOIn11291567;     cmbJESccfXjvjjiOnuLrOIn11291567 = cmbJESccfXjvjjiOnuLrOIn45278220;     cmbJESccfXjvjjiOnuLrOIn45278220 = cmbJESccfXjvjjiOnuLrOIn14620644;     cmbJESccfXjvjjiOnuLrOIn14620644 = cmbJESccfXjvjjiOnuLrOIn71624293;     cmbJESccfXjvjjiOnuLrOIn71624293 = cmbJESccfXjvjjiOnuLrOIn87640649;     cmbJESccfXjvjjiOnuLrOIn87640649 = cmbJESccfXjvjjiOnuLrOIn49224280;     cmbJESccfXjvjjiOnuLrOIn49224280 = cmbJESccfXjvjjiOnuLrOIn78139071;     cmbJESccfXjvjjiOnuLrOIn78139071 = cmbJESccfXjvjjiOnuLrOIn72170031;     cmbJESccfXjvjjiOnuLrOIn72170031 = cmbJESccfXjvjjiOnuLrOIn18261427;     cmbJESccfXjvjjiOnuLrOIn18261427 = cmbJESccfXjvjjiOnuLrOIn13925365;     cmbJESccfXjvjjiOnuLrOIn13925365 = cmbJESccfXjvjjiOnuLrOIn25946794;     cmbJESccfXjvjjiOnuLrOIn25946794 = cmbJESccfXjvjjiOnuLrOIn31175010;     cmbJESccfXjvjjiOnuLrOIn31175010 = cmbJESccfXjvjjiOnuLrOIn23267420;     cmbJESccfXjvjjiOnuLrOIn23267420 = cmbJESccfXjvjjiOnuLrOIn38977003;     cmbJESccfXjvjjiOnuLrOIn38977003 = cmbJESccfXjvjjiOnuLrOIn26348199;     cmbJESccfXjvjjiOnuLrOIn26348199 = cmbJESccfXjvjjiOnuLrOIn1669981;     cmbJESccfXjvjjiOnuLrOIn1669981 = cmbJESccfXjvjjiOnuLrOIn55084136;     cmbJESccfXjvjjiOnuLrOIn55084136 = cmbJESccfXjvjjiOnuLrOIn45705817;     cmbJESccfXjvjjiOnuLrOIn45705817 = cmbJESccfXjvjjiOnuLrOIn66499756;     cmbJESccfXjvjjiOnuLrOIn66499756 = cmbJESccfXjvjjiOnuLrOIn47607865;     cmbJESccfXjvjjiOnuLrOIn47607865 = cmbJESccfXjvjjiOnuLrOIn20912739;     cmbJESccfXjvjjiOnuLrOIn20912739 = cmbJESccfXjvjjiOnuLrOIn67261457;     cmbJESccfXjvjjiOnuLrOIn67261457 = cmbJESccfXjvjjiOnuLrOIn64348236;     cmbJESccfXjvjjiOnuLrOIn64348236 = cmbJESccfXjvjjiOnuLrOIn34546732;     cmbJESccfXjvjjiOnuLrOIn34546732 = cmbJESccfXjvjjiOnuLrOIn81139597;     cmbJESccfXjvjjiOnuLrOIn81139597 = cmbJESccfXjvjjiOnuLrOIn10045578;     cmbJESccfXjvjjiOnuLrOIn10045578 = cmbJESccfXjvjjiOnuLrOIn3280864;     cmbJESccfXjvjjiOnuLrOIn3280864 = cmbJESccfXjvjjiOnuLrOIn6022190;     cmbJESccfXjvjjiOnuLrOIn6022190 = cmbJESccfXjvjjiOnuLrOIn74298755;     cmbJESccfXjvjjiOnuLrOIn74298755 = cmbJESccfXjvjjiOnuLrOIn8807059;     cmbJESccfXjvjjiOnuLrOIn8807059 = cmbJESccfXjvjjiOnuLrOIn46213719;     cmbJESccfXjvjjiOnuLrOIn46213719 = cmbJESccfXjvjjiOnuLrOIn11809374;     cmbJESccfXjvjjiOnuLrOIn11809374 = cmbJESccfXjvjjiOnuLrOIn25479513;     cmbJESccfXjvjjiOnuLrOIn25479513 = cmbJESccfXjvjjiOnuLrOIn19369323;     cmbJESccfXjvjjiOnuLrOIn19369323 = cmbJESccfXjvjjiOnuLrOIn72585211;     cmbJESccfXjvjjiOnuLrOIn72585211 = cmbJESccfXjvjjiOnuLrOIn46391039;     cmbJESccfXjvjjiOnuLrOIn46391039 = cmbJESccfXjvjjiOnuLrOIn83982566;     cmbJESccfXjvjjiOnuLrOIn83982566 = cmbJESccfXjvjjiOnuLrOIn411431;     cmbJESccfXjvjjiOnuLrOIn411431 = cmbJESccfXjvjjiOnuLrOIn35095914;     cmbJESccfXjvjjiOnuLrOIn35095914 = cmbJESccfXjvjjiOnuLrOIn68773869;     cmbJESccfXjvjjiOnuLrOIn68773869 = cmbJESccfXjvjjiOnuLrOIn7317445;     cmbJESccfXjvjjiOnuLrOIn7317445 = cmbJESccfXjvjjiOnuLrOIn75434071;     cmbJESccfXjvjjiOnuLrOIn75434071 = cmbJESccfXjvjjiOnuLrOIn7937769;     cmbJESccfXjvjjiOnuLrOIn7937769 = cmbJESccfXjvjjiOnuLrOIn62853871;     cmbJESccfXjvjjiOnuLrOIn62853871 = cmbJESccfXjvjjiOnuLrOIn32668305;     cmbJESccfXjvjjiOnuLrOIn32668305 = cmbJESccfXjvjjiOnuLrOIn83472592;     cmbJESccfXjvjjiOnuLrOIn83472592 = cmbJESccfXjvjjiOnuLrOIn447810;     cmbJESccfXjvjjiOnuLrOIn447810 = cmbJESccfXjvjjiOnuLrOIn67967548;     cmbJESccfXjvjjiOnuLrOIn67967548 = cmbJESccfXjvjjiOnuLrOIn82292792;     cmbJESccfXjvjjiOnuLrOIn82292792 = cmbJESccfXjvjjiOnuLrOIn12741397;     cmbJESccfXjvjjiOnuLrOIn12741397 = cmbJESccfXjvjjiOnuLrOIn11404369;     cmbJESccfXjvjjiOnuLrOIn11404369 = cmbJESccfXjvjjiOnuLrOIn69707267;     cmbJESccfXjvjjiOnuLrOIn69707267 = cmbJESccfXjvjjiOnuLrOIn10942618;     cmbJESccfXjvjjiOnuLrOIn10942618 = cmbJESccfXjvjjiOnuLrOIn11759552;     cmbJESccfXjvjjiOnuLrOIn11759552 = cmbJESccfXjvjjiOnuLrOIn940795;     cmbJESccfXjvjjiOnuLrOIn940795 = cmbJESccfXjvjjiOnuLrOIn44030110;     cmbJESccfXjvjjiOnuLrOIn44030110 = cmbJESccfXjvjjiOnuLrOIn80929983;     cmbJESccfXjvjjiOnuLrOIn80929983 = cmbJESccfXjvjjiOnuLrOIn80073912;     cmbJESccfXjvjjiOnuLrOIn80073912 = cmbJESccfXjvjjiOnuLrOIn90484696;     cmbJESccfXjvjjiOnuLrOIn90484696 = cmbJESccfXjvjjiOnuLrOIn77595072;     cmbJESccfXjvjjiOnuLrOIn77595072 = cmbJESccfXjvjjiOnuLrOIn45943417;     cmbJESccfXjvjjiOnuLrOIn45943417 = cmbJESccfXjvjjiOnuLrOIn72116881;     cmbJESccfXjvjjiOnuLrOIn72116881 = cmbJESccfXjvjjiOnuLrOIn97871275;     cmbJESccfXjvjjiOnuLrOIn97871275 = cmbJESccfXjvjjiOnuLrOIn9454368;     cmbJESccfXjvjjiOnuLrOIn9454368 = cmbJESccfXjvjjiOnuLrOIn67711645;     cmbJESccfXjvjjiOnuLrOIn67711645 = cmbJESccfXjvjjiOnuLrOIn14137420;     cmbJESccfXjvjjiOnuLrOIn14137420 = cmbJESccfXjvjjiOnuLrOIn5695498;     cmbJESccfXjvjjiOnuLrOIn5695498 = cmbJESccfXjvjjiOnuLrOIn3898097;     cmbJESccfXjvjjiOnuLrOIn3898097 = cmbJESccfXjvjjiOnuLrOIn66391792;     cmbJESccfXjvjjiOnuLrOIn66391792 = cmbJESccfXjvjjiOnuLrOIn79957159;     cmbJESccfXjvjjiOnuLrOIn79957159 = cmbJESccfXjvjjiOnuLrOIn17687415;     cmbJESccfXjvjjiOnuLrOIn17687415 = cmbJESccfXjvjjiOnuLrOIn54672705;     cmbJESccfXjvjjiOnuLrOIn54672705 = cmbJESccfXjvjjiOnuLrOIn10609903;     cmbJESccfXjvjjiOnuLrOIn10609903 = cmbJESccfXjvjjiOnuLrOIn97725886;     cmbJESccfXjvjjiOnuLrOIn97725886 = cmbJESccfXjvjjiOnuLrOIn40290420;     cmbJESccfXjvjjiOnuLrOIn40290420 = cmbJESccfXjvjjiOnuLrOIn45478668;     cmbJESccfXjvjjiOnuLrOIn45478668 = cmbJESccfXjvjjiOnuLrOIn59323688;     cmbJESccfXjvjjiOnuLrOIn59323688 = cmbJESccfXjvjjiOnuLrOIn1494366;     cmbJESccfXjvjjiOnuLrOIn1494366 = cmbJESccfXjvjjiOnuLrOIn1878428;     cmbJESccfXjvjjiOnuLrOIn1878428 = cmbJESccfXjvjjiOnuLrOIn97667005;     cmbJESccfXjvjjiOnuLrOIn97667005 = cmbJESccfXjvjjiOnuLrOIn9597769;     cmbJESccfXjvjjiOnuLrOIn9597769 = cmbJESccfXjvjjiOnuLrOIn35313315;     cmbJESccfXjvjjiOnuLrOIn35313315 = cmbJESccfXjvjjiOnuLrOIn72035724;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void MArDjJVtVvrMvRYYtSYeKWrDfhGJmIXswQaifyXJy28589440() {     long XRxIQCKbAAoKhqpIoXCCMHM94429312 = -500856451;    long XRxIQCKbAAoKhqpIoXCCMHM68511747 = -228816985;    long XRxIQCKbAAoKhqpIoXCCMHM45454216 = -211095640;    long XRxIQCKbAAoKhqpIoXCCMHM15383344 = -344295733;    long XRxIQCKbAAoKhqpIoXCCMHM36938255 = -13167354;    long XRxIQCKbAAoKhqpIoXCCMHM6276881 = 89743998;    long XRxIQCKbAAoKhqpIoXCCMHM387639 = -914737031;    long XRxIQCKbAAoKhqpIoXCCMHM65034906 = -352313219;    long XRxIQCKbAAoKhqpIoXCCMHM29070569 = -450478357;    long XRxIQCKbAAoKhqpIoXCCMHM18839300 = 37060730;    long XRxIQCKbAAoKhqpIoXCCMHM24165806 = -927958249;    long XRxIQCKbAAoKhqpIoXCCMHM50252263 = -882757667;    long XRxIQCKbAAoKhqpIoXCCMHM49566644 = -245923869;    long XRxIQCKbAAoKhqpIoXCCMHM55259037 = -795349506;    long XRxIQCKbAAoKhqpIoXCCMHM6976253 = -911574108;    long XRxIQCKbAAoKhqpIoXCCMHM47133738 = 34445514;    long XRxIQCKbAAoKhqpIoXCCMHM53338009 = -411100768;    long XRxIQCKbAAoKhqpIoXCCMHM4829418 = -850831341;    long XRxIQCKbAAoKhqpIoXCCMHM32144928 = -761571814;    long XRxIQCKbAAoKhqpIoXCCMHM51720740 = -678563168;    long XRxIQCKbAAoKhqpIoXCCMHM35834327 = -163687611;    long XRxIQCKbAAoKhqpIoXCCMHM57143246 = -969082466;    long XRxIQCKbAAoKhqpIoXCCMHM54055576 = -771528948;    long XRxIQCKbAAoKhqpIoXCCMHM32073959 = 40975965;    long XRxIQCKbAAoKhqpIoXCCMHM85236628 = -644794265;    long XRxIQCKbAAoKhqpIoXCCMHM43898949 = -290304259;    long XRxIQCKbAAoKhqpIoXCCMHM95129265 = -770626324;    long XRxIQCKbAAoKhqpIoXCCMHM84433289 = -669404068;    long XRxIQCKbAAoKhqpIoXCCMHM20160908 = -866416168;    long XRxIQCKbAAoKhqpIoXCCMHM64242319 = -371072691;    long XRxIQCKbAAoKhqpIoXCCMHM34145546 = -934072591;    long XRxIQCKbAAoKhqpIoXCCMHM11794336 = -239254993;    long XRxIQCKbAAoKhqpIoXCCMHM21934446 = -579428935;    long XRxIQCKbAAoKhqpIoXCCMHM60775830 = -230513994;    long XRxIQCKbAAoKhqpIoXCCMHM48955462 = -272180174;    long XRxIQCKbAAoKhqpIoXCCMHM44570497 = -836176543;    long XRxIQCKbAAoKhqpIoXCCMHM47998100 = -500726117;    long XRxIQCKbAAoKhqpIoXCCMHM31316286 = -969105661;    long XRxIQCKbAAoKhqpIoXCCMHM33907274 = -542387322;    long XRxIQCKbAAoKhqpIoXCCMHM15574279 = -515061438;    long XRxIQCKbAAoKhqpIoXCCMHM5249940 = -475068511;    long XRxIQCKbAAoKhqpIoXCCMHM37357462 = -147913009;    long XRxIQCKbAAoKhqpIoXCCMHM26406430 = -168943190;    long XRxIQCKbAAoKhqpIoXCCMHM50257798 = -188832837;    long XRxIQCKbAAoKhqpIoXCCMHM87246077 = -943678400;    long XRxIQCKbAAoKhqpIoXCCMHM73694503 = -785984758;    long XRxIQCKbAAoKhqpIoXCCMHM58898360 = -273279857;    long XRxIQCKbAAoKhqpIoXCCMHM78022152 = -91785220;    long XRxIQCKbAAoKhqpIoXCCMHM22015235 = -638878247;    long XRxIQCKbAAoKhqpIoXCCMHM88847696 = -885752206;    long XRxIQCKbAAoKhqpIoXCCMHM21089359 = -606647737;    long XRxIQCKbAAoKhqpIoXCCMHM78673322 = -131850559;    long XRxIQCKbAAoKhqpIoXCCMHM75451265 = -561068212;    long XRxIQCKbAAoKhqpIoXCCMHM96427313 = -600232344;    long XRxIQCKbAAoKhqpIoXCCMHM92755113 = 87308300;    long XRxIQCKbAAoKhqpIoXCCMHM37286067 = -531773985;    long XRxIQCKbAAoKhqpIoXCCMHM14456172 = -457288037;    long XRxIQCKbAAoKhqpIoXCCMHM13380257 = -152071606;    long XRxIQCKbAAoKhqpIoXCCMHM30146716 = -699501468;    long XRxIQCKbAAoKhqpIoXCCMHM93039305 = -722863096;    long XRxIQCKbAAoKhqpIoXCCMHM11147615 = -139629679;    long XRxIQCKbAAoKhqpIoXCCMHM15954349 = -145332964;    long XRxIQCKbAAoKhqpIoXCCMHM44873999 = -485897051;    long XRxIQCKbAAoKhqpIoXCCMHM64828250 = 20594333;    long XRxIQCKbAAoKhqpIoXCCMHM84693753 = -28866679;    long XRxIQCKbAAoKhqpIoXCCMHM12371470 = -588703257;    long XRxIQCKbAAoKhqpIoXCCMHM28317817 = -203328732;    long XRxIQCKbAAoKhqpIoXCCMHM88790813 = 84590125;    long XRxIQCKbAAoKhqpIoXCCMHM6303575 = -423169333;    long XRxIQCKbAAoKhqpIoXCCMHM62405755 = 24602434;    long XRxIQCKbAAoKhqpIoXCCMHM99135637 = -464828369;    long XRxIQCKbAAoKhqpIoXCCMHM22021723 = -441995108;    long XRxIQCKbAAoKhqpIoXCCMHM70922143 = -208444019;    long XRxIQCKbAAoKhqpIoXCCMHM16570650 = -146510376;    long XRxIQCKbAAoKhqpIoXCCMHM46470801 = -103494657;    long XRxIQCKbAAoKhqpIoXCCMHM98476864 = 84225397;    long XRxIQCKbAAoKhqpIoXCCMHM30736817 = -700139276;    long XRxIQCKbAAoKhqpIoXCCMHM3797778 = -482696111;    long XRxIQCKbAAoKhqpIoXCCMHM44827882 = -15345636;    long XRxIQCKbAAoKhqpIoXCCMHM11542126 = -858809507;    long XRxIQCKbAAoKhqpIoXCCMHM85000588 = 82975597;    long XRxIQCKbAAoKhqpIoXCCMHM17107113 = -578841104;    long XRxIQCKbAAoKhqpIoXCCMHM62418055 = 69474179;    long XRxIQCKbAAoKhqpIoXCCMHM31313211 = -980663962;    long XRxIQCKbAAoKhqpIoXCCMHM43152960 = -764424955;    long XRxIQCKbAAoKhqpIoXCCMHM55472223 = -702222032;    long XRxIQCKbAAoKhqpIoXCCMHM36343070 = -678186781;    long XRxIQCKbAAoKhqpIoXCCMHM25507132 = -979196592;    long XRxIQCKbAAoKhqpIoXCCMHM68020717 = -217822295;    long XRxIQCKbAAoKhqpIoXCCMHM11669396 = -740406189;    long XRxIQCKbAAoKhqpIoXCCMHM30114325 = -278888506;    long XRxIQCKbAAoKhqpIoXCCMHM34617843 = -248654512;    long XRxIQCKbAAoKhqpIoXCCMHM1169571 = -169604193;    long XRxIQCKbAAoKhqpIoXCCMHM40867968 = -819524227;    long XRxIQCKbAAoKhqpIoXCCMHM4426665 = -275431760;    long XRxIQCKbAAoKhqpIoXCCMHM89295590 = -229735548;    long XRxIQCKbAAoKhqpIoXCCMHM92483463 = -662015958;    long XRxIQCKbAAoKhqpIoXCCMHM61578179 = -89537524;    long XRxIQCKbAAoKhqpIoXCCMHM65564044 = -59966158;    long XRxIQCKbAAoKhqpIoXCCMHM74874608 = -500856451;     XRxIQCKbAAoKhqpIoXCCMHM94429312 = XRxIQCKbAAoKhqpIoXCCMHM68511747;     XRxIQCKbAAoKhqpIoXCCMHM68511747 = XRxIQCKbAAoKhqpIoXCCMHM45454216;     XRxIQCKbAAoKhqpIoXCCMHM45454216 = XRxIQCKbAAoKhqpIoXCCMHM15383344;     XRxIQCKbAAoKhqpIoXCCMHM15383344 = XRxIQCKbAAoKhqpIoXCCMHM36938255;     XRxIQCKbAAoKhqpIoXCCMHM36938255 = XRxIQCKbAAoKhqpIoXCCMHM6276881;     XRxIQCKbAAoKhqpIoXCCMHM6276881 = XRxIQCKbAAoKhqpIoXCCMHM387639;     XRxIQCKbAAoKhqpIoXCCMHM387639 = XRxIQCKbAAoKhqpIoXCCMHM65034906;     XRxIQCKbAAoKhqpIoXCCMHM65034906 = XRxIQCKbAAoKhqpIoXCCMHM29070569;     XRxIQCKbAAoKhqpIoXCCMHM29070569 = XRxIQCKbAAoKhqpIoXCCMHM18839300;     XRxIQCKbAAoKhqpIoXCCMHM18839300 = XRxIQCKbAAoKhqpIoXCCMHM24165806;     XRxIQCKbAAoKhqpIoXCCMHM24165806 = XRxIQCKbAAoKhqpIoXCCMHM50252263;     XRxIQCKbAAoKhqpIoXCCMHM50252263 = XRxIQCKbAAoKhqpIoXCCMHM49566644;     XRxIQCKbAAoKhqpIoXCCMHM49566644 = XRxIQCKbAAoKhqpIoXCCMHM55259037;     XRxIQCKbAAoKhqpIoXCCMHM55259037 = XRxIQCKbAAoKhqpIoXCCMHM6976253;     XRxIQCKbAAoKhqpIoXCCMHM6976253 = XRxIQCKbAAoKhqpIoXCCMHM47133738;     XRxIQCKbAAoKhqpIoXCCMHM47133738 = XRxIQCKbAAoKhqpIoXCCMHM53338009;     XRxIQCKbAAoKhqpIoXCCMHM53338009 = XRxIQCKbAAoKhqpIoXCCMHM4829418;     XRxIQCKbAAoKhqpIoXCCMHM4829418 = XRxIQCKbAAoKhqpIoXCCMHM32144928;     XRxIQCKbAAoKhqpIoXCCMHM32144928 = XRxIQCKbAAoKhqpIoXCCMHM51720740;     XRxIQCKbAAoKhqpIoXCCMHM51720740 = XRxIQCKbAAoKhqpIoXCCMHM35834327;     XRxIQCKbAAoKhqpIoXCCMHM35834327 = XRxIQCKbAAoKhqpIoXCCMHM57143246;     XRxIQCKbAAoKhqpIoXCCMHM57143246 = XRxIQCKbAAoKhqpIoXCCMHM54055576;     XRxIQCKbAAoKhqpIoXCCMHM54055576 = XRxIQCKbAAoKhqpIoXCCMHM32073959;     XRxIQCKbAAoKhqpIoXCCMHM32073959 = XRxIQCKbAAoKhqpIoXCCMHM85236628;     XRxIQCKbAAoKhqpIoXCCMHM85236628 = XRxIQCKbAAoKhqpIoXCCMHM43898949;     XRxIQCKbAAoKhqpIoXCCMHM43898949 = XRxIQCKbAAoKhqpIoXCCMHM95129265;     XRxIQCKbAAoKhqpIoXCCMHM95129265 = XRxIQCKbAAoKhqpIoXCCMHM84433289;     XRxIQCKbAAoKhqpIoXCCMHM84433289 = XRxIQCKbAAoKhqpIoXCCMHM20160908;     XRxIQCKbAAoKhqpIoXCCMHM20160908 = XRxIQCKbAAoKhqpIoXCCMHM64242319;     XRxIQCKbAAoKhqpIoXCCMHM64242319 = XRxIQCKbAAoKhqpIoXCCMHM34145546;     XRxIQCKbAAoKhqpIoXCCMHM34145546 = XRxIQCKbAAoKhqpIoXCCMHM11794336;     XRxIQCKbAAoKhqpIoXCCMHM11794336 = XRxIQCKbAAoKhqpIoXCCMHM21934446;     XRxIQCKbAAoKhqpIoXCCMHM21934446 = XRxIQCKbAAoKhqpIoXCCMHM60775830;     XRxIQCKbAAoKhqpIoXCCMHM60775830 = XRxIQCKbAAoKhqpIoXCCMHM48955462;     XRxIQCKbAAoKhqpIoXCCMHM48955462 = XRxIQCKbAAoKhqpIoXCCMHM44570497;     XRxIQCKbAAoKhqpIoXCCMHM44570497 = XRxIQCKbAAoKhqpIoXCCMHM47998100;     XRxIQCKbAAoKhqpIoXCCMHM47998100 = XRxIQCKbAAoKhqpIoXCCMHM31316286;     XRxIQCKbAAoKhqpIoXCCMHM31316286 = XRxIQCKbAAoKhqpIoXCCMHM33907274;     XRxIQCKbAAoKhqpIoXCCMHM33907274 = XRxIQCKbAAoKhqpIoXCCMHM15574279;     XRxIQCKbAAoKhqpIoXCCMHM15574279 = XRxIQCKbAAoKhqpIoXCCMHM5249940;     XRxIQCKbAAoKhqpIoXCCMHM5249940 = XRxIQCKbAAoKhqpIoXCCMHM37357462;     XRxIQCKbAAoKhqpIoXCCMHM37357462 = XRxIQCKbAAoKhqpIoXCCMHM26406430;     XRxIQCKbAAoKhqpIoXCCMHM26406430 = XRxIQCKbAAoKhqpIoXCCMHM50257798;     XRxIQCKbAAoKhqpIoXCCMHM50257798 = XRxIQCKbAAoKhqpIoXCCMHM87246077;     XRxIQCKbAAoKhqpIoXCCMHM87246077 = XRxIQCKbAAoKhqpIoXCCMHM73694503;     XRxIQCKbAAoKhqpIoXCCMHM73694503 = XRxIQCKbAAoKhqpIoXCCMHM58898360;     XRxIQCKbAAoKhqpIoXCCMHM58898360 = XRxIQCKbAAoKhqpIoXCCMHM78022152;     XRxIQCKbAAoKhqpIoXCCMHM78022152 = XRxIQCKbAAoKhqpIoXCCMHM22015235;     XRxIQCKbAAoKhqpIoXCCMHM22015235 = XRxIQCKbAAoKhqpIoXCCMHM88847696;     XRxIQCKbAAoKhqpIoXCCMHM88847696 = XRxIQCKbAAoKhqpIoXCCMHM21089359;     XRxIQCKbAAoKhqpIoXCCMHM21089359 = XRxIQCKbAAoKhqpIoXCCMHM78673322;     XRxIQCKbAAoKhqpIoXCCMHM78673322 = XRxIQCKbAAoKhqpIoXCCMHM75451265;     XRxIQCKbAAoKhqpIoXCCMHM75451265 = XRxIQCKbAAoKhqpIoXCCMHM96427313;     XRxIQCKbAAoKhqpIoXCCMHM96427313 = XRxIQCKbAAoKhqpIoXCCMHM92755113;     XRxIQCKbAAoKhqpIoXCCMHM92755113 = XRxIQCKbAAoKhqpIoXCCMHM37286067;     XRxIQCKbAAoKhqpIoXCCMHM37286067 = XRxIQCKbAAoKhqpIoXCCMHM14456172;     XRxIQCKbAAoKhqpIoXCCMHM14456172 = XRxIQCKbAAoKhqpIoXCCMHM13380257;     XRxIQCKbAAoKhqpIoXCCMHM13380257 = XRxIQCKbAAoKhqpIoXCCMHM30146716;     XRxIQCKbAAoKhqpIoXCCMHM30146716 = XRxIQCKbAAoKhqpIoXCCMHM93039305;     XRxIQCKbAAoKhqpIoXCCMHM93039305 = XRxIQCKbAAoKhqpIoXCCMHM11147615;     XRxIQCKbAAoKhqpIoXCCMHM11147615 = XRxIQCKbAAoKhqpIoXCCMHM15954349;     XRxIQCKbAAoKhqpIoXCCMHM15954349 = XRxIQCKbAAoKhqpIoXCCMHM44873999;     XRxIQCKbAAoKhqpIoXCCMHM44873999 = XRxIQCKbAAoKhqpIoXCCMHM64828250;     XRxIQCKbAAoKhqpIoXCCMHM64828250 = XRxIQCKbAAoKhqpIoXCCMHM84693753;     XRxIQCKbAAoKhqpIoXCCMHM84693753 = XRxIQCKbAAoKhqpIoXCCMHM12371470;     XRxIQCKbAAoKhqpIoXCCMHM12371470 = XRxIQCKbAAoKhqpIoXCCMHM28317817;     XRxIQCKbAAoKhqpIoXCCMHM28317817 = XRxIQCKbAAoKhqpIoXCCMHM88790813;     XRxIQCKbAAoKhqpIoXCCMHM88790813 = XRxIQCKbAAoKhqpIoXCCMHM6303575;     XRxIQCKbAAoKhqpIoXCCMHM6303575 = XRxIQCKbAAoKhqpIoXCCMHM62405755;     XRxIQCKbAAoKhqpIoXCCMHM62405755 = XRxIQCKbAAoKhqpIoXCCMHM99135637;     XRxIQCKbAAoKhqpIoXCCMHM99135637 = XRxIQCKbAAoKhqpIoXCCMHM22021723;     XRxIQCKbAAoKhqpIoXCCMHM22021723 = XRxIQCKbAAoKhqpIoXCCMHM70922143;     XRxIQCKbAAoKhqpIoXCCMHM70922143 = XRxIQCKbAAoKhqpIoXCCMHM16570650;     XRxIQCKbAAoKhqpIoXCCMHM16570650 = XRxIQCKbAAoKhqpIoXCCMHM46470801;     XRxIQCKbAAoKhqpIoXCCMHM46470801 = XRxIQCKbAAoKhqpIoXCCMHM98476864;     XRxIQCKbAAoKhqpIoXCCMHM98476864 = XRxIQCKbAAoKhqpIoXCCMHM30736817;     XRxIQCKbAAoKhqpIoXCCMHM30736817 = XRxIQCKbAAoKhqpIoXCCMHM3797778;     XRxIQCKbAAoKhqpIoXCCMHM3797778 = XRxIQCKbAAoKhqpIoXCCMHM44827882;     XRxIQCKbAAoKhqpIoXCCMHM44827882 = XRxIQCKbAAoKhqpIoXCCMHM11542126;     XRxIQCKbAAoKhqpIoXCCMHM11542126 = XRxIQCKbAAoKhqpIoXCCMHM85000588;     XRxIQCKbAAoKhqpIoXCCMHM85000588 = XRxIQCKbAAoKhqpIoXCCMHM17107113;     XRxIQCKbAAoKhqpIoXCCMHM17107113 = XRxIQCKbAAoKhqpIoXCCMHM62418055;     XRxIQCKbAAoKhqpIoXCCMHM62418055 = XRxIQCKbAAoKhqpIoXCCMHM31313211;     XRxIQCKbAAoKhqpIoXCCMHM31313211 = XRxIQCKbAAoKhqpIoXCCMHM43152960;     XRxIQCKbAAoKhqpIoXCCMHM43152960 = XRxIQCKbAAoKhqpIoXCCMHM55472223;     XRxIQCKbAAoKhqpIoXCCMHM55472223 = XRxIQCKbAAoKhqpIoXCCMHM36343070;     XRxIQCKbAAoKhqpIoXCCMHM36343070 = XRxIQCKbAAoKhqpIoXCCMHM25507132;     XRxIQCKbAAoKhqpIoXCCMHM25507132 = XRxIQCKbAAoKhqpIoXCCMHM68020717;     XRxIQCKbAAoKhqpIoXCCMHM68020717 = XRxIQCKbAAoKhqpIoXCCMHM11669396;     XRxIQCKbAAoKhqpIoXCCMHM11669396 = XRxIQCKbAAoKhqpIoXCCMHM30114325;     XRxIQCKbAAoKhqpIoXCCMHM30114325 = XRxIQCKbAAoKhqpIoXCCMHM34617843;     XRxIQCKbAAoKhqpIoXCCMHM34617843 = XRxIQCKbAAoKhqpIoXCCMHM1169571;     XRxIQCKbAAoKhqpIoXCCMHM1169571 = XRxIQCKbAAoKhqpIoXCCMHM40867968;     XRxIQCKbAAoKhqpIoXCCMHM40867968 = XRxIQCKbAAoKhqpIoXCCMHM4426665;     XRxIQCKbAAoKhqpIoXCCMHM4426665 = XRxIQCKbAAoKhqpIoXCCMHM89295590;     XRxIQCKbAAoKhqpIoXCCMHM89295590 = XRxIQCKbAAoKhqpIoXCCMHM92483463;     XRxIQCKbAAoKhqpIoXCCMHM92483463 = XRxIQCKbAAoKhqpIoXCCMHM61578179;     XRxIQCKbAAoKhqpIoXCCMHM61578179 = XRxIQCKbAAoKhqpIoXCCMHM65564044;     XRxIQCKbAAoKhqpIoXCCMHM65564044 = XRxIQCKbAAoKhqpIoXCCMHM74874608;     XRxIQCKbAAoKhqpIoXCCMHM74874608 = XRxIQCKbAAoKhqpIoXCCMHM94429312;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void cbSWyIsPRobiXbGxjOMmIQyhqhUDkIQaaOENjefeo50185347() {     long pmRatiKVCBeECGLckfQoofJ10699324 = -23358525;    long pmRatiKVCBeECGLckfQoofJ9485969 = -467760259;    long pmRatiKVCBeECGLckfQoofJ58181311 = -299916563;    long pmRatiKVCBeECGLckfQoofJ3315252 = -159954634;    long pmRatiKVCBeECGLckfQoofJ66217020 = -83574484;    long pmRatiKVCBeECGLckfQoofJ29742795 = -606368145;    long pmRatiKVCBeECGLckfQoofJ32054412 = -597759360;    long pmRatiKVCBeECGLckfQoofJ90908874 = -536035950;    long pmRatiKVCBeECGLckfQoofJ61591205 = -566641731;    long pmRatiKVCBeECGLckfQoofJ69373225 = -476705125;    long pmRatiKVCBeECGLckfQoofJ1597375 = 52854937;    long pmRatiKVCBeECGLckfQoofJ74332169 = -689096759;    long pmRatiKVCBeECGLckfQoofJ30365706 = -424750100;    long pmRatiKVCBeECGLckfQoofJ14730113 = -790819695;    long pmRatiKVCBeECGLckfQoofJ47969103 = -948589655;    long pmRatiKVCBeECGLckfQoofJ49884257 = -374222485;    long pmRatiKVCBeECGLckfQoofJ9325358 = -71835476;    long pmRatiKVCBeECGLckfQoofJ13752681 = -537051388;    long pmRatiKVCBeECGLckfQoofJ11596718 = -490904842;    long pmRatiKVCBeECGLckfQoofJ49686859 = -574294702;    long pmRatiKVCBeECGLckfQoofJ48164241 = -299687464;    long pmRatiKVCBeECGLckfQoofJ34437441 = -465919063;    long pmRatiKVCBeECGLckfQoofJ21758108 = -101092053;    long pmRatiKVCBeECGLckfQoofJ74581372 = -300711904;    long pmRatiKVCBeECGLckfQoofJ77077225 = -993157357;    long pmRatiKVCBeECGLckfQoofJ7480268 = -855543160;    long pmRatiKVCBeECGLckfQoofJ43758908 = -627550613;    long pmRatiKVCBeECGLckfQoofJ77237614 = -391929568;    long pmRatiKVCBeECGLckfQoofJ60921213 = -988290583;    long pmRatiKVCBeECGLckfQoofJ4783862 = -473897690;    long pmRatiKVCBeECGLckfQoofJ86193801 = -2067805;    long pmRatiKVCBeECGLckfQoofJ71724905 = -81879531;    long pmRatiKVCBeECGLckfQoofJ93262167 = -116159060;    long pmRatiKVCBeECGLckfQoofJ25333954 = -803099079;    long pmRatiKVCBeECGLckfQoofJ63710175 = -797203491;    long pmRatiKVCBeECGLckfQoofJ17537453 = -937545812;    long pmRatiKVCBeECGLckfQoofJ60175878 = -280038199;    long pmRatiKVCBeECGLckfQoofJ50852174 = 34774877;    long pmRatiKVCBeECGLckfQoofJ8605152 = -949509857;    long pmRatiKVCBeECGLckfQoofJ48258056 = -177846245;    long pmRatiKVCBeECGLckfQoofJ28338087 = -912972283;    long pmRatiKVCBeECGLckfQoofJ93715396 = -735679422;    long pmRatiKVCBeECGLckfQoofJ53889643 = 24330810;    long pmRatiKVCBeECGLckfQoofJ62294177 = -166853548;    long pmRatiKVCBeECGLckfQoofJ43276879 = 9076277;    long pmRatiKVCBeECGLckfQoofJ69855590 = -982997737;    long pmRatiKVCBeECGLckfQoofJ53417183 = -732914572;    long pmRatiKVCBeECGLckfQoofJ14663887 = -938424679;    long pmRatiKVCBeECGLckfQoofJ6799411 = -502857957;    long pmRatiKVCBeECGLckfQoofJ73019789 = -940761657;    long pmRatiKVCBeECGLckfQoofJ94257897 = -19430342;    long pmRatiKVCBeECGLckfQoofJ41714860 = -761943521;    long pmRatiKVCBeECGLckfQoofJ5517212 = -441189855;    long pmRatiKVCBeECGLckfQoofJ60744978 = -555443008;    long pmRatiKVCBeECGLckfQoofJ2021106 = -452864033;    long pmRatiKVCBeECGLckfQoofJ76261883 = -557439463;    long pmRatiKVCBeECGLckfQoofJ87727861 = -266668206;    long pmRatiKVCBeECGLckfQoofJ83599938 = -999204659;    long pmRatiKVCBeECGLckfQoofJ26238027 = -166797278;    long pmRatiKVCBeECGLckfQoofJ58736752 = -228031325;    long pmRatiKVCBeECGLckfQoofJ85983886 = -978817532;    long pmRatiKVCBeECGLckfQoofJ54816797 = -105829793;    long pmRatiKVCBeECGLckfQoofJ29987661 = -547745368;    long pmRatiKVCBeECGLckfQoofJ56807343 = 7255959;    long pmRatiKVCBeECGLckfQoofJ83179423 = -374637321;    long pmRatiKVCBeECGLckfQoofJ29872470 = -865265532;    long pmRatiKVCBeECGLckfQoofJ81070001 = -472937699;    long pmRatiKVCBeECGLckfQoofJ5031753 = -621651021;    long pmRatiKVCBeECGLckfQoofJ51019937 = -993616205;    long pmRatiKVCBeECGLckfQoofJ30431650 = 88956156;    long pmRatiKVCBeECGLckfQoofJ89708379 = 5815713;    long pmRatiKVCBeECGLckfQoofJ58473183 = -6610353;    long pmRatiKVCBeECGLckfQoofJ5147530 = -587541532;    long pmRatiKVCBeECGLckfQoofJ63338661 = -213058598;    long pmRatiKVCBeECGLckfQoofJ21348772 = -661322419;    long pmRatiKVCBeECGLckfQoofJ54448844 = -564008043;    long pmRatiKVCBeECGLckfQoofJ80547797 = -390249873;    long pmRatiKVCBeECGLckfQoofJ59463930 = -934238506;    long pmRatiKVCBeECGLckfQoofJ31304493 = -209788182;    long pmRatiKVCBeECGLckfQoofJ7221635 = 89840380;    long pmRatiKVCBeECGLckfQoofJ54063085 = -22628588;    long pmRatiKVCBeECGLckfQoofJ29095022 = -689125935;    long pmRatiKVCBeECGLckfQoofJ70438204 = -889071611;    long pmRatiKVCBeECGLckfQoofJ87901423 = 52471074;    long pmRatiKVCBeECGLckfQoofJ10525965 = -354467348;    long pmRatiKVCBeECGLckfQoofJ44478942 = -240124284;    long pmRatiKVCBeECGLckfQoofJ66207693 = -640689677;    long pmRatiKVCBeECGLckfQoofJ32517189 = -560716053;    long pmRatiKVCBeECGLckfQoofJ23312848 = -250235047;    long pmRatiKVCBeECGLckfQoofJ87448292 = -139764029;    long pmRatiKVCBeECGLckfQoofJ29809592 = -570877606;    long pmRatiKVCBeECGLckfQoofJ76575939 = -280833540;    long pmRatiKVCBeECGLckfQoofJ24614148 = -798427846;    long pmRatiKVCBeECGLckfQoofJ49868399 = -621478533;    long pmRatiKVCBeECGLckfQoofJ62274169 = -199028714;    long pmRatiKVCBeECGLckfQoofJ73521289 = -707142491;    long pmRatiKVCBeECGLckfQoofJ63727735 = -87934055;    long pmRatiKVCBeECGLckfQoofJ97082300 = -982925150;    long pmRatiKVCBeECGLckfQoofJ79114753 = -792216228;    long pmRatiKVCBeECGLckfQoofJ13404410 = -23358525;     pmRatiKVCBeECGLckfQoofJ10699324 = pmRatiKVCBeECGLckfQoofJ9485969;     pmRatiKVCBeECGLckfQoofJ9485969 = pmRatiKVCBeECGLckfQoofJ58181311;     pmRatiKVCBeECGLckfQoofJ58181311 = pmRatiKVCBeECGLckfQoofJ3315252;     pmRatiKVCBeECGLckfQoofJ3315252 = pmRatiKVCBeECGLckfQoofJ66217020;     pmRatiKVCBeECGLckfQoofJ66217020 = pmRatiKVCBeECGLckfQoofJ29742795;     pmRatiKVCBeECGLckfQoofJ29742795 = pmRatiKVCBeECGLckfQoofJ32054412;     pmRatiKVCBeECGLckfQoofJ32054412 = pmRatiKVCBeECGLckfQoofJ90908874;     pmRatiKVCBeECGLckfQoofJ90908874 = pmRatiKVCBeECGLckfQoofJ61591205;     pmRatiKVCBeECGLckfQoofJ61591205 = pmRatiKVCBeECGLckfQoofJ69373225;     pmRatiKVCBeECGLckfQoofJ69373225 = pmRatiKVCBeECGLckfQoofJ1597375;     pmRatiKVCBeECGLckfQoofJ1597375 = pmRatiKVCBeECGLckfQoofJ74332169;     pmRatiKVCBeECGLckfQoofJ74332169 = pmRatiKVCBeECGLckfQoofJ30365706;     pmRatiKVCBeECGLckfQoofJ30365706 = pmRatiKVCBeECGLckfQoofJ14730113;     pmRatiKVCBeECGLckfQoofJ14730113 = pmRatiKVCBeECGLckfQoofJ47969103;     pmRatiKVCBeECGLckfQoofJ47969103 = pmRatiKVCBeECGLckfQoofJ49884257;     pmRatiKVCBeECGLckfQoofJ49884257 = pmRatiKVCBeECGLckfQoofJ9325358;     pmRatiKVCBeECGLckfQoofJ9325358 = pmRatiKVCBeECGLckfQoofJ13752681;     pmRatiKVCBeECGLckfQoofJ13752681 = pmRatiKVCBeECGLckfQoofJ11596718;     pmRatiKVCBeECGLckfQoofJ11596718 = pmRatiKVCBeECGLckfQoofJ49686859;     pmRatiKVCBeECGLckfQoofJ49686859 = pmRatiKVCBeECGLckfQoofJ48164241;     pmRatiKVCBeECGLckfQoofJ48164241 = pmRatiKVCBeECGLckfQoofJ34437441;     pmRatiKVCBeECGLckfQoofJ34437441 = pmRatiKVCBeECGLckfQoofJ21758108;     pmRatiKVCBeECGLckfQoofJ21758108 = pmRatiKVCBeECGLckfQoofJ74581372;     pmRatiKVCBeECGLckfQoofJ74581372 = pmRatiKVCBeECGLckfQoofJ77077225;     pmRatiKVCBeECGLckfQoofJ77077225 = pmRatiKVCBeECGLckfQoofJ7480268;     pmRatiKVCBeECGLckfQoofJ7480268 = pmRatiKVCBeECGLckfQoofJ43758908;     pmRatiKVCBeECGLckfQoofJ43758908 = pmRatiKVCBeECGLckfQoofJ77237614;     pmRatiKVCBeECGLckfQoofJ77237614 = pmRatiKVCBeECGLckfQoofJ60921213;     pmRatiKVCBeECGLckfQoofJ60921213 = pmRatiKVCBeECGLckfQoofJ4783862;     pmRatiKVCBeECGLckfQoofJ4783862 = pmRatiKVCBeECGLckfQoofJ86193801;     pmRatiKVCBeECGLckfQoofJ86193801 = pmRatiKVCBeECGLckfQoofJ71724905;     pmRatiKVCBeECGLckfQoofJ71724905 = pmRatiKVCBeECGLckfQoofJ93262167;     pmRatiKVCBeECGLckfQoofJ93262167 = pmRatiKVCBeECGLckfQoofJ25333954;     pmRatiKVCBeECGLckfQoofJ25333954 = pmRatiKVCBeECGLckfQoofJ63710175;     pmRatiKVCBeECGLckfQoofJ63710175 = pmRatiKVCBeECGLckfQoofJ17537453;     pmRatiKVCBeECGLckfQoofJ17537453 = pmRatiKVCBeECGLckfQoofJ60175878;     pmRatiKVCBeECGLckfQoofJ60175878 = pmRatiKVCBeECGLckfQoofJ50852174;     pmRatiKVCBeECGLckfQoofJ50852174 = pmRatiKVCBeECGLckfQoofJ8605152;     pmRatiKVCBeECGLckfQoofJ8605152 = pmRatiKVCBeECGLckfQoofJ48258056;     pmRatiKVCBeECGLckfQoofJ48258056 = pmRatiKVCBeECGLckfQoofJ28338087;     pmRatiKVCBeECGLckfQoofJ28338087 = pmRatiKVCBeECGLckfQoofJ93715396;     pmRatiKVCBeECGLckfQoofJ93715396 = pmRatiKVCBeECGLckfQoofJ53889643;     pmRatiKVCBeECGLckfQoofJ53889643 = pmRatiKVCBeECGLckfQoofJ62294177;     pmRatiKVCBeECGLckfQoofJ62294177 = pmRatiKVCBeECGLckfQoofJ43276879;     pmRatiKVCBeECGLckfQoofJ43276879 = pmRatiKVCBeECGLckfQoofJ69855590;     pmRatiKVCBeECGLckfQoofJ69855590 = pmRatiKVCBeECGLckfQoofJ53417183;     pmRatiKVCBeECGLckfQoofJ53417183 = pmRatiKVCBeECGLckfQoofJ14663887;     pmRatiKVCBeECGLckfQoofJ14663887 = pmRatiKVCBeECGLckfQoofJ6799411;     pmRatiKVCBeECGLckfQoofJ6799411 = pmRatiKVCBeECGLckfQoofJ73019789;     pmRatiKVCBeECGLckfQoofJ73019789 = pmRatiKVCBeECGLckfQoofJ94257897;     pmRatiKVCBeECGLckfQoofJ94257897 = pmRatiKVCBeECGLckfQoofJ41714860;     pmRatiKVCBeECGLckfQoofJ41714860 = pmRatiKVCBeECGLckfQoofJ5517212;     pmRatiKVCBeECGLckfQoofJ5517212 = pmRatiKVCBeECGLckfQoofJ60744978;     pmRatiKVCBeECGLckfQoofJ60744978 = pmRatiKVCBeECGLckfQoofJ2021106;     pmRatiKVCBeECGLckfQoofJ2021106 = pmRatiKVCBeECGLckfQoofJ76261883;     pmRatiKVCBeECGLckfQoofJ76261883 = pmRatiKVCBeECGLckfQoofJ87727861;     pmRatiKVCBeECGLckfQoofJ87727861 = pmRatiKVCBeECGLckfQoofJ83599938;     pmRatiKVCBeECGLckfQoofJ83599938 = pmRatiKVCBeECGLckfQoofJ26238027;     pmRatiKVCBeECGLckfQoofJ26238027 = pmRatiKVCBeECGLckfQoofJ58736752;     pmRatiKVCBeECGLckfQoofJ58736752 = pmRatiKVCBeECGLckfQoofJ85983886;     pmRatiKVCBeECGLckfQoofJ85983886 = pmRatiKVCBeECGLckfQoofJ54816797;     pmRatiKVCBeECGLckfQoofJ54816797 = pmRatiKVCBeECGLckfQoofJ29987661;     pmRatiKVCBeECGLckfQoofJ29987661 = pmRatiKVCBeECGLckfQoofJ56807343;     pmRatiKVCBeECGLckfQoofJ56807343 = pmRatiKVCBeECGLckfQoofJ83179423;     pmRatiKVCBeECGLckfQoofJ83179423 = pmRatiKVCBeECGLckfQoofJ29872470;     pmRatiKVCBeECGLckfQoofJ29872470 = pmRatiKVCBeECGLckfQoofJ81070001;     pmRatiKVCBeECGLckfQoofJ81070001 = pmRatiKVCBeECGLckfQoofJ5031753;     pmRatiKVCBeECGLckfQoofJ5031753 = pmRatiKVCBeECGLckfQoofJ51019937;     pmRatiKVCBeECGLckfQoofJ51019937 = pmRatiKVCBeECGLckfQoofJ30431650;     pmRatiKVCBeECGLckfQoofJ30431650 = pmRatiKVCBeECGLckfQoofJ89708379;     pmRatiKVCBeECGLckfQoofJ89708379 = pmRatiKVCBeECGLckfQoofJ58473183;     pmRatiKVCBeECGLckfQoofJ58473183 = pmRatiKVCBeECGLckfQoofJ5147530;     pmRatiKVCBeECGLckfQoofJ5147530 = pmRatiKVCBeECGLckfQoofJ63338661;     pmRatiKVCBeECGLckfQoofJ63338661 = pmRatiKVCBeECGLckfQoofJ21348772;     pmRatiKVCBeECGLckfQoofJ21348772 = pmRatiKVCBeECGLckfQoofJ54448844;     pmRatiKVCBeECGLckfQoofJ54448844 = pmRatiKVCBeECGLckfQoofJ80547797;     pmRatiKVCBeECGLckfQoofJ80547797 = pmRatiKVCBeECGLckfQoofJ59463930;     pmRatiKVCBeECGLckfQoofJ59463930 = pmRatiKVCBeECGLckfQoofJ31304493;     pmRatiKVCBeECGLckfQoofJ31304493 = pmRatiKVCBeECGLckfQoofJ7221635;     pmRatiKVCBeECGLckfQoofJ7221635 = pmRatiKVCBeECGLckfQoofJ54063085;     pmRatiKVCBeECGLckfQoofJ54063085 = pmRatiKVCBeECGLckfQoofJ29095022;     pmRatiKVCBeECGLckfQoofJ29095022 = pmRatiKVCBeECGLckfQoofJ70438204;     pmRatiKVCBeECGLckfQoofJ70438204 = pmRatiKVCBeECGLckfQoofJ87901423;     pmRatiKVCBeECGLckfQoofJ87901423 = pmRatiKVCBeECGLckfQoofJ10525965;     pmRatiKVCBeECGLckfQoofJ10525965 = pmRatiKVCBeECGLckfQoofJ44478942;     pmRatiKVCBeECGLckfQoofJ44478942 = pmRatiKVCBeECGLckfQoofJ66207693;     pmRatiKVCBeECGLckfQoofJ66207693 = pmRatiKVCBeECGLckfQoofJ32517189;     pmRatiKVCBeECGLckfQoofJ32517189 = pmRatiKVCBeECGLckfQoofJ23312848;     pmRatiKVCBeECGLckfQoofJ23312848 = pmRatiKVCBeECGLckfQoofJ87448292;     pmRatiKVCBeECGLckfQoofJ87448292 = pmRatiKVCBeECGLckfQoofJ29809592;     pmRatiKVCBeECGLckfQoofJ29809592 = pmRatiKVCBeECGLckfQoofJ76575939;     pmRatiKVCBeECGLckfQoofJ76575939 = pmRatiKVCBeECGLckfQoofJ24614148;     pmRatiKVCBeECGLckfQoofJ24614148 = pmRatiKVCBeECGLckfQoofJ49868399;     pmRatiKVCBeECGLckfQoofJ49868399 = pmRatiKVCBeECGLckfQoofJ62274169;     pmRatiKVCBeECGLckfQoofJ62274169 = pmRatiKVCBeECGLckfQoofJ73521289;     pmRatiKVCBeECGLckfQoofJ73521289 = pmRatiKVCBeECGLckfQoofJ63727735;     pmRatiKVCBeECGLckfQoofJ63727735 = pmRatiKVCBeECGLckfQoofJ97082300;     pmRatiKVCBeECGLckfQoofJ97082300 = pmRatiKVCBeECGLckfQoofJ79114753;     pmRatiKVCBeECGLckfQoofJ79114753 = pmRatiKVCBeECGLckfQoofJ13404410;     pmRatiKVCBeECGLckfQoofJ13404410 = pmRatiKVCBeECGLckfQoofJ10699324;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void MOXdLELzslSedmwfYbTmFNRKEOnRQvfdcdwCRaeKf80171576() {     long XXWNLAJZCEEEmEywNZxQtjw33092912 = -885238347;    long XXWNLAJZCEEEmEywNZxQtjw55261152 = -373708189;    long XXWNLAJZCEEEmEywNZxQtjw85637377 = -582441794;    long XXWNLAJZCEEEmEywNZxQtjw33242080 = -345821336;    long XXWNLAJZCEEEmEywNZxQtjw55551172 = -206276164;    long XXWNLAJZCEEEmEywNZxQtjw9820480 = -767543711;    long XXWNLAJZCEEEmEywNZxQtjw55662814 = -715210199;    long XXWNLAJZCEEEmEywNZxQtjw97328682 = -202455277;    long XXWNLAJZCEEEmEywNZxQtjw76014171 = -737191700;    long XXWNLAJZCEEEmEywNZxQtjw64497296 = -582639587;    long XXWNLAJZCEEEmEywNZxQtjw18818629 = 15702608;    long XXWNLAJZCEEEmEywNZxQtjw15943441 = -104363689;    long XXWNLAJZCEEEmEywNZxQtjw65520972 = 78191055;    long XXWNLAJZCEEEmEywNZxQtjw3500645 = -973375401;    long XXWNLAJZCEEEmEywNZxQtjw39532271 = -613354516;    long XXWNLAJZCEEEmEywNZxQtjw19575622 = -423094377;    long XXWNLAJZCEEEmEywNZxQtjw3295950 = -529500726;    long XXWNLAJZCEEEmEywNZxQtjw96728563 = -591722457;    long XXWNLAJZCEEEmEywNZxQtjw32450078 = -8024701;    long XXWNLAJZCEEEmEywNZxQtjw56129379 = -214904704;    long XXWNLAJZCEEEmEywNZxQtjw69377924 = -580708399;    long XXWNLAJZCEEEmEywNZxQtjw19956394 = -460693493;    long XXWNLAJZCEEEmEywNZxQtjw88173033 = -918214803;    long XXWNLAJZCEEEmEywNZxQtjw57431051 = -983784239;    long XXWNLAJZCEEEmEywNZxQtjw84174782 = -188022628;    long XXWNLAJZCEEEmEywNZxQtjw79209185 = -291231455;    long XXWNLAJZCEEEmEywNZxQtjw20626747 = -84337393;    long XXWNLAJZCEEEmEywNZxQtjw47745540 = -671417033;    long XXWNLAJZCEEEmEywNZxQtjw55135327 = -686477387;    long XXWNLAJZCEEEmEywNZxQtjw37851172 = -718762183;    long XXWNLAJZCEEEmEywNZxQtjw97071928 = -796290722;    long XXWNLAJZCEEEmEywNZxQtjw44542239 = -342129125;    long XXWNLAJZCEEEmEywNZxQtjw88848414 = -443558339;    long XXWNLAJZCEEEmEywNZxQtjw84439803 = -150544196;    long XXWNLAJZCEEEmEywNZxQtjw57581502 = -601645989;    long XXWNLAJZCEEEmEywNZxQtjw16402133 = -73175442;    long XXWNLAJZCEEEmEywNZxQtjw41674222 = 86667228;    long XXWNLAJZCEEEmEywNZxQtjw34560596 = -937587916;    long XXWNLAJZCEEEmEywNZxQtjw21599686 = -637874473;    long XXWNLAJZCEEEmEywNZxQtjw96570877 = -704638588;    long XXWNLAJZCEEEmEywNZxQtjw69239790 = -228206051;    long XXWNLAJZCEEEmEywNZxQtjw96526126 = -299796031;    long XXWNLAJZCEEEmEywNZxQtjw99156475 = -404069520;    long XXWNLAJZCEEEmEywNZxQtjw2506399 = -607252754;    long XXWNLAJZCEEEmEywNZxQtjw27242094 = -426807799;    long XXWNLAJZCEEEmEywNZxQtjw37527904 = -253182162;    long XXWNLAJZCEEEmEywNZxQtjw38016788 = -830044203;    long XXWNLAJZCEEEmEywNZxQtjw83878980 = -86198313;    long XXWNLAJZCEEEmEywNZxQtjw82600926 = -888810794;    long XXWNLAJZCEEEmEywNZxQtjw50058112 = -395757030;    long XXWNLAJZCEEEmEywNZxQtjw89867744 = -795951612;    long XXWNLAJZCEEEmEywNZxQtjw1018860 = -810617055;    long XXWNLAJZCEEEmEywNZxQtjw8383267 = -221047077;    long XXWNLAJZCEEEmEywNZxQtjw10781253 = -299203965;    long XXWNLAJZCEEEmEywNZxQtjw10793653 = -836668870;    long XXWNLAJZCEEEmEywNZxQtjw13136519 = -324544854;    long XXWNLAJZCEEEmEywNZxQtjw67088118 = -455493386;    long XXWNLAJZCEEEmEywNZxQtjw28206327 = -598657555;    long XXWNLAJZCEEEmEywNZxQtjw49067297 = -57798708;    long XXWNLAJZCEEEmEywNZxQtjw76341987 = -915044709;    long XXWNLAJZCEEEmEywNZxQtjw89193732 = -583206318;    long XXWNLAJZCEEEmEywNZxQtjw7917275 = 56206833;    long XXWNLAJZCEEEmEywNZxQtjw42193355 = -515977891;    long XXWNLAJZCEEEmEywNZxQtjw38163000 = 81570483;    long XXWNLAJZCEEEmEywNZxQtjw67425368 = -786348865;    long XXWNLAJZCEEEmEywNZxQtjw74276390 = -642168268;    long XXWNLAJZCEEEmEywNZxQtjw27095027 = -660805351;    long XXWNLAJZCEEEmEywNZxQtjw81081169 = -771264749;    long XXWNLAJZCEEEmEywNZxQtjw45919143 = -271729413;    long XXWNLAJZCEEEmEywNZxQtjw23130139 = -440179075;    long XXWNLAJZCEEEmEywNZxQtjw77901400 = -409761605;    long XXWNLAJZCEEEmEywNZxQtjw68735354 = -591912810;    long XXWNLAJZCEEEmEywNZxQtjw75128878 = -953847985;    long XXWNLAJZCEEEmEywNZxQtjw35879201 = -303386113;    long XXWNLAJZCEEEmEywNZxQtjw86889589 = -986698654;    long XXWNLAJZCEEEmEywNZxQtjw72851797 = -180912369;    long XXWNLAJZCEEEmEywNZxQtjw20799918 = 43376026;    long XXWNLAJZCEEEmEywNZxQtjw85666635 = -210962050;    long XXWNLAJZCEEEmEywNZxQtjw30188958 = -456976440;    long XXWNLAJZCEEEmEywNZxQtjw46646879 = -934840467;    long XXWNLAJZCEEEmEywNZxQtjw41192397 = -461187253;    long XXWNLAJZCEEEmEywNZxQtjw36747767 = -998139080;    long XXWNLAJZCEEEmEywNZxQtjw65144613 = -782606239;    long XXWNLAJZCEEEmEywNZxQtjw5077215 = -190720357;    long XXWNLAJZCEEEmEywNZxQtjw47983427 = -922810571;    long XXWNLAJZCEEEmEywNZxQtjw96053068 = -985673668;    long XXWNLAJZCEEEmEywNZxQtjw36158972 = -21082048;    long XXWNLAJZCEEEmEywNZxQtjw78067162 = -44354374;    long XXWNLAJZCEEEmEywNZxQtjw73646151 = -313875327;    long XXWNLAJZCEEEmEywNZxQtjw44444983 = -177101135;    long XXWNLAJZCEEEmEywNZxQtjw49314014 = -617682057;    long XXWNLAJZCEEEmEywNZxQtjw13467896 = -314675217;    long XXWNLAJZCEEEmEywNZxQtjw85493298 = -779789209;    long XXWNLAJZCEEEmEywNZxQtjw45257699 = -722829764;    long XXWNLAJZCEEEmEywNZxQtjw7377145 = -21432271;    long XXWNLAJZCEEEmEywNZxQtjw61322515 = -184412885;    long XXWNLAJZCEEEmEywNZxQtjw54332772 = -783818141;    long XXWNLAJZCEEEmEywNZxQtjw60993475 = -385640003;    long XXWNLAJZCEEEmEywNZxQtjw35081030 = -820903889;    long XXWNLAJZCEEEmEywNZxQtjw52965703 = -885238347;     XXWNLAJZCEEEmEywNZxQtjw33092912 = XXWNLAJZCEEEmEywNZxQtjw55261152;     XXWNLAJZCEEEmEywNZxQtjw55261152 = XXWNLAJZCEEEmEywNZxQtjw85637377;     XXWNLAJZCEEEmEywNZxQtjw85637377 = XXWNLAJZCEEEmEywNZxQtjw33242080;     XXWNLAJZCEEEmEywNZxQtjw33242080 = XXWNLAJZCEEEmEywNZxQtjw55551172;     XXWNLAJZCEEEmEywNZxQtjw55551172 = XXWNLAJZCEEEmEywNZxQtjw9820480;     XXWNLAJZCEEEmEywNZxQtjw9820480 = XXWNLAJZCEEEmEywNZxQtjw55662814;     XXWNLAJZCEEEmEywNZxQtjw55662814 = XXWNLAJZCEEEmEywNZxQtjw97328682;     XXWNLAJZCEEEmEywNZxQtjw97328682 = XXWNLAJZCEEEmEywNZxQtjw76014171;     XXWNLAJZCEEEmEywNZxQtjw76014171 = XXWNLAJZCEEEmEywNZxQtjw64497296;     XXWNLAJZCEEEmEywNZxQtjw64497296 = XXWNLAJZCEEEmEywNZxQtjw18818629;     XXWNLAJZCEEEmEywNZxQtjw18818629 = XXWNLAJZCEEEmEywNZxQtjw15943441;     XXWNLAJZCEEEmEywNZxQtjw15943441 = XXWNLAJZCEEEmEywNZxQtjw65520972;     XXWNLAJZCEEEmEywNZxQtjw65520972 = XXWNLAJZCEEEmEywNZxQtjw3500645;     XXWNLAJZCEEEmEywNZxQtjw3500645 = XXWNLAJZCEEEmEywNZxQtjw39532271;     XXWNLAJZCEEEmEywNZxQtjw39532271 = XXWNLAJZCEEEmEywNZxQtjw19575622;     XXWNLAJZCEEEmEywNZxQtjw19575622 = XXWNLAJZCEEEmEywNZxQtjw3295950;     XXWNLAJZCEEEmEywNZxQtjw3295950 = XXWNLAJZCEEEmEywNZxQtjw96728563;     XXWNLAJZCEEEmEywNZxQtjw96728563 = XXWNLAJZCEEEmEywNZxQtjw32450078;     XXWNLAJZCEEEmEywNZxQtjw32450078 = XXWNLAJZCEEEmEywNZxQtjw56129379;     XXWNLAJZCEEEmEywNZxQtjw56129379 = XXWNLAJZCEEEmEywNZxQtjw69377924;     XXWNLAJZCEEEmEywNZxQtjw69377924 = XXWNLAJZCEEEmEywNZxQtjw19956394;     XXWNLAJZCEEEmEywNZxQtjw19956394 = XXWNLAJZCEEEmEywNZxQtjw88173033;     XXWNLAJZCEEEmEywNZxQtjw88173033 = XXWNLAJZCEEEmEywNZxQtjw57431051;     XXWNLAJZCEEEmEywNZxQtjw57431051 = XXWNLAJZCEEEmEywNZxQtjw84174782;     XXWNLAJZCEEEmEywNZxQtjw84174782 = XXWNLAJZCEEEmEywNZxQtjw79209185;     XXWNLAJZCEEEmEywNZxQtjw79209185 = XXWNLAJZCEEEmEywNZxQtjw20626747;     XXWNLAJZCEEEmEywNZxQtjw20626747 = XXWNLAJZCEEEmEywNZxQtjw47745540;     XXWNLAJZCEEEmEywNZxQtjw47745540 = XXWNLAJZCEEEmEywNZxQtjw55135327;     XXWNLAJZCEEEmEywNZxQtjw55135327 = XXWNLAJZCEEEmEywNZxQtjw37851172;     XXWNLAJZCEEEmEywNZxQtjw37851172 = XXWNLAJZCEEEmEywNZxQtjw97071928;     XXWNLAJZCEEEmEywNZxQtjw97071928 = XXWNLAJZCEEEmEywNZxQtjw44542239;     XXWNLAJZCEEEmEywNZxQtjw44542239 = XXWNLAJZCEEEmEywNZxQtjw88848414;     XXWNLAJZCEEEmEywNZxQtjw88848414 = XXWNLAJZCEEEmEywNZxQtjw84439803;     XXWNLAJZCEEEmEywNZxQtjw84439803 = XXWNLAJZCEEEmEywNZxQtjw57581502;     XXWNLAJZCEEEmEywNZxQtjw57581502 = XXWNLAJZCEEEmEywNZxQtjw16402133;     XXWNLAJZCEEEmEywNZxQtjw16402133 = XXWNLAJZCEEEmEywNZxQtjw41674222;     XXWNLAJZCEEEmEywNZxQtjw41674222 = XXWNLAJZCEEEmEywNZxQtjw34560596;     XXWNLAJZCEEEmEywNZxQtjw34560596 = XXWNLAJZCEEEmEywNZxQtjw21599686;     XXWNLAJZCEEEmEywNZxQtjw21599686 = XXWNLAJZCEEEmEywNZxQtjw96570877;     XXWNLAJZCEEEmEywNZxQtjw96570877 = XXWNLAJZCEEEmEywNZxQtjw69239790;     XXWNLAJZCEEEmEywNZxQtjw69239790 = XXWNLAJZCEEEmEywNZxQtjw96526126;     XXWNLAJZCEEEmEywNZxQtjw96526126 = XXWNLAJZCEEEmEywNZxQtjw99156475;     XXWNLAJZCEEEmEywNZxQtjw99156475 = XXWNLAJZCEEEmEywNZxQtjw2506399;     XXWNLAJZCEEEmEywNZxQtjw2506399 = XXWNLAJZCEEEmEywNZxQtjw27242094;     XXWNLAJZCEEEmEywNZxQtjw27242094 = XXWNLAJZCEEEmEywNZxQtjw37527904;     XXWNLAJZCEEEmEywNZxQtjw37527904 = XXWNLAJZCEEEmEywNZxQtjw38016788;     XXWNLAJZCEEEmEywNZxQtjw38016788 = XXWNLAJZCEEEmEywNZxQtjw83878980;     XXWNLAJZCEEEmEywNZxQtjw83878980 = XXWNLAJZCEEEmEywNZxQtjw82600926;     XXWNLAJZCEEEmEywNZxQtjw82600926 = XXWNLAJZCEEEmEywNZxQtjw50058112;     XXWNLAJZCEEEmEywNZxQtjw50058112 = XXWNLAJZCEEEmEywNZxQtjw89867744;     XXWNLAJZCEEEmEywNZxQtjw89867744 = XXWNLAJZCEEEmEywNZxQtjw1018860;     XXWNLAJZCEEEmEywNZxQtjw1018860 = XXWNLAJZCEEEmEywNZxQtjw8383267;     XXWNLAJZCEEEmEywNZxQtjw8383267 = XXWNLAJZCEEEmEywNZxQtjw10781253;     XXWNLAJZCEEEmEywNZxQtjw10781253 = XXWNLAJZCEEEmEywNZxQtjw10793653;     XXWNLAJZCEEEmEywNZxQtjw10793653 = XXWNLAJZCEEEmEywNZxQtjw13136519;     XXWNLAJZCEEEmEywNZxQtjw13136519 = XXWNLAJZCEEEmEywNZxQtjw67088118;     XXWNLAJZCEEEmEywNZxQtjw67088118 = XXWNLAJZCEEEmEywNZxQtjw28206327;     XXWNLAJZCEEEmEywNZxQtjw28206327 = XXWNLAJZCEEEmEywNZxQtjw49067297;     XXWNLAJZCEEEmEywNZxQtjw49067297 = XXWNLAJZCEEEmEywNZxQtjw76341987;     XXWNLAJZCEEEmEywNZxQtjw76341987 = XXWNLAJZCEEEmEywNZxQtjw89193732;     XXWNLAJZCEEEmEywNZxQtjw89193732 = XXWNLAJZCEEEmEywNZxQtjw7917275;     XXWNLAJZCEEEmEywNZxQtjw7917275 = XXWNLAJZCEEEmEywNZxQtjw42193355;     XXWNLAJZCEEEmEywNZxQtjw42193355 = XXWNLAJZCEEEmEywNZxQtjw38163000;     XXWNLAJZCEEEmEywNZxQtjw38163000 = XXWNLAJZCEEEmEywNZxQtjw67425368;     XXWNLAJZCEEEmEywNZxQtjw67425368 = XXWNLAJZCEEEmEywNZxQtjw74276390;     XXWNLAJZCEEEmEywNZxQtjw74276390 = XXWNLAJZCEEEmEywNZxQtjw27095027;     XXWNLAJZCEEEmEywNZxQtjw27095027 = XXWNLAJZCEEEmEywNZxQtjw81081169;     XXWNLAJZCEEEmEywNZxQtjw81081169 = XXWNLAJZCEEEmEywNZxQtjw45919143;     XXWNLAJZCEEEmEywNZxQtjw45919143 = XXWNLAJZCEEEmEywNZxQtjw23130139;     XXWNLAJZCEEEmEywNZxQtjw23130139 = XXWNLAJZCEEEmEywNZxQtjw77901400;     XXWNLAJZCEEEmEywNZxQtjw77901400 = XXWNLAJZCEEEmEywNZxQtjw68735354;     XXWNLAJZCEEEmEywNZxQtjw68735354 = XXWNLAJZCEEEmEywNZxQtjw75128878;     XXWNLAJZCEEEmEywNZxQtjw75128878 = XXWNLAJZCEEEmEywNZxQtjw35879201;     XXWNLAJZCEEEmEywNZxQtjw35879201 = XXWNLAJZCEEEmEywNZxQtjw86889589;     XXWNLAJZCEEEmEywNZxQtjw86889589 = XXWNLAJZCEEEmEywNZxQtjw72851797;     XXWNLAJZCEEEmEywNZxQtjw72851797 = XXWNLAJZCEEEmEywNZxQtjw20799918;     XXWNLAJZCEEEmEywNZxQtjw20799918 = XXWNLAJZCEEEmEywNZxQtjw85666635;     XXWNLAJZCEEEmEywNZxQtjw85666635 = XXWNLAJZCEEEmEywNZxQtjw30188958;     XXWNLAJZCEEEmEywNZxQtjw30188958 = XXWNLAJZCEEEmEywNZxQtjw46646879;     XXWNLAJZCEEEmEywNZxQtjw46646879 = XXWNLAJZCEEEmEywNZxQtjw41192397;     XXWNLAJZCEEEmEywNZxQtjw41192397 = XXWNLAJZCEEEmEywNZxQtjw36747767;     XXWNLAJZCEEEmEywNZxQtjw36747767 = XXWNLAJZCEEEmEywNZxQtjw65144613;     XXWNLAJZCEEEmEywNZxQtjw65144613 = XXWNLAJZCEEEmEywNZxQtjw5077215;     XXWNLAJZCEEEmEywNZxQtjw5077215 = XXWNLAJZCEEEmEywNZxQtjw47983427;     XXWNLAJZCEEEmEywNZxQtjw47983427 = XXWNLAJZCEEEmEywNZxQtjw96053068;     XXWNLAJZCEEEmEywNZxQtjw96053068 = XXWNLAJZCEEEmEywNZxQtjw36158972;     XXWNLAJZCEEEmEywNZxQtjw36158972 = XXWNLAJZCEEEmEywNZxQtjw78067162;     XXWNLAJZCEEEmEywNZxQtjw78067162 = XXWNLAJZCEEEmEywNZxQtjw73646151;     XXWNLAJZCEEEmEywNZxQtjw73646151 = XXWNLAJZCEEEmEywNZxQtjw44444983;     XXWNLAJZCEEEmEywNZxQtjw44444983 = XXWNLAJZCEEEmEywNZxQtjw49314014;     XXWNLAJZCEEEmEywNZxQtjw49314014 = XXWNLAJZCEEEmEywNZxQtjw13467896;     XXWNLAJZCEEEmEywNZxQtjw13467896 = XXWNLAJZCEEEmEywNZxQtjw85493298;     XXWNLAJZCEEEmEywNZxQtjw85493298 = XXWNLAJZCEEEmEywNZxQtjw45257699;     XXWNLAJZCEEEmEywNZxQtjw45257699 = XXWNLAJZCEEEmEywNZxQtjw7377145;     XXWNLAJZCEEEmEywNZxQtjw7377145 = XXWNLAJZCEEEmEywNZxQtjw61322515;     XXWNLAJZCEEEmEywNZxQtjw61322515 = XXWNLAJZCEEEmEywNZxQtjw54332772;     XXWNLAJZCEEEmEywNZxQtjw54332772 = XXWNLAJZCEEEmEywNZxQtjw60993475;     XXWNLAJZCEEEmEywNZxQtjw60993475 = XXWNLAJZCEEEmEywNZxQtjw35081030;     XXWNLAJZCEEEmEywNZxQtjw35081030 = XXWNLAJZCEEEmEywNZxQtjw52965703;     XXWNLAJZCEEEmEywNZxQtjw52965703 = XXWNLAJZCEEEmEywNZxQtjw33092912;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void ihsShtklFgDsfqEzmLJwHueUaxpUeWcYVWcnvqNzt62400338() {     long AgZCIfhXYDbRrKoCXsjDQGi84828362 = 98506821;    long AgZCIfhXYDbRrKoCXsjDQGi70935135 = -450607944;    long AgZCIfhXYDbRrKoCXsjDQGi34437737 = -379801178;    long AgZCIfhXYDbRrKoCXsjDQGi8317482 = -162090478;    long AgZCIfhXYDbRrKoCXsjDQGi32275105 = 86073182;    long AgZCIfhXYDbRrKoCXsjDQGi34703834 = -926570937;    long AgZCIfhXYDbRrKoCXsjDQGi29439658 = -538421796;    long AgZCIfhXYDbRrKoCXsjDQGi16120161 = -326234831;    long AgZCIfhXYDbRrKoCXsjDQGi27312249 = -528040410;    long AgZCIfhXYDbRrKoCXsjDQGi33294420 = -24285569;    long AgZCIfhXYDbRrKoCXsjDQGi14111328 = 53980137;    long AgZCIfhXYDbRrKoCXsjDQGi26299819 = -39345190;    long AgZCIfhXYDbRrKoCXsjDQGi52701766 = -630989206;    long AgZCIfhXYDbRrKoCXsjDQGi62268363 = -600055948;    long AgZCIfhXYDbRrKoCXsjDQGi93547528 = -91082226;    long AgZCIfhXYDbRrKoCXsjDQGi31302895 = -134778332;    long AgZCIfhXYDbRrKoCXsjDQGi59266475 = -897595416;    long AgZCIfhXYDbRrKoCXsjDQGi82411486 = 45701048;    long AgZCIfhXYDbRrKoCXsjDQGi92023927 = -535938884;    long AgZCIfhXYDbRrKoCXsjDQGi75858953 = 74827147;    long AgZCIfhXYDbRrKoCXsjDQGi15125277 = -663516567;    long AgZCIfhXYDbRrKoCXsjDQGi22375847 = -634174501;    long AgZCIfhXYDbRrKoCXsjDQGi89522548 = -526452251;    long AgZCIfhXYDbRrKoCXsjDQGi50081301 = -855376190;    long AgZCIfhXYDbRrKoCXsjDQGi55590641 = -133677065;    long AgZCIfhXYDbRrKoCXsjDQGi36914600 = -636841234;    long AgZCIfhXYDbRrKoCXsjDQGi59455381 = -546746111;    long AgZCIfhXYDbRrKoCXsjDQGi45874765 = 45252281;    long AgZCIfhXYDbRrKoCXsjDQGi29885400 = -736376289;    long AgZCIfhXYDbRrKoCXsjDQGi7836256 = -80662979;    long AgZCIfhXYDbRrKoCXsjDQGi34290737 = -29173189;    long AgZCIfhXYDbRrKoCXsjDQGi57571969 = -665903316;    long AgZCIfhXYDbRrKoCXsjDQGi86941724 = 74059775;    long AgZCIfhXYDbRrKoCXsjDQGi78463516 = -911141362;    long AgZCIfhXYDbRrKoCXsjDQGi55786630 = -818455632;    long AgZCIfhXYDbRrKoCXsjDQGi98101742 = -309344271;    long AgZCIfhXYDbRrKoCXsjDQGi91322448 = -557687516;    long AgZCIfhXYDbRrKoCXsjDQGi35394208 = 78899719;    long AgZCIfhXYDbRrKoCXsjDQGi91374528 = 16808132;    long AgZCIfhXYDbRrKoCXsjDQGi21653294 = -223254255;    long AgZCIfhXYDbRrKoCXsjDQGi37923877 = -347364839;    long AgZCIfhXYDbRrKoCXsjDQGi56551527 = -288315652;    long AgZCIfhXYDbRrKoCXsjDQGi55739707 = -304846051;    long AgZCIfhXYDbRrKoCXsjDQGi95442216 = -532641431;    long AgZCIfhXYDbRrKoCXsjDQGi99271301 = 72695118;    long AgZCIfhXYDbRrKoCXsjDQGi39222351 = -677074102;    long AgZCIfhXYDbRrKoCXsjDQGi24182983 = -192384656;    long AgZCIfhXYDbRrKoCXsjDQGi62863444 = -490603009;    long AgZCIfhXYDbRrKoCXsjDQGi71619379 = -852763523;    long AgZCIfhXYDbRrKoCXsjDQGi38714372 = -254768410;    long AgZCIfhXYDbRrKoCXsjDQGi30547636 = -504455768;    long AgZCIfhXYDbRrKoCXsjDQGi32998613 = -172216615;    long AgZCIfhXYDbRrKoCXsjDQGi31622013 = 34839735;    long AgZCIfhXYDbRrKoCXsjDQGi80840493 = 85996723;    long AgZCIfhXYDbRrKoCXsjDQGi47275062 = -866432071;    long AgZCIfhXYDbRrKoCXsjDQGi62452516 = -267318679;    long AgZCIfhXYDbRrKoCXsjDQGi81412587 = -924155694;    long AgZCIfhXYDbRrKoCXsjDQGi84356436 = -524424988;    long AgZCIfhXYDbRrKoCXsjDQGi52726840 = 71586586;    long AgZCIfhXYDbRrKoCXsjDQGi95360505 = -277085584;    long AgZCIfhXYDbRrKoCXsjDQGi75248452 = -279824827;    long AgZCIfhXYDbRrKoCXsjDQGi83564893 = -483674077;    long AgZCIfhXYDbRrKoCXsjDQGi86234760 = -589858543;    long AgZCIfhXYDbRrKoCXsjDQGi19475994 = -347377432;    long AgZCIfhXYDbRrKoCXsjDQGi99003683 = -995112381;    long AgZCIfhXYDbRrKoCXsjDQGi56539359 = -280116548;    long AgZCIfhXYDbRrKoCXsjDQGi39358095 = -13404965;    long AgZCIfhXYDbRrKoCXsjDQGi74238250 = -719847844;    long AgZCIfhXYDbRrKoCXsjDQGi6481734 = -781600316;    long AgZCIfhXYDbRrKoCXsjDQGi95445785 = -781737956;    long AgZCIfhXYDbRrKoCXsjDQGi39980446 = -577090817;    long AgZCIfhXYDbRrKoCXsjDQGi23872267 = -876495135;    long AgZCIfhXYDbRrKoCXsjDQGi91036957 = -971107085;    long AgZCIfhXYDbRrKoCXsjDQGi70370633 = -212684630;    long AgZCIfhXYDbRrKoCXsjDQGi37935076 = -577808015;    long AgZCIfhXYDbRrKoCXsjDQGi58573750 = -275200915;    long AgZCIfhXYDbRrKoCXsjDQGi66636140 = -229328450;    long AgZCIfhXYDbRrKoCXsjDQGi94080331 = -993810820;    long AgZCIfhXYDbRrKoCXsjDQGi50810000 = -828071308;    long AgZCIfhXYDbRrKoCXsjDQGi16368290 = -456602963;    long AgZCIfhXYDbRrKoCXsjDQGi12731617 = -344456578;    long AgZCIfhXYDbRrKoCXsjDQGi96591937 = 43856898;    long AgZCIfhXYDbRrKoCXsjDQGi74255385 = -101984196;    long AgZCIfhXYDbRrKoCXsjDQGi91171028 = -381607879;    long AgZCIfhXYDbRrKoCXsjDQGi77288619 = -576207211;    long AgZCIfhXYDbRrKoCXsjDQGi1292125 = -856956574;    long AgZCIfhXYDbRrKoCXsjDQGi25949956 = -600743052;    long AgZCIfhXYDbRrKoCXsjDQGi6101231 = 88063052;    long AgZCIfhXYDbRrKoCXsjDQGi31188455 = 55290708;    long AgZCIfhXYDbRrKoCXsjDQGi93334114 = -451136953;    long AgZCIfhXYDbRrKoCXsjDQGi16689156 = -385188577;    long AgZCIfhXYDbRrKoCXsjDQGi6966013 = 66737472;    long AgZCIfhXYDbRrKoCXsjDQGi82667367 = -992686868;    long AgZCIfhXYDbRrKoCXsjDQGi96014022 = -706106284;    long AgZCIfhXYDbRrKoCXsjDQGi46404842 = -943429428;    long AgZCIfhXYDbRrKoCXsjDQGi54358983 = -863690762;    long AgZCIfhXYDbRrKoCXsjDQGi70316767 = -698457110;    long AgZCIfhXYDbRrKoCXsjDQGi36263714 = -957468620;    long AgZCIfhXYDbRrKoCXsjDQGi96438533 = -537529050;    long AgZCIfhXYDbRrKoCXsjDQGi42731942 = 98506821;     AgZCIfhXYDbRrKoCXsjDQGi84828362 = AgZCIfhXYDbRrKoCXsjDQGi70935135;     AgZCIfhXYDbRrKoCXsjDQGi70935135 = AgZCIfhXYDbRrKoCXsjDQGi34437737;     AgZCIfhXYDbRrKoCXsjDQGi34437737 = AgZCIfhXYDbRrKoCXsjDQGi8317482;     AgZCIfhXYDbRrKoCXsjDQGi8317482 = AgZCIfhXYDbRrKoCXsjDQGi32275105;     AgZCIfhXYDbRrKoCXsjDQGi32275105 = AgZCIfhXYDbRrKoCXsjDQGi34703834;     AgZCIfhXYDbRrKoCXsjDQGi34703834 = AgZCIfhXYDbRrKoCXsjDQGi29439658;     AgZCIfhXYDbRrKoCXsjDQGi29439658 = AgZCIfhXYDbRrKoCXsjDQGi16120161;     AgZCIfhXYDbRrKoCXsjDQGi16120161 = AgZCIfhXYDbRrKoCXsjDQGi27312249;     AgZCIfhXYDbRrKoCXsjDQGi27312249 = AgZCIfhXYDbRrKoCXsjDQGi33294420;     AgZCIfhXYDbRrKoCXsjDQGi33294420 = AgZCIfhXYDbRrKoCXsjDQGi14111328;     AgZCIfhXYDbRrKoCXsjDQGi14111328 = AgZCIfhXYDbRrKoCXsjDQGi26299819;     AgZCIfhXYDbRrKoCXsjDQGi26299819 = AgZCIfhXYDbRrKoCXsjDQGi52701766;     AgZCIfhXYDbRrKoCXsjDQGi52701766 = AgZCIfhXYDbRrKoCXsjDQGi62268363;     AgZCIfhXYDbRrKoCXsjDQGi62268363 = AgZCIfhXYDbRrKoCXsjDQGi93547528;     AgZCIfhXYDbRrKoCXsjDQGi93547528 = AgZCIfhXYDbRrKoCXsjDQGi31302895;     AgZCIfhXYDbRrKoCXsjDQGi31302895 = AgZCIfhXYDbRrKoCXsjDQGi59266475;     AgZCIfhXYDbRrKoCXsjDQGi59266475 = AgZCIfhXYDbRrKoCXsjDQGi82411486;     AgZCIfhXYDbRrKoCXsjDQGi82411486 = AgZCIfhXYDbRrKoCXsjDQGi92023927;     AgZCIfhXYDbRrKoCXsjDQGi92023927 = AgZCIfhXYDbRrKoCXsjDQGi75858953;     AgZCIfhXYDbRrKoCXsjDQGi75858953 = AgZCIfhXYDbRrKoCXsjDQGi15125277;     AgZCIfhXYDbRrKoCXsjDQGi15125277 = AgZCIfhXYDbRrKoCXsjDQGi22375847;     AgZCIfhXYDbRrKoCXsjDQGi22375847 = AgZCIfhXYDbRrKoCXsjDQGi89522548;     AgZCIfhXYDbRrKoCXsjDQGi89522548 = AgZCIfhXYDbRrKoCXsjDQGi50081301;     AgZCIfhXYDbRrKoCXsjDQGi50081301 = AgZCIfhXYDbRrKoCXsjDQGi55590641;     AgZCIfhXYDbRrKoCXsjDQGi55590641 = AgZCIfhXYDbRrKoCXsjDQGi36914600;     AgZCIfhXYDbRrKoCXsjDQGi36914600 = AgZCIfhXYDbRrKoCXsjDQGi59455381;     AgZCIfhXYDbRrKoCXsjDQGi59455381 = AgZCIfhXYDbRrKoCXsjDQGi45874765;     AgZCIfhXYDbRrKoCXsjDQGi45874765 = AgZCIfhXYDbRrKoCXsjDQGi29885400;     AgZCIfhXYDbRrKoCXsjDQGi29885400 = AgZCIfhXYDbRrKoCXsjDQGi7836256;     AgZCIfhXYDbRrKoCXsjDQGi7836256 = AgZCIfhXYDbRrKoCXsjDQGi34290737;     AgZCIfhXYDbRrKoCXsjDQGi34290737 = AgZCIfhXYDbRrKoCXsjDQGi57571969;     AgZCIfhXYDbRrKoCXsjDQGi57571969 = AgZCIfhXYDbRrKoCXsjDQGi86941724;     AgZCIfhXYDbRrKoCXsjDQGi86941724 = AgZCIfhXYDbRrKoCXsjDQGi78463516;     AgZCIfhXYDbRrKoCXsjDQGi78463516 = AgZCIfhXYDbRrKoCXsjDQGi55786630;     AgZCIfhXYDbRrKoCXsjDQGi55786630 = AgZCIfhXYDbRrKoCXsjDQGi98101742;     AgZCIfhXYDbRrKoCXsjDQGi98101742 = AgZCIfhXYDbRrKoCXsjDQGi91322448;     AgZCIfhXYDbRrKoCXsjDQGi91322448 = AgZCIfhXYDbRrKoCXsjDQGi35394208;     AgZCIfhXYDbRrKoCXsjDQGi35394208 = AgZCIfhXYDbRrKoCXsjDQGi91374528;     AgZCIfhXYDbRrKoCXsjDQGi91374528 = AgZCIfhXYDbRrKoCXsjDQGi21653294;     AgZCIfhXYDbRrKoCXsjDQGi21653294 = AgZCIfhXYDbRrKoCXsjDQGi37923877;     AgZCIfhXYDbRrKoCXsjDQGi37923877 = AgZCIfhXYDbRrKoCXsjDQGi56551527;     AgZCIfhXYDbRrKoCXsjDQGi56551527 = AgZCIfhXYDbRrKoCXsjDQGi55739707;     AgZCIfhXYDbRrKoCXsjDQGi55739707 = AgZCIfhXYDbRrKoCXsjDQGi95442216;     AgZCIfhXYDbRrKoCXsjDQGi95442216 = AgZCIfhXYDbRrKoCXsjDQGi99271301;     AgZCIfhXYDbRrKoCXsjDQGi99271301 = AgZCIfhXYDbRrKoCXsjDQGi39222351;     AgZCIfhXYDbRrKoCXsjDQGi39222351 = AgZCIfhXYDbRrKoCXsjDQGi24182983;     AgZCIfhXYDbRrKoCXsjDQGi24182983 = AgZCIfhXYDbRrKoCXsjDQGi62863444;     AgZCIfhXYDbRrKoCXsjDQGi62863444 = AgZCIfhXYDbRrKoCXsjDQGi71619379;     AgZCIfhXYDbRrKoCXsjDQGi71619379 = AgZCIfhXYDbRrKoCXsjDQGi38714372;     AgZCIfhXYDbRrKoCXsjDQGi38714372 = AgZCIfhXYDbRrKoCXsjDQGi30547636;     AgZCIfhXYDbRrKoCXsjDQGi30547636 = AgZCIfhXYDbRrKoCXsjDQGi32998613;     AgZCIfhXYDbRrKoCXsjDQGi32998613 = AgZCIfhXYDbRrKoCXsjDQGi31622013;     AgZCIfhXYDbRrKoCXsjDQGi31622013 = AgZCIfhXYDbRrKoCXsjDQGi80840493;     AgZCIfhXYDbRrKoCXsjDQGi80840493 = AgZCIfhXYDbRrKoCXsjDQGi47275062;     AgZCIfhXYDbRrKoCXsjDQGi47275062 = AgZCIfhXYDbRrKoCXsjDQGi62452516;     AgZCIfhXYDbRrKoCXsjDQGi62452516 = AgZCIfhXYDbRrKoCXsjDQGi81412587;     AgZCIfhXYDbRrKoCXsjDQGi81412587 = AgZCIfhXYDbRrKoCXsjDQGi84356436;     AgZCIfhXYDbRrKoCXsjDQGi84356436 = AgZCIfhXYDbRrKoCXsjDQGi52726840;     AgZCIfhXYDbRrKoCXsjDQGi52726840 = AgZCIfhXYDbRrKoCXsjDQGi95360505;     AgZCIfhXYDbRrKoCXsjDQGi95360505 = AgZCIfhXYDbRrKoCXsjDQGi75248452;     AgZCIfhXYDbRrKoCXsjDQGi75248452 = AgZCIfhXYDbRrKoCXsjDQGi83564893;     AgZCIfhXYDbRrKoCXsjDQGi83564893 = AgZCIfhXYDbRrKoCXsjDQGi86234760;     AgZCIfhXYDbRrKoCXsjDQGi86234760 = AgZCIfhXYDbRrKoCXsjDQGi19475994;     AgZCIfhXYDbRrKoCXsjDQGi19475994 = AgZCIfhXYDbRrKoCXsjDQGi99003683;     AgZCIfhXYDbRrKoCXsjDQGi99003683 = AgZCIfhXYDbRrKoCXsjDQGi56539359;     AgZCIfhXYDbRrKoCXsjDQGi56539359 = AgZCIfhXYDbRrKoCXsjDQGi39358095;     AgZCIfhXYDbRrKoCXsjDQGi39358095 = AgZCIfhXYDbRrKoCXsjDQGi74238250;     AgZCIfhXYDbRrKoCXsjDQGi74238250 = AgZCIfhXYDbRrKoCXsjDQGi6481734;     AgZCIfhXYDbRrKoCXsjDQGi6481734 = AgZCIfhXYDbRrKoCXsjDQGi95445785;     AgZCIfhXYDbRrKoCXsjDQGi95445785 = AgZCIfhXYDbRrKoCXsjDQGi39980446;     AgZCIfhXYDbRrKoCXsjDQGi39980446 = AgZCIfhXYDbRrKoCXsjDQGi23872267;     AgZCIfhXYDbRrKoCXsjDQGi23872267 = AgZCIfhXYDbRrKoCXsjDQGi91036957;     AgZCIfhXYDbRrKoCXsjDQGi91036957 = AgZCIfhXYDbRrKoCXsjDQGi70370633;     AgZCIfhXYDbRrKoCXsjDQGi70370633 = AgZCIfhXYDbRrKoCXsjDQGi37935076;     AgZCIfhXYDbRrKoCXsjDQGi37935076 = AgZCIfhXYDbRrKoCXsjDQGi58573750;     AgZCIfhXYDbRrKoCXsjDQGi58573750 = AgZCIfhXYDbRrKoCXsjDQGi66636140;     AgZCIfhXYDbRrKoCXsjDQGi66636140 = AgZCIfhXYDbRrKoCXsjDQGi94080331;     AgZCIfhXYDbRrKoCXsjDQGi94080331 = AgZCIfhXYDbRrKoCXsjDQGi50810000;     AgZCIfhXYDbRrKoCXsjDQGi50810000 = AgZCIfhXYDbRrKoCXsjDQGi16368290;     AgZCIfhXYDbRrKoCXsjDQGi16368290 = AgZCIfhXYDbRrKoCXsjDQGi12731617;     AgZCIfhXYDbRrKoCXsjDQGi12731617 = AgZCIfhXYDbRrKoCXsjDQGi96591937;     AgZCIfhXYDbRrKoCXsjDQGi96591937 = AgZCIfhXYDbRrKoCXsjDQGi74255385;     AgZCIfhXYDbRrKoCXsjDQGi74255385 = AgZCIfhXYDbRrKoCXsjDQGi91171028;     AgZCIfhXYDbRrKoCXsjDQGi91171028 = AgZCIfhXYDbRrKoCXsjDQGi77288619;     AgZCIfhXYDbRrKoCXsjDQGi77288619 = AgZCIfhXYDbRrKoCXsjDQGi1292125;     AgZCIfhXYDbRrKoCXsjDQGi1292125 = AgZCIfhXYDbRrKoCXsjDQGi25949956;     AgZCIfhXYDbRrKoCXsjDQGi25949956 = AgZCIfhXYDbRrKoCXsjDQGi6101231;     AgZCIfhXYDbRrKoCXsjDQGi6101231 = AgZCIfhXYDbRrKoCXsjDQGi31188455;     AgZCIfhXYDbRrKoCXsjDQGi31188455 = AgZCIfhXYDbRrKoCXsjDQGi93334114;     AgZCIfhXYDbRrKoCXsjDQGi93334114 = AgZCIfhXYDbRrKoCXsjDQGi16689156;     AgZCIfhXYDbRrKoCXsjDQGi16689156 = AgZCIfhXYDbRrKoCXsjDQGi6966013;     AgZCIfhXYDbRrKoCXsjDQGi6966013 = AgZCIfhXYDbRrKoCXsjDQGi82667367;     AgZCIfhXYDbRrKoCXsjDQGi82667367 = AgZCIfhXYDbRrKoCXsjDQGi96014022;     AgZCIfhXYDbRrKoCXsjDQGi96014022 = AgZCIfhXYDbRrKoCXsjDQGi46404842;     AgZCIfhXYDbRrKoCXsjDQGi46404842 = AgZCIfhXYDbRrKoCXsjDQGi54358983;     AgZCIfhXYDbRrKoCXsjDQGi54358983 = AgZCIfhXYDbRrKoCXsjDQGi70316767;     AgZCIfhXYDbRrKoCXsjDQGi70316767 = AgZCIfhXYDbRrKoCXsjDQGi36263714;     AgZCIfhXYDbRrKoCXsjDQGi36263714 = AgZCIfhXYDbRrKoCXsjDQGi96438533;     AgZCIfhXYDbRrKoCXsjDQGi96438533 = AgZCIfhXYDbRrKoCXsjDQGi42731942;     AgZCIfhXYDbRrKoCXsjDQGi42731942 = AgZCIfhXYDbRrKoCXsjDQGi84828362;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void XnVILbVaKwFhzQzFnwIWnMjayHPEAvzQiDGwARxGx92386568() {     long fzsrkroRoHPVyQLEvKEMRaP7221952 = -763373001;    long fzsrkroRoHPVyQLEvKEMRaP16710320 = -356555873;    long fzsrkroRoHPVyQLEvKEMRaP61893804 = -662326408;    long fzsrkroRoHPVyQLEvKEMRaP38244309 = -347957179;    long fzsrkroRoHPVyQLEvKEMRaP21609257 = -36628498;    long fzsrkroRoHPVyQLEvKEMRaP14781519 = 12253497;    long fzsrkroRoHPVyQLEvKEMRaP53048061 = -655872635;    long fzsrkroRoHPVyQLEvKEMRaP22539969 = 7345842;    long fzsrkroRoHPVyQLEvKEMRaP41735215 = -698590379;    long fzsrkroRoHPVyQLEvKEMRaP28418491 = -130220031;    long fzsrkroRoHPVyQLEvKEMRaP31332582 = 16827808;    long fzsrkroRoHPVyQLEvKEMRaP67911091 = -554612120;    long fzsrkroRoHPVyQLEvKEMRaP87857032 = -128048051;    long fzsrkroRoHPVyQLEvKEMRaP51038895 = -782611653;    long fzsrkroRoHPVyQLEvKEMRaP85110696 = -855847087;    long fzsrkroRoHPVyQLEvKEMRaP994260 = -183650224;    long fzsrkroRoHPVyQLEvKEMRaP53237067 = -255260666;    long fzsrkroRoHPVyQLEvKEMRaP65387369 = -8970021;    long fzsrkroRoHPVyQLEvKEMRaP12877289 = -53058742;    long fzsrkroRoHPVyQLEvKEMRaP82301473 = -665782855;    long fzsrkroRoHPVyQLEvKEMRaP36338960 = -944537502;    long fzsrkroRoHPVyQLEvKEMRaP7894800 = -628948931;    long fzsrkroRoHPVyQLEvKEMRaP55937475 = -243575001;    long fzsrkroRoHPVyQLEvKEMRaP32930980 = -438448525;    long fzsrkroRoHPVyQLEvKEMRaP62688198 = -428542336;    long fzsrkroRoHPVyQLEvKEMRaP8643517 = -72529530;    long fzsrkroRoHPVyQLEvKEMRaP36323220 = -3532891;    long fzsrkroRoHPVyQLEvKEMRaP16382690 = -234235184;    long fzsrkroRoHPVyQLEvKEMRaP24099514 = -434563093;    long fzsrkroRoHPVyQLEvKEMRaP40903565 = -325527472;    long fzsrkroRoHPVyQLEvKEMRaP45168863 = -823396106;    long fzsrkroRoHPVyQLEvKEMRaP30389302 = -926152909;    long fzsrkroRoHPVyQLEvKEMRaP82527971 = -253339504;    long fzsrkroRoHPVyQLEvKEMRaP37569366 = -258586480;    long fzsrkroRoHPVyQLEvKEMRaP49657957 = -622898130;    long fzsrkroRoHPVyQLEvKEMRaP96966421 = -544973901;    long fzsrkroRoHPVyQLEvKEMRaP72820793 = -190982089;    long fzsrkroRoHPVyQLEvKEMRaP19102630 = -893463074;    long fzsrkroRoHPVyQLEvKEMRaP4369063 = -771556483;    long fzsrkroRoHPVyQLEvKEMRaP69966116 = -750046598;    long fzsrkroRoHPVyQLEvKEMRaP78825580 = -762598606;    long fzsrkroRoHPVyQLEvKEMRaP59362257 = -952432261;    long fzsrkroRoHPVyQLEvKEMRaP1006540 = -733246381;    long fzsrkroRoHPVyQLEvKEMRaP35654438 = -973040637;    long fzsrkroRoHPVyQLEvKEMRaP83236515 = -363188958;    long fzsrkroRoHPVyQLEvKEMRaP6894665 = 52741473;    long fzsrkroRoHPVyQLEvKEMRaP8782588 = -289514287;    long fzsrkroRoHPVyQLEvKEMRaP32078538 = -738376644;    long fzsrkroRoHPVyQLEvKEMRaP47420894 = -138716360;    long fzsrkroRoHPVyQLEvKEMRaP15752695 = -809763783;    long fzsrkroRoHPVyQLEvKEMRaP26157483 = -180977038;    long fzsrkroRoHPVyQLEvKEMRaP92302612 = -220890149;    long fzsrkroRoHPVyQLEvKEMRaP34488068 = -845017487;    long fzsrkroRoHPVyQLEvKEMRaP30876768 = -757764235;    long fzsrkroRoHPVyQLEvKEMRaP56047609 = -150236909;    long fzsrkroRoHPVyQLEvKEMRaP99327151 = -34424071;    long fzsrkroRoHPVyQLEvKEMRaP60772844 = -12980873;    long fzsrkroRoHPVyQLEvKEMRaP28962824 = -123877884;    long fzsrkroRoHPVyQLEvKEMRaP75556110 = -919414844;    long fzsrkroRoHPVyQLEvKEMRaP12965740 = -964098968;    long fzsrkroRoHPVyQLEvKEMRaP78458298 = -984213613;    long fzsrkroRoHPVyQLEvKEMRaP36665371 = -321637451;    long fzsrkroRoHPVyQLEvKEMRaP98440454 = -558091066;    long fzsrkroRoHPVyQLEvKEMRaP831651 = -273062908;    long fzsrkroRoHPVyQLEvKEMRaP83249627 = -306823926;    long fzsrkroRoHPVyQLEvKEMRaP943281 = -57019283;    long fzsrkroRoHPVyQLEvKEMRaP85383119 = -201272617;    long fzsrkroRoHPVyQLEvKEMRaP50287667 = -869461572;    long fzsrkroRoHPVyQLEvKEMRaP1380939 = -59713524;    long fzsrkroRoHPVyQLEvKEMRaP88144274 = -210873187;    long fzsrkroRoHPVyQLEvKEMRaP28173467 = -992668136;    long fzsrkroRoHPVyQLEvKEMRaP34134438 = -361797592;    long fzsrkroRoHPVyQLEvKEMRaP61018306 = -237413538;    long fzsrkroRoHPVyQLEvKEMRaP42911173 = -303012145;    long fzsrkroRoHPVyQLEvKEMRaP3475894 = -903184249;    long fzsrkroRoHPVyQLEvKEMRaP76976702 = -992105241;    long fzsrkroRoHPVyQLEvKEMRaP6888261 = -895702550;    long fzsrkroRoHPVyQLEvKEMRaP20283037 = -270534365;    long fzsrkroRoHPVyQLEvKEMRaP49694465 = 24740433;    long fzsrkroRoHPVyQLEvKEMRaP55793534 = -381283810;    long fzsrkroRoHPVyQLEvKEMRaP99860929 = -783015243;    long fzsrkroRoHPVyQLEvKEMRaP4244683 = -265156248;    long fzsrkroRoHPVyQLEvKEMRaP68961795 = 4481176;    long fzsrkroRoHPVyQLEvKEMRaP8346820 = -624799311;    long fzsrkroRoHPVyQLEvKEMRaP14746082 = -44550434;    long fzsrkroRoHPVyQLEvKEMRaP52866251 = -502505958;    long fzsrkroRoHPVyQLEvKEMRaP95901234 = 18864577;    long fzsrkroRoHPVyQLEvKEMRaP51651204 = -495575270;    long fzsrkroRoHPVyQLEvKEMRaP81521757 = -8349572;    long fzsrkroRoHPVyQLEvKEMRaP50330805 = -488474059;    long fzsrkroRoHPVyQLEvKEMRaP36193578 = -431993028;    long fzsrkroRoHPVyQLEvKEMRaP43857969 = 32895794;    long fzsrkroRoHPVyQLEvKEMRaP43546519 = -974048230;    long fzsrkroRoHPVyQLEvKEMRaP91403323 = -807457515;    long fzsrkroRoHPVyQLEvKEMRaP91507817 = -765832985;    long fzsrkroRoHPVyQLEvKEMRaP42160209 = -340961156;    long fzsrkroRoHPVyQLEvKEMRaP60921803 = -294341196;    long fzsrkroRoHPVyQLEvKEMRaP174889 = -360183473;    long fzsrkroRoHPVyQLEvKEMRaP52404810 = -566216711;    long fzsrkroRoHPVyQLEvKEMRaP82293235 = -763373001;     fzsrkroRoHPVyQLEvKEMRaP7221952 = fzsrkroRoHPVyQLEvKEMRaP16710320;     fzsrkroRoHPVyQLEvKEMRaP16710320 = fzsrkroRoHPVyQLEvKEMRaP61893804;     fzsrkroRoHPVyQLEvKEMRaP61893804 = fzsrkroRoHPVyQLEvKEMRaP38244309;     fzsrkroRoHPVyQLEvKEMRaP38244309 = fzsrkroRoHPVyQLEvKEMRaP21609257;     fzsrkroRoHPVyQLEvKEMRaP21609257 = fzsrkroRoHPVyQLEvKEMRaP14781519;     fzsrkroRoHPVyQLEvKEMRaP14781519 = fzsrkroRoHPVyQLEvKEMRaP53048061;     fzsrkroRoHPVyQLEvKEMRaP53048061 = fzsrkroRoHPVyQLEvKEMRaP22539969;     fzsrkroRoHPVyQLEvKEMRaP22539969 = fzsrkroRoHPVyQLEvKEMRaP41735215;     fzsrkroRoHPVyQLEvKEMRaP41735215 = fzsrkroRoHPVyQLEvKEMRaP28418491;     fzsrkroRoHPVyQLEvKEMRaP28418491 = fzsrkroRoHPVyQLEvKEMRaP31332582;     fzsrkroRoHPVyQLEvKEMRaP31332582 = fzsrkroRoHPVyQLEvKEMRaP67911091;     fzsrkroRoHPVyQLEvKEMRaP67911091 = fzsrkroRoHPVyQLEvKEMRaP87857032;     fzsrkroRoHPVyQLEvKEMRaP87857032 = fzsrkroRoHPVyQLEvKEMRaP51038895;     fzsrkroRoHPVyQLEvKEMRaP51038895 = fzsrkroRoHPVyQLEvKEMRaP85110696;     fzsrkroRoHPVyQLEvKEMRaP85110696 = fzsrkroRoHPVyQLEvKEMRaP994260;     fzsrkroRoHPVyQLEvKEMRaP994260 = fzsrkroRoHPVyQLEvKEMRaP53237067;     fzsrkroRoHPVyQLEvKEMRaP53237067 = fzsrkroRoHPVyQLEvKEMRaP65387369;     fzsrkroRoHPVyQLEvKEMRaP65387369 = fzsrkroRoHPVyQLEvKEMRaP12877289;     fzsrkroRoHPVyQLEvKEMRaP12877289 = fzsrkroRoHPVyQLEvKEMRaP82301473;     fzsrkroRoHPVyQLEvKEMRaP82301473 = fzsrkroRoHPVyQLEvKEMRaP36338960;     fzsrkroRoHPVyQLEvKEMRaP36338960 = fzsrkroRoHPVyQLEvKEMRaP7894800;     fzsrkroRoHPVyQLEvKEMRaP7894800 = fzsrkroRoHPVyQLEvKEMRaP55937475;     fzsrkroRoHPVyQLEvKEMRaP55937475 = fzsrkroRoHPVyQLEvKEMRaP32930980;     fzsrkroRoHPVyQLEvKEMRaP32930980 = fzsrkroRoHPVyQLEvKEMRaP62688198;     fzsrkroRoHPVyQLEvKEMRaP62688198 = fzsrkroRoHPVyQLEvKEMRaP8643517;     fzsrkroRoHPVyQLEvKEMRaP8643517 = fzsrkroRoHPVyQLEvKEMRaP36323220;     fzsrkroRoHPVyQLEvKEMRaP36323220 = fzsrkroRoHPVyQLEvKEMRaP16382690;     fzsrkroRoHPVyQLEvKEMRaP16382690 = fzsrkroRoHPVyQLEvKEMRaP24099514;     fzsrkroRoHPVyQLEvKEMRaP24099514 = fzsrkroRoHPVyQLEvKEMRaP40903565;     fzsrkroRoHPVyQLEvKEMRaP40903565 = fzsrkroRoHPVyQLEvKEMRaP45168863;     fzsrkroRoHPVyQLEvKEMRaP45168863 = fzsrkroRoHPVyQLEvKEMRaP30389302;     fzsrkroRoHPVyQLEvKEMRaP30389302 = fzsrkroRoHPVyQLEvKEMRaP82527971;     fzsrkroRoHPVyQLEvKEMRaP82527971 = fzsrkroRoHPVyQLEvKEMRaP37569366;     fzsrkroRoHPVyQLEvKEMRaP37569366 = fzsrkroRoHPVyQLEvKEMRaP49657957;     fzsrkroRoHPVyQLEvKEMRaP49657957 = fzsrkroRoHPVyQLEvKEMRaP96966421;     fzsrkroRoHPVyQLEvKEMRaP96966421 = fzsrkroRoHPVyQLEvKEMRaP72820793;     fzsrkroRoHPVyQLEvKEMRaP72820793 = fzsrkroRoHPVyQLEvKEMRaP19102630;     fzsrkroRoHPVyQLEvKEMRaP19102630 = fzsrkroRoHPVyQLEvKEMRaP4369063;     fzsrkroRoHPVyQLEvKEMRaP4369063 = fzsrkroRoHPVyQLEvKEMRaP69966116;     fzsrkroRoHPVyQLEvKEMRaP69966116 = fzsrkroRoHPVyQLEvKEMRaP78825580;     fzsrkroRoHPVyQLEvKEMRaP78825580 = fzsrkroRoHPVyQLEvKEMRaP59362257;     fzsrkroRoHPVyQLEvKEMRaP59362257 = fzsrkroRoHPVyQLEvKEMRaP1006540;     fzsrkroRoHPVyQLEvKEMRaP1006540 = fzsrkroRoHPVyQLEvKEMRaP35654438;     fzsrkroRoHPVyQLEvKEMRaP35654438 = fzsrkroRoHPVyQLEvKEMRaP83236515;     fzsrkroRoHPVyQLEvKEMRaP83236515 = fzsrkroRoHPVyQLEvKEMRaP6894665;     fzsrkroRoHPVyQLEvKEMRaP6894665 = fzsrkroRoHPVyQLEvKEMRaP8782588;     fzsrkroRoHPVyQLEvKEMRaP8782588 = fzsrkroRoHPVyQLEvKEMRaP32078538;     fzsrkroRoHPVyQLEvKEMRaP32078538 = fzsrkroRoHPVyQLEvKEMRaP47420894;     fzsrkroRoHPVyQLEvKEMRaP47420894 = fzsrkroRoHPVyQLEvKEMRaP15752695;     fzsrkroRoHPVyQLEvKEMRaP15752695 = fzsrkroRoHPVyQLEvKEMRaP26157483;     fzsrkroRoHPVyQLEvKEMRaP26157483 = fzsrkroRoHPVyQLEvKEMRaP92302612;     fzsrkroRoHPVyQLEvKEMRaP92302612 = fzsrkroRoHPVyQLEvKEMRaP34488068;     fzsrkroRoHPVyQLEvKEMRaP34488068 = fzsrkroRoHPVyQLEvKEMRaP30876768;     fzsrkroRoHPVyQLEvKEMRaP30876768 = fzsrkroRoHPVyQLEvKEMRaP56047609;     fzsrkroRoHPVyQLEvKEMRaP56047609 = fzsrkroRoHPVyQLEvKEMRaP99327151;     fzsrkroRoHPVyQLEvKEMRaP99327151 = fzsrkroRoHPVyQLEvKEMRaP60772844;     fzsrkroRoHPVyQLEvKEMRaP60772844 = fzsrkroRoHPVyQLEvKEMRaP28962824;     fzsrkroRoHPVyQLEvKEMRaP28962824 = fzsrkroRoHPVyQLEvKEMRaP75556110;     fzsrkroRoHPVyQLEvKEMRaP75556110 = fzsrkroRoHPVyQLEvKEMRaP12965740;     fzsrkroRoHPVyQLEvKEMRaP12965740 = fzsrkroRoHPVyQLEvKEMRaP78458298;     fzsrkroRoHPVyQLEvKEMRaP78458298 = fzsrkroRoHPVyQLEvKEMRaP36665371;     fzsrkroRoHPVyQLEvKEMRaP36665371 = fzsrkroRoHPVyQLEvKEMRaP98440454;     fzsrkroRoHPVyQLEvKEMRaP98440454 = fzsrkroRoHPVyQLEvKEMRaP831651;     fzsrkroRoHPVyQLEvKEMRaP831651 = fzsrkroRoHPVyQLEvKEMRaP83249627;     fzsrkroRoHPVyQLEvKEMRaP83249627 = fzsrkroRoHPVyQLEvKEMRaP943281;     fzsrkroRoHPVyQLEvKEMRaP943281 = fzsrkroRoHPVyQLEvKEMRaP85383119;     fzsrkroRoHPVyQLEvKEMRaP85383119 = fzsrkroRoHPVyQLEvKEMRaP50287667;     fzsrkroRoHPVyQLEvKEMRaP50287667 = fzsrkroRoHPVyQLEvKEMRaP1380939;     fzsrkroRoHPVyQLEvKEMRaP1380939 = fzsrkroRoHPVyQLEvKEMRaP88144274;     fzsrkroRoHPVyQLEvKEMRaP88144274 = fzsrkroRoHPVyQLEvKEMRaP28173467;     fzsrkroRoHPVyQLEvKEMRaP28173467 = fzsrkroRoHPVyQLEvKEMRaP34134438;     fzsrkroRoHPVyQLEvKEMRaP34134438 = fzsrkroRoHPVyQLEvKEMRaP61018306;     fzsrkroRoHPVyQLEvKEMRaP61018306 = fzsrkroRoHPVyQLEvKEMRaP42911173;     fzsrkroRoHPVyQLEvKEMRaP42911173 = fzsrkroRoHPVyQLEvKEMRaP3475894;     fzsrkroRoHPVyQLEvKEMRaP3475894 = fzsrkroRoHPVyQLEvKEMRaP76976702;     fzsrkroRoHPVyQLEvKEMRaP76976702 = fzsrkroRoHPVyQLEvKEMRaP6888261;     fzsrkroRoHPVyQLEvKEMRaP6888261 = fzsrkroRoHPVyQLEvKEMRaP20283037;     fzsrkroRoHPVyQLEvKEMRaP20283037 = fzsrkroRoHPVyQLEvKEMRaP49694465;     fzsrkroRoHPVyQLEvKEMRaP49694465 = fzsrkroRoHPVyQLEvKEMRaP55793534;     fzsrkroRoHPVyQLEvKEMRaP55793534 = fzsrkroRoHPVyQLEvKEMRaP99860929;     fzsrkroRoHPVyQLEvKEMRaP99860929 = fzsrkroRoHPVyQLEvKEMRaP4244683;     fzsrkroRoHPVyQLEvKEMRaP4244683 = fzsrkroRoHPVyQLEvKEMRaP68961795;     fzsrkroRoHPVyQLEvKEMRaP68961795 = fzsrkroRoHPVyQLEvKEMRaP8346820;     fzsrkroRoHPVyQLEvKEMRaP8346820 = fzsrkroRoHPVyQLEvKEMRaP14746082;     fzsrkroRoHPVyQLEvKEMRaP14746082 = fzsrkroRoHPVyQLEvKEMRaP52866251;     fzsrkroRoHPVyQLEvKEMRaP52866251 = fzsrkroRoHPVyQLEvKEMRaP95901234;     fzsrkroRoHPVyQLEvKEMRaP95901234 = fzsrkroRoHPVyQLEvKEMRaP51651204;     fzsrkroRoHPVyQLEvKEMRaP51651204 = fzsrkroRoHPVyQLEvKEMRaP81521757;     fzsrkroRoHPVyQLEvKEMRaP81521757 = fzsrkroRoHPVyQLEvKEMRaP50330805;     fzsrkroRoHPVyQLEvKEMRaP50330805 = fzsrkroRoHPVyQLEvKEMRaP36193578;     fzsrkroRoHPVyQLEvKEMRaP36193578 = fzsrkroRoHPVyQLEvKEMRaP43857969;     fzsrkroRoHPVyQLEvKEMRaP43857969 = fzsrkroRoHPVyQLEvKEMRaP43546519;     fzsrkroRoHPVyQLEvKEMRaP43546519 = fzsrkroRoHPVyQLEvKEMRaP91403323;     fzsrkroRoHPVyQLEvKEMRaP91403323 = fzsrkroRoHPVyQLEvKEMRaP91507817;     fzsrkroRoHPVyQLEvKEMRaP91507817 = fzsrkroRoHPVyQLEvKEMRaP42160209;     fzsrkroRoHPVyQLEvKEMRaP42160209 = fzsrkroRoHPVyQLEvKEMRaP60921803;     fzsrkroRoHPVyQLEvKEMRaP60921803 = fzsrkroRoHPVyQLEvKEMRaP174889;     fzsrkroRoHPVyQLEvKEMRaP174889 = fzsrkroRoHPVyQLEvKEMRaP52404810;     fzsrkroRoHPVyQLEvKEMRaP52404810 = fzsrkroRoHPVyQLEvKEMRaP82293235;     fzsrkroRoHPVyQLEvKEMRaP82293235 = fzsrkroRoHPVyQLEvKEMRaP7221952;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void hBZmyQAValWeKRZjmrzbYAoSuYZQauDUgOacdxsTO74615330() {     long ifCHbhrYdatyvChNHrZrjvg58957402 = -879627834;    long ifCHbhrYdatyvChNHrZrjvg32384302 = -433455629;    long ifCHbhrYdatyvChNHrZrjvg10694164 = -459685792;    long ifCHbhrYdatyvChNHrZrjvg13319711 = -164226322;    long ifCHbhrYdatyvChNHrZrjvg98333189 = -844279152;    long ifCHbhrYdatyvChNHrZrjvg39664873 = -146773730;    long ifCHbhrYdatyvChNHrZrjvg26824904 = -479084231;    long ifCHbhrYdatyvChNHrZrjvg41331447 = -116433713;    long ifCHbhrYdatyvChNHrZrjvg93033292 = -489439090;    long ifCHbhrYdatyvChNHrZrjvg97215614 = -671866014;    long ifCHbhrYdatyvChNHrZrjvg26625281 = 55105336;    long ifCHbhrYdatyvChNHrZrjvg78267468 = -489593621;    long ifCHbhrYdatyvChNHrZrjvg75037826 = -837228313;    long ifCHbhrYdatyvChNHrZrjvg9806614 = -409292200;    long ifCHbhrYdatyvChNHrZrjvg39125954 = -333574797;    long ifCHbhrYdatyvChNHrZrjvg12721532 = -995334180;    long ifCHbhrYdatyvChNHrZrjvg9207592 = -623355355;    long ifCHbhrYdatyvChNHrZrjvg51070291 = -471546516;    long ifCHbhrYdatyvChNHrZrjvg72451138 = -580972926;    long ifCHbhrYdatyvChNHrZrjvg2031048 = -376051004;    long ifCHbhrYdatyvChNHrZrjvg82086312 = 72654330;    long ifCHbhrYdatyvChNHrZrjvg10314253 = -802429938;    long ifCHbhrYdatyvChNHrZrjvg57286989 = -951812448;    long ifCHbhrYdatyvChNHrZrjvg25581231 = -310040476;    long ifCHbhrYdatyvChNHrZrjvg34104057 = -374196773;    long ifCHbhrYdatyvChNHrZrjvg66348931 = -418139309;    long ifCHbhrYdatyvChNHrZrjvg75151855 = -465941608;    long ifCHbhrYdatyvChNHrZrjvg14511915 = -617565870;    long ifCHbhrYdatyvChNHrZrjvg98849587 = -484461995;    long ifCHbhrYdatyvChNHrZrjvg10888649 = -787428268;    long ifCHbhrYdatyvChNHrZrjvg82387672 = -56278573;    long ifCHbhrYdatyvChNHrZrjvg43419032 = -149927101;    long ifCHbhrYdatyvChNHrZrjvg80621281 = -835721390;    long ifCHbhrYdatyvChNHrZrjvg31593079 = 80816354;    long ifCHbhrYdatyvChNHrZrjvg47863085 = -839707773;    long ifCHbhrYdatyvChNHrZrjvg78666032 = -781142729;    long ifCHbhrYdatyvChNHrZrjvg22469020 = -835336833;    long ifCHbhrYdatyvChNHrZrjvg19936242 = -976975438;    long ifCHbhrYdatyvChNHrZrjvg74143905 = -116873878;    long ifCHbhrYdatyvChNHrZrjvg95048532 = -268662265;    long ifCHbhrYdatyvChNHrZrjvg47509667 = -881757394;    long ifCHbhrYdatyvChNHrZrjvg19387658 = -940951883;    long ifCHbhrYdatyvChNHrZrjvg57589771 = -634022912;    long ifCHbhrYdatyvChNHrZrjvg28590257 = -898429314;    long ifCHbhrYdatyvChNHrZrjvg55265723 = -963686041;    long ifCHbhrYdatyvChNHrZrjvg8589112 = -371150468;    long ifCHbhrYdatyvChNHrZrjvg94948781 = -751854741;    long ifCHbhrYdatyvChNHrZrjvg11063003 = -42781339;    long ifCHbhrYdatyvChNHrZrjvg36439347 = -102669089;    long ifCHbhrYdatyvChNHrZrjvg4408954 = -668775163;    long ifCHbhrYdatyvChNHrZrjvg66837375 = -989481194;    long ifCHbhrYdatyvChNHrZrjvg24282365 = -682489709;    long ifCHbhrYdatyvChNHrZrjvg57726814 = -589130675;    long ifCHbhrYdatyvChNHrZrjvg936009 = -372563547;    long ifCHbhrYdatyvChNHrZrjvg92529017 = -180000110;    long ifCHbhrYdatyvChNHrZrjvg48643149 = 22802104;    long ifCHbhrYdatyvChNHrZrjvg75097313 = -481643181;    long ifCHbhrYdatyvChNHrZrjvg85112933 = -49645317;    long ifCHbhrYdatyvChNHrZrjvg79215654 = -790029549;    long ifCHbhrYdatyvChNHrZrjvg31984259 = -326139843;    long ifCHbhrYdatyvChNHrZrjvg64513018 = -680832122;    long ifCHbhrYdatyvChNHrZrjvg12312990 = -861518361;    long ifCHbhrYdatyvChNHrZrjvg42481860 = -631971718;    long ifCHbhrYdatyvChNHrZrjvg82144643 = -702010823;    long ifCHbhrYdatyvChNHrZrjvg14827943 = -515587442;    long ifCHbhrYdatyvChNHrZrjvg83206248 = -794967563;    long ifCHbhrYdatyvChNHrZrjvg97646187 = -653872231;    long ifCHbhrYdatyvChNHrZrjvg43444748 = -818044668;    long ifCHbhrYdatyvChNHrZrjvg61943529 = -569584428;    long ifCHbhrYdatyvChNHrZrjvg60459922 = -552432068;    long ifCHbhrYdatyvChNHrZrjvg90252512 = -59997347;    long ifCHbhrYdatyvChNHrZrjvg89271350 = -646379918;    long ifCHbhrYdatyvChNHrZrjvg76926386 = -254672638;    long ifCHbhrYdatyvChNHrZrjvg77402605 = -212310662;    long ifCHbhrYdatyvChNHrZrjvg54521380 = -494293611;    long ifCHbhrYdatyvChNHrZrjvg62698655 = 13606212;    long ifCHbhrYdatyvChNHrZrjvg52724482 = -68407026;    long ifCHbhrYdatyvChNHrZrjvg28696733 = 46616865;    long ifCHbhrYdatyvChNHrZrjvg70315507 = -346354435;    long ifCHbhrYdatyvChNHrZrjvg25514945 = 96953694;    long ifCHbhrYdatyvChNHrZrjvg71400149 = -666284569;    long ifCHbhrYdatyvChNHrZrjvg64088852 = -323160270;    long ifCHbhrYdatyvChNHrZrjvg78072567 = -414896781;    long ifCHbhrYdatyvChNHrZrjvg94440633 = -815686833;    long ifCHbhrYdatyvChNHrZrjvg44051273 = -797947075;    long ifCHbhrYdatyvChNHrZrjvg58105307 = -373788864;    long ifCHbhrYdatyvChNHrZrjvg85692218 = -560796427;    long ifCHbhrYdatyvChNHrZrjvg79685272 = -363157844;    long ifCHbhrYdatyvChNHrZrjvg39064061 = -739183537;    long ifCHbhrYdatyvChNHrZrjvg99219936 = -762509877;    long ifCHbhrYdatyvChNHrZrjvg3568720 = -199499549;    long ifCHbhrYdatyvChNHrZrjvg37356086 = -685691516;    long ifCHbhrYdatyvChNHrZrjvg40720588 = -86945889;    long ifCHbhrYdatyvChNHrZrjvg42159647 = -790734036;    long ifCHbhrYdatyvChNHrZrjvg30535515 = -587830143;    long ifCHbhrYdatyvChNHrZrjvg35196678 = 79760967;    long ifCHbhrYdatyvChNHrZrjvg76905798 = -208980166;    long ifCHbhrYdatyvChNHrZrjvg75445127 = -932012090;    long ifCHbhrYdatyvChNHrZrjvg13762314 = -282841873;    long ifCHbhrYdatyvChNHrZrjvg72059474 = -879627834;     ifCHbhrYdatyvChNHrZrjvg58957402 = ifCHbhrYdatyvChNHrZrjvg32384302;     ifCHbhrYdatyvChNHrZrjvg32384302 = ifCHbhrYdatyvChNHrZrjvg10694164;     ifCHbhrYdatyvChNHrZrjvg10694164 = ifCHbhrYdatyvChNHrZrjvg13319711;     ifCHbhrYdatyvChNHrZrjvg13319711 = ifCHbhrYdatyvChNHrZrjvg98333189;     ifCHbhrYdatyvChNHrZrjvg98333189 = ifCHbhrYdatyvChNHrZrjvg39664873;     ifCHbhrYdatyvChNHrZrjvg39664873 = ifCHbhrYdatyvChNHrZrjvg26824904;     ifCHbhrYdatyvChNHrZrjvg26824904 = ifCHbhrYdatyvChNHrZrjvg41331447;     ifCHbhrYdatyvChNHrZrjvg41331447 = ifCHbhrYdatyvChNHrZrjvg93033292;     ifCHbhrYdatyvChNHrZrjvg93033292 = ifCHbhrYdatyvChNHrZrjvg97215614;     ifCHbhrYdatyvChNHrZrjvg97215614 = ifCHbhrYdatyvChNHrZrjvg26625281;     ifCHbhrYdatyvChNHrZrjvg26625281 = ifCHbhrYdatyvChNHrZrjvg78267468;     ifCHbhrYdatyvChNHrZrjvg78267468 = ifCHbhrYdatyvChNHrZrjvg75037826;     ifCHbhrYdatyvChNHrZrjvg75037826 = ifCHbhrYdatyvChNHrZrjvg9806614;     ifCHbhrYdatyvChNHrZrjvg9806614 = ifCHbhrYdatyvChNHrZrjvg39125954;     ifCHbhrYdatyvChNHrZrjvg39125954 = ifCHbhrYdatyvChNHrZrjvg12721532;     ifCHbhrYdatyvChNHrZrjvg12721532 = ifCHbhrYdatyvChNHrZrjvg9207592;     ifCHbhrYdatyvChNHrZrjvg9207592 = ifCHbhrYdatyvChNHrZrjvg51070291;     ifCHbhrYdatyvChNHrZrjvg51070291 = ifCHbhrYdatyvChNHrZrjvg72451138;     ifCHbhrYdatyvChNHrZrjvg72451138 = ifCHbhrYdatyvChNHrZrjvg2031048;     ifCHbhrYdatyvChNHrZrjvg2031048 = ifCHbhrYdatyvChNHrZrjvg82086312;     ifCHbhrYdatyvChNHrZrjvg82086312 = ifCHbhrYdatyvChNHrZrjvg10314253;     ifCHbhrYdatyvChNHrZrjvg10314253 = ifCHbhrYdatyvChNHrZrjvg57286989;     ifCHbhrYdatyvChNHrZrjvg57286989 = ifCHbhrYdatyvChNHrZrjvg25581231;     ifCHbhrYdatyvChNHrZrjvg25581231 = ifCHbhrYdatyvChNHrZrjvg34104057;     ifCHbhrYdatyvChNHrZrjvg34104057 = ifCHbhrYdatyvChNHrZrjvg66348931;     ifCHbhrYdatyvChNHrZrjvg66348931 = ifCHbhrYdatyvChNHrZrjvg75151855;     ifCHbhrYdatyvChNHrZrjvg75151855 = ifCHbhrYdatyvChNHrZrjvg14511915;     ifCHbhrYdatyvChNHrZrjvg14511915 = ifCHbhrYdatyvChNHrZrjvg98849587;     ifCHbhrYdatyvChNHrZrjvg98849587 = ifCHbhrYdatyvChNHrZrjvg10888649;     ifCHbhrYdatyvChNHrZrjvg10888649 = ifCHbhrYdatyvChNHrZrjvg82387672;     ifCHbhrYdatyvChNHrZrjvg82387672 = ifCHbhrYdatyvChNHrZrjvg43419032;     ifCHbhrYdatyvChNHrZrjvg43419032 = ifCHbhrYdatyvChNHrZrjvg80621281;     ifCHbhrYdatyvChNHrZrjvg80621281 = ifCHbhrYdatyvChNHrZrjvg31593079;     ifCHbhrYdatyvChNHrZrjvg31593079 = ifCHbhrYdatyvChNHrZrjvg47863085;     ifCHbhrYdatyvChNHrZrjvg47863085 = ifCHbhrYdatyvChNHrZrjvg78666032;     ifCHbhrYdatyvChNHrZrjvg78666032 = ifCHbhrYdatyvChNHrZrjvg22469020;     ifCHbhrYdatyvChNHrZrjvg22469020 = ifCHbhrYdatyvChNHrZrjvg19936242;     ifCHbhrYdatyvChNHrZrjvg19936242 = ifCHbhrYdatyvChNHrZrjvg74143905;     ifCHbhrYdatyvChNHrZrjvg74143905 = ifCHbhrYdatyvChNHrZrjvg95048532;     ifCHbhrYdatyvChNHrZrjvg95048532 = ifCHbhrYdatyvChNHrZrjvg47509667;     ifCHbhrYdatyvChNHrZrjvg47509667 = ifCHbhrYdatyvChNHrZrjvg19387658;     ifCHbhrYdatyvChNHrZrjvg19387658 = ifCHbhrYdatyvChNHrZrjvg57589771;     ifCHbhrYdatyvChNHrZrjvg57589771 = ifCHbhrYdatyvChNHrZrjvg28590257;     ifCHbhrYdatyvChNHrZrjvg28590257 = ifCHbhrYdatyvChNHrZrjvg55265723;     ifCHbhrYdatyvChNHrZrjvg55265723 = ifCHbhrYdatyvChNHrZrjvg8589112;     ifCHbhrYdatyvChNHrZrjvg8589112 = ifCHbhrYdatyvChNHrZrjvg94948781;     ifCHbhrYdatyvChNHrZrjvg94948781 = ifCHbhrYdatyvChNHrZrjvg11063003;     ifCHbhrYdatyvChNHrZrjvg11063003 = ifCHbhrYdatyvChNHrZrjvg36439347;     ifCHbhrYdatyvChNHrZrjvg36439347 = ifCHbhrYdatyvChNHrZrjvg4408954;     ifCHbhrYdatyvChNHrZrjvg4408954 = ifCHbhrYdatyvChNHrZrjvg66837375;     ifCHbhrYdatyvChNHrZrjvg66837375 = ifCHbhrYdatyvChNHrZrjvg24282365;     ifCHbhrYdatyvChNHrZrjvg24282365 = ifCHbhrYdatyvChNHrZrjvg57726814;     ifCHbhrYdatyvChNHrZrjvg57726814 = ifCHbhrYdatyvChNHrZrjvg936009;     ifCHbhrYdatyvChNHrZrjvg936009 = ifCHbhrYdatyvChNHrZrjvg92529017;     ifCHbhrYdatyvChNHrZrjvg92529017 = ifCHbhrYdatyvChNHrZrjvg48643149;     ifCHbhrYdatyvChNHrZrjvg48643149 = ifCHbhrYdatyvChNHrZrjvg75097313;     ifCHbhrYdatyvChNHrZrjvg75097313 = ifCHbhrYdatyvChNHrZrjvg85112933;     ifCHbhrYdatyvChNHrZrjvg85112933 = ifCHbhrYdatyvChNHrZrjvg79215654;     ifCHbhrYdatyvChNHrZrjvg79215654 = ifCHbhrYdatyvChNHrZrjvg31984259;     ifCHbhrYdatyvChNHrZrjvg31984259 = ifCHbhrYdatyvChNHrZrjvg64513018;     ifCHbhrYdatyvChNHrZrjvg64513018 = ifCHbhrYdatyvChNHrZrjvg12312990;     ifCHbhrYdatyvChNHrZrjvg12312990 = ifCHbhrYdatyvChNHrZrjvg42481860;     ifCHbhrYdatyvChNHrZrjvg42481860 = ifCHbhrYdatyvChNHrZrjvg82144643;     ifCHbhrYdatyvChNHrZrjvg82144643 = ifCHbhrYdatyvChNHrZrjvg14827943;     ifCHbhrYdatyvChNHrZrjvg14827943 = ifCHbhrYdatyvChNHrZrjvg83206248;     ifCHbhrYdatyvChNHrZrjvg83206248 = ifCHbhrYdatyvChNHrZrjvg97646187;     ifCHbhrYdatyvChNHrZrjvg97646187 = ifCHbhrYdatyvChNHrZrjvg43444748;     ifCHbhrYdatyvChNHrZrjvg43444748 = ifCHbhrYdatyvChNHrZrjvg61943529;     ifCHbhrYdatyvChNHrZrjvg61943529 = ifCHbhrYdatyvChNHrZrjvg60459922;     ifCHbhrYdatyvChNHrZrjvg60459922 = ifCHbhrYdatyvChNHrZrjvg90252512;     ifCHbhrYdatyvChNHrZrjvg90252512 = ifCHbhrYdatyvChNHrZrjvg89271350;     ifCHbhrYdatyvChNHrZrjvg89271350 = ifCHbhrYdatyvChNHrZrjvg76926386;     ifCHbhrYdatyvChNHrZrjvg76926386 = ifCHbhrYdatyvChNHrZrjvg77402605;     ifCHbhrYdatyvChNHrZrjvg77402605 = ifCHbhrYdatyvChNHrZrjvg54521380;     ifCHbhrYdatyvChNHrZrjvg54521380 = ifCHbhrYdatyvChNHrZrjvg62698655;     ifCHbhrYdatyvChNHrZrjvg62698655 = ifCHbhrYdatyvChNHrZrjvg52724482;     ifCHbhrYdatyvChNHrZrjvg52724482 = ifCHbhrYdatyvChNHrZrjvg28696733;     ifCHbhrYdatyvChNHrZrjvg28696733 = ifCHbhrYdatyvChNHrZrjvg70315507;     ifCHbhrYdatyvChNHrZrjvg70315507 = ifCHbhrYdatyvChNHrZrjvg25514945;     ifCHbhrYdatyvChNHrZrjvg25514945 = ifCHbhrYdatyvChNHrZrjvg71400149;     ifCHbhrYdatyvChNHrZrjvg71400149 = ifCHbhrYdatyvChNHrZrjvg64088852;     ifCHbhrYdatyvChNHrZrjvg64088852 = ifCHbhrYdatyvChNHrZrjvg78072567;     ifCHbhrYdatyvChNHrZrjvg78072567 = ifCHbhrYdatyvChNHrZrjvg94440633;     ifCHbhrYdatyvChNHrZrjvg94440633 = ifCHbhrYdatyvChNHrZrjvg44051273;     ifCHbhrYdatyvChNHrZrjvg44051273 = ifCHbhrYdatyvChNHrZrjvg58105307;     ifCHbhrYdatyvChNHrZrjvg58105307 = ifCHbhrYdatyvChNHrZrjvg85692218;     ifCHbhrYdatyvChNHrZrjvg85692218 = ifCHbhrYdatyvChNHrZrjvg79685272;     ifCHbhrYdatyvChNHrZrjvg79685272 = ifCHbhrYdatyvChNHrZrjvg39064061;     ifCHbhrYdatyvChNHrZrjvg39064061 = ifCHbhrYdatyvChNHrZrjvg99219936;     ifCHbhrYdatyvChNHrZrjvg99219936 = ifCHbhrYdatyvChNHrZrjvg3568720;     ifCHbhrYdatyvChNHrZrjvg3568720 = ifCHbhrYdatyvChNHrZrjvg37356086;     ifCHbhrYdatyvChNHrZrjvg37356086 = ifCHbhrYdatyvChNHrZrjvg40720588;     ifCHbhrYdatyvChNHrZrjvg40720588 = ifCHbhrYdatyvChNHrZrjvg42159647;     ifCHbhrYdatyvChNHrZrjvg42159647 = ifCHbhrYdatyvChNHrZrjvg30535515;     ifCHbhrYdatyvChNHrZrjvg30535515 = ifCHbhrYdatyvChNHrZrjvg35196678;     ifCHbhrYdatyvChNHrZrjvg35196678 = ifCHbhrYdatyvChNHrZrjvg76905798;     ifCHbhrYdatyvChNHrZrjvg76905798 = ifCHbhrYdatyvChNHrZrjvg75445127;     ifCHbhrYdatyvChNHrZrjvg75445127 = ifCHbhrYdatyvChNHrZrjvg13762314;     ifCHbhrYdatyvChNHrZrjvg13762314 = ifCHbhrYdatyvChNHrZrjvg72059474;     ifCHbhrYdatyvChNHrZrjvg72059474 = ifCHbhrYdatyvChNHrZrjvg58957402;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void HHgKUoFAZSfgIoeWAgcCkShavACFGYaUntefoVMjeOirHwQtXwMjEtZpZGOUlAuBsKtOKyhfTtXVkqSzj46277778() {     int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt59840654 = -375992825;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt17667978 = -93385425;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt60916420 = -761237169;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt51757694 = -418466053;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt74627314 = -382487177;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt4355100 = -856777735;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt82309518 = -717694404;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt78876618 = -424722561;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt5427255 = 57078579;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt17771836 = -857332746;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt87220047 = -314921142;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt39761005 = -554838363;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt85079448 = -66627134;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt20485071 = -778389596;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt14804071 = -232383455;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt10944435 = -222663371;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt72506248 = 81021680;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt63826943 = -161894067;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt17379579 = -379424106;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt79705982 = -353253395;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt71992500 = 46109291;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt47336046 = -982382135;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt45562423 = -249188422;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt67135814 = -961481831;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt59437562 = -798878372;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt13394192 = -519840490;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt30567451 = -257776438;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt83696346 = -471612466;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt44615023 = -827946832;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt67930981 = -39780086;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt4977680 = -66098358;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt37016858 = -3293828;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt9225100 = -664452020;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt45554564 = -989831277;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt14744014 = -830096129;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt84312920 = -900666773;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt80537088 = -104435328;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt98675755 = -477810740;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt38512418 = -978741209;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt87763015 = -251339153;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt95513217 = -688316493;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt10676973 = -969151646;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt97111333 = -638801482;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt13926109 = -358705104;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt58207287 = -560445403;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt87263830 = -210880613;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt21944392 = -979051562;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt27446769 = -51698549;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt83357873 = -917544301;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt86544876 = -523607597;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt86850698 = 84878822;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt50978671 = -997536778;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt81914512 = -964810233;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt80290818 = -534295123;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt74285277 = -858064220;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt12504609 = -393610691;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt72105554 = -844197004;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt93780605 = -799755338;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt92320132 = -619587682;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt61233123 = -862646688;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt73787648 = -499001298;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt98613171 = -146081938;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt34261595 = -596775729;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt37496273 = -903141336;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt12794156 = -691234389;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt50203190 = -211627314;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt30535906 = -890386343;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt39524885 = -76795858;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt5741057 = -948293468;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt30491151 = -331716682;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt30407347 = -18228043;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt73830492 = -441167580;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt25314526 = -183152859;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt29616564 = -28084953;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt84192765 = -664936902;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt61315527 = 15260936;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt50224712 = -243580654;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt31636315 = -890483318;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt8928527 = -301036428;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt72173731 = -487997759;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt91449800 = -540788929;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt3120683 = -106077890;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt338474 = -554068166;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt58070147 = -204339235;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt81080283 = -24658908;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt53999009 = -68561580;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt55102345 = -38483596;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt28934282 = -30156897;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt71269286 = -31767058;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt2239406 = -336485439;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt12207366 = 43530231;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt86756482 = -304679991;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt6355624 = -858223059;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt77279295 = -16094522;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt13975367 = -752337856;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt96900045 = -442234556;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt76415378 = -272375917;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt59615060 = -735660146;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt1131953 = -667470716;    int JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt8004098 = -375992825;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt59840654 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt17667978;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt17667978 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt60916420;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt60916420 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt51757694;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt51757694 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt74627314;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt74627314 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt4355100;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt4355100 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt82309518;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt82309518 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt78876618;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt78876618 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt5427255;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt5427255 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt17771836;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt17771836 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt87220047;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt87220047 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt39761005;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt39761005 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt85079448;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt85079448 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt20485071;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt20485071 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt14804071;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt14804071 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt10944435;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt10944435 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt72506248;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt72506248 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt63826943;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt63826943 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt17379579;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt17379579 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt79705982;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt79705982 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt71992500;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt71992500 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt47336046;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt47336046 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt45562423;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt45562423 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt67135814;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt67135814 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt59437562;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt59437562 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt13394192;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt13394192 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt30567451;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt30567451 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt83696346;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt83696346 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt44615023;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt44615023 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt67930981;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt67930981 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt4977680;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt4977680 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt37016858;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt37016858 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt9225100;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt9225100 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt45554564;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt45554564 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt14744014;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt14744014 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt84312920;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt84312920 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt80537088;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt80537088 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt98675755;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt98675755 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt38512418;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt38512418 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt87763015;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt87763015 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt95513217;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt95513217 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt10676973;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt10676973 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt97111333;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt97111333 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt13926109;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt13926109 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt58207287;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt58207287 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt87263830;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt87263830 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt21944392;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt21944392 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt27446769;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt27446769 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt83357873;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt83357873 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt86544876;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt86544876 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt86850698;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt86850698 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt50978671;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt50978671 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt81914512;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt81914512 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt80290818;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt80290818 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt74285277;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt74285277 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt12504609;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt12504609 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt72105554;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt72105554 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt93780605;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt93780605 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt92320132;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt92320132 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt61233123;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt61233123 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt73787648;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt73787648 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt98613171;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt98613171 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt34261595;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt34261595 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt37496273;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt37496273 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt12794156;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt12794156 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt50203190;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt50203190 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt30535906;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt30535906 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt39524885;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt39524885 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt5741057;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt5741057 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt30491151;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt30491151 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt30407347;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt30407347 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt73830492;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt73830492 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt25314526;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt25314526 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt29616564;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt29616564 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt84192765;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt84192765 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt61315527;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt61315527 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt50224712;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt50224712 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt31636315;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt31636315 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt8928527;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt8928527 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt72173731;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt72173731 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt91449800;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt91449800 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt3120683;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt3120683 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt338474;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt338474 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt58070147;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt58070147 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt81080283;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt81080283 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt53999009;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt53999009 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt55102345;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt55102345 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt28934282;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt28934282 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt71269286;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt71269286 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt2239406;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt2239406 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt12207366;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt12207366 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt86756482;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt86756482 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt6355624;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt6355624 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt77279295;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt77279295 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt13975367;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt13975367 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt96900045;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt96900045 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt76415378;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt76415378 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt59615060;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt59615060 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt1131953;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt1131953 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt8004098;     JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt8004098 = JhKLqQuUpGiGsxeUhywDCjZOhQKVEFjnPkbTkpBuyuUszYavt59840654;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void XQUMPhAlmirxmUbkOmFVXsMMplsPSonLwijdlsPuCalpCvCWsNSwjnOeEHXdpkSyufBEkyyWWLTxHWJui76264008() {     int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC82234242 = -137872647;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC63443162 = 666645;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC88372486 = 56237601;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC81684522 = -604332755;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC63961466 = -505188857;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC84432784 = 82046699;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC5917921 = -835145243;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC85296426 = -91141888;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC19850222 = -113471390;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC12895907 = -963267208;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC4441302 = -352073471;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC81372277 = 29894707;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC20234715 = -663685979;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC9255603 = -960945302;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC6367239 = -997148316;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC80635800 = -271535263;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC66476840 = -376643570;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC46802827 = -216565136;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC38232940 = -996543965;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC86148502 = 6136603;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC93206183 = -234911644;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC32854998 = -977156565;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC11977350 = 33688828;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC49985493 = -544554166;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC66535119 = 6256357;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC85123109 = 44471214;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC7435290 = -814563218;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC54204271 = -751099932;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC38829137 = -526133636;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC998291 = -284644578;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC15855807 = -860321275;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC9834192 = -263543421;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC4811347 = -991851299;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC4660414 = -337276394;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC8615341 = -634538627;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC83177600 = -36296403;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC62035432 = -837729902;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC82384176 = -350173533;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC51506952 = -667105824;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC36075837 = -778131497;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC36414921 = -3550261;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC13487704 = -533268255;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC42378166 = 32798189;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC54138329 = -799104310;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC42172501 = -996329479;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC54936144 = -581065038;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC6543997 = 23818807;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC96661862 = -299472183;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC59159388 = -203497138;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC63583199 = 21397030;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC82460545 = -691642448;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC10282671 = 53789688;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC84780567 = -744667455;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC30327092 = -278056081;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC83057824 = -141869057;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC49379245 = -160716082;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC51465812 = 66977816;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC38386994 = -399208234;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC15149403 = -510589112;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC78838357 = -449660072;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC76997494 = -103390084;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC51713649 = 15954688;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC46467289 = -565008252;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC18851931 = -828826812;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC97040100 = -2945933;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC94607110 = 11469950;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC76560930 = 21746005;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC15574301 = -226409585;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC640263 = -226406675;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC23189639 = -860851913;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC18600368 = -433805362;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC84092663 = 73529962;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC95295874 = -549459312;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC2157103 = -118412469;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC49733582 = -990313137;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC79718480 = -701643390;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC90476832 = -909954755;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC57839020 = -167206862;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC7812992 = -548224687;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC11598976 = -412678606;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC78579113 = -979347594;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC10773428 = -415091035;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC95044883 = -447602794;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC75245938 = -447530667;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC18537746 = -593002131;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC5573137 = -814110964;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC25053624 = -518875967;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC74484254 = -613795218;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC21602590 = -95407338;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC59236095 = -373822545;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC31711788 = -3274220;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC23648439 = -338521668;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC67234774 = -839584422;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC72668595 = -117445753;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC59078342 = -574741413;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC84701271 = 80495051;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC67020414 = -968260003;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC23526235 = -138374999;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC57098229 = -696158377;    int VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC47565391 = -137872647;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC82234242 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC63443162;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC63443162 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC88372486;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC88372486 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC81684522;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC81684522 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC63961466;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC63961466 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC84432784;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC84432784 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC5917921;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC5917921 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC85296426;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC85296426 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC19850222;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC19850222 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC12895907;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC12895907 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC4441302;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC4441302 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC81372277;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC81372277 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC20234715;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC20234715 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC9255603;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC9255603 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC6367239;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC6367239 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC80635800;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC80635800 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC66476840;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC66476840 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC46802827;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC46802827 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC38232940;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC38232940 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC86148502;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC86148502 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC93206183;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC93206183 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC32854998;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC32854998 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC11977350;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC11977350 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC49985493;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC49985493 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC66535119;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC66535119 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC85123109;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC85123109 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC7435290;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC7435290 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC54204271;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC54204271 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC38829137;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC38829137 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC998291;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC998291 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC15855807;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC15855807 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC9834192;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC9834192 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC4811347;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC4811347 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC4660414;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC4660414 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC8615341;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC8615341 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC83177600;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC83177600 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC62035432;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC62035432 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC82384176;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC82384176 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC51506952;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC51506952 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC36075837;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC36075837 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC36414921;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC36414921 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC13487704;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC13487704 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC42378166;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC42378166 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC54138329;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC54138329 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC42172501;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC42172501 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC54936144;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC54936144 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC6543997;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC6543997 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC96661862;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC96661862 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC59159388;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC59159388 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC63583199;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC63583199 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC82460545;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC82460545 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC10282671;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC10282671 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC84780567;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC84780567 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC30327092;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC30327092 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC83057824;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC83057824 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC49379245;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC49379245 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC51465812;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC51465812 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC38386994;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC38386994 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC15149403;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC15149403 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC78838357;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC78838357 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC76997494;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC76997494 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC51713649;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC51713649 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC46467289;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC46467289 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC18851931;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC18851931 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC97040100;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC97040100 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC94607110;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC94607110 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC76560930;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC76560930 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC15574301;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC15574301 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC640263;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC640263 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC23189639;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC23189639 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC18600368;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC18600368 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC84092663;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC84092663 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC95295874;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC95295874 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC2157103;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC2157103 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC49733582;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC49733582 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC79718480;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC79718480 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC90476832;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC90476832 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC57839020;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC57839020 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC7812992;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC7812992 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC11598976;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC11598976 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC78579113;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC78579113 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC10773428;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC10773428 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC95044883;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC95044883 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC75245938;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC75245938 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC18537746;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC18537746 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC5573137;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC5573137 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC25053624;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC25053624 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC74484254;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC74484254 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC21602590;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC21602590 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC59236095;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC59236095 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC31711788;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC31711788 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC23648439;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC23648439 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC67234774;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC67234774 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC72668595;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC72668595 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC59078342;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC59078342 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC84701271;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC84701271 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC67020414;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC67020414 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC23526235;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC23526235 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC57098229;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC57098229 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC47565391;     VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC47565391 = VXFVrbITFZdVmFRHmvXtymuOvZYURXhydvTNNdCDslfYVBkGC82234242;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void OPHzECfemyrbArQxaQkloKAZPGnMGeGNjJdkZupDdlipXYAKHSgPYsTEOhkxOSXIsdrrNgYgagHDcKBrG58492769() {     int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv33969693 = -254127480;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv79117144 = -76233110;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv37172846 = -841121784;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv56759924 = -420601897;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv40685399 = -212839511;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv9316139 = -76980528;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv79694764 = -658356839;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv4087905 = -214921442;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv71148298 = 95679899;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv81693030 = -404913190;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv99734000 = -313795942;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv91728655 = 94913206;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv7415509 = -272866240;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv68023321 = -587625848;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv60382497 = -474876026;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv92363072 = 16780781;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv22447365 = -744738260;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv32485749 = -679141631;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv97806789 = -424458148;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv5878077 = -804131546;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv38953536 = -317719812;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv35274452 = -50637573;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv13326865 = -674548619;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv42635743 = -416146117;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv37950978 = 60601920;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv42828523 = -301138565;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv46263924 = -176971936;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv52333496 = -34430618;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv13579210 = -576032538;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv70983374 = -746545374;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv53074615 = -93203742;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv22863922 = -587317613;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv2904657 = -474233185;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv98684126 = 2126440;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv6820469 = -851348270;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv64877210 = -272465231;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv11683659 = -382084646;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv83217789 = -433685898;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv21281795 = -12423219;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv61158253 = -296747163;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv5099008 = -122709049;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv73513103 = -521787876;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv98961397 = -967978343;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv47074148 = -724492987;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv14201710 = -496826562;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv56630591 = 95043022;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv92710190 = -438521646;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv75646327 = -703876879;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv48177841 = -167449867;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv52239458 = -937614350;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv23140438 = -400146604;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv42262423 = -407809872;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv8019314 = -488780643;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv386333 = -992855393;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv19539234 = -171632258;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv98695241 = -103489907;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv65790280 = -401684492;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv94537102 = -324975667;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv18808946 = -381203818;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv97856875 = -911700947;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv63052214 = -900008593;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv27361268 = -523926222;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv90508694 = -638888904;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv164924 = -157774727;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv28618415 = -211709449;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv76870079 = -726478330;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv88823998 = -430853609;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv8731383 = -174992681;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv61202853 = -736277579;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv95505286 = -102410795;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv80679413 = -601134574;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv39229576 = -211052363;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv11203954 = -566718412;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv36648536 = -27710985;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv779070 = -581422498;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv65440432 = -795931937;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv36313054 = -82659231;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv66252716 = -950055632;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv28434034 = -919319555;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv81320386 = 65558898;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv50118333 = -862616919;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv70617597 = -473095057;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv4155656 = -866980751;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv61339752 = -638418188;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv47842937 = -246398771;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv10812192 = -685393870;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv14844608 = 1463030;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv2518324 = -481377792;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv79144893 = -826241303;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv8125227 = -647858363;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv99086929 = -870780740;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv17146556 = 42891021;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv64408843 = 47517920;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv23424919 = -100722273;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv98106039 = -396738571;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv77737739 = -598782827;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv83004409 = -882898972;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv98796473 = -710203616;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv18455733 = -412783539;    int dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv37331630 = -254127480;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv33969693 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv79117144;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv79117144 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv37172846;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv37172846 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv56759924;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv56759924 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv40685399;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv40685399 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv9316139;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv9316139 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv79694764;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv79694764 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv4087905;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv4087905 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv71148298;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv71148298 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv81693030;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv81693030 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv99734000;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv99734000 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv91728655;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv91728655 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv7415509;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv7415509 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv68023321;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv68023321 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv60382497;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv60382497 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv92363072;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv92363072 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv22447365;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv22447365 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv32485749;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv32485749 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv97806789;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv97806789 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv5878077;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv5878077 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv38953536;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv38953536 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv35274452;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv35274452 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv13326865;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv13326865 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv42635743;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv42635743 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv37950978;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv37950978 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv42828523;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv42828523 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv46263924;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv46263924 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv52333496;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv52333496 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv13579210;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv13579210 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv70983374;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv70983374 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv53074615;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv53074615 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv22863922;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv22863922 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv2904657;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv2904657 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv98684126;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv98684126 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv6820469;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv6820469 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv64877210;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv64877210 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv11683659;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv11683659 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv83217789;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv83217789 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv21281795;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv21281795 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv61158253;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv61158253 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv5099008;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv5099008 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv73513103;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv73513103 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv98961397;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv98961397 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv47074148;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv47074148 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv14201710;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv14201710 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv56630591;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv56630591 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv92710190;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv92710190 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv75646327;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv75646327 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv48177841;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv48177841 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv52239458;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv52239458 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv23140438;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv23140438 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv42262423;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv42262423 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv8019314;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv8019314 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv386333;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv386333 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv19539234;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv19539234 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv98695241;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv98695241 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv65790280;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv65790280 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv94537102;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv94537102 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv18808946;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv18808946 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv97856875;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv97856875 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv63052214;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv63052214 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv27361268;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv27361268 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv90508694;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv90508694 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv164924;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv164924 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv28618415;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv28618415 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv76870079;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv76870079 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv88823998;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv88823998 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv8731383;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv8731383 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv61202853;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv61202853 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv95505286;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv95505286 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv80679413;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv80679413 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv39229576;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv39229576 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv11203954;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv11203954 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv36648536;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv36648536 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv779070;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv779070 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv65440432;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv65440432 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv36313054;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv36313054 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv66252716;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv66252716 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv28434034;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv28434034 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv81320386;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv81320386 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv50118333;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv50118333 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv70617597;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv70617597 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv4155656;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv4155656 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv61339752;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv61339752 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv47842937;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv47842937 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv10812192;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv10812192 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv14844608;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv14844608 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv2518324;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv2518324 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv79144893;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv79144893 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv8125227;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv8125227 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv99086929;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv99086929 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv17146556;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv17146556 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv64408843;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv64408843 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv23424919;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv23424919 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv98106039;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv98106039 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv77737739;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv77737739 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv83004409;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv83004409 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv98796473;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv98796473 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv18455733;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv18455733 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv37331630;     dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv37331630 = dFnxqorqZVrJroLNaxugIwbuAorkPcEgsrkMkKBoABoKgWjsv33969693;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void wXHsSJFyGIAvWMkBFhLqafayfJDliRTrWViEecXhGHidvdPMEjujUOtRxJMJGTPopJYBefXdJdkSwwDBt57840203() {     float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw70892988 = -151647649;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw54121804 = -176170902;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw54540557 = -557955013;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw88353152 = -196263980;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw89204460 = -499564158;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw14080458 = -549815619;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw87603598 = -689020761;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw19500741 = -269416934;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw78848947 = 89580715;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw56033538 = -485572679;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw14334580 = 71983332;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw57782213 = -643320087;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw10078730 = -630814911;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw22880376 = -847835985;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw22802339 = -670963363;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw34001095 = -703671892;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw58324351 = -909754455;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw80952373 = -530259969;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw78859292 = -156483552;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw94612463 = -539223272;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw86501848 = -984782212;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw29390345 = -26261505;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw73753605 = -732215408;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw58080166 = -930004762;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw11805291 = -681992396;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw7863904 = -437610428;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw10598957 = -353874073;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw44069165 = -659838138;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw33312392 = -5747591;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw56674546 = -388907601;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw3841698 = -462859333;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw31124987 = -110283874;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw85814633 = -182438864;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw28536515 = -439817896;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw29009908 = -58489885;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw87130377 = -158119612;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw89667580 = -600076590;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw88066746 = -315102798;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw15684562 = 77895963;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw95977105 = -949782411;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw91296521 = -97645724;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw61929614 = -830495338;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw85340731 = -71675831;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw25810853 = -885247559;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw95182056 = -9403430;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw49090521 = -182295945;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw56435768 = -343906005;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw34056376 = 74543707;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw8738873 = -951252581;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw89827681 = -278876458;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw11183458 = -564862579;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw93538650 = -636586119;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw49298830 = -48686826;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw2368735 = -650967591;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw71338355 = -883520686;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw41502644 = -25386145;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw80368199 = -443955494;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw96460390 = -627950252;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw76547862 = -514271585;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw81340557 = 38046270;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw3481501 = -95941547;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw43534434 = 70817376;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw86188348 = -163669343;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw22174402 = -521511685;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw52191840 = 77286654;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw83209592 = -817732794;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw71967580 = -360881224;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw81542214 = -90997016;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw93870467 = -689346100;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw35671961 = -412843751;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw44333514 = -3595302;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw70257604 = -494651658;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw65267811 = -508155933;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw82882187 = -206701141;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw3315943 = -341577548;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw24572235 = -54286875;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw44049614 = -954585674;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw47942752 = -846967850;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw62898110 = -820601332;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw62714770 = -399696452;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw51428135 = 6295576;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw76542581 = -328417780;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw35330293 = -708585558;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw43484710 = -726871133;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw45491088 = -824045022;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw10303047 = -826273214;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw81826157 = 38402951;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw83445898 = -531471274;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw57198160 = -556297211;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw87507264 = 66896259;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw6762179 = -714164118;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw93207189 = -972126339;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw11518884 = -800831214;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw34344005 = -960150307;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw92495604 = -753840864;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw47762088 = -68463101;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw75741265 = -566825995;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw63166329 = -550164147;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw73619012 = -862534213;    float rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw11972464 = -151647649;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw70892988 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw54121804;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw54121804 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw54540557;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw54540557 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw88353152;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw88353152 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw89204460;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw89204460 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw14080458;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw14080458 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw87603598;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw87603598 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw19500741;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw19500741 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw78848947;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw78848947 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw56033538;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw56033538 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw14334580;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw14334580 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw57782213;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw57782213 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw10078730;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw10078730 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw22880376;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw22880376 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw22802339;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw22802339 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw34001095;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw34001095 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw58324351;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw58324351 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw80952373;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw80952373 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw78859292;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw78859292 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw94612463;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw94612463 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw86501848;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw86501848 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw29390345;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw29390345 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw73753605;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw73753605 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw58080166;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw58080166 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw11805291;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw11805291 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw7863904;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw7863904 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw10598957;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw10598957 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw44069165;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw44069165 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw33312392;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw33312392 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw56674546;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw56674546 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw3841698;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw3841698 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw31124987;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw31124987 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw85814633;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw85814633 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw28536515;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw28536515 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw29009908;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw29009908 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw87130377;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw87130377 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw89667580;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw89667580 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw88066746;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw88066746 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw15684562;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw15684562 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw95977105;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw95977105 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw91296521;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw91296521 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw61929614;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw61929614 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw85340731;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw85340731 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw25810853;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw25810853 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw95182056;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw95182056 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw49090521;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw49090521 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw56435768;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw56435768 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw34056376;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw34056376 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw8738873;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw8738873 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw89827681;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw89827681 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw11183458;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw11183458 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw93538650;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw93538650 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw49298830;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw49298830 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw2368735;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw2368735 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw71338355;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw71338355 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw41502644;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw41502644 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw80368199;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw80368199 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw96460390;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw96460390 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw76547862;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw76547862 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw81340557;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw81340557 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw3481501;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw3481501 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw43534434;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw43534434 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw86188348;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw86188348 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw22174402;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw22174402 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw52191840;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw52191840 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw83209592;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw83209592 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw71967580;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw71967580 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw81542214;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw81542214 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw93870467;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw93870467 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw35671961;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw35671961 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw44333514;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw44333514 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw70257604;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw70257604 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw65267811;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw65267811 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw82882187;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw82882187 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw3315943;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw3315943 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw24572235;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw24572235 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw44049614;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw44049614 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw47942752;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw47942752 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw62898110;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw62898110 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw62714770;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw62714770 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw51428135;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw51428135 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw76542581;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw76542581 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw35330293;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw35330293 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw43484710;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw43484710 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw45491088;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw45491088 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw10303047;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw10303047 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw81826157;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw81826157 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw83445898;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw83445898 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw57198160;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw57198160 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw87507264;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw87507264 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw6762179;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw6762179 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw93207189;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw93207189 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw11518884;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw11518884 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw34344005;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw34344005 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw92495604;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw92495604 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw47762088;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw47762088 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw75741265;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw75741265 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw63166329;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw63166329 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw73619012;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw73619012 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw11972464;     rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw11972464 = rhzXkWHcQGUPNbnsuolEOhYLQZqebVAGLPOlPQEmRZNZCNvCw70892988;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void yqKSHhbJnDWpMGjmxlZkIbUDVpYfGDJpnxXskWmVxfAqgEKiNfOukqcXVHxRIwDjuhBOirCbyEncbeXQf87826433() {     float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm93286577 = 86472529;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm99896987 = -82118832;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm81996623 = -840480243;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm18279981 = -382130682;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm78538612 = -622265838;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm94158142 = -710991185;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm11212002 = -806471601;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm25920549 = 64163739;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm93271914 = -80969255;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm51157609 = -591507141;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm31555834 = 34831003;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm99393485 = -58587018;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm45233996 = -127873756;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm11650908 = 69608310;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm14365507 = -335728224;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm3692460 = -752543784;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm52294943 = -267419705;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm63928256 = -584931038;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm99712653 = -773603410;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm1054985 = -179833275;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm7715532 = -165803147;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm14909298 = -21035935;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm40168532 = -449338158;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm40929845 = -513077096;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm18902848 = -976857667;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm79592821 = -973298724;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm87466795 = -910660852;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm14577091 = -939325603;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm27526506 = -803934395;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm89741855 = -633772094;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm14719824 = -157082250;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm3942321 = -370533468;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm81400880 = -509838143;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm87642365 = -887263014;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm22881235 = -962932383;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm85995057 = -393749242;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm71165924 = -233371164;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm71775167 = -187465591;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm28679097 = -710468653;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm44289927 = -376574754;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm32198225 = -512879492;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm64740344 = -394611947;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm30607563 = -500076161;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm66023074 = -225646765;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm79147270 = -445287506;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm16762835 = -552480369;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm41035373 = -441035636;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm3271470 = -173229928;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm84540387 = -237205418;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm66866004 = -833871831;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm6793305 = -241383849;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm52842651 = -685259653;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm52164885 = -928544047;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm52405009 = -394728548;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm80110902 = -167325523;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm78377280 = -892491536;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm59728456 = -632780674;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm41066778 = -227403147;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm99377132 = -405273015;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm98945791 = -648967115;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm6691347 = -800330333;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm96634911 = -867145998;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm98394043 = -131901866;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm3530060 = -447197161;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm36437785 = -334424891;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm27613514 = -594635530;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm17992605 = -548748876;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm57591631 = -240610743;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm88769673 = 32540692;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm28370450 = -941978982;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm32526535 = -419172621;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm80519775 = 20045885;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm35249160 = -874462386;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm55422726 = -297028657;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm68856759 = -666953783;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm42975187 = -771191201;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm84301734 = -520959774;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm74145458 = -123691394;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm61782574 = 32210409;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm2140014 = -324377298;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm38557448 = -432263089;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm84195326 = -637430925;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm30036703 = -602120186;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm60660501 = -970062565;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm82948551 = -292388246;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm61877173 = -471822598;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm51777436 = -441989421;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm28995872 = -15109596;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm7531464 = -619937491;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm44503954 = 29559153;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm26266601 = -760968569;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm30099146 = 94031983;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm72398035 = -782192576;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm29733306 = 38498462;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm37598581 = -576244421;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm35563314 = -645733495;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm66346301 = -162710081;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm27077504 = 47121000;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm29585289 = -891221874;    float qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm51533757 = 86472529;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm93286577 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm99896987;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm99896987 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm81996623;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm81996623 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm18279981;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm18279981 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm78538612;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm78538612 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm94158142;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm94158142 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm11212002;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm11212002 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm25920549;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm25920549 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm93271914;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm93271914 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm51157609;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm51157609 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm31555834;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm31555834 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm99393485;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm99393485 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm45233996;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm45233996 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm11650908;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm11650908 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm14365507;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm14365507 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm3692460;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm3692460 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm52294943;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm52294943 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm63928256;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm63928256 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm99712653;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm99712653 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm1054985;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm1054985 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm7715532;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm7715532 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm14909298;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm14909298 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm40168532;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm40168532 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm40929845;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm40929845 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm18902848;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm18902848 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm79592821;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm79592821 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm87466795;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm87466795 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm14577091;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm14577091 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm27526506;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm27526506 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm89741855;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm89741855 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm14719824;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm14719824 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm3942321;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm3942321 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm81400880;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm81400880 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm87642365;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm87642365 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm22881235;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm22881235 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm85995057;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm85995057 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm71165924;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm71165924 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm71775167;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm71775167 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm28679097;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm28679097 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm44289927;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm44289927 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm32198225;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm32198225 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm64740344;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm64740344 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm30607563;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm30607563 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm66023074;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm66023074 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm79147270;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm79147270 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm16762835;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm16762835 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm41035373;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm41035373 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm3271470;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm3271470 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm84540387;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm84540387 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm66866004;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm66866004 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm6793305;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm6793305 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm52842651;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm52842651 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm52164885;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm52164885 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm52405009;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm52405009 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm80110902;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm80110902 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm78377280;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm78377280 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm59728456;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm59728456 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm41066778;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm41066778 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm99377132;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm99377132 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm98945791;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm98945791 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm6691347;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm6691347 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm96634911;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm96634911 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm98394043;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm98394043 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm3530060;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm3530060 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm36437785;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm36437785 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm27613514;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm27613514 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm17992605;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm17992605 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm57591631;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm57591631 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm88769673;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm88769673 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm28370450;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm28370450 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm32526535;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm32526535 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm80519775;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm80519775 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm35249160;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm35249160 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm55422726;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm55422726 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm68856759;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm68856759 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm42975187;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm42975187 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm84301734;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm84301734 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm74145458;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm74145458 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm61782574;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm61782574 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm2140014;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm2140014 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm38557448;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm38557448 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm84195326;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm84195326 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm30036703;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm30036703 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm60660501;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm60660501 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm82948551;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm82948551 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm61877173;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm61877173 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm51777436;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm51777436 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm28995872;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm28995872 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm7531464;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm7531464 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm44503954;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm44503954 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm26266601;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm26266601 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm30099146;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm30099146 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm72398035;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm72398035 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm29733306;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm29733306 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm37598581;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm37598581 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm35563314;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm35563314 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm66346301;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm66346301 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm27077504;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm27077504 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm29585289;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm29585289 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm51533757;     qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm51533757 = qRbpPEwVAWdZVMAcQvyDwzWcmvfDzwrjgmSebufdEsiVZCdsm93286577;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void aCxGnSopKKfnxfGiORPUXBYVqOeoAEGdKBwpHxTkBWnniZdeSodPkPTZdcQZnzoFECdviQaRxfTBNlmRk70055194() {     float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR45022028 = -29782303;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR15570971 = -159018587;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR30796983 = -637839628;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR93355382 = -198399824;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR55262545 = -329916492;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR19041497 = -870018412;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR84988845 = -629683197;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR44712026 = -59615815;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR44569991 = -971817965;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR19954733 = -33153123;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR26848533 = 73108532;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR9749863 = 6431481;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR32414790 = -837054018;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR70418626 = -657072237;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR68380765 = -913455934;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR15419732 = -464227740;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR8265468 = -635514395;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR49611178 = 52492467;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR59286503 = -201517593;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR20784559 = -990101423;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR53462884 = -248611315;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR17328751 = -194516942;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR41518046 = -57575606;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR33580095 = -384669048;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR90318706 = -922512104;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR37298235 = -218908503;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR26295431 = -273069570;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR12706316 = -222656289;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR2276579 = -853833297;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR59726939 = 4327110;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR51938633 = -489964717;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR16972051 = -694307659;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR79494190 = 7779971;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR81666077 = -547860179;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR21086363 = -79742026;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR67694667 = -629918071;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR20814151 = -877725908;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR72608779 = -270977955;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR98453939 = -55786048;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR69372343 = -995190421;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR882312 = -632038280;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR24765744 = -383131568;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR87190795 = -400852692;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR58958893 = -151035442;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR51176479 = 54215411;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR18457282 = -976372310;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR27201568 = -903376089;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR82255933 = -577634624;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR73558840 = -201158147;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR55522264 = -692883211;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR47473196 = 50111995;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR84822403 = -46859213;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR75403631 = -672657236;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR22464250 = -9527860;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR16592311 = -197088724;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR27693277 = -835265361;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR74052924 = -1442982;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR97216887 = -153170581;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR3036676 = -275887720;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR17964310 = -11007989;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR92746066 = -496948842;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR72282530 = -307026908;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR42435448 = -205782518;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR84843052 = -876145076;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR68016100 = -543188407;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR9876483 = -232583809;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR30255673 = 98651510;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR50748712 = -189193839;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR49332263 = -477330212;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR686098 = -183537864;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR94605581 = -586501832;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR35656688 = -264536440;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR51157239 = -891721486;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR89914159 = -206327173;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR19902247 = -258063144;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR28697140 = -865479747;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR30137956 = -793664250;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR82559153 = -906540164;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR82403616 = -338884459;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR71861424 = -946139795;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR10096668 = -315532414;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR44039497 = -695434947;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR39147475 = 78501857;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR46754315 = -60950087;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR12253743 = 54215114;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR67116229 = -343105504;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR41568420 = 78349576;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR57029940 = -982692170;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR65073767 = -250771456;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR93393085 = -244476665;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR93641743 = -528475089;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR23597263 = -624555328;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR69572103 = -995090235;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR80489629 = 55221941;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR76626277 = -398241579;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR28599782 = -225011372;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR82330296 = -77349051;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR2347743 = -524707617;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR90942792 = -607847036;    float AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR41299997 = -29782303;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR45022028 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR15570971;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR15570971 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR30796983;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR30796983 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR93355382;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR93355382 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR55262545;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR55262545 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR19041497;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR19041497 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR84988845;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR84988845 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR44712026;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR44712026 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR44569991;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR44569991 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR19954733;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR19954733 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR26848533;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR26848533 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR9749863;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR9749863 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR32414790;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR32414790 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR70418626;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR70418626 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR68380765;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR68380765 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR15419732;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR15419732 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR8265468;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR8265468 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR49611178;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR49611178 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR59286503;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR59286503 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR20784559;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR20784559 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR53462884;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR53462884 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR17328751;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR17328751 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR41518046;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR41518046 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR33580095;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR33580095 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR90318706;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR90318706 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR37298235;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR37298235 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR26295431;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR26295431 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR12706316;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR12706316 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR2276579;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR2276579 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR59726939;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR59726939 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR51938633;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR51938633 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR16972051;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR16972051 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR79494190;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR79494190 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR81666077;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR81666077 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR21086363;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR21086363 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR67694667;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR67694667 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR20814151;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR20814151 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR72608779;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR72608779 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR98453939;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR98453939 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR69372343;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR69372343 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR882312;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR882312 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR24765744;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR24765744 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR87190795;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR87190795 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR58958893;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR58958893 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR51176479;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR51176479 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR18457282;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR18457282 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR27201568;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR27201568 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR82255933;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR82255933 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR73558840;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR73558840 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR55522264;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR55522264 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR47473196;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR47473196 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR84822403;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR84822403 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR75403631;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR75403631 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR22464250;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR22464250 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR16592311;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR16592311 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR27693277;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR27693277 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR74052924;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR74052924 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR97216887;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR97216887 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR3036676;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR3036676 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR17964310;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR17964310 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR92746066;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR92746066 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR72282530;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR72282530 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR42435448;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR42435448 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR84843052;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR84843052 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR68016100;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR68016100 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR9876483;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR9876483 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR30255673;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR30255673 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR50748712;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR50748712 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR49332263;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR49332263 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR686098;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR686098 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR94605581;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR94605581 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR35656688;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR35656688 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR51157239;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR51157239 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR89914159;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR89914159 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR19902247;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR19902247 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR28697140;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR28697140 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR30137956;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR30137956 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR82559153;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR82559153 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR82403616;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR82403616 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR71861424;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR71861424 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR10096668;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR10096668 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR44039497;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR44039497 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR39147475;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR39147475 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR46754315;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR46754315 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR12253743;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR12253743 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR67116229;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR67116229 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR41568420;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR41568420 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR57029940;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR57029940 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR65073767;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR65073767 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR93393085;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR93393085 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR93641743;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR93641743 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR23597263;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR23597263 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR69572103;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR69572103 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR80489629;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR80489629 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR76626277;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR76626277 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR28599782;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR28599782 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR82330296;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR82330296 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR2347743;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR2347743 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR90942792;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR90942792 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR41299997;     AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR41299997 = AWMaqsvhWLfguxBhijgwhwBNMRFwSMspyondcfNJiOLFvkDiR45022028;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void iMkzkoPPmJgvkwSQbjGlOiKQtIroJgfjXsyIdRtbBQmBJVffDVOrKUYzBUFbxbFFewXsxJnJqejywJGYd94154980() {     long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK47940975 = -351055055;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK46894607 = -661683646;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK42729270 = -125864857;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK89714922 = -388233093;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK52990283 = -294701077;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK8332540 = -840142022;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK32312706 = -8364273;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK55095652 = -436404493;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK81046325 = -127822625;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK33789595 = -870308410;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK10167129 = -590525569;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK62158198 = -245011107;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK9051311 = 68585939;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK4617339 = -642495268;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK44589581 = -242849855;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK93459995 = -382703348;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK52126706 = -741019533;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK31524844 = -648495505;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK933255 = 40585042;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK18689540 = -525199421;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK41889919 = -733886298;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK66161886 = -187480043;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK76638363 = 63918421;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK42358214 = -212117913;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK14655464 = -249771119;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK20833769 = -977007509;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK89456720 = -365505131;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK67826090 = -947377464;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK67424182 = -84179271;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK84177264 = -924530062;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK66425353 = -705954776;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK34933931 = -782029996;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK49056757 = 33644243;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK82298257 = -567383823;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK57385391 = -80795642;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK73321599 = -641744839;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK45870412 = -83797784;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK84752406 = -61394611;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK79448745 = 7582746;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK68276322 = -34883353;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK88157625 = -625429650;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK1415003 = 97855967;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK21607746 = -340581479;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK75017473 = -799326430;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK39131334 = -577805104;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK72096436 = -621269984;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK57509085 = -468093019;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK26698778 = -150882300;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK26883155 = -136935607;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK11707667 = 26108875;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK81906843 = -998599350;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK42224800 = -100325636;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK83892887 = -668459505;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK9820767 = -290615033;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK52265061 = -563234204;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK81779088 = -63575012;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK70256244 = -625602067;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK371056 = -913746944;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK75059458 = -38461974;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK32156515 = -317693569;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK18875820 = -374636891;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK64486615 = -60986810;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK87671469 = -252225223;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK96869060 = -203292564;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK67364241 = -64353635;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK75233198 = -808495574;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK13101442 = -178655350;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK26753053 = -364030238;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK47231947 = -461699626;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK71267981 = -601105017;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK47589583 = -198905565;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK67374300 = -579624922;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK52076098 = -556078252;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK32656933 = -924531605;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK30531914 = -899769771;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK40474917 = -731742265;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK44554140 = -846898564;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK1620891 = -136755150;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK3226880 = -634312810;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK42559028 = -628501136;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK63324683 = -408914490;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK62757942 = -114622832;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK40942936 = -710441857;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK55716515 = -10288146;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK2270421 = -925930712;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK24200553 = -505629141;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK51041043 = -13570492;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK39235991 = -675740725;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK30033197 = 95850381;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK75606302 = 82779370;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK3065356 = 83857228;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK45499356 = -170050840;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK9692949 = 77067362;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK47292231 = -674723685;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK49400503 = -660246463;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK23671011 = -464442841;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK13743533 = -649918811;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK24738686 = -37288915;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK7653232 = -634972796;    long LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK63898136 = -351055055;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK47940975 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK46894607;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK46894607 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK42729270;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK42729270 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK89714922;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK89714922 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK52990283;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK52990283 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK8332540;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK8332540 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK32312706;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK32312706 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK55095652;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK55095652 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK81046325;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK81046325 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK33789595;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK33789595 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK10167129;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK10167129 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK62158198;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK62158198 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK9051311;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK9051311 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK4617339;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK4617339 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK44589581;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK44589581 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK93459995;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK93459995 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK52126706;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK52126706 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK31524844;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK31524844 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK933255;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK933255 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK18689540;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK18689540 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK41889919;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK41889919 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK66161886;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK66161886 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK76638363;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK76638363 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK42358214;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK42358214 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK14655464;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK14655464 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK20833769;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK20833769 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK89456720;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK89456720 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK67826090;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK67826090 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK67424182;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK67424182 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK84177264;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK84177264 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK66425353;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK66425353 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK34933931;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK34933931 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK49056757;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK49056757 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK82298257;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK82298257 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK57385391;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK57385391 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK73321599;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK73321599 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK45870412;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK45870412 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK84752406;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK84752406 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK79448745;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK79448745 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK68276322;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK68276322 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK88157625;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK88157625 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK1415003;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK1415003 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK21607746;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK21607746 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK75017473;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK75017473 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK39131334;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK39131334 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK72096436;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK72096436 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK57509085;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK57509085 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK26698778;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK26698778 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK26883155;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK26883155 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK11707667;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK11707667 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK81906843;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK81906843 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK42224800;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK42224800 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK83892887;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK83892887 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK9820767;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK9820767 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK52265061;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK52265061 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK81779088;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK81779088 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK70256244;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK70256244 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK371056;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK371056 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK75059458;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK75059458 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK32156515;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK32156515 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK18875820;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK18875820 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK64486615;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK64486615 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK87671469;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK87671469 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK96869060;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK96869060 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK67364241;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK67364241 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK75233198;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK75233198 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK13101442;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK13101442 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK26753053;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK26753053 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK47231947;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK47231947 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK71267981;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK71267981 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK47589583;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK47589583 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK67374300;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK67374300 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK52076098;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK52076098 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK32656933;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK32656933 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK30531914;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK30531914 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK40474917;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK40474917 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK44554140;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK44554140 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK1620891;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK1620891 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK3226880;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK3226880 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK42559028;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK42559028 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK63324683;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK63324683 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK62757942;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK62757942 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK40942936;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK40942936 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK55716515;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK55716515 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK2270421;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK2270421 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK24200553;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK24200553 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK51041043;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK51041043 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK39235991;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK39235991 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK30033197;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK30033197 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK75606302;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK75606302 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK3065356;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK3065356 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK45499356;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK45499356 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK9692949;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK9692949 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK47292231;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK47292231 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK49400503;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK49400503 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK23671011;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK23671011 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK13743533;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK13743533 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK24738686;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK24738686 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK7653232;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK7653232 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK63898136;     LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK63898136 = LloSoZCTyHIMReZKgXNxmitiFAfkaDsOhylqRnpWVYyCexZzK47940975;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void RLIbWvZPiLDTYuIeGTeMjtaquEeUDnWWwPAtyOUmAQPocqfHKtBpipcYlShSQFLvogXItOfsysMTemNEZ76383742() {     long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR99676425 = -467309887;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR62568590 = -738583401;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR91529629 = 76775759;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR64790324 = -204502235;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR29714216 = -2351731;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR33215894 = -999169248;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR6089549 = -931575869;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR73887130 = -560184048;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR32344402 = 81328664;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR2586719 = -311954392;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR5459828 = -552248040;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR72514576 = -179992607;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR96232104 = -640594322;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR63385057 = -269175815;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR98604838 = -820577565;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR5187268 = -94387304;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR8097232 = -9114223;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR17207766 = -11072000;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR60507103 = -487329141;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR38419114 = -235467570;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR87637271 = -816694466;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR68581340 = -360961050;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR77987877 = -644319027;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR35008464 = -83709864;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR86071322 = -195425556;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR78539182 = -222617288;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR28285355 = -827913849;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR65955315 = -230708150;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR42174255 = -134078173;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR54162348 = -286430858;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR3644162 = 61162757;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR47963661 = -5804188;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR47150067 = -548737643;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR76321970 = -227980989;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR55590519 = -297605285;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR55021210 = -877913667;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR95518638 = -728152528;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR85586018 = -144906976;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR49223588 = -437734649;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR93358738 = -653499020;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR56841713 = -744588438;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR61440402 = -990663655;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR78190978 = -241358010;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR67953292 = -724715108;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR11160542 = -78302187;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR73790883 = 54838076;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR43675280 = -930433473;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR5683243 = -555286996;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR15901608 = -100888336;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR363927 = -932902506;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR22586736 = -707103506;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR74204553 = -561925196;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR7131634 = -412572693;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR79880007 = 94585655;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR88746470 = -592997405;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR31095086 = -6348837;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR84580712 = 5735625;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR56521165 = -839514378;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR78719001 = 90923320;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR51175033 = -779734444;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR4930539 = -71255400;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR40134233 = -600867720;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR31712875 = -326105875;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR78182054 = -632240478;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR98942556 = -273117150;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR57496167 = -446443853;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR25364510 = -631254965;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR19910134 = -312613334;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR7794538 = -971570530;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR43583629 = -942663898;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR9668629 = -366234776;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR22511213 = -864207248;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR67984177 = -573337351;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR67148365 = -833830122;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR81577401 = -490879132;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR26196870 = -826030811;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR90390361 = -19603040;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR10034586 = -919603920;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR23847922 = 94592322;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR12280439 = -150263632;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR34863903 = -292183815;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR22602112 = -172626854;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR50053708 = -29819814;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR41810329 = -201175668;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR31575612 = -579327352;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR29439609 = -376912047;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR40832027 = -593231495;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR67270059 = -543323299;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR87575500 = -634983584;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR24495434 = -191256448;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR70440497 = -783649293;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR38997473 = -888638151;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR6867018 = -135830297;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR98048554 = -658000206;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR88428199 = -482243621;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR16707480 = -43720718;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR29727528 = -564557780;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR8925 = -609117532;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR69010735 = -351597958;    long XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR53664375 = -467309887;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR99676425 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR62568590;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR62568590 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR91529629;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR91529629 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR64790324;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR64790324 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR29714216;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR29714216 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR33215894;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR33215894 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR6089549;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR6089549 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR73887130;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR73887130 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR32344402;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR32344402 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR2586719;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR2586719 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR5459828;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR5459828 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR72514576;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR72514576 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR96232104;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR96232104 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR63385057;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR63385057 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR98604838;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR98604838 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR5187268;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR5187268 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR8097232;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR8097232 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR17207766;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR17207766 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR60507103;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR60507103 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR38419114;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR38419114 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR87637271;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR87637271 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR68581340;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR68581340 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR77987877;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR77987877 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR35008464;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR35008464 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR86071322;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR86071322 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR78539182;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR78539182 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR28285355;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR28285355 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR65955315;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR65955315 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR42174255;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR42174255 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR54162348;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR54162348 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR3644162;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR3644162 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR47963661;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR47963661 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR47150067;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR47150067 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR76321970;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR76321970 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR55590519;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR55590519 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR55021210;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR55021210 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR95518638;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR95518638 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR85586018;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR85586018 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR49223588;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR49223588 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR93358738;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR93358738 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR56841713;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR56841713 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR61440402;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR61440402 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR78190978;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR78190978 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR67953292;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR67953292 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR11160542;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR11160542 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR73790883;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR73790883 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR43675280;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR43675280 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR5683243;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR5683243 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR15901608;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR15901608 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR363927;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR363927 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR22586736;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR22586736 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR74204553;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR74204553 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR7131634;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR7131634 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR79880007;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR79880007 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR88746470;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR88746470 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR31095086;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR31095086 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR84580712;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR84580712 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR56521165;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR56521165 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR78719001;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR78719001 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR51175033;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR51175033 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR4930539;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR4930539 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR40134233;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR40134233 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR31712875;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR31712875 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR78182054;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR78182054 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR98942556;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR98942556 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR57496167;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR57496167 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR25364510;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR25364510 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR19910134;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR19910134 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR7794538;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR7794538 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR43583629;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR43583629 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR9668629;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR9668629 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR22511213;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR22511213 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR67984177;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR67984177 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR67148365;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR67148365 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR81577401;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR81577401 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR26196870;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR26196870 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR90390361;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR90390361 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR10034586;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR10034586 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR23847922;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR23847922 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR12280439;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR12280439 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR34863903;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR34863903 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR22602112;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR22602112 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR50053708;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR50053708 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR41810329;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR41810329 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR31575612;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR31575612 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR29439609;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR29439609 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR40832027;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR40832027 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR67270059;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR67270059 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR87575500;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR87575500 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR24495434;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR24495434 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR70440497;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR70440497 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR38997473;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR38997473 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR6867018;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR6867018 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR98048554;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR98048554 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR88428199;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR88428199 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR16707480;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR16707480 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR29727528;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR29727528 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR8925;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR8925 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR69010735;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR69010735 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR53664375;     XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR53664375 = XJKlhnGmcIghCVuFTzwTXNwOIrqcJtzEcstwBJHsQVRFyLvWR99676425;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void TBDvsltVGOnjpUgHHjKMNcgEzpeExGJBqJwgItxtOORElEFKnkyNVIHrVzwCGpYzEmsgXAzNlRyzKbTuk6369972() {     long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ22070014 = -229189709;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ8343774 = -644531331;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ18985696 = -205749471;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ94717151 = -390368936;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ19048368 = -125053411;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ13293579 = -60344814;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ29697952 = 50973292;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ80306938 = -226603375;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ46767369 = -89221305;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ97710789 = -417888854;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ22681082 = -589400369;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ14125849 = -695259538;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ31387371 = -137653167;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ52155589 = -451731520;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ90168006 = -485342426;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ74878633 = -143259196;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ2067824 = -466779473;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ183649 = -65743069;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ81360464 = -4449000;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ44861634 = -976077572;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ8850955 = 2284599;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ54100292 = -355735480;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ44402804 = -361441777;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ17858143 = -766782199;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ93168879 = -490290827;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ50268100 = -758305583;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ5153194 = -284700629;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ36463241 = -510195615;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ36388369 = -932264977;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ87229657 = -531295351;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ14522288 = -733060160;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ20780995 = -266053781;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ42736314 = -876136922;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ35427820 = -675426107;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ49461846 = -102047783;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ53885889 = -13543297;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ77016983 = -361447101;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ69294440 = -17269769;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ62218123 = -126099265;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ41671560 = -80291363;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ97743415 = -59822205;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ64251133 = -554780264;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ23457810 = -669758340;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ8165513 = -65114313;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ95125756 = -514186263;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ41463197 = -315346349;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ28274884 = 72436896;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ74898336 = -803060631;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ91703122 = -486841173;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ77402249 = -387897878;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ18196583 = -383624776;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ33508553 = -610598730;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ9997689 = -192429915;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ29916282 = -749175302;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ97519017 = -976802243;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ67969721 = -873454229;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ63940970 = -183089554;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ1127554 = -438967273;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ1548272 = -900078110;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ68780268 = -366747828;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ8140385 = -775644186;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ93234711 = -438831094;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ43918569 = -294338398;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ59537711 = -557925955;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ83188501 = -684828695;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ1900088 = -223346589;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ71389534 = -819122616;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ95959550 = -462227061;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ2693743 = -249683738;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ36282117 = -371799129;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ97861649 = -781812095;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ32773384 = -349509705;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ37965526 = -939643805;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ39688905 = -924157637;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ47118218 = -816255367;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ44599822 = -442935137;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ30642483 = -685977141;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ36237291 = -196327464;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ22732387 = -152595936;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ51705683 = -74944479;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ21993216 = -730742480;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ30254857 = -481639999;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ44760118 = 76645557;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ58986120 = -444367099;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ69033075 = -47670575;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ81013735 = -22461431;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ10783306 = 26376134;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ12820033 = -26961621;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ37908803 = -698623864;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ81492124 = -228593555;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ89944919 = -830453744;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ75889430 = -922479829;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ67746168 = -117191660;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ93437854 = -759351437;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ33531175 = -304647178;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ4508705 = -620991112;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ20332564 = -160441866;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ63920099 = -11832386;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ24977012 = -380285619;    long TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ93225668 = -229189709;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ22070014 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ8343774;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ8343774 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ18985696;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ18985696 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ94717151;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ94717151 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ19048368;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ19048368 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ13293579;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ13293579 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ29697952;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ29697952 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ80306938;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ80306938 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ46767369;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ46767369 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ97710789;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ97710789 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ22681082;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ22681082 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ14125849;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ14125849 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ31387371;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ31387371 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ52155589;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ52155589 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ90168006;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ90168006 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ74878633;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ74878633 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ2067824;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ2067824 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ183649;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ183649 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ81360464;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ81360464 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ44861634;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ44861634 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ8850955;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ8850955 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ54100292;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ54100292 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ44402804;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ44402804 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ17858143;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ17858143 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ93168879;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ93168879 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ50268100;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ50268100 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ5153194;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ5153194 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ36463241;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ36463241 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ36388369;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ36388369 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ87229657;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ87229657 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ14522288;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ14522288 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ20780995;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ20780995 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ42736314;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ42736314 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ35427820;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ35427820 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ49461846;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ49461846 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ53885889;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ53885889 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ77016983;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ77016983 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ69294440;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ69294440 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ62218123;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ62218123 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ41671560;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ41671560 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ97743415;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ97743415 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ64251133;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ64251133 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ23457810;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ23457810 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ8165513;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ8165513 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ95125756;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ95125756 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ41463197;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ41463197 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ28274884;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ28274884 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ74898336;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ74898336 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ91703122;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ91703122 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ77402249;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ77402249 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ18196583;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ18196583 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ33508553;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ33508553 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ9997689;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ9997689 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ29916282;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ29916282 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ97519017;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ97519017 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ67969721;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ67969721 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ63940970;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ63940970 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ1127554;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ1127554 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ1548272;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ1548272 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ68780268;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ68780268 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ8140385;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ8140385 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ93234711;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ93234711 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ43918569;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ43918569 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ59537711;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ59537711 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ83188501;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ83188501 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ1900088;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ1900088 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ71389534;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ71389534 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ95959550;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ95959550 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ2693743;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ2693743 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ36282117;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ36282117 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ97861649;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ97861649 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ32773384;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ32773384 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ37965526;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ37965526 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ39688905;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ39688905 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ47118218;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ47118218 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ44599822;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ44599822 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ30642483;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ30642483 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ36237291;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ36237291 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ22732387;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ22732387 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ51705683;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ51705683 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ21993216;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ21993216 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ30254857;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ30254857 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ44760118;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ44760118 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ58986120;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ58986120 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ69033075;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ69033075 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ81013735;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ81013735 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ10783306;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ10783306 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ12820033;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ12820033 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ37908803;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ37908803 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ81492124;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ81492124 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ89944919;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ89944919 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ75889430;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ75889430 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ67746168;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ67746168 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ93437854;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ93437854 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ33531175;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ33531175 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ4508705;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ4508705 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ20332564;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ20332564 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ63920099;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ63920099 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ24977012;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ24977012 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ93225668;     TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ93225668 = TQMIvfiBEKJwvmYpSzzMYmnlkcEKIhtfCSnYLrJGKeTppRqfZ22070014;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void rZCFWKUMqzQiDeujBKgelKpPfXUpaiBBIkoCvjXLBYVIJnTnaDEEBMSgjmZyqelIxOZSpsnRmUdNphGrD73339202() {     double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF39791409 = -27983336;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF88195208 = -88051040;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF14320450 = -259993776;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF12178655 = -901620510;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF58241130 = -213296986;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF74911805 = -365809777;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF95710824 = -327060159;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF97890281 = -228942092;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF50951376 = -250444596;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF961538 = -621240942;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF17172706 = -439744324;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF32274519 = -846667877;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF40320836 = -165732513;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF21031296 = -321354540;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF25730401 = -140445999;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF84854967 = -102159562;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF49801741 = -504784962;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF3814411 = -323796630;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF82170967 = -385208544;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF81872447 = -304388669;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF14981167 = -564435712;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF78681387 = -761543481;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF75763490 = 71044829;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF69317251 = -873345154;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF7731218 = -210650743;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF1334783 = -487851397;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF98140457 = -13842340;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF51081859 = -806290438;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF75570535 = -101900272;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF60108700 = -692838153;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF65579752 = -392916947;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF20597326 = -642316690;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF55660848 = -377365181;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF655581 = -278625179;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF85313620 = -401740314;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF83201548 = 54466867;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF41649601 = -693361844;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF82299241 = -2675908;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF71555399 = -17389173;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF88648442 = -149712244;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF49288804 = -879351536;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF91055772 = -44293012;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF68503699 = -45261551;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF77271055 = -913486073;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF156552 = -194016096;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF64978822 = -374864004;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF22569707 = -771157062;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF2990969 = -822275623;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF51472443 = -598414440;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF14723823 = -667192394;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF25156157 = -343956814;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF93435360 = -920107088;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF63618698 = -760520202;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF725044 = -134829366;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF58358036 = -296171413;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF61110022 = -266439855;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF12431719 = -59095870;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF45003199 = -386648623;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF4447438 = -590969767;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF56906348 = -725445589;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF76771347 = -251967437;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF44628966 = -520769722;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF22319747 = -27041820;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF90842676 = -557606443;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF35381785 = -128323996;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF96575380 = -797427634;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF76613670 = -369302697;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF39665256 = -887107334;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF35717675 = -919614226;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF42528853 = -94912866;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF43205366 = -408797719;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF67502500 = -402109054;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF32259012 = -206407458;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF93522524 = -135496301;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF32583643 = -425037134;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF23925394 = -420142701;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF10177688 = -616281931;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF98492435 = -15469099;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF69160700 = -579329059;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF42752396 = -835786740;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF78765075 = -716694336;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF95149489 = -191566718;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF99609416 = -107875998;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF60846713 = -434707878;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF34952544 = -248881340;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF72144391 = -472809859;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF56978627 = -881796488;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF54935805 = -142535815;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF42297544 = -982453767;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF24203599 = -35300460;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF70769829 = -886437264;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF96646402 = -206713222;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF77851803 = -411706141;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF14649052 = -291943585;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF11877095 = -897744808;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF4659839 = -258581814;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF68736025 = 82748808;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF77661023 = -487655108;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF41889270 = -685162077;    double hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF3581171 = -27983336;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF39791409 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF88195208;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF88195208 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF14320450;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF14320450 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF12178655;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF12178655 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF58241130;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF58241130 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF74911805;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF74911805 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF95710824;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF95710824 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF97890281;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF97890281 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF50951376;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF50951376 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF961538;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF961538 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF17172706;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF17172706 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF32274519;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF32274519 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF40320836;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF40320836 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF21031296;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF21031296 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF25730401;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF25730401 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF84854967;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF84854967 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF49801741;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF49801741 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF3814411;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF3814411 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF82170967;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF82170967 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF81872447;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF81872447 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF14981167;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF14981167 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF78681387;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF78681387 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF75763490;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF75763490 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF69317251;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF69317251 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF7731218;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF7731218 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF1334783;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF1334783 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF98140457;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF98140457 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF51081859;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF51081859 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF75570535;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF75570535 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF60108700;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF60108700 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF65579752;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF65579752 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF20597326;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF20597326 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF55660848;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF55660848 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF655581;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF655581 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF85313620;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF85313620 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF83201548;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF83201548 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF41649601;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF41649601 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF82299241;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF82299241 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF71555399;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF71555399 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF88648442;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF88648442 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF49288804;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF49288804 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF91055772;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF91055772 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF68503699;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF68503699 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF77271055;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF77271055 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF156552;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF156552 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF64978822;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF64978822 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF22569707;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF22569707 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF2990969;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF2990969 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF51472443;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF51472443 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF14723823;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF14723823 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF25156157;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF25156157 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF93435360;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF93435360 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF63618698;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF63618698 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF725044;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF725044 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF58358036;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF58358036 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF61110022;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF61110022 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF12431719;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF12431719 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF45003199;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF45003199 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF4447438;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF4447438 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF56906348;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF56906348 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF76771347;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF76771347 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF44628966;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF44628966 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF22319747;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF22319747 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF90842676;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF90842676 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF35381785;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF35381785 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF96575380;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF96575380 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF76613670;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF76613670 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF39665256;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF39665256 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF35717675;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF35717675 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF42528853;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF42528853 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF43205366;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF43205366 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF67502500;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF67502500 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF32259012;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF32259012 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF93522524;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF93522524 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF32583643;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF32583643 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF23925394;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF23925394 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF10177688;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF10177688 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF98492435;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF98492435 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF69160700;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF69160700 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF42752396;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF42752396 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF78765075;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF78765075 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF95149489;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF95149489 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF99609416;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF99609416 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF60846713;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF60846713 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF34952544;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF34952544 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF72144391;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF72144391 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF56978627;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF56978627 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF54935805;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF54935805 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF42297544;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF42297544 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF24203599;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF24203599 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF70769829;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF70769829 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF96646402;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF96646402 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF77851803;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF77851803 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF14649052;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF14649052 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF11877095;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF11877095 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF4659839;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF4659839 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF68736025;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF68736025 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF77661023;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF77661023 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF41889270;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF41889270 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF3581171;     hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF3581171 = hPXdxAwRISIKZVXmNLuNByiPnRgjFrCghuIOOezOdAhZeGNzF39791409;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void DWAHJrngfbIqijmREMLsuYSbsinYOZQHANtHyafsLyJyMvXxvCRwRfDeEZPaDPRFLBqVpfSehShwPUOwL3325433() {     double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl62184998 = -889863157;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl33970393 = 6001030;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl41776516 = -542519006;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl42105483 = 12512789;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl47575282 = -335998665;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl54989489 = -526985343;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl19319228 = -444510998;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl4310090 = -995361419;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl65374343 = -420994565;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl96085608 = -727175404;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl34393960 = -476896653;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl73885790 = -261934808;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl75476102 = -762791358;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl9801828 = -503910245;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl17293569 = -905210860;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl54546333 = -151031454;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl43772333 = -962450212;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl86790294 = -378467699;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl3024328 = 97671598;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl88314967 = 55001329;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl36194850 = -845456647;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl64200339 = -756317911;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl42178417 = -746077921;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl52166930 = -456417489;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl14828775 = -505516014;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl73063699 = 76460307;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl75008296 = -570629120;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl21589785 = 14222097;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl69784649 = -900087076;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl93176009 = -937702646;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl76457878 = -87139864;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl93414658 = -902566283;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl51247096 = -704764460;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl59761430 = -726070296;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl79184947 = -206182812;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl82066227 = -181162763;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl23147946 = -326656418;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl66007662 = -975038701;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl84549934 = -805753789;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl36961264 = -676504587;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl90190507 = -194585303;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl93866502 = -708409621;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl13770532 = -473661880;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl17483276 = -253885278;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl84121765 = -629900172;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl32651135 = -745048428;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl7169312 = -868286692;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl72206062 = 29950743;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl27273958 = -984367277;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl91762144 = -122187767;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl20766004 = -20478084;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl52739360 = -968780622;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl66484753 = -540377424;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl50761318 = -978590324;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl67130583 = -679976250;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl97984658 = -33545246;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl91791976 = -247921049;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl89609586 = 13898482;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl27276708 = -481971197;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl74511582 = -312458973;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl79981193 = -956356223;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl97729443 = -358733096;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl34525441 = 4725657;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl72198333 = -483291919;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl19627730 = -540035540;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl40979301 = -574330370;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl22638695 = -557170349;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl15714673 = 63278938;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl30616881 = -197727433;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl35227341 = -624048097;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl31398387 = -824375037;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl77764671 = -987411511;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl2240361 = -572713911;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl66063064 = -225823816;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl98124460 = -750413369;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl42328347 = -37047027;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl50429808 = -182656032;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl24695141 = -392192644;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl68045164 = -826517317;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl82177639 = -760467587;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl65894388 = -55253001;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl2802235 = -500579864;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl94315826 = -1410627;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl78022504 = -677899310;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl72410006 = -817224563;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl23718518 = -118359243;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl26929906 = -262188859;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl485778 = -726174137;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl92630847 = 53905953;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl81200288 = -72637566;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl90274251 = -933241715;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl33538359 = -240554900;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl38730955 = -393067504;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl10038352 = -393294816;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl56980071 = -720148365;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl92461064 = -835852208;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl59341062 = -613135278;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl41572198 = -990369961;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl97855546 = -713849738;    double pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl43142464 = -889863157;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl62184998 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl33970393;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl33970393 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl41776516;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl41776516 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl42105483;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl42105483 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl47575282;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl47575282 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl54989489;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl54989489 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl19319228;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl19319228 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl4310090;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl4310090 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl65374343;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl65374343 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl96085608;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl96085608 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl34393960;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl34393960 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl73885790;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl73885790 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl75476102;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl75476102 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl9801828;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl9801828 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl17293569;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl17293569 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl54546333;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl54546333 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl43772333;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl43772333 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl86790294;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl86790294 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl3024328;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl3024328 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl88314967;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl88314967 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl36194850;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl36194850 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl64200339;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl64200339 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl42178417;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl42178417 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl52166930;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl52166930 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl14828775;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl14828775 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl73063699;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl73063699 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl75008296;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl75008296 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl21589785;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl21589785 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl69784649;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl69784649 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl93176009;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl93176009 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl76457878;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl76457878 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl93414658;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl93414658 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl51247096;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl51247096 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl59761430;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl59761430 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl79184947;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl79184947 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl82066227;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl82066227 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl23147946;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl23147946 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl66007662;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl66007662 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl84549934;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl84549934 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl36961264;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl36961264 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl90190507;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl90190507 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl93866502;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl93866502 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl13770532;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl13770532 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl17483276;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl17483276 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl84121765;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl84121765 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl32651135;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl32651135 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl7169312;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl7169312 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl72206062;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl72206062 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl27273958;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl27273958 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl91762144;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl91762144 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl20766004;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl20766004 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl52739360;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl52739360 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl66484753;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl66484753 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl50761318;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl50761318 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl67130583;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl67130583 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl97984658;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl97984658 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl91791976;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl91791976 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl89609586;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl89609586 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl27276708;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl27276708 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl74511582;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl74511582 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl79981193;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl79981193 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl97729443;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl97729443 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl34525441;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl34525441 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl72198333;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl72198333 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl19627730;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl19627730 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl40979301;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl40979301 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl22638695;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl22638695 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl15714673;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl15714673 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl30616881;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl30616881 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl35227341;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl35227341 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl31398387;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl31398387 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl77764671;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl77764671 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl2240361;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl2240361 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl66063064;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl66063064 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl98124460;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl98124460 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl42328347;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl42328347 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl50429808;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl50429808 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl24695141;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl24695141 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl68045164;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl68045164 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl82177639;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl82177639 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl65894388;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl65894388 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl2802235;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl2802235 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl94315826;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl94315826 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl78022504;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl78022504 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl72410006;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl72410006 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl23718518;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl23718518 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl26929906;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl26929906 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl485778;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl485778 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl92630847;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl92630847 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl81200288;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl81200288 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl90274251;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl90274251 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl33538359;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl33538359 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl38730955;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl38730955 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl10038352;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl10038352 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl56980071;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl56980071 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl92461064;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl92461064 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl59341062;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl59341062 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl41572198;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl41572198 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl97855546;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl97855546 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl43142464;     pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl43142464 = pcMIUpUJOCZLFpvgEnLFCHQkmPyxGPjKSONmFwqLVLbctScdl62184998;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void bhLwEbJXwOnvUroHuYFYSKQfvEUPTDdrTbauEbNwSTMxdWJvpuQlBQqRQfAAGtEtlvctQuDTKIGyxTCYv85554194() {     double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh13920449 = 93882010;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh49644376 = -70898725;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh90576875 = -339878391;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh17180885 = -903756354;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh24299215 = -43649319;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh79872843 = -686012569;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh93096071 = -267722595;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh23101568 = -19140973;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh16672420 = -211843276;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh64882732 = -168821387;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh29686659 = -438619124;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh84242168 = -196916308;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh62656896 = -371971619;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh68569546 = -130590792;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh71308826 = -382938570;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh66273605 = -962715410;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh99742858 = -230544902;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh72473216 = -841044194;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh62598177 = -430242586;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh8044542 = -755266820;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh81942202 = -928264815;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh66619793 = -929798919;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh43527931 = -354315369;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh44817180 = -328009440;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh86244632 = -451170451;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh30769114 = -269149472;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh13836931 = 66962162;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh19719010 = -369108589;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh44534722 = -949985978;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh63161093 = -299603442;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh13676688 = -420022331;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh6444389 = -126340475;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh49340405 = -187146346;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh53785142 = -386667462;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh77390075 = -422992455;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh63765838 = -417331592;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh72796172 = -971011161;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh66841274 = 41448934;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh54324776 = -151071184;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh62043680 = -195120254;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh58874594 = -313744091;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh53891903 = -696929242;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh70353763 = -374438412;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh10419095 = -179273956;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh56150973 = -130397255;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh34345582 = -68940369;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh93335506 = -230627146;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh51190527 = -374453953;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh16292411 = -948320006;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh80418404 = 18800853;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh61445895 = -828982240;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh84719113 = -330380182;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh89723499 = -284490612;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh20820559 = -593389636;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh3611992 = -709739451;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh47300655 = 23680929;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh6116445 = -716583357;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh45759696 = 88131048;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh30936252 = -352585903;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh93530101 = -774499848;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh66035913 = -652974732;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh73377062 = -898614006;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh78566846 = -69154995;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh53511327 = -912239834;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh51206045 = -748799056;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh23242270 = -212278650;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh34901763 = 90230037;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh8871754 = -985304158;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh91179471 = -707598337;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh7542989 = -965606978;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh93477433 = -991704249;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh32901584 = -171993837;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh18148440 = -589973011;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh554497 = -135122333;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh49169947 = -341522730;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh28050300 = -131335573;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh96266029 = -455360508;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh33108837 = -75041414;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh88666206 = -97612185;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh51899051 = -282230083;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh37433608 = 61477674;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh62646404 = -558583886;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh3426599 = -420788583;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh64116318 = -868786832;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh1715199 = -470621203;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh28957574 = 10357851;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh16720890 = -841849863;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh28519847 = -593756711;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh50173151 = -676928012;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh30089420 = -346673384;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh57649393 = -700748235;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh27036476 = -959142210;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh35905023 = -605965163;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh60794675 = -376571336;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh96007767 = -542145522;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh85497532 = -415130085;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh75325057 = -527774248;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh16842437 = -462198578;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh59213049 = -430474900;    double YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh32908703 = 93882010;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh13920449 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh49644376;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh49644376 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh90576875;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh90576875 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh17180885;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh17180885 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh24299215;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh24299215 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh79872843;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh79872843 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh93096071;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh93096071 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh23101568;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh23101568 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh16672420;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh16672420 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh64882732;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh64882732 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh29686659;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh29686659 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh84242168;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh84242168 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh62656896;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh62656896 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh68569546;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh68569546 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh71308826;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh71308826 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh66273605;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh66273605 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh99742858;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh99742858 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh72473216;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh72473216 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh62598177;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh62598177 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh8044542;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh8044542 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh81942202;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh81942202 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh66619793;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh66619793 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh43527931;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh43527931 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh44817180;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh44817180 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh86244632;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh86244632 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh30769114;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh30769114 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh13836931;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh13836931 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh19719010;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh19719010 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh44534722;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh44534722 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh63161093;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh63161093 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh13676688;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh13676688 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh6444389;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh6444389 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh49340405;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh49340405 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh53785142;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh53785142 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh77390075;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh77390075 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh63765838;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh63765838 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh72796172;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh72796172 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh66841274;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh66841274 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh54324776;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh54324776 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh62043680;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh62043680 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh58874594;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh58874594 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh53891903;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh53891903 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh70353763;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh70353763 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh10419095;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh10419095 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh56150973;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh56150973 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh34345582;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh34345582 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh93335506;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh93335506 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh51190527;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh51190527 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh16292411;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh16292411 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh80418404;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh80418404 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh61445895;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh61445895 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh84719113;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh84719113 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh89723499;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh89723499 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh20820559;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh20820559 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh3611992;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh3611992 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh47300655;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh47300655 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh6116445;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh6116445 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh45759696;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh45759696 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh30936252;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh30936252 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh93530101;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh93530101 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh66035913;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh66035913 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh73377062;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh73377062 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh78566846;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh78566846 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh53511327;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh53511327 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh51206045;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh51206045 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh23242270;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh23242270 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh34901763;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh34901763 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh8871754;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh8871754 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh91179471;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh91179471 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh7542989;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh7542989 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh93477433;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh93477433 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh32901584;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh32901584 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh18148440;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh18148440 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh554497;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh554497 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh49169947;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh49169947 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh28050300;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh28050300 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh96266029;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh96266029 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh33108837;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh33108837 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh88666206;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh88666206 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh51899051;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh51899051 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh37433608;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh37433608 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh62646404;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh62646404 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh3426599;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh3426599 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh64116318;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh64116318 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh1715199;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh1715199 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh28957574;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh28957574 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh16720890;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh16720890 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh28519847;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh28519847 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh50173151;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh50173151 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh30089420;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh30089420 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh57649393;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh57649393 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh27036476;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh27036476 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh35905023;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh35905023 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh60794675;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh60794675 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh96007767;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh96007767 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh85497532;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh85497532 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh75325057;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh75325057 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh16842437;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh16842437 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh59213049;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh59213049 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh32908703;     YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh32908703 = YaZnrpClJdYaNpYPTMhuQeurwasKrTxdbFhSfGtFZHHQesxTh13920449;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void jlIUQGDdPwbPuhycgiuNCPnNlvLIzcznNPyTJCkkAtzspwdogkSFhxdUxujUvudnwnBfieSdyKNIPuXoS15540424() {     double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH36314037 = -767997812;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH95419559 = 23153345;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH18032943 = -622403621;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH47107712 = 10376945;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH13633367 = -166350999;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH59950528 = -847188135;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH16704474 = -385173434;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH29521376 = -785560300;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH31095387 = -382393245;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH60006803 = -274755848;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH46907914 = -475771453;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH25853440 = -712183239;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH97812162 = -969030465;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH57340078 = -313146497;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH62871994 = -47703431;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH35964970 = 88412698;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH93713450 = -688210152;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH55449099 = -895715263;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH83451538 = 52637556;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH14487062 = -395876823;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH3155886 = -109285750;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH52138746 = -924573349;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH9942858 = -71438119;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH27666859 = 88918226;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH93342190 = -746035723;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH2498032 = -804837767;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH90704769 = -489824618;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH90226934 = -648596054;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH38748836 = -648172783;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH96228403 = -544467935;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH24554814 = -114245248;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH79261722 = -386590068;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH44926652 = -514545625;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH12890993 = -834112580;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH71261402 = -227434953;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH62630517 = -652961222;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH54294516 = -604305735;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH50549696 = -930913858;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH67319311 = -939435799;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH10356503 = -721912597;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH99776297 = -728977859;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH56702633 = -261045851;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH15620596 = -802838741;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH50631316 = -619673161;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH40116188 = -566281331;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH2017896 = -439124793;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH77935111 = -327756777;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH20405621 = -622227587;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH92093926 = -234272843;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH57456727 = -536194520;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH57055742 = -505503509;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH44023113 = -379053716;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH92589554 = -64347834;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH70856833 = -337150593;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH12384539 = 6455711;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH84175291 = -843424463;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH85476702 = -905408537;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH90366083 = -611321847;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH53765522 = -243587333;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH11135336 = -361513232;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH69245758 = -257363518;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH26477540 = -736577380;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH90772540 = -37387518;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH34866984 = -837925310;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH35451990 = -60510601;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH67646191 = 10818614;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH80926788 = -97637615;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH84921170 = -34917885;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH86078676 = 14288455;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH241477 = -394742209;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH81670454 = -307281568;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH43163755 = -757296294;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH88129788 = -956279464;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH73095036 = -225449848;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH14710764 = -666898965;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH46453252 = -848239899;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH36518151 = -21734608;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH59311542 = -451764958;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH87550671 = -344800444;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH91324294 = -206910930;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH24562921 = -377080991;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH70299149 = -867597031;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH98133007 = -314323212;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH81292109 = -11978263;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH39172661 = 61035574;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH80531700 = -735191533;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH86672168 = -222242234;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH74069819 = -77395032;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH506454 = -740568292;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH87086110 = -384010491;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH77153815 = -747552686;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH63928433 = -992983888;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH96784174 = -587326526;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH56183975 = -477922567;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH41110744 = -364549079;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH73298758 = -992400479;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH65930093 = -123658334;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH80753611 = -964913432;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH15179326 = -459162561;    double XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH72469996 = -767997812;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH36314037 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH95419559;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH95419559 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH18032943;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH18032943 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH47107712;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH47107712 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH13633367;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH13633367 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH59950528;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH59950528 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH16704474;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH16704474 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH29521376;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH29521376 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH31095387;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH31095387 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH60006803;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH60006803 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH46907914;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH46907914 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH25853440;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH25853440 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH97812162;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH97812162 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH57340078;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH57340078 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH62871994;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH62871994 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH35964970;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH35964970 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH93713450;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH93713450 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH55449099;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH55449099 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH83451538;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH83451538 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH14487062;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH14487062 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH3155886;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH3155886 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH52138746;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH52138746 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH9942858;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH9942858 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH27666859;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH27666859 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH93342190;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH93342190 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH2498032;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH2498032 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH90704769;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH90704769 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH90226934;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH90226934 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH38748836;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH38748836 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH96228403;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH96228403 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH24554814;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH24554814 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH79261722;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH79261722 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH44926652;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH44926652 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH12890993;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH12890993 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH71261402;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH71261402 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH62630517;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH62630517 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH54294516;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH54294516 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH50549696;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH50549696 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH67319311;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH67319311 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH10356503;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH10356503 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH99776297;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH99776297 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH56702633;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH56702633 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH15620596;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH15620596 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH50631316;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH50631316 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH40116188;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH40116188 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH2017896;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH2017896 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH77935111;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH77935111 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH20405621;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH20405621 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH92093926;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH92093926 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH57456727;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH57456727 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH57055742;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH57055742 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH44023113;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH44023113 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH92589554;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH92589554 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH70856833;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH70856833 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH12384539;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH12384539 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH84175291;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH84175291 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH85476702;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH85476702 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH90366083;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH90366083 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH53765522;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH53765522 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH11135336;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH11135336 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH69245758;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH69245758 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH26477540;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH26477540 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH90772540;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH90772540 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH34866984;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH34866984 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH35451990;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH35451990 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH67646191;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH67646191 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH80926788;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH80926788 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH84921170;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH84921170 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH86078676;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH86078676 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH241477;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH241477 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH81670454;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH81670454 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH43163755;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH43163755 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH88129788;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH88129788 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH73095036;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH73095036 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH14710764;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH14710764 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH46453252;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH46453252 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH36518151;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH36518151 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH59311542;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH59311542 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH87550671;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH87550671 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH91324294;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH91324294 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH24562921;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH24562921 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH70299149;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH70299149 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH98133007;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH98133007 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH81292109;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH81292109 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH39172661;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH39172661 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH80531700;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH80531700 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH86672168;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH86672168 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH74069819;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH74069819 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH506454;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH506454 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH87086110;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH87086110 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH77153815;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH77153815 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH63928433;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH63928433 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH96784174;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH96784174 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH56183975;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH56183975 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH41110744;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH41110744 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH73298758;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH73298758 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH65930093;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH65930093 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH80753611;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH80753611 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH15179326;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH15179326 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH72469996;     XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH72469996 = XcPJuGQmdVPTPoFPMwCvyFBRoHXkUFCWuCYSOdChltEIDKiVH36314037;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void XBmcrPROKUvNlRyhmhTRbOILOpmjKfblMBnttezLMwdosUaMwwvhbkRJsbOBciEetJAkdEoIhIEfkUSuOanNjuJbjdASQxieryvi82501826() {     double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR26433874 = -699278154;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR17116941 = -394367950;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR14838854 = -716326696;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR5686148 = 3664293;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR35530205 = -576029762;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR75542365 = -439254055;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR79915248 = -827255373;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR51613990 = -126185356;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR37647239 = -103931952;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR60901987 = -581437245;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR43380338 = -943663682;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR74894625 = 72750263;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR68011209 = -202924799;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR49603152 = -656460433;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR6118475 = -495537226;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR34709260 = 55237178;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR93528390 = -769169963;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR99805345 = -635636177;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR64794199 = 68244853;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR53885073 = -555779584;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR70747712 = -624177216;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR28516594 = -667661868;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR80059672 = -936855882;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR79238064 = -240026672;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR68670068 = -716240520;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR37863073 = -588917430;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR82893686 = -550153325;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR48800835 = -217453101;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR12636281 = -956442145;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR20107353 = -94301700;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR61430895 = -828005027;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR63352494 = -179236249;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR39348117 = 83285000;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR37012475 = -702245470;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR89215974 = -137084538;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR58689714 = 64243622;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR66469453 = -219775017;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR44824659 = -792235781;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR13165925 = -259579261;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR26741537 = -236052056;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR1331639 = -522783033;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR97044757 = -269331146;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR35720797 = -737394591;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR40525155 = -40720793;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR16098658 = -52050689;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR62884858 = -734793370;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR86056193 = -357519899;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR86175660 = -157645197;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR38670970 = -233976051;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR6782556 = -580215743;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR99680635 = -458440561;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR2343478 = -725626297;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR17490358 = -768254837;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR34014166 = -992625726;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR11754115 = -979043838;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR97917280 = 68383713;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR37057269 = -457512069;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR35600789 = -376300024;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR37016080 = -280095188;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR97667131 = -987112333;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR92648678 = -889100731;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR31114414 = -509802273;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR38977709 = -169743211;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR17539886 = 90369747;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR99471091 = -753432219;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR80027844 = -664427434;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR35546508 = 89465263;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR30998735 = -500679330;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR60387178 = -419375895;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR47428761 = -459780848;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR68239806 = -724987806;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR48703732 = -976934182;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR86639420 = -276056916;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR38052663 = -695703091;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR52553434 = 67003449;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR73702954 = -254846070;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR92795797 = -930267277;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR39534518 = -796135089;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR63139407 = -87975984;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR5785210 = -981447151;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR51806879 = -131397532;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR96718026 = -292508128;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR10129865 = -983477051;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR5853726 = -276226403;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR20426718 = -635861139;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR59087418 = -2378730;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR45862136 = -410981412;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR5333951 = 75910725;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR25258361 = -723201633;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR91298693 = -105468252;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR21632445 = -478244310;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR30868664 = -843474994;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR7808580 = -412140594;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR15498794 = -272466929;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR34092858 = -346951326;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR70217225 = 87019240;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR58067048 = 412064;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR18180911 = -727764339;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR41054063 = -287288575;    double TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR36070814 = -699278154;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR26433874 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR17116941;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR17116941 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR14838854;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR14838854 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR5686148;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR5686148 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR35530205;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR35530205 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR75542365;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR75542365 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR79915248;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR79915248 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR51613990;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR51613990 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR37647239;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR37647239 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR60901987;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR60901987 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR43380338;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR43380338 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR74894625;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR74894625 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR68011209;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR68011209 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR49603152;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR49603152 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR6118475;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR6118475 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR34709260;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR34709260 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR93528390;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR93528390 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR99805345;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR99805345 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR64794199;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR64794199 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR53885073;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR53885073 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR70747712;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR70747712 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR28516594;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR28516594 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR80059672;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR80059672 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR79238064;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR79238064 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR68670068;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR68670068 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR37863073;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR37863073 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR82893686;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR82893686 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR48800835;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR48800835 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR12636281;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR12636281 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR20107353;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR20107353 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR61430895;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR61430895 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR63352494;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR63352494 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR39348117;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR39348117 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR37012475;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR37012475 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR89215974;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR89215974 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR58689714;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR58689714 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR66469453;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR66469453 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR44824659;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR44824659 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR13165925;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR13165925 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR26741537;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR26741537 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR1331639;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR1331639 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR97044757;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR97044757 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR35720797;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR35720797 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR40525155;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR40525155 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR16098658;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR16098658 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR62884858;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR62884858 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR86056193;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR86056193 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR86175660;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR86175660 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR38670970;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR38670970 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR6782556;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR6782556 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR99680635;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR99680635 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR2343478;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR2343478 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR17490358;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR17490358 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR34014166;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR34014166 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR11754115;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR11754115 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR97917280;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR97917280 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR37057269;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR37057269 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR35600789;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR35600789 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR37016080;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR37016080 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR97667131;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR97667131 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR92648678;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR92648678 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR31114414;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR31114414 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR38977709;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR38977709 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR17539886;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR17539886 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR99471091;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR99471091 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR80027844;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR80027844 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR35546508;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR35546508 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR30998735;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR30998735 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR60387178;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR60387178 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR47428761;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR47428761 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR68239806;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR68239806 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR48703732;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR48703732 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR86639420;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR86639420 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR38052663;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR38052663 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR52553434;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR52553434 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR73702954;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR73702954 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR92795797;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR92795797 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR39534518;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR39534518 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR63139407;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR63139407 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR5785210;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR5785210 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR51806879;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR51806879 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR96718026;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR96718026 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR10129865;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR10129865 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR5853726;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR5853726 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR20426718;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR20426718 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR59087418;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR59087418 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR45862136;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR45862136 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR5333951;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR5333951 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR25258361;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR25258361 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR91298693;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR91298693 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR21632445;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR21632445 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR30868664;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR30868664 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR7808580;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR7808580 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR15498794;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR15498794 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR34092858;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR34092858 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR70217225;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR70217225 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR58067048;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR58067048 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR18180911;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR18180911 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR41054063;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR41054063 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR36070814;     TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR36070814 = TqjrInzTflZYITnCurvyAYAzEVsjZanlYkbYrwEwuqwyEcKwKgkADwhupjnnuQtFynzXsPLymyEKcCucLvZspnhcCgiHJRBewqAR26433874;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void XHimZBdcjCjroErHkxIcNLQtCkJWImiiqwqyXagZSEPzHOWGVhuUvkpMrojpsHUxTBBrOsjKQiKIwQmoNCAasOnFGdHjqrgKkRgG62330786() {     int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa53759455 = -611172981;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa25258830 = -694799138;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa70533479 = -73301156;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa37673583 = -229522120;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa74966065 = -529336212;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa91330921 = -978687676;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa32602434 = -79335826;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa83505054 = -302513801;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa2219486 = -880770155;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa51377858 = -355039597;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa37766137 = -696209986;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa9849901 = 45668628;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa57883095 = -385109570;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa34547423 = -548800485;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa32523539 = -989776254;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa73234164 = -118041517;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa7407462 = -410873520;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa64353772 = 58313684;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa45511567 = -229156487;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa30720792 = -331468769;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa57752262 = -835835385;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa98716954 = -603381893;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa57514187 = 30032947;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa90864775 = -609777211;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa48657048 = -184370709;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa37627066 = -17823305;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa26444044 = -352775392;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa84276216 = -923720778;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa35754731 = -483082162;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa61347525 = -708538527;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa95636829 = -99214598;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa25029264 = 67060047;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa44539161 = -520459861;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa84411130 = -236476308;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa77057562 = -860844649;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa13060032 = -904695613;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa31807039 = -994901672;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa18792698 = -728015962;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa47379148 = -903723916;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa81702957 = -242564277;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa26275256 = -876044086;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa11806502 = -621545210;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa71291728 = -797429813;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa84830329 = -766801737;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa67095202 = 38375662;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa658651 = -447199345;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa1217498 = 58631254;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa41735210 = -23661722;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa89506950 = -899782110;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa84214742 = -596981612;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa90552247 = -731687064;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa671367 = -253695726;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa27216447 = -336226068;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa15284613 = -248548931;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa4578525 = -566222998;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa55042501 = 92208911;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa67744642 = -624832086;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa79668703 = -463523945;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa89016535 = 54848588;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa37339000 = -411512908;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa64886878 = -525912284;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa48326218 = -155615049;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa47750323 = -819431640;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa40871960 = -72231628;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa55741029 = -155825000;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa12736874 = -663270034;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa65310740 = -433871511;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa73471965 = -48633262;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa57489860 = -687955836;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa19463507 = 14919359;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa41427126 = -123139846;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa88614763 = -682857559;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa16974624 = -37962401;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa63808610 = -986592211;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa4445536 = -455424684;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa45945760 = -114290175;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa27425227 = -805952080;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa72683858 = -203165316;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa23769574 = -548152874;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa47998397 = -737171365;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa36409568 = 23545441;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa84708834 = -229113671;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa94769265 = 76061332;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa51539988 = -886100550;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa70795277 = -976851464;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa94965462 = -845518873;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa97812817 = -596713886;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa29254549 = -171910931;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa79832606 = -670253311;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa22015062 = -853053561;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa45315390 = -179863528;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa52138335 = -431377727;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa29776163 = -682864550;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa10040149 = -392211008;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa16816080 = -716651994;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa77949038 = -620429038;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa64056178 = -802113571;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa30419768 = -625198186;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa29089300 = -510976738;    int NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa54358329 = -611172981;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa53759455 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa25258830;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa25258830 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa70533479;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa70533479 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa37673583;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa37673583 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa74966065;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa74966065 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa91330921;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa91330921 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa32602434;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa32602434 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa83505054;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa83505054 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa2219486;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa2219486 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa51377858;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa51377858 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa37766137;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa37766137 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa9849901;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa9849901 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa57883095;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa57883095 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa34547423;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa34547423 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa32523539;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa32523539 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa73234164;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa73234164 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa7407462;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa7407462 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa64353772;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa64353772 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa45511567;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa45511567 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa30720792;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa30720792 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa57752262;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa57752262 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa98716954;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa98716954 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa57514187;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa57514187 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa90864775;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa90864775 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa48657048;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa48657048 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa37627066;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa37627066 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa26444044;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa26444044 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa84276216;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa84276216 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa35754731;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa35754731 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa61347525;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa61347525 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa95636829;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa95636829 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa25029264;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa25029264 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa44539161;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa44539161 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa84411130;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa84411130 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa77057562;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa77057562 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa13060032;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa13060032 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa31807039;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa31807039 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa18792698;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa18792698 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa47379148;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa47379148 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa81702957;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa81702957 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa26275256;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa26275256 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa11806502;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa11806502 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa71291728;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa71291728 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa84830329;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa84830329 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa67095202;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa67095202 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa658651;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa658651 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa1217498;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa1217498 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa41735210;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa41735210 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa89506950;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa89506950 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa84214742;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa84214742 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa90552247;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa90552247 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa671367;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa671367 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa27216447;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa27216447 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa15284613;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa15284613 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa4578525;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa4578525 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa55042501;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa55042501 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa67744642;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa67744642 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa79668703;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa79668703 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa89016535;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa89016535 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa37339000;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa37339000 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa64886878;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa64886878 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa48326218;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa48326218 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa47750323;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa47750323 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa40871960;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa40871960 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa55741029;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa55741029 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa12736874;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa12736874 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa65310740;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa65310740 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa73471965;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa73471965 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa57489860;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa57489860 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa19463507;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa19463507 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa41427126;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa41427126 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa88614763;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa88614763 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa16974624;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa16974624 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa63808610;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa63808610 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa4445536;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa4445536 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa45945760;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa45945760 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa27425227;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa27425227 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa72683858;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa72683858 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa23769574;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa23769574 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa47998397;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa47998397 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa36409568;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa36409568 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa84708834;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa84708834 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa94769265;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa94769265 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa51539988;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa51539988 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa70795277;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa70795277 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa94965462;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa94965462 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa97812817;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa97812817 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa29254549;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa29254549 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa79832606;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa79832606 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa22015062;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa22015062 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa45315390;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa45315390 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa52138335;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa52138335 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa29776163;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa29776163 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa10040149;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa10040149 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa16816080;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa16816080 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa77949038;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa77949038 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa64056178;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa64056178 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa30419768;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa30419768 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa29089300;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa29089300 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa54358329;     NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa54358329 = NercyjDMahQaCvbpHtEENvkklAUZCzYekfajLXcJLafZNgguPrDqNbsStGqyPdKaImqXVsejRutnPLXFTZKLvhQJmIpEgeuiQERa53759455;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void YePMEPGowILcRFJOcHVDLjwYAThNeEQrkBmiMKdgCZsnzsCJlbFjUWspiqMlhsKrsUsPTaBSeoBmqIZHQYcCzgXNIxAWyryJOAvf25797717() {     long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq21212963 = -338692974;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq81882704 = -259507716;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq46392502 = -952787924;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq46889629 = -418745148;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq25248637 = -856877274;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq79204525 = -385896202;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq37816224 = -417827635;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq971170 = -739245656;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq19918378 = -362089478;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq46949521 = -64314757;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq3223604 = -417308430;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq75981765 = -77131552;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq28137885 = -49115583;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq69449491 = -903013158;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq95709947 = -878458013;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq42297674 = -733501169;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq51285524 = -909018675;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq69507778 = -966317842;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq7036259 = -288472697;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq6862318 = -52030152;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq12761858 = -274302052;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq22424831 = 80299418;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq58987521 = -669798684;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq49500058 = -907321995;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq93418544 = 85661621;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq27038505 = -995551432;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq99406341 = -939726526;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq34071091 = -987636766;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq66912567 = -885403647;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq56354309 = -178319903;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq24952997 = -150317405;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq89891982 = -639512637;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq87336140 = -548943828;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq55577721 = -67987871;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq29906175 = -70111940;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq9954310 = -781722822;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq19392852 = -435930886;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq49638601 = -531039716;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq33296990 = -802160262;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq88208296 = -526426350;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq67954630 = -88180441;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq84788294 = -739804467;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq76608660 = -643108068;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq19989470 = -367724759;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq39051651 = -140393093;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq48764445 = -965218057;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq39877644 = -603379938;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq43835324 = -39144161;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq38596988 = -735586551;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq35915980 = -73987597;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq57474541 = -384676860;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq89135548 = -475655550;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq42532903 = -468036791;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq96899553 = -870047455;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq13035859 = -342777610;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq98788131 = -318992393;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq22895183 = -589709032;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq96892444 = 54534071;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq53471084 = -404406770;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq98210131 = -861325843;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq79798184 = -446169677;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq3745133 = -430190870;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq34058602 = -853842009;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq63564068 = -83769576;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq21996525 = -913997353;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq13331621 = -777795793;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq88645624 = -528187724;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq72560163 = -981127712;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq39543317 = -732901219;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq85755637 = 3264809;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq22904823 = -197570283;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq1646924 = -277978960;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq36210788 = -64157580;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq18827963 = -762046348;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq38907688 = -963849712;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq27973564 = -534497586;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq45816171 = -276592515;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq38998052 = -202073926;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq10448407 = -666928903;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq44654099 = 50879678;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq87160860 = -292171495;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq55571017 = -800582365;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq95474103 = -152050216;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq30996588 = -711416051;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq98879768 = -793643043;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq35817448 = -674661855;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq47359080 = -71475846;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq90436586 = -678896373;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq42541862 = -725210262;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq31118044 = -751119548;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq87059126 = -92013791;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq22500408 = -390464958;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq96167516 = -26632947;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq35086858 = -940834420;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq8410113 = 19743326;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq64209497 = -657989572;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq50729692 = -885962458;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq13044592 = -459338493;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq97992944 = -453727406;    long AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq25720031 = -338692974;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq21212963 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq81882704;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq81882704 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq46392502;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq46392502 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq46889629;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq46889629 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq25248637;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq25248637 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq79204525;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq79204525 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq37816224;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq37816224 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq971170;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq971170 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq19918378;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq19918378 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq46949521;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq46949521 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq3223604;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq3223604 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq75981765;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq75981765 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq28137885;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq28137885 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq69449491;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq69449491 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq95709947;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq95709947 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq42297674;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq42297674 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq51285524;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq51285524 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq69507778;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq69507778 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq7036259;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq7036259 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq6862318;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq6862318 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq12761858;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq12761858 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq22424831;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq22424831 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq58987521;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq58987521 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq49500058;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq49500058 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq93418544;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq93418544 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq27038505;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq27038505 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq99406341;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq99406341 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq34071091;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq34071091 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq66912567;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq66912567 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq56354309;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq56354309 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq24952997;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq24952997 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq89891982;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq89891982 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq87336140;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq87336140 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq55577721;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq55577721 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq29906175;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq29906175 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq9954310;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq9954310 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq19392852;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq19392852 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq49638601;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq49638601 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq33296990;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq33296990 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq88208296;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq88208296 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq67954630;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq67954630 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq84788294;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq84788294 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq76608660;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq76608660 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq19989470;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq19989470 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq39051651;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq39051651 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq48764445;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq48764445 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq39877644;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq39877644 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq43835324;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq43835324 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq38596988;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq38596988 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq35915980;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq35915980 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq57474541;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq57474541 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq89135548;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq89135548 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq42532903;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq42532903 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq96899553;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq96899553 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq13035859;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq13035859 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq98788131;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq98788131 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq22895183;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq22895183 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq96892444;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq96892444 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq53471084;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq53471084 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq98210131;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq98210131 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq79798184;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq79798184 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq3745133;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq3745133 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq34058602;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq34058602 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq63564068;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq63564068 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq21996525;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq21996525 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq13331621;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq13331621 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq88645624;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq88645624 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq72560163;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq72560163 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq39543317;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq39543317 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq85755637;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq85755637 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq22904823;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq22904823 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq1646924;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq1646924 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq36210788;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq36210788 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq18827963;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq18827963 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq38907688;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq38907688 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq27973564;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq27973564 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq45816171;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq45816171 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq38998052;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq38998052 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq10448407;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq10448407 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq44654099;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq44654099 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq87160860;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq87160860 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq55571017;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq55571017 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq95474103;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq95474103 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq30996588;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq30996588 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq98879768;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq98879768 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq35817448;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq35817448 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq47359080;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq47359080 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq90436586;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq90436586 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq42541862;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq42541862 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq31118044;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq31118044 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq87059126;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq87059126 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq22500408;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq22500408 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq96167516;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq96167516 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq35086858;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq35086858 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq8410113;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq8410113 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq64209497;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq64209497 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq50729692;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq50729692 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq13044592;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq13044592 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq97992944;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq97992944 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq25720031;     AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq25720031 = AnpLanFfVGyZREUIQIrLweGVafTmqrYpNuGdjQcMbssCzaEtXqtGJjiWgTluTSodhIMXyrZzffkElDWzaaPzyRgeLkwPfhtIDPUq21212963;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void gcCahWMBNWTKZFQfpsRZmUyQlvgiqSCuddUfzVQVosgURPHyunipgyLMdlompdKvTZgvklgTcwktnezVnioDkNOfSIBNgdfLilAs51974935() {     float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM30804206 = -196842457;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM87317791 = -101609445;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM9378799 = -169775307;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM31575283 = -881761648;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM43171939 = -558650792;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM2985720 = -18730484;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM61585209 = -900947572;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM53706991 = -321590020;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM45786945 = -404996530;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM27453672 = -8178764;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM43758989 = -238454924;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM21371725 = -523761573;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM72782133 = -246537957;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM93206495 = -516036294;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM76896835 = -543019173;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM19975339 = -513470799;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM29136198 = -151945883;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM76426508 = -808457663;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM27799664 = -341079027;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM90834748 = -623457144;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM52975044 = -440172657;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM24636629 = -469596372;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM78838143 = 46687855;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM96967877 = -932350624;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM15728567 = -515496359;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM8883970 = -511323349;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM90412597 = -514806308;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM25734904 = -415743598;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM76205745 = -334548999;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM76895178 = 18123325;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM74926823 = -535856659;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM21200136 = -800596956;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM50507496 = -955348863;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM38314292 = -852383102;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM46612065 = 87192631;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM20665349 = -878203713;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM43980555 = 21550445;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM50437198 = -471939115;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM28800130 = -780377841;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM39938620 = -782381063;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM17064194 = -897799961;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM44140721 = -890089947;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM87700422 = -245900588;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM13652899 = -459362830;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM53053506 = -216655713;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM43878550 = -242195719;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM16139711 = -306196072;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM22069404 = -3468407;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM66980427 = -417347067;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM16117440 = -85508722;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM67905319 = -954701340;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM56631145 = -458508117;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM49534678 = -352025751;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM27861780 = -704156299;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM98999890 = -124386156;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM6167577 = -727246086;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM8479648 = -48297300;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM12410921 = -237424684;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM15846717 = -266265290;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM34287970 = 52672556;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM12573122 = -503924177;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM35850305 = -385203974;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM77501246 = -987041021;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM68891766 = -323119855;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM52526848 = -472322106;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM22558853 = -437857968;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM70864228 = -568412711;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM34467842 = -394154856;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM46594431 = -503228926;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM56231486 = -664815460;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM75994784 = -435021244;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM78698999 = -680006769;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM47626379 = 71920178;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM87861043 = -558697965;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM73770555 = -725657183;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM8834324 = -550082711;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM36936206 = -123695785;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM65185245 = -493949315;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM43914372 = -615694911;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM71850016 = -173300640;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM92744258 = -105127278;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM68343194 = -411337901;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM58754476 = -998396531;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM60088306 = -149040277;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM8989860 = -27175336;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM18295679 = 22651458;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM71665457 = -348571205;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM22645717 = -151192564;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM39314401 = -627996947;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM40444488 = -185561284;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM12185701 = -729906414;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM31569634 = -741024872;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM34590482 = -105673826;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM94512160 = -733050398;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM27365498 = -178456886;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM81213889 = -412595987;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM66639475 = -903048926;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM18808657 = -922780734;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM61126051 = -987040724;    float jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM30494654 = -196842457;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM30804206 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM87317791;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM87317791 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM9378799;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM9378799 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM31575283;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM31575283 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM43171939;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM43171939 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM2985720;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM2985720 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM61585209;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM61585209 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM53706991;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM53706991 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM45786945;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM45786945 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM27453672;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM27453672 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM43758989;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM43758989 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM21371725;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM21371725 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM72782133;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM72782133 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM93206495;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM93206495 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM76896835;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM76896835 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM19975339;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM19975339 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM29136198;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM29136198 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM76426508;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM76426508 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM27799664;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM27799664 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM90834748;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM90834748 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM52975044;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM52975044 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM24636629;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM24636629 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM78838143;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM78838143 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM96967877;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM96967877 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM15728567;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM15728567 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM8883970;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM8883970 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM90412597;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM90412597 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM25734904;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM25734904 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM76205745;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM76205745 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM76895178;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM76895178 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM74926823;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM74926823 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM21200136;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM21200136 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM50507496;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM50507496 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM38314292;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM38314292 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM46612065;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM46612065 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM20665349;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM20665349 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM43980555;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM43980555 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM50437198;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM50437198 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM28800130;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM28800130 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM39938620;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM39938620 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM17064194;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM17064194 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM44140721;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM44140721 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM87700422;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM87700422 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM13652899;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM13652899 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM53053506;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM53053506 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM43878550;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM43878550 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM16139711;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM16139711 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM22069404;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM22069404 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM66980427;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM66980427 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM16117440;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM16117440 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM67905319;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM67905319 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM56631145;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM56631145 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM49534678;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM49534678 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM27861780;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM27861780 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM98999890;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM98999890 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM6167577;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM6167577 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM8479648;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM8479648 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM12410921;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM12410921 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM15846717;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM15846717 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM34287970;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM34287970 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM12573122;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM12573122 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM35850305;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM35850305 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM77501246;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM77501246 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM68891766;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM68891766 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM52526848;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM52526848 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM22558853;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM22558853 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM70864228;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM70864228 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM34467842;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM34467842 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM46594431;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM46594431 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM56231486;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM56231486 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM75994784;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM75994784 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM78698999;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM78698999 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM47626379;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM47626379 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM87861043;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM87861043 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM73770555;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM73770555 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM8834324;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM8834324 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM36936206;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM36936206 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM65185245;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM65185245 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM43914372;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM43914372 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM71850016;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM71850016 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM92744258;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM92744258 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM68343194;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM68343194 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM58754476;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM58754476 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM60088306;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM60088306 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM8989860;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM8989860 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM18295679;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM18295679 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM71665457;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM71665457 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM22645717;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM22645717 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM39314401;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM39314401 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM40444488;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM40444488 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM12185701;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM12185701 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM31569634;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM31569634 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM34590482;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM34590482 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM94512160;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM94512160 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM27365498;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM27365498 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM81213889;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM81213889 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM66639475;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM66639475 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM18808657;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM18808657 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM61126051;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM61126051 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM30494654;     jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM30494654 = jLNIGONkNSZzmSyHoHLGLBdckSnyQYKCeGmcUgwVzdRzjCbOfYXbZuhhhlYoaPTpHWVffVmIKpHhkethrYSrBjcjYFviHHujKbrM30804206;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void JranyNLdfcmcnHRCohpPlPWjZpreswwHqxeKjgMgPchBvfzhUfWIlkvtVrNJWhkifelpcGSIUIzJiVnupJKMZnWFClpsSDKiryVQ34203697() {     float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx82539656 = -313097290;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx2991775 = -178509200;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx58179158 = 32865309;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx6650685 = -698030790;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx19895872 = -266301446;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx27869074 = -177757711;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx35362052 = -724159168;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx72498469 = -445369574;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx97085021 = -195845240;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx96250795 = -549824747;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx39051688 = -200177395;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx31728102 = -458743073;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx59962927 = -955718219;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx51974214 = -142716841;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx30912093 = -20746883;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx31702611 = -225154754;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx85106722 = -520040573;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx62109431 = -171034158;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx87373513 = -868993210;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx10564323 = -333725293;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx98722397 = -522980825;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx27056083 = -643077380;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx80187658 = -661549592;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx89618127 = -803942575;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx87144424 = -461150796;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx66589383 = -856933128;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx29241233 = -977215025;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx23864129 = -799074284;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx50955818 = -384447901;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx46880262 = -443777471;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx12145633 = -868739125;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx34229866 = -24371147;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx48600806 = -437730749;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx32338004 = -512980268;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx44817193 = -129617012;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx2364959 = -14372542;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx93628781 = -622804299;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx51270810 = -555451479;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx98574972 = -125695236;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx65021036 = -300996729;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx85748281 = 83041251;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx4166121 = -878609569;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx44283655 = -146677120;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx6588718 = -384751507;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx25082714 = -817152796;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx45572998 = -666087660;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx2305906 = -768536525;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx1053868 = -407873103;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx55998880 = -381299796;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx4773699 = 55479898;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx8585212 = -663205495;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx88610897 = -920107677;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx72773424 = -96138939;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx97921020 = -318955611;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx35481300 = -154149356;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx55483574 = -670019911;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx22804116 = -516959608;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx68561030 = -163192117;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx19506260 = -136879995;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx53306489 = -409368319;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx98627841 = -200542686;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx11497924 = -925084885;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx21542651 = 39078327;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx50204759 = -752067769;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx84105163 = -681085622;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx4821822 = -75806248;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx83127296 = 78987675;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx27624923 = -342737951;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx7157022 = 86900171;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx28547134 = 93625659;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx38073830 = -602350456;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx33835912 = -964589094;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx63534458 = 54661078;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx22352477 = -467996481;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx24816042 = -316766544;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx94556276 = -644371257;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx82772427 = -396400261;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx73598941 = -176798085;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx64535414 = -986789779;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx41571427 = -795063136;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx64283478 = 11603397;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx28187365 = -469341923;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx67865248 = -317774488;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx46182120 = -339927799;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx38295051 = -780571976;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx23534735 = -948631449;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx61456442 = -928232209;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx50679786 = -18775138;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx96856704 = -258830912;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx89333619 = -459597102;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx79560842 = -497412934;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx25067751 = -359612182;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx31764551 = -318571485;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx45268484 = -716326918;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx66393195 = -454044;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx74250357 = 8126135;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx82623469 = -817687896;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx94078895 = -394609351;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx22483555 = -703665886;    float tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx20260893 = -313097290;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx82539656 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx2991775;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx2991775 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx58179158;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx58179158 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx6650685;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx6650685 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx19895872;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx19895872 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx27869074;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx27869074 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx35362052;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx35362052 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx72498469;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx72498469 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx97085021;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx97085021 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx96250795;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx96250795 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx39051688;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx39051688 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx31728102;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx31728102 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx59962927;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx59962927 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx51974214;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx51974214 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx30912093;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx30912093 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx31702611;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx31702611 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx85106722;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx85106722 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx62109431;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx62109431 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx87373513;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx87373513 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx10564323;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx10564323 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx98722397;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx98722397 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx27056083;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx27056083 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx80187658;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx80187658 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx89618127;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx89618127 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx87144424;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx87144424 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx66589383;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx66589383 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx29241233;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx29241233 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx23864129;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx23864129 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx50955818;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx50955818 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx46880262;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx46880262 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx12145633;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx12145633 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx34229866;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx34229866 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx48600806;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx48600806 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx32338004;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx32338004 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx44817193;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx44817193 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx2364959;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx2364959 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx93628781;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx93628781 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx51270810;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx51270810 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx98574972;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx98574972 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx65021036;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx65021036 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx85748281;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx85748281 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx4166121;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx4166121 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx44283655;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx44283655 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx6588718;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx6588718 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx25082714;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx25082714 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx45572998;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx45572998 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx2305906;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx2305906 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx1053868;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx1053868 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx55998880;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx55998880 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx4773699;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx4773699 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx8585212;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx8585212 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx88610897;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx88610897 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx72773424;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx72773424 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx97921020;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx97921020 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx35481300;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx35481300 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx55483574;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx55483574 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx22804116;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx22804116 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx68561030;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx68561030 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx19506260;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx19506260 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx53306489;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx53306489 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx98627841;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx98627841 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx11497924;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx11497924 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx21542651;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx21542651 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx50204759;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx50204759 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx84105163;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx84105163 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx4821822;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx4821822 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx83127296;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx83127296 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx27624923;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx27624923 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx7157022;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx7157022 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx28547134;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx28547134 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx38073830;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx38073830 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx33835912;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx33835912 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx63534458;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx63534458 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx22352477;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx22352477 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx24816042;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx24816042 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx94556276;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx94556276 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx82772427;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx82772427 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx73598941;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx73598941 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx64535414;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx64535414 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx41571427;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx41571427 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx64283478;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx64283478 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx28187365;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx28187365 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx67865248;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx67865248 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx46182120;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx46182120 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx38295051;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx38295051 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx23534735;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx23534735 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx61456442;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx61456442 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx50679786;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx50679786 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx96856704;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx96856704 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx89333619;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx89333619 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx79560842;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx79560842 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx25067751;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx25067751 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx31764551;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx31764551 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx45268484;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx45268484 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx66393195;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx66393195 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx74250357;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx74250357 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx82623469;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx82623469 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx94078895;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx94078895 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx22483555;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx22483555 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx20260893;     tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx20260893 = tJFNNOocklLADTTMWXIrIgnrRZpQyRRjzXBgEwzLztUQZppyjxLTpdINVNwnYXeTUbAgSnHaYxsOLWRckqgAGxtVOnKqAMmbPBwx82539656;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void mQfOcLscPgTphXXbuuntEFUAOuOwQYTHshHmJaN28227480() {     int GsZbOQbYaoNGRcNxhw96402866 = -808180170;    int GsZbOQbYaoNGRcNxhw51616701 = -753135550;    int GsZbOQbYaoNGRcNxhw64517916 = -772901628;    int GsZbOQbYaoNGRcNxhw52684274 = -674776516;    int GsZbOQbYaoNGRcNxhw96161559 = -431943591;    int GsZbOQbYaoNGRcNxhw61118293 = -604167830;    int GsZbOQbYaoNGRcNxhw2211964 = -238821534;    int GsZbOQbYaoNGRcNxhw83708689 = -125046309;    int GsZbOQbYaoNGRcNxhw99533463 = -142100806;    int GsZbOQbYaoNGRcNxhw39281634 = -294729944;    int GsZbOQbYaoNGRcNxhw93070807 = -798547788;    int GsZbOQbYaoNGRcNxhw14309364 = -527297167;    int GsZbOQbYaoNGRcNxhw22849997 = -852611658;    int GsZbOQbYaoNGRcNxhw23840736 = -628408986;    int GsZbOQbYaoNGRcNxhw68276426 = 89964870;    int GsZbOQbYaoNGRcNxhw26968385 = -926789025;    int GsZbOQbYaoNGRcNxhw46358821 = -146873536;    int GsZbOQbYaoNGRcNxhw95043314 = -464950016;    int GsZbOQbYaoNGRcNxhw90890096 = -939441826;    int GsZbOQbYaoNGRcNxhw33773700 = -56820330;    int GsZbOQbYaoNGRcNxhw12004287 = -207441954;    int GsZbOQbYaoNGRcNxhw7055339 = -330806389;    int GsZbOQbYaoNGRcNxhw34754098 = -345553484;    int GsZbOQbYaoNGRcNxhw90788267 = -272727795;    int GsZbOQbYaoNGRcNxhw93983415 = -760552173;    int GsZbOQbYaoNGRcNxhw1288519 = -86631196;    int GsZbOQbYaoNGRcNxhw12706244 = -582689898;    int GsZbOQbYaoNGRcNxhw20405844 = 39830982;    int GsZbOQbYaoNGRcNxhw2422703 = -339553199;    int GsZbOQbYaoNGRcNxhw46405270 = -605765816;    int GsZbOQbYaoNGRcNxhw85043125 = -191531161;    int GsZbOQbYaoNGRcNxhw50910327 = -30457421;    int GsZbOQbYaoNGRcNxhw62683971 = -260099875;    int GsZbOQbYaoNGRcNxhw39789026 = -207630046;    int GsZbOQbYaoNGRcNxhw73536304 = -917701407;    int GsZbOQbYaoNGRcNxhw81685522 = -193225873;    int GsZbOQbYaoNGRcNxhw8832254 = -767776812;    int GsZbOQbYaoNGRcNxhw83561198 = -178482632;    int GsZbOQbYaoNGRcNxhw47693133 = -108960539;    int GsZbOQbYaoNGRcNxhw89630763 = -871980219;    int GsZbOQbYaoNGRcNxhw39870174 = 92265453;    int GsZbOQbYaoNGRcNxhw59896553 = -3746453;    int GsZbOQbYaoNGRcNxhw36021649 = -859213491;    int GsZbOQbYaoNGRcNxhw60864479 = -346045897;    int GsZbOQbYaoNGRcNxhw30457558 = -275375669;    int GsZbOQbYaoNGRcNxhw69063559 = -759650723;    int GsZbOQbYaoNGRcNxhw5503194 = -761259701;    int GsZbOQbYaoNGRcNxhw70949738 = 1872731;    int GsZbOQbYaoNGRcNxhw16156675 = -408943858;    int GsZbOQbYaoNGRcNxhw69777623 = -619805113;    int GsZbOQbYaoNGRcNxhw98782365 = -114421865;    int GsZbOQbYaoNGRcNxhw16548224 = -670333756;    int GsZbOQbYaoNGRcNxhw80800578 = -148730164;    int GsZbOQbYaoNGRcNxhw71894362 = -770293992;    int GsZbOQbYaoNGRcNxhw16223194 = -821290199;    int GsZbOQbYaoNGRcNxhw89347527 = -377373781;    int GsZbOQbYaoNGRcNxhw16862604 = -307582066;    int GsZbOQbYaoNGRcNxhw73729649 = -400173834;    int GsZbOQbYaoNGRcNxhw58700858 = -914224344;    int GsZbOQbYaoNGRcNxhw94873040 = -245312396;    int GsZbOQbYaoNGRcNxhw48412049 = 78522067;    int GsZbOQbYaoNGRcNxhw81806119 = -178652517;    int GsZbOQbYaoNGRcNxhw81285987 = -785493110;    int GsZbOQbYaoNGRcNxhw53128193 = -536334990;    int GsZbOQbYaoNGRcNxhw54238508 = -3198784;    int GsZbOQbYaoNGRcNxhw42160481 = -668090368;    int GsZbOQbYaoNGRcNxhw51625392 = -167197293;    int GsZbOQbYaoNGRcNxhw83060970 = -544981612;    int GsZbOQbYaoNGRcNxhw50304432 = -710707579;    int GsZbOQbYaoNGRcNxhw86590903 = -716809258;    int GsZbOQbYaoNGRcNxhw18136132 = -59012213;    int GsZbOQbYaoNGRcNxhw62797623 = -968390905;    int GsZbOQbYaoNGRcNxhw47350181 = -255989478;    int GsZbOQbYaoNGRcNxhw1259334 = 32538392;    int GsZbOQbYaoNGRcNxhw93903525 = -49085784;    int GsZbOQbYaoNGRcNxhw52107734 = -103695501;    int GsZbOQbYaoNGRcNxhw71033690 = -471592899;    int GsZbOQbYaoNGRcNxhw73889618 = -999507587;    int GsZbOQbYaoNGRcNxhw60330709 = -997352126;    int GsZbOQbYaoNGRcNxhw24919857 = 99098550;    int GsZbOQbYaoNGRcNxhw95785325 = -325371496;    int GsZbOQbYaoNGRcNxhw41756506 = -484562629;    int GsZbOQbYaoNGRcNxhw4249169 = -551225161;    int GsZbOQbYaoNGRcNxhw32645079 = -719748086;    int GsZbOQbYaoNGRcNxhw47622905 = -391343952;    int GsZbOQbYaoNGRcNxhw68494902 = -521197405;    int GsZbOQbYaoNGRcNxhw70109749 = -881727258;    int GsZbOQbYaoNGRcNxhw90789609 = -489805883;    int GsZbOQbYaoNGRcNxhw23565833 = -386339848;    int GsZbOQbYaoNGRcNxhw84188776 = -440327626;    int GsZbOQbYaoNGRcNxhw64822919 = -885643807;    int GsZbOQbYaoNGRcNxhw35102604 = -267602979;    int GsZbOQbYaoNGRcNxhw24860341 = -264258288;    int GsZbOQbYaoNGRcNxhw52820092 = -863648144;    int GsZbOQbYaoNGRcNxhw41218715 = -850502286;    int GsZbOQbYaoNGRcNxhw58064055 = -729082031;    int GsZbOQbYaoNGRcNxhw78610566 = -218253343;    int GsZbOQbYaoNGRcNxhw82893455 = -222878501;    int GsZbOQbYaoNGRcNxhw6625971 = -242847113;    int GsZbOQbYaoNGRcNxhw88297077 = -808180170;     GsZbOQbYaoNGRcNxhw96402866 = GsZbOQbYaoNGRcNxhw51616701;     GsZbOQbYaoNGRcNxhw51616701 = GsZbOQbYaoNGRcNxhw64517916;     GsZbOQbYaoNGRcNxhw64517916 = GsZbOQbYaoNGRcNxhw52684274;     GsZbOQbYaoNGRcNxhw52684274 = GsZbOQbYaoNGRcNxhw96161559;     GsZbOQbYaoNGRcNxhw96161559 = GsZbOQbYaoNGRcNxhw61118293;     GsZbOQbYaoNGRcNxhw61118293 = GsZbOQbYaoNGRcNxhw2211964;     GsZbOQbYaoNGRcNxhw2211964 = GsZbOQbYaoNGRcNxhw83708689;     GsZbOQbYaoNGRcNxhw83708689 = GsZbOQbYaoNGRcNxhw99533463;     GsZbOQbYaoNGRcNxhw99533463 = GsZbOQbYaoNGRcNxhw39281634;     GsZbOQbYaoNGRcNxhw39281634 = GsZbOQbYaoNGRcNxhw93070807;     GsZbOQbYaoNGRcNxhw93070807 = GsZbOQbYaoNGRcNxhw14309364;     GsZbOQbYaoNGRcNxhw14309364 = GsZbOQbYaoNGRcNxhw22849997;     GsZbOQbYaoNGRcNxhw22849997 = GsZbOQbYaoNGRcNxhw23840736;     GsZbOQbYaoNGRcNxhw23840736 = GsZbOQbYaoNGRcNxhw68276426;     GsZbOQbYaoNGRcNxhw68276426 = GsZbOQbYaoNGRcNxhw26968385;     GsZbOQbYaoNGRcNxhw26968385 = GsZbOQbYaoNGRcNxhw46358821;     GsZbOQbYaoNGRcNxhw46358821 = GsZbOQbYaoNGRcNxhw95043314;     GsZbOQbYaoNGRcNxhw95043314 = GsZbOQbYaoNGRcNxhw90890096;     GsZbOQbYaoNGRcNxhw90890096 = GsZbOQbYaoNGRcNxhw33773700;     GsZbOQbYaoNGRcNxhw33773700 = GsZbOQbYaoNGRcNxhw12004287;     GsZbOQbYaoNGRcNxhw12004287 = GsZbOQbYaoNGRcNxhw7055339;     GsZbOQbYaoNGRcNxhw7055339 = GsZbOQbYaoNGRcNxhw34754098;     GsZbOQbYaoNGRcNxhw34754098 = GsZbOQbYaoNGRcNxhw90788267;     GsZbOQbYaoNGRcNxhw90788267 = GsZbOQbYaoNGRcNxhw93983415;     GsZbOQbYaoNGRcNxhw93983415 = GsZbOQbYaoNGRcNxhw1288519;     GsZbOQbYaoNGRcNxhw1288519 = GsZbOQbYaoNGRcNxhw12706244;     GsZbOQbYaoNGRcNxhw12706244 = GsZbOQbYaoNGRcNxhw20405844;     GsZbOQbYaoNGRcNxhw20405844 = GsZbOQbYaoNGRcNxhw2422703;     GsZbOQbYaoNGRcNxhw2422703 = GsZbOQbYaoNGRcNxhw46405270;     GsZbOQbYaoNGRcNxhw46405270 = GsZbOQbYaoNGRcNxhw85043125;     GsZbOQbYaoNGRcNxhw85043125 = GsZbOQbYaoNGRcNxhw50910327;     GsZbOQbYaoNGRcNxhw50910327 = GsZbOQbYaoNGRcNxhw62683971;     GsZbOQbYaoNGRcNxhw62683971 = GsZbOQbYaoNGRcNxhw39789026;     GsZbOQbYaoNGRcNxhw39789026 = GsZbOQbYaoNGRcNxhw73536304;     GsZbOQbYaoNGRcNxhw73536304 = GsZbOQbYaoNGRcNxhw81685522;     GsZbOQbYaoNGRcNxhw81685522 = GsZbOQbYaoNGRcNxhw8832254;     GsZbOQbYaoNGRcNxhw8832254 = GsZbOQbYaoNGRcNxhw83561198;     GsZbOQbYaoNGRcNxhw83561198 = GsZbOQbYaoNGRcNxhw47693133;     GsZbOQbYaoNGRcNxhw47693133 = GsZbOQbYaoNGRcNxhw89630763;     GsZbOQbYaoNGRcNxhw89630763 = GsZbOQbYaoNGRcNxhw39870174;     GsZbOQbYaoNGRcNxhw39870174 = GsZbOQbYaoNGRcNxhw59896553;     GsZbOQbYaoNGRcNxhw59896553 = GsZbOQbYaoNGRcNxhw36021649;     GsZbOQbYaoNGRcNxhw36021649 = GsZbOQbYaoNGRcNxhw60864479;     GsZbOQbYaoNGRcNxhw60864479 = GsZbOQbYaoNGRcNxhw30457558;     GsZbOQbYaoNGRcNxhw30457558 = GsZbOQbYaoNGRcNxhw69063559;     GsZbOQbYaoNGRcNxhw69063559 = GsZbOQbYaoNGRcNxhw5503194;     GsZbOQbYaoNGRcNxhw5503194 = GsZbOQbYaoNGRcNxhw70949738;     GsZbOQbYaoNGRcNxhw70949738 = GsZbOQbYaoNGRcNxhw16156675;     GsZbOQbYaoNGRcNxhw16156675 = GsZbOQbYaoNGRcNxhw69777623;     GsZbOQbYaoNGRcNxhw69777623 = GsZbOQbYaoNGRcNxhw98782365;     GsZbOQbYaoNGRcNxhw98782365 = GsZbOQbYaoNGRcNxhw16548224;     GsZbOQbYaoNGRcNxhw16548224 = GsZbOQbYaoNGRcNxhw80800578;     GsZbOQbYaoNGRcNxhw80800578 = GsZbOQbYaoNGRcNxhw71894362;     GsZbOQbYaoNGRcNxhw71894362 = GsZbOQbYaoNGRcNxhw16223194;     GsZbOQbYaoNGRcNxhw16223194 = GsZbOQbYaoNGRcNxhw89347527;     GsZbOQbYaoNGRcNxhw89347527 = GsZbOQbYaoNGRcNxhw16862604;     GsZbOQbYaoNGRcNxhw16862604 = GsZbOQbYaoNGRcNxhw73729649;     GsZbOQbYaoNGRcNxhw73729649 = GsZbOQbYaoNGRcNxhw58700858;     GsZbOQbYaoNGRcNxhw58700858 = GsZbOQbYaoNGRcNxhw94873040;     GsZbOQbYaoNGRcNxhw94873040 = GsZbOQbYaoNGRcNxhw48412049;     GsZbOQbYaoNGRcNxhw48412049 = GsZbOQbYaoNGRcNxhw81806119;     GsZbOQbYaoNGRcNxhw81806119 = GsZbOQbYaoNGRcNxhw81285987;     GsZbOQbYaoNGRcNxhw81285987 = GsZbOQbYaoNGRcNxhw53128193;     GsZbOQbYaoNGRcNxhw53128193 = GsZbOQbYaoNGRcNxhw54238508;     GsZbOQbYaoNGRcNxhw54238508 = GsZbOQbYaoNGRcNxhw42160481;     GsZbOQbYaoNGRcNxhw42160481 = GsZbOQbYaoNGRcNxhw51625392;     GsZbOQbYaoNGRcNxhw51625392 = GsZbOQbYaoNGRcNxhw83060970;     GsZbOQbYaoNGRcNxhw83060970 = GsZbOQbYaoNGRcNxhw50304432;     GsZbOQbYaoNGRcNxhw50304432 = GsZbOQbYaoNGRcNxhw86590903;     GsZbOQbYaoNGRcNxhw86590903 = GsZbOQbYaoNGRcNxhw18136132;     GsZbOQbYaoNGRcNxhw18136132 = GsZbOQbYaoNGRcNxhw62797623;     GsZbOQbYaoNGRcNxhw62797623 = GsZbOQbYaoNGRcNxhw47350181;     GsZbOQbYaoNGRcNxhw47350181 = GsZbOQbYaoNGRcNxhw1259334;     GsZbOQbYaoNGRcNxhw1259334 = GsZbOQbYaoNGRcNxhw93903525;     GsZbOQbYaoNGRcNxhw93903525 = GsZbOQbYaoNGRcNxhw52107734;     GsZbOQbYaoNGRcNxhw52107734 = GsZbOQbYaoNGRcNxhw71033690;     GsZbOQbYaoNGRcNxhw71033690 = GsZbOQbYaoNGRcNxhw73889618;     GsZbOQbYaoNGRcNxhw73889618 = GsZbOQbYaoNGRcNxhw60330709;     GsZbOQbYaoNGRcNxhw60330709 = GsZbOQbYaoNGRcNxhw24919857;     GsZbOQbYaoNGRcNxhw24919857 = GsZbOQbYaoNGRcNxhw95785325;     GsZbOQbYaoNGRcNxhw95785325 = GsZbOQbYaoNGRcNxhw41756506;     GsZbOQbYaoNGRcNxhw41756506 = GsZbOQbYaoNGRcNxhw4249169;     GsZbOQbYaoNGRcNxhw4249169 = GsZbOQbYaoNGRcNxhw32645079;     GsZbOQbYaoNGRcNxhw32645079 = GsZbOQbYaoNGRcNxhw47622905;     GsZbOQbYaoNGRcNxhw47622905 = GsZbOQbYaoNGRcNxhw68494902;     GsZbOQbYaoNGRcNxhw68494902 = GsZbOQbYaoNGRcNxhw70109749;     GsZbOQbYaoNGRcNxhw70109749 = GsZbOQbYaoNGRcNxhw90789609;     GsZbOQbYaoNGRcNxhw90789609 = GsZbOQbYaoNGRcNxhw23565833;     GsZbOQbYaoNGRcNxhw23565833 = GsZbOQbYaoNGRcNxhw84188776;     GsZbOQbYaoNGRcNxhw84188776 = GsZbOQbYaoNGRcNxhw64822919;     GsZbOQbYaoNGRcNxhw64822919 = GsZbOQbYaoNGRcNxhw35102604;     GsZbOQbYaoNGRcNxhw35102604 = GsZbOQbYaoNGRcNxhw24860341;     GsZbOQbYaoNGRcNxhw24860341 = GsZbOQbYaoNGRcNxhw52820092;     GsZbOQbYaoNGRcNxhw52820092 = GsZbOQbYaoNGRcNxhw41218715;     GsZbOQbYaoNGRcNxhw41218715 = GsZbOQbYaoNGRcNxhw58064055;     GsZbOQbYaoNGRcNxhw58064055 = GsZbOQbYaoNGRcNxhw78610566;     GsZbOQbYaoNGRcNxhw78610566 = GsZbOQbYaoNGRcNxhw82893455;     GsZbOQbYaoNGRcNxhw82893455 = GsZbOQbYaoNGRcNxhw6625971;     GsZbOQbYaoNGRcNxhw6625971 = GsZbOQbYaoNGRcNxhw88297077;     GsZbOQbYaoNGRcNxhw88297077 = GsZbOQbYaoNGRcNxhw96402866;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void fsCUwLSJKkbIfKNxDxMiKPEMaaGgSYaYbDzeafl2822562() {     float RYLkIqBfDIHSMFzVQn67330510 = -281947757;    float RYLkIqBfDIHSMFzVQn70302383 = -450346075;    float RYLkIqBfDIHSMFzVQn87321052 = -718542857;    float RYLkIqBfDIHSMFzVQn19511193 = -36267413;    float RYLkIqBfDIHSMFzVQn95471944 = 59391700;    float RYLkIqBfDIHSMFzVQn81355888 = -479714403;    float RYLkIqBfDIHSMFzVQn70705772 = -921468302;    float RYLkIqBfDIHSMFzVQn4150736 = -957248614;    float RYLkIqBfDIHSMFzVQn78458427 = -998294515;    float RYLkIqBfDIHSMFzVQn74127787 = -718893634;    float RYLkIqBfDIHSMFzVQn38953369 = -463355139;    float RYLkIqBfDIHSMFzVQn94008144 = -652321166;    float RYLkIqBfDIHSMFzVQn51539916 = -274148956;    float RYLkIqBfDIHSMFzVQn99356132 = -63406227;    float RYLkIqBfDIHSMFzVQn16907296 = -972815883;    float RYLkIqBfDIHSMFzVQn32204166 = -249218763;    float RYLkIqBfDIHSMFzVQn74251554 = -371400786;    float RYLkIqBfDIHSMFzVQn10062898 = -566198720;    float RYLkIqBfDIHSMFzVQn11348352 = -645595269;    float RYLkIqBfDIHSMFzVQn13337493 = 8094215;    float RYLkIqBfDIHSMFzVQn18673877 = 43708229;    float RYLkIqBfDIHSMFzVQn46453990 = -289091152;    float RYLkIqBfDIHSMFzVQn20487263 = -582381089;    float RYLkIqBfDIHSMFzVQn12898995 = -372996219;    float RYLkIqBfDIHSMFzVQn17355284 = -718481790;    float RYLkIqBfDIHSMFzVQn47823747 = -701475917;    float RYLkIqBfDIHSMFzVQn78215019 = -844058610;    float RYLkIqBfDIHSMFzVQn48757406 = -486262885;    float RYLkIqBfDIHSMFzVQn76741461 = 31362668;    float RYLkIqBfDIHSMFzVQn93337287 = -61633096;    float RYLkIqBfDIHSMFzVQn72090570 = -714852283;    float RYLkIqBfDIHSMFzVQn49470578 = -88667608;    float RYLkIqBfDIHSMFzVQn58941358 = -802375505;    float RYLkIqBfDIHSMFzVQn98861623 = 28004926;    float RYLkIqBfDIHSMFzVQn81616154 = -430931021;    float RYLkIqBfDIHSMFzVQn20564926 = 47292134;    float RYLkIqBfDIHSMFzVQn39743835 = -897688825;    float RYLkIqBfDIHSMFzVQn81115486 = -150899775;    float RYLkIqBfDIHSMFzVQn55503861 = 8309033;    float RYLkIqBfDIHSMFzVQn60364489 = -938357782;    float RYLkIqBfDIHSMFzVQn24989889 = -964216528;    float RYLkIqBfDIHSMFzVQn60080315 = -2148911;    float RYLkIqBfDIHSMFzVQn74363365 = -226879682;    float RYLkIqBfDIHSMFzVQn2279308 = -19264052;    float RYLkIqBfDIHSMFzVQn4463397 = -868508890;    float RYLkIqBfDIHSMFzVQn344264 = -569430982;    float RYLkIqBfDIHSMFzVQn2646833 = 92688511;    float RYLkIqBfDIHSMFzVQn43326991 = 31961579;    float RYLkIqBfDIHSMFzVQn83954422 = -940771826;    float RYLkIqBfDIHSMFzVQn88768667 = -21321415;    float RYLkIqBfDIHSMFzVQn40434758 = -495142469;    float RYLkIqBfDIHSMFzVQn61698282 = 25580174;    float RYLkIqBfDIHSMFzVQn54870353 = -372740259;    float RYLkIqBfDIHSMFzVQn88502648 = -905431214;    float RYLkIqBfDIHSMFzVQn84148685 = -778921574;    float RYLkIqBfDIHSMFzVQn20876521 = -992856606;    float RYLkIqBfDIHSMFzVQn49815121 = -867964986;    float RYLkIqBfDIHSMFzVQn74422057 = -245546639;    float RYLkIqBfDIHSMFzVQn2155909 = -317785624;    float RYLkIqBfDIHSMFzVQn47648198 = -239132383;    float RYLkIqBfDIHSMFzVQn3140869 = -635655794;    float RYLkIqBfDIHSMFzVQn21948366 = -335205418;    float RYLkIqBfDIHSMFzVQn27409274 = -888611283;    float RYLkIqBfDIHSMFzVQn85121140 = -836661419;    float RYLkIqBfDIHSMFzVQn2037217 = 95958649;    float RYLkIqBfDIHSMFzVQn89482791 = -274687532;    float RYLkIqBfDIHSMFzVQn35066787 = -849945661;    float RYLkIqBfDIHSMFzVQn52678293 = -202153882;    float RYLkIqBfDIHSMFzVQn17739978 = -632475207;    float RYLkIqBfDIHSMFzVQn96342369 = -920108017;    float RYLkIqBfDIHSMFzVQn92460330 = -351529938;    float RYLkIqBfDIHSMFzVQn93136067 = -120501011;    float RYLkIqBfDIHSMFzVQn54559037 = -474507754;    float RYLkIqBfDIHSMFzVQn50983863 = -707237488;    float RYLkIqBfDIHSMFzVQn88347604 = -27689258;    float RYLkIqBfDIHSMFzVQn58593561 = -954142860;    float RYLkIqBfDIHSMFzVQn72090624 = 37788529;    float RYLkIqBfDIHSMFzVQn18207955 = -463117037;    float RYLkIqBfDIHSMFzVQn8435599 = -504487330;    float RYLkIqBfDIHSMFzVQn17011021 = -49050809;    float RYLkIqBfDIHSMFzVQn45176915 = -694164429;    float RYLkIqBfDIHSMFzVQn34888029 = -776020189;    float RYLkIqBfDIHSMFzVQn64802983 = -545491059;    float RYLkIqBfDIHSMFzVQn87972794 = -947315917;    float RYLkIqBfDIHSMFzVQn52902529 = -566490628;    float RYLkIqBfDIHSMFzVQn10392289 = -640432457;    float RYLkIqBfDIHSMFzVQn94600225 = -715927349;    float RYLkIqBfDIHSMFzVQn70438709 = -896944292;    float RYLkIqBfDIHSMFzVQn14712938 = -193073501;    float RYLkIqBfDIHSMFzVQn60739634 = -438074416;    float RYLkIqBfDIHSMFzVQn70749805 = -84742880;    float RYLkIqBfDIHSMFzVQn65321778 = -552142187;    float RYLkIqBfDIHSMFzVQn78959577 = -833114152;    float RYLkIqBfDIHSMFzVQn7855663 = -752558585;    float RYLkIqBfDIHSMFzVQn57223620 = -202701988;    float RYLkIqBfDIHSMFzVQn3041523 = -529011110;    float RYLkIqBfDIHSMFzVQn32671041 = -113537629;    float RYLkIqBfDIHSMFzVQn89242224 = -390218263;    float RYLkIqBfDIHSMFzVQn242092 = -15222701;    float RYLkIqBfDIHSMFzVQn14980605 = -281947757;     RYLkIqBfDIHSMFzVQn67330510 = RYLkIqBfDIHSMFzVQn70302383;     RYLkIqBfDIHSMFzVQn70302383 = RYLkIqBfDIHSMFzVQn87321052;     RYLkIqBfDIHSMFzVQn87321052 = RYLkIqBfDIHSMFzVQn19511193;     RYLkIqBfDIHSMFzVQn19511193 = RYLkIqBfDIHSMFzVQn95471944;     RYLkIqBfDIHSMFzVQn95471944 = RYLkIqBfDIHSMFzVQn81355888;     RYLkIqBfDIHSMFzVQn81355888 = RYLkIqBfDIHSMFzVQn70705772;     RYLkIqBfDIHSMFzVQn70705772 = RYLkIqBfDIHSMFzVQn4150736;     RYLkIqBfDIHSMFzVQn4150736 = RYLkIqBfDIHSMFzVQn78458427;     RYLkIqBfDIHSMFzVQn78458427 = RYLkIqBfDIHSMFzVQn74127787;     RYLkIqBfDIHSMFzVQn74127787 = RYLkIqBfDIHSMFzVQn38953369;     RYLkIqBfDIHSMFzVQn38953369 = RYLkIqBfDIHSMFzVQn94008144;     RYLkIqBfDIHSMFzVQn94008144 = RYLkIqBfDIHSMFzVQn51539916;     RYLkIqBfDIHSMFzVQn51539916 = RYLkIqBfDIHSMFzVQn99356132;     RYLkIqBfDIHSMFzVQn99356132 = RYLkIqBfDIHSMFzVQn16907296;     RYLkIqBfDIHSMFzVQn16907296 = RYLkIqBfDIHSMFzVQn32204166;     RYLkIqBfDIHSMFzVQn32204166 = RYLkIqBfDIHSMFzVQn74251554;     RYLkIqBfDIHSMFzVQn74251554 = RYLkIqBfDIHSMFzVQn10062898;     RYLkIqBfDIHSMFzVQn10062898 = RYLkIqBfDIHSMFzVQn11348352;     RYLkIqBfDIHSMFzVQn11348352 = RYLkIqBfDIHSMFzVQn13337493;     RYLkIqBfDIHSMFzVQn13337493 = RYLkIqBfDIHSMFzVQn18673877;     RYLkIqBfDIHSMFzVQn18673877 = RYLkIqBfDIHSMFzVQn46453990;     RYLkIqBfDIHSMFzVQn46453990 = RYLkIqBfDIHSMFzVQn20487263;     RYLkIqBfDIHSMFzVQn20487263 = RYLkIqBfDIHSMFzVQn12898995;     RYLkIqBfDIHSMFzVQn12898995 = RYLkIqBfDIHSMFzVQn17355284;     RYLkIqBfDIHSMFzVQn17355284 = RYLkIqBfDIHSMFzVQn47823747;     RYLkIqBfDIHSMFzVQn47823747 = RYLkIqBfDIHSMFzVQn78215019;     RYLkIqBfDIHSMFzVQn78215019 = RYLkIqBfDIHSMFzVQn48757406;     RYLkIqBfDIHSMFzVQn48757406 = RYLkIqBfDIHSMFzVQn76741461;     RYLkIqBfDIHSMFzVQn76741461 = RYLkIqBfDIHSMFzVQn93337287;     RYLkIqBfDIHSMFzVQn93337287 = RYLkIqBfDIHSMFzVQn72090570;     RYLkIqBfDIHSMFzVQn72090570 = RYLkIqBfDIHSMFzVQn49470578;     RYLkIqBfDIHSMFzVQn49470578 = RYLkIqBfDIHSMFzVQn58941358;     RYLkIqBfDIHSMFzVQn58941358 = RYLkIqBfDIHSMFzVQn98861623;     RYLkIqBfDIHSMFzVQn98861623 = RYLkIqBfDIHSMFzVQn81616154;     RYLkIqBfDIHSMFzVQn81616154 = RYLkIqBfDIHSMFzVQn20564926;     RYLkIqBfDIHSMFzVQn20564926 = RYLkIqBfDIHSMFzVQn39743835;     RYLkIqBfDIHSMFzVQn39743835 = RYLkIqBfDIHSMFzVQn81115486;     RYLkIqBfDIHSMFzVQn81115486 = RYLkIqBfDIHSMFzVQn55503861;     RYLkIqBfDIHSMFzVQn55503861 = RYLkIqBfDIHSMFzVQn60364489;     RYLkIqBfDIHSMFzVQn60364489 = RYLkIqBfDIHSMFzVQn24989889;     RYLkIqBfDIHSMFzVQn24989889 = RYLkIqBfDIHSMFzVQn60080315;     RYLkIqBfDIHSMFzVQn60080315 = RYLkIqBfDIHSMFzVQn74363365;     RYLkIqBfDIHSMFzVQn74363365 = RYLkIqBfDIHSMFzVQn2279308;     RYLkIqBfDIHSMFzVQn2279308 = RYLkIqBfDIHSMFzVQn4463397;     RYLkIqBfDIHSMFzVQn4463397 = RYLkIqBfDIHSMFzVQn344264;     RYLkIqBfDIHSMFzVQn344264 = RYLkIqBfDIHSMFzVQn2646833;     RYLkIqBfDIHSMFzVQn2646833 = RYLkIqBfDIHSMFzVQn43326991;     RYLkIqBfDIHSMFzVQn43326991 = RYLkIqBfDIHSMFzVQn83954422;     RYLkIqBfDIHSMFzVQn83954422 = RYLkIqBfDIHSMFzVQn88768667;     RYLkIqBfDIHSMFzVQn88768667 = RYLkIqBfDIHSMFzVQn40434758;     RYLkIqBfDIHSMFzVQn40434758 = RYLkIqBfDIHSMFzVQn61698282;     RYLkIqBfDIHSMFzVQn61698282 = RYLkIqBfDIHSMFzVQn54870353;     RYLkIqBfDIHSMFzVQn54870353 = RYLkIqBfDIHSMFzVQn88502648;     RYLkIqBfDIHSMFzVQn88502648 = RYLkIqBfDIHSMFzVQn84148685;     RYLkIqBfDIHSMFzVQn84148685 = RYLkIqBfDIHSMFzVQn20876521;     RYLkIqBfDIHSMFzVQn20876521 = RYLkIqBfDIHSMFzVQn49815121;     RYLkIqBfDIHSMFzVQn49815121 = RYLkIqBfDIHSMFzVQn74422057;     RYLkIqBfDIHSMFzVQn74422057 = RYLkIqBfDIHSMFzVQn2155909;     RYLkIqBfDIHSMFzVQn2155909 = RYLkIqBfDIHSMFzVQn47648198;     RYLkIqBfDIHSMFzVQn47648198 = RYLkIqBfDIHSMFzVQn3140869;     RYLkIqBfDIHSMFzVQn3140869 = RYLkIqBfDIHSMFzVQn21948366;     RYLkIqBfDIHSMFzVQn21948366 = RYLkIqBfDIHSMFzVQn27409274;     RYLkIqBfDIHSMFzVQn27409274 = RYLkIqBfDIHSMFzVQn85121140;     RYLkIqBfDIHSMFzVQn85121140 = RYLkIqBfDIHSMFzVQn2037217;     RYLkIqBfDIHSMFzVQn2037217 = RYLkIqBfDIHSMFzVQn89482791;     RYLkIqBfDIHSMFzVQn89482791 = RYLkIqBfDIHSMFzVQn35066787;     RYLkIqBfDIHSMFzVQn35066787 = RYLkIqBfDIHSMFzVQn52678293;     RYLkIqBfDIHSMFzVQn52678293 = RYLkIqBfDIHSMFzVQn17739978;     RYLkIqBfDIHSMFzVQn17739978 = RYLkIqBfDIHSMFzVQn96342369;     RYLkIqBfDIHSMFzVQn96342369 = RYLkIqBfDIHSMFzVQn92460330;     RYLkIqBfDIHSMFzVQn92460330 = RYLkIqBfDIHSMFzVQn93136067;     RYLkIqBfDIHSMFzVQn93136067 = RYLkIqBfDIHSMFzVQn54559037;     RYLkIqBfDIHSMFzVQn54559037 = RYLkIqBfDIHSMFzVQn50983863;     RYLkIqBfDIHSMFzVQn50983863 = RYLkIqBfDIHSMFzVQn88347604;     RYLkIqBfDIHSMFzVQn88347604 = RYLkIqBfDIHSMFzVQn58593561;     RYLkIqBfDIHSMFzVQn58593561 = RYLkIqBfDIHSMFzVQn72090624;     RYLkIqBfDIHSMFzVQn72090624 = RYLkIqBfDIHSMFzVQn18207955;     RYLkIqBfDIHSMFzVQn18207955 = RYLkIqBfDIHSMFzVQn8435599;     RYLkIqBfDIHSMFzVQn8435599 = RYLkIqBfDIHSMFzVQn17011021;     RYLkIqBfDIHSMFzVQn17011021 = RYLkIqBfDIHSMFzVQn45176915;     RYLkIqBfDIHSMFzVQn45176915 = RYLkIqBfDIHSMFzVQn34888029;     RYLkIqBfDIHSMFzVQn34888029 = RYLkIqBfDIHSMFzVQn64802983;     RYLkIqBfDIHSMFzVQn64802983 = RYLkIqBfDIHSMFzVQn87972794;     RYLkIqBfDIHSMFzVQn87972794 = RYLkIqBfDIHSMFzVQn52902529;     RYLkIqBfDIHSMFzVQn52902529 = RYLkIqBfDIHSMFzVQn10392289;     RYLkIqBfDIHSMFzVQn10392289 = RYLkIqBfDIHSMFzVQn94600225;     RYLkIqBfDIHSMFzVQn94600225 = RYLkIqBfDIHSMFzVQn70438709;     RYLkIqBfDIHSMFzVQn70438709 = RYLkIqBfDIHSMFzVQn14712938;     RYLkIqBfDIHSMFzVQn14712938 = RYLkIqBfDIHSMFzVQn60739634;     RYLkIqBfDIHSMFzVQn60739634 = RYLkIqBfDIHSMFzVQn70749805;     RYLkIqBfDIHSMFzVQn70749805 = RYLkIqBfDIHSMFzVQn65321778;     RYLkIqBfDIHSMFzVQn65321778 = RYLkIqBfDIHSMFzVQn78959577;     RYLkIqBfDIHSMFzVQn78959577 = RYLkIqBfDIHSMFzVQn7855663;     RYLkIqBfDIHSMFzVQn7855663 = RYLkIqBfDIHSMFzVQn57223620;     RYLkIqBfDIHSMFzVQn57223620 = RYLkIqBfDIHSMFzVQn3041523;     RYLkIqBfDIHSMFzVQn3041523 = RYLkIqBfDIHSMFzVQn32671041;     RYLkIqBfDIHSMFzVQn32671041 = RYLkIqBfDIHSMFzVQn89242224;     RYLkIqBfDIHSMFzVQn89242224 = RYLkIqBfDIHSMFzVQn242092;     RYLkIqBfDIHSMFzVQn242092 = RYLkIqBfDIHSMFzVQn14980605;     RYLkIqBfDIHSMFzVQn14980605 = RYLkIqBfDIHSMFzVQn67330510;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void PtfAPYkCXZoOQNCrEbIZQkDBvgVnpRGPYeIpBMD63133047() {     long zUaTFAMmGRFGkSOafp85058376 = -208217243;    long zUaTFAMmGRFGkSOafp11581502 = -951270660;    long zUaTFAMmGRFGkSOafp81342593 = -815658548;    long zUaTFAMmGRFGkSOafp51892835 = -726978157;    long zUaTFAMmGRFGkSOafp25824605 = -660496553;    long zUaTFAMmGRFGkSOafp8168683 = 14253446;    long zUaTFAMmGRFGkSOafp68171309 = -494965286;    long zUaTFAMmGRFGkSOafp52520028 = -155410013;    long zUaTFAMmGRFGkSOafp99902271 = -345871736;    long zUaTFAMmGRFGkSOafp80739022 = -185438851;    long zUaTFAMmGRFGkSOafp13124388 = -354227021;    long zUaTFAMmGRFGkSOafp97865138 = 31748857;    long zUaTFAMmGRFGkSOafp28620468 = -280569827;    long zUaTFAMmGRFGkSOafp14387619 = -687876194;    long zUaTFAMmGRFGkSOafp7297581 = -665206603;    long zUaTFAMmGRFGkSOafp67615953 = -975323479;    long zUaTFAMmGRFGkSOafp66132711 = -589791705;    long zUaTFAMmGRFGkSOafp90693127 = -427180660;    long zUaTFAMmGRFGkSOafp91730584 = -408372546;    long zUaTFAMmGRFGkSOafp78274543 = -908192431;    long zUaTFAMmGRFGkSOafp45134664 = -812545709;    long zUaTFAMmGRFGkSOafp92738818 = -184907270;    long zUaTFAMmGRFGkSOafp14969552 = -790936642;    long zUaTFAMmGRFGkSOafp20707995 = -598638652;    long zUaTFAMmGRFGkSOafp3474932 = -12147852;    long zUaTFAMmGRFGkSOafp82316351 = -522815802;    long zUaTFAMmGRFGkSOafp980703 = -272400608;    long zUaTFAMmGRFGkSOafp27972500 = -173390719;    long zUaTFAMmGRFGkSOafp3245181 = -692202311;    long zUaTFAMmGRFGkSOafp90126460 = -547744525;    long zUaTFAMmGRFGkSOafp89735356 = 12384165;    long zUaTFAMmGRFGkSOafp64563051 = -73108755;    long zUaTFAMmGRFGkSOafp86413469 = -101659548;    long zUaTFAMmGRFGkSOafp63806545 = -798512414;    long zUaTFAMmGRFGkSOafp35109891 = -471309627;    long zUaTFAMmGRFGkSOafp7052396 = -904931955;    long zUaTFAMmGRFGkSOafp92435085 = -29950190;    long zUaTFAMmGRFGkSOafp24202608 = -141043236;    long zUaTFAMmGRFGkSOafp29527541 = -270299460;    long zUaTFAMmGRFGkSOafp35468478 = -298346976;    long zUaTFAMmGRFGkSOafp88679609 = -595801959;    long zUaTFAMmGRFGkSOafp1187294 = -397869577;    long zUaTFAMmGRFGkSOafp59125895 = -143252638;    long zUaTFAMmGRFGkSOafp12152952 = -210671368;    long zUaTFAMmGRFGkSOafp25476139 = -75079321;    long zUaTFAMmGRFGkSOafp83431919 = -816903965;    long zUaTFAMmGRFGkSOafp69243862 = -269624824;    long zUaTFAMmGRFGkSOafp96036041 = -478492057;    long zUaTFAMmGRFGkSOafp25065353 = -388581232;    long zUaTFAMmGRFGkSOafp6044818 = -713591045;    long zUaTFAMmGRFGkSOafp34134963 = -876919499;    long zUaTFAMmGRFGkSOafp7077833 = 98217563;    long zUaTFAMmGRFGkSOafp33043014 = 51223462;    long zUaTFAMmGRFGkSOafp49061140 = -859165427;    long zUaTFAMmGRFGkSOafp17998384 = -341391466;    long zUaTFAMmGRFGkSOafp92319558 = 76690027;    long zUaTFAMmGRFGkSOafp96611950 = -60334018;    long zUaTFAMmGRFGkSOafp60634599 = -117019897;    long zUaTFAMmGRFGkSOafp48417903 = -614830305;    long zUaTFAMmGRFGkSOafp43508253 = -37680751;    long zUaTFAMmGRFGkSOafp7187981 = -713345946;    long zUaTFAMmGRFGkSOafp40198810 = -221574568;    long zUaTFAMmGRFGkSOafp49274848 = -463207702;    long zUaTFAMmGRFGkSOafp9775812 = -798127211;    long zUaTFAMmGRFGkSOafp91003666 = -97823016;    long zUaTFAMmGRFGkSOafp48561337 = -181118267;    long zUaTFAMmGRFGkSOafp11451669 = -866591595;    long zUaTFAMmGRFGkSOafp64813922 = -482057413;    long zUaTFAMmGRFGkSOafp79277728 = -116566568;    long zUaTFAMmGRFGkSOafp245186 = -760274648;    long zUaTFAMmGRFGkSOafp75180868 = -845373290;    long zUaTFAMmGRFGkSOafp41930104 = -348748470;    long zUaTFAMmGRFGkSOafp61165586 = -56881201;    long zUaTFAMmGRFGkSOafp56262106 = -10025571;    long zUaTFAMmGRFGkSOafp89594933 = -212390472;    long zUaTFAMmGRFGkSOafp43947370 = -314676132;    long zUaTFAMmGRFGkSOafp33612924 = 58345367;    long zUaTFAMmGRFGkSOafp2816600 = -480265274;    long zUaTFAMmGRFGkSOafp95231855 = -423559332;    long zUaTFAMmGRFGkSOafp20043012 = -195243887;    long zUaTFAMmGRFGkSOafp13072490 = -153190978;    long zUaTFAMmGRFGkSOafp4944661 = -793908552;    long zUaTFAMmGRFGkSOafp2907147 = -784809488;    long zUaTFAMmGRFGkSOafp97200362 = -978611267;    long zUaTFAMmGRFGkSOafp55991497 = -670825026;    long zUaTFAMmGRFGkSOafp82657523 = 14166601;    long zUaTFAMmGRFGkSOafp31520038 = -24332217;    long zUaTFAMmGRFGkSOafp37352330 = -242494121;    long zUaTFAMmGRFGkSOafp45808162 = -357120948;    long zUaTFAMmGRFGkSOafp42790333 = -447999655;    long zUaTFAMmGRFGkSOafp10440445 = -744597937;    long zUaTFAMmGRFGkSOafp31800486 = -912930293;    long zUaTFAMmGRFGkSOafp75784704 = -526212931;    long zUaTFAMmGRFGkSOafp86019287 = -132618709;    long zUaTFAMmGRFGkSOafp28280498 = -585001031;    long zUaTFAMmGRFGkSOafp48480800 = -274227392;    long zUaTFAMmGRFGkSOafp51912446 = -934661876;    long zUaTFAMmGRFGkSOafp49350083 = -345125428;    long zUaTFAMmGRFGkSOafp21149286 = -12848352;    long zUaTFAMmGRFGkSOafp76914802 = -208217243;     zUaTFAMmGRFGkSOafp85058376 = zUaTFAMmGRFGkSOafp11581502;     zUaTFAMmGRFGkSOafp11581502 = zUaTFAMmGRFGkSOafp81342593;     zUaTFAMmGRFGkSOafp81342593 = zUaTFAMmGRFGkSOafp51892835;     zUaTFAMmGRFGkSOafp51892835 = zUaTFAMmGRFGkSOafp25824605;     zUaTFAMmGRFGkSOafp25824605 = zUaTFAMmGRFGkSOafp8168683;     zUaTFAMmGRFGkSOafp8168683 = zUaTFAMmGRFGkSOafp68171309;     zUaTFAMmGRFGkSOafp68171309 = zUaTFAMmGRFGkSOafp52520028;     zUaTFAMmGRFGkSOafp52520028 = zUaTFAMmGRFGkSOafp99902271;     zUaTFAMmGRFGkSOafp99902271 = zUaTFAMmGRFGkSOafp80739022;     zUaTFAMmGRFGkSOafp80739022 = zUaTFAMmGRFGkSOafp13124388;     zUaTFAMmGRFGkSOafp13124388 = zUaTFAMmGRFGkSOafp97865138;     zUaTFAMmGRFGkSOafp97865138 = zUaTFAMmGRFGkSOafp28620468;     zUaTFAMmGRFGkSOafp28620468 = zUaTFAMmGRFGkSOafp14387619;     zUaTFAMmGRFGkSOafp14387619 = zUaTFAMmGRFGkSOafp7297581;     zUaTFAMmGRFGkSOafp7297581 = zUaTFAMmGRFGkSOafp67615953;     zUaTFAMmGRFGkSOafp67615953 = zUaTFAMmGRFGkSOafp66132711;     zUaTFAMmGRFGkSOafp66132711 = zUaTFAMmGRFGkSOafp90693127;     zUaTFAMmGRFGkSOafp90693127 = zUaTFAMmGRFGkSOafp91730584;     zUaTFAMmGRFGkSOafp91730584 = zUaTFAMmGRFGkSOafp78274543;     zUaTFAMmGRFGkSOafp78274543 = zUaTFAMmGRFGkSOafp45134664;     zUaTFAMmGRFGkSOafp45134664 = zUaTFAMmGRFGkSOafp92738818;     zUaTFAMmGRFGkSOafp92738818 = zUaTFAMmGRFGkSOafp14969552;     zUaTFAMmGRFGkSOafp14969552 = zUaTFAMmGRFGkSOafp20707995;     zUaTFAMmGRFGkSOafp20707995 = zUaTFAMmGRFGkSOafp3474932;     zUaTFAMmGRFGkSOafp3474932 = zUaTFAMmGRFGkSOafp82316351;     zUaTFAMmGRFGkSOafp82316351 = zUaTFAMmGRFGkSOafp980703;     zUaTFAMmGRFGkSOafp980703 = zUaTFAMmGRFGkSOafp27972500;     zUaTFAMmGRFGkSOafp27972500 = zUaTFAMmGRFGkSOafp3245181;     zUaTFAMmGRFGkSOafp3245181 = zUaTFAMmGRFGkSOafp90126460;     zUaTFAMmGRFGkSOafp90126460 = zUaTFAMmGRFGkSOafp89735356;     zUaTFAMmGRFGkSOafp89735356 = zUaTFAMmGRFGkSOafp64563051;     zUaTFAMmGRFGkSOafp64563051 = zUaTFAMmGRFGkSOafp86413469;     zUaTFAMmGRFGkSOafp86413469 = zUaTFAMmGRFGkSOafp63806545;     zUaTFAMmGRFGkSOafp63806545 = zUaTFAMmGRFGkSOafp35109891;     zUaTFAMmGRFGkSOafp35109891 = zUaTFAMmGRFGkSOafp7052396;     zUaTFAMmGRFGkSOafp7052396 = zUaTFAMmGRFGkSOafp92435085;     zUaTFAMmGRFGkSOafp92435085 = zUaTFAMmGRFGkSOafp24202608;     zUaTFAMmGRFGkSOafp24202608 = zUaTFAMmGRFGkSOafp29527541;     zUaTFAMmGRFGkSOafp29527541 = zUaTFAMmGRFGkSOafp35468478;     zUaTFAMmGRFGkSOafp35468478 = zUaTFAMmGRFGkSOafp88679609;     zUaTFAMmGRFGkSOafp88679609 = zUaTFAMmGRFGkSOafp1187294;     zUaTFAMmGRFGkSOafp1187294 = zUaTFAMmGRFGkSOafp59125895;     zUaTFAMmGRFGkSOafp59125895 = zUaTFAMmGRFGkSOafp12152952;     zUaTFAMmGRFGkSOafp12152952 = zUaTFAMmGRFGkSOafp25476139;     zUaTFAMmGRFGkSOafp25476139 = zUaTFAMmGRFGkSOafp83431919;     zUaTFAMmGRFGkSOafp83431919 = zUaTFAMmGRFGkSOafp69243862;     zUaTFAMmGRFGkSOafp69243862 = zUaTFAMmGRFGkSOafp96036041;     zUaTFAMmGRFGkSOafp96036041 = zUaTFAMmGRFGkSOafp25065353;     zUaTFAMmGRFGkSOafp25065353 = zUaTFAMmGRFGkSOafp6044818;     zUaTFAMmGRFGkSOafp6044818 = zUaTFAMmGRFGkSOafp34134963;     zUaTFAMmGRFGkSOafp34134963 = zUaTFAMmGRFGkSOafp7077833;     zUaTFAMmGRFGkSOafp7077833 = zUaTFAMmGRFGkSOafp33043014;     zUaTFAMmGRFGkSOafp33043014 = zUaTFAMmGRFGkSOafp49061140;     zUaTFAMmGRFGkSOafp49061140 = zUaTFAMmGRFGkSOafp17998384;     zUaTFAMmGRFGkSOafp17998384 = zUaTFAMmGRFGkSOafp92319558;     zUaTFAMmGRFGkSOafp92319558 = zUaTFAMmGRFGkSOafp96611950;     zUaTFAMmGRFGkSOafp96611950 = zUaTFAMmGRFGkSOafp60634599;     zUaTFAMmGRFGkSOafp60634599 = zUaTFAMmGRFGkSOafp48417903;     zUaTFAMmGRFGkSOafp48417903 = zUaTFAMmGRFGkSOafp43508253;     zUaTFAMmGRFGkSOafp43508253 = zUaTFAMmGRFGkSOafp7187981;     zUaTFAMmGRFGkSOafp7187981 = zUaTFAMmGRFGkSOafp40198810;     zUaTFAMmGRFGkSOafp40198810 = zUaTFAMmGRFGkSOafp49274848;     zUaTFAMmGRFGkSOafp49274848 = zUaTFAMmGRFGkSOafp9775812;     zUaTFAMmGRFGkSOafp9775812 = zUaTFAMmGRFGkSOafp91003666;     zUaTFAMmGRFGkSOafp91003666 = zUaTFAMmGRFGkSOafp48561337;     zUaTFAMmGRFGkSOafp48561337 = zUaTFAMmGRFGkSOafp11451669;     zUaTFAMmGRFGkSOafp11451669 = zUaTFAMmGRFGkSOafp64813922;     zUaTFAMmGRFGkSOafp64813922 = zUaTFAMmGRFGkSOafp79277728;     zUaTFAMmGRFGkSOafp79277728 = zUaTFAMmGRFGkSOafp245186;     zUaTFAMmGRFGkSOafp245186 = zUaTFAMmGRFGkSOafp75180868;     zUaTFAMmGRFGkSOafp75180868 = zUaTFAMmGRFGkSOafp41930104;     zUaTFAMmGRFGkSOafp41930104 = zUaTFAMmGRFGkSOafp61165586;     zUaTFAMmGRFGkSOafp61165586 = zUaTFAMmGRFGkSOafp56262106;     zUaTFAMmGRFGkSOafp56262106 = zUaTFAMmGRFGkSOafp89594933;     zUaTFAMmGRFGkSOafp89594933 = zUaTFAMmGRFGkSOafp43947370;     zUaTFAMmGRFGkSOafp43947370 = zUaTFAMmGRFGkSOafp33612924;     zUaTFAMmGRFGkSOafp33612924 = zUaTFAMmGRFGkSOafp2816600;     zUaTFAMmGRFGkSOafp2816600 = zUaTFAMmGRFGkSOafp95231855;     zUaTFAMmGRFGkSOafp95231855 = zUaTFAMmGRFGkSOafp20043012;     zUaTFAMmGRFGkSOafp20043012 = zUaTFAMmGRFGkSOafp13072490;     zUaTFAMmGRFGkSOafp13072490 = zUaTFAMmGRFGkSOafp4944661;     zUaTFAMmGRFGkSOafp4944661 = zUaTFAMmGRFGkSOafp2907147;     zUaTFAMmGRFGkSOafp2907147 = zUaTFAMmGRFGkSOafp97200362;     zUaTFAMmGRFGkSOafp97200362 = zUaTFAMmGRFGkSOafp55991497;     zUaTFAMmGRFGkSOafp55991497 = zUaTFAMmGRFGkSOafp82657523;     zUaTFAMmGRFGkSOafp82657523 = zUaTFAMmGRFGkSOafp31520038;     zUaTFAMmGRFGkSOafp31520038 = zUaTFAMmGRFGkSOafp37352330;     zUaTFAMmGRFGkSOafp37352330 = zUaTFAMmGRFGkSOafp45808162;     zUaTFAMmGRFGkSOafp45808162 = zUaTFAMmGRFGkSOafp42790333;     zUaTFAMmGRFGkSOafp42790333 = zUaTFAMmGRFGkSOafp10440445;     zUaTFAMmGRFGkSOafp10440445 = zUaTFAMmGRFGkSOafp31800486;     zUaTFAMmGRFGkSOafp31800486 = zUaTFAMmGRFGkSOafp75784704;     zUaTFAMmGRFGkSOafp75784704 = zUaTFAMmGRFGkSOafp86019287;     zUaTFAMmGRFGkSOafp86019287 = zUaTFAMmGRFGkSOafp28280498;     zUaTFAMmGRFGkSOafp28280498 = zUaTFAMmGRFGkSOafp48480800;     zUaTFAMmGRFGkSOafp48480800 = zUaTFAMmGRFGkSOafp51912446;     zUaTFAMmGRFGkSOafp51912446 = zUaTFAMmGRFGkSOafp49350083;     zUaTFAMmGRFGkSOafp49350083 = zUaTFAMmGRFGkSOafp21149286;     zUaTFAMmGRFGkSOafp21149286 = zUaTFAMmGRFGkSOafp76914802;     zUaTFAMmGRFGkSOafp76914802 = zUaTFAMmGRFGkSOafp85058376;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void AKlKiyLwgbHGUQDZmheBAnncNioZeVEeUFANQMc93119277() {     long jFviFooEQXxrPjidMX7451966 = 29902936;    long jFviFooEQXxrPjidMX57356685 = -857218589;    long jFviFooEQXxrPjidMX8798660 = 1816221;    long jFviFooEQXxrPjidMX81819662 = -912844858;    long jFviFooEQXxrPjidMX15158757 = -783198232;    long jFviFooEQXxrPjidMX88246367 = -146922120;    long jFviFooEQXxrPjidMX91779711 = -612416125;    long jFviFooEQXxrPjidMX58939836 = -921829340;    long jFviFooEQXxrPjidMX14325239 = -516421705;    long jFviFooEQXxrPjidMX75863093 = -291373313;    long jFviFooEQXxrPjidMX30345642 = -391379350;    long jFviFooEQXxrPjidMX39476410 = -483518074;    long jFviFooEQXxrPjidMX63775734 = -877628673;    long jFviFooEQXxrPjidMX3158151 = -870431900;    long jFviFooEQXxrPjidMX98860748 = -329971464;    long jFviFooEQXxrPjidMX37307318 = 75804629;    long jFviFooEQXxrPjidMX60103304 = 52543045;    long jFviFooEQXxrPjidMX73669010 = -481851729;    long jFviFooEQXxrPjidMX12583946 = 74507595;    long jFviFooEQXxrPjidMX84717063 = -548802433;    long jFviFooEQXxrPjidMX66348347 = 6433357;    long jFviFooEQXxrPjidMX78257771 = -179681700;    long jFviFooEQXxrPjidMX81384478 = -508059392;    long jFviFooEQXxrPjidMX3557674 = -181710987;    long jFviFooEQXxrPjidMX10572489 = -307013124;    long jFviFooEQXxrPjidMX54045269 = 41495902;    long jFviFooEQXxrPjidMX77848541 = -829187388;    long jFviFooEQXxrPjidMX98480424 = -452878184;    long jFviFooEQXxrPjidMX97459294 = -390389116;    long jFviFooEQXxrPjidMX23193770 = -792609018;    long jFviFooEQXxrPjidMX613483 = -781838753;    long jFviFooEQXxrPjidMX37380385 = -333358348;    long jFviFooEQXxrPjidMX81999716 = -429058827;    long jFviFooEQXxrPjidMX22912396 = -145957532;    long jFviFooEQXxrPjidMX28981218 = -275752125;    long jFviFooEQXxrPjidMX5917075 = -40561585;    long jFviFooEQXxrPjidMX73933429 = -763244763;    long jFviFooEQXxrPjidMX7911030 = -13406029;    long jFviFooEQXxrPjidMX42522076 = 41335925;    long jFviFooEQXxrPjidMX83781300 = -825139320;    long jFviFooEQXxrPjidMX29581313 = 88964273;    long jFviFooEQXxrPjidMX3998025 = 38013814;    long jFviFooEQXxrPjidMX4392727 = -571652968;    long jFviFooEQXxrPjidMX52365173 = -651070573;    long jFviFooEQXxrPjidMX9441354 = -510963397;    long jFviFooEQXxrPjidMX51104233 = -87088390;    long jFviFooEQXxrPjidMX53843467 = -366754455;    long jFviFooEQXxrPjidMX65251135 = -726265692;    long jFviFooEQXxrPjidMX866869 = -774534069;    long jFviFooEQXxrPjidMX83083140 = -168586418;    long jFviFooEQXxrPjidMX29744809 = -553440769;    long jFviFooEQXxrPjidMX66381833 = 49544030;    long jFviFooEQXxrPjidMX35909069 = -828633760;    long jFviFooEQXxrPjidMX99097414 = -602926385;    long jFviFooEQXxrPjidMX26770931 = -725196304;    long jFviFooEQXxrPjidMX29194195 = -790415365;    long jFviFooEQXxrPjidMX75972207 = -249159198;    long jFviFooEQXxrPjidMX5240987 = -816472793;    long jFviFooEQXxrPjidMX71247174 = -505831735;    long jFviFooEQXxrPjidMX61113487 = -724694135;    long jFviFooEQXxrPjidMX10397827 = -317734732;    long jFviFooEQXxrPjidMX93299287 = -59537942;    long jFviFooEQXxrPjidMX61480542 = -431440225;    long jFviFooEQXxrPjidMX91131468 = -723812687;    long jFviFooEQXxrPjidMX75249610 = -509534560;    long jFviFooEQXxrPjidMX92965257 = 41978998;    long jFviFooEQXxrPjidMX57476693 = 45540753;    long jFviFooEQXxrPjidMX40863339 = -631671141;    long jFviFooEQXxrPjidMX74176933 = -494679775;    long jFviFooEQXxrPjidMX92943674 = -189409879;    long jFviFooEQXxrPjidMX63373889 = -160950608;    long jFviFooEQXxrPjidMX52192275 = -934050927;    long jFviFooEQXxrPjidMX31146935 = -423187654;    long jFviFooEQXxrPjidMX28802645 = -100353086;    long jFviFooEQXxrPjidMX55135751 = -537766706;    long jFviFooEQXxrPjidMX62350323 = 68419542;    long jFviFooEQXxrPjidMX73865044 = -608028733;    long jFviFooEQXxrPjidMX29019305 = -856988819;    long jFviFooEQXxrPjidMX94116320 = -670747590;    long jFviFooEQXxrPjidMX59468255 = -119924734;    long jFviFooEQXxrPjidMX201803 = -591749643;    long jFviFooEQXxrPjidMX12597406 = -2921697;    long jFviFooEQXxrPjidMX97613555 = -678344116;    long jFviFooEQXxrPjidMX14376154 = -121802699;    long jFviFooEQXxrPjidMX93448960 = -139168249;    long jFviFooEQXxrPjidMX34231650 = -731382783;    long jFviFooEQXxrPjidMX1471316 = -504724589;    long jFviFooEQXxrPjidMX82902302 = -826132443;    long jFviFooEQXxrPjidMX96141465 = -420761228;    long jFviFooEQXxrPjidMX99787023 = -485336761;    long jFviFooEQXxrPjidMX29944867 = -791402388;    long jFviFooEQXxrPjidMX68692443 = -946771971;    long jFviFooEQXxrPjidMX36663856 = -507574294;    long jFviFooEQXxrPjidMX81408588 = -233969941;    long jFviFooEQXxrPjidMX73383474 = -407404588;    long jFviFooEQXxrPjidMX36282025 = -851497786;    long jFviFooEQXxrPjidMX42517482 = -530545961;    long jFviFooEQXxrPjidMX13261258 = -847840281;    long jFviFooEQXxrPjidMX77115562 = -41536014;    long jFviFooEQXxrPjidMX16476096 = 29902936;     jFviFooEQXxrPjidMX7451966 = jFviFooEQXxrPjidMX57356685;     jFviFooEQXxrPjidMX57356685 = jFviFooEQXxrPjidMX8798660;     jFviFooEQXxrPjidMX8798660 = jFviFooEQXxrPjidMX81819662;     jFviFooEQXxrPjidMX81819662 = jFviFooEQXxrPjidMX15158757;     jFviFooEQXxrPjidMX15158757 = jFviFooEQXxrPjidMX88246367;     jFviFooEQXxrPjidMX88246367 = jFviFooEQXxrPjidMX91779711;     jFviFooEQXxrPjidMX91779711 = jFviFooEQXxrPjidMX58939836;     jFviFooEQXxrPjidMX58939836 = jFviFooEQXxrPjidMX14325239;     jFviFooEQXxrPjidMX14325239 = jFviFooEQXxrPjidMX75863093;     jFviFooEQXxrPjidMX75863093 = jFviFooEQXxrPjidMX30345642;     jFviFooEQXxrPjidMX30345642 = jFviFooEQXxrPjidMX39476410;     jFviFooEQXxrPjidMX39476410 = jFviFooEQXxrPjidMX63775734;     jFviFooEQXxrPjidMX63775734 = jFviFooEQXxrPjidMX3158151;     jFviFooEQXxrPjidMX3158151 = jFviFooEQXxrPjidMX98860748;     jFviFooEQXxrPjidMX98860748 = jFviFooEQXxrPjidMX37307318;     jFviFooEQXxrPjidMX37307318 = jFviFooEQXxrPjidMX60103304;     jFviFooEQXxrPjidMX60103304 = jFviFooEQXxrPjidMX73669010;     jFviFooEQXxrPjidMX73669010 = jFviFooEQXxrPjidMX12583946;     jFviFooEQXxrPjidMX12583946 = jFviFooEQXxrPjidMX84717063;     jFviFooEQXxrPjidMX84717063 = jFviFooEQXxrPjidMX66348347;     jFviFooEQXxrPjidMX66348347 = jFviFooEQXxrPjidMX78257771;     jFviFooEQXxrPjidMX78257771 = jFviFooEQXxrPjidMX81384478;     jFviFooEQXxrPjidMX81384478 = jFviFooEQXxrPjidMX3557674;     jFviFooEQXxrPjidMX3557674 = jFviFooEQXxrPjidMX10572489;     jFviFooEQXxrPjidMX10572489 = jFviFooEQXxrPjidMX54045269;     jFviFooEQXxrPjidMX54045269 = jFviFooEQXxrPjidMX77848541;     jFviFooEQXxrPjidMX77848541 = jFviFooEQXxrPjidMX98480424;     jFviFooEQXxrPjidMX98480424 = jFviFooEQXxrPjidMX97459294;     jFviFooEQXxrPjidMX97459294 = jFviFooEQXxrPjidMX23193770;     jFviFooEQXxrPjidMX23193770 = jFviFooEQXxrPjidMX613483;     jFviFooEQXxrPjidMX613483 = jFviFooEQXxrPjidMX37380385;     jFviFooEQXxrPjidMX37380385 = jFviFooEQXxrPjidMX81999716;     jFviFooEQXxrPjidMX81999716 = jFviFooEQXxrPjidMX22912396;     jFviFooEQXxrPjidMX22912396 = jFviFooEQXxrPjidMX28981218;     jFviFooEQXxrPjidMX28981218 = jFviFooEQXxrPjidMX5917075;     jFviFooEQXxrPjidMX5917075 = jFviFooEQXxrPjidMX73933429;     jFviFooEQXxrPjidMX73933429 = jFviFooEQXxrPjidMX7911030;     jFviFooEQXxrPjidMX7911030 = jFviFooEQXxrPjidMX42522076;     jFviFooEQXxrPjidMX42522076 = jFviFooEQXxrPjidMX83781300;     jFviFooEQXxrPjidMX83781300 = jFviFooEQXxrPjidMX29581313;     jFviFooEQXxrPjidMX29581313 = jFviFooEQXxrPjidMX3998025;     jFviFooEQXxrPjidMX3998025 = jFviFooEQXxrPjidMX4392727;     jFviFooEQXxrPjidMX4392727 = jFviFooEQXxrPjidMX52365173;     jFviFooEQXxrPjidMX52365173 = jFviFooEQXxrPjidMX9441354;     jFviFooEQXxrPjidMX9441354 = jFviFooEQXxrPjidMX51104233;     jFviFooEQXxrPjidMX51104233 = jFviFooEQXxrPjidMX53843467;     jFviFooEQXxrPjidMX53843467 = jFviFooEQXxrPjidMX65251135;     jFviFooEQXxrPjidMX65251135 = jFviFooEQXxrPjidMX866869;     jFviFooEQXxrPjidMX866869 = jFviFooEQXxrPjidMX83083140;     jFviFooEQXxrPjidMX83083140 = jFviFooEQXxrPjidMX29744809;     jFviFooEQXxrPjidMX29744809 = jFviFooEQXxrPjidMX66381833;     jFviFooEQXxrPjidMX66381833 = jFviFooEQXxrPjidMX35909069;     jFviFooEQXxrPjidMX35909069 = jFviFooEQXxrPjidMX99097414;     jFviFooEQXxrPjidMX99097414 = jFviFooEQXxrPjidMX26770931;     jFviFooEQXxrPjidMX26770931 = jFviFooEQXxrPjidMX29194195;     jFviFooEQXxrPjidMX29194195 = jFviFooEQXxrPjidMX75972207;     jFviFooEQXxrPjidMX75972207 = jFviFooEQXxrPjidMX5240987;     jFviFooEQXxrPjidMX5240987 = jFviFooEQXxrPjidMX71247174;     jFviFooEQXxrPjidMX71247174 = jFviFooEQXxrPjidMX61113487;     jFviFooEQXxrPjidMX61113487 = jFviFooEQXxrPjidMX10397827;     jFviFooEQXxrPjidMX10397827 = jFviFooEQXxrPjidMX93299287;     jFviFooEQXxrPjidMX93299287 = jFviFooEQXxrPjidMX61480542;     jFviFooEQXxrPjidMX61480542 = jFviFooEQXxrPjidMX91131468;     jFviFooEQXxrPjidMX91131468 = jFviFooEQXxrPjidMX75249610;     jFviFooEQXxrPjidMX75249610 = jFviFooEQXxrPjidMX92965257;     jFviFooEQXxrPjidMX92965257 = jFviFooEQXxrPjidMX57476693;     jFviFooEQXxrPjidMX57476693 = jFviFooEQXxrPjidMX40863339;     jFviFooEQXxrPjidMX40863339 = jFviFooEQXxrPjidMX74176933;     jFviFooEQXxrPjidMX74176933 = jFviFooEQXxrPjidMX92943674;     jFviFooEQXxrPjidMX92943674 = jFviFooEQXxrPjidMX63373889;     jFviFooEQXxrPjidMX63373889 = jFviFooEQXxrPjidMX52192275;     jFviFooEQXxrPjidMX52192275 = jFviFooEQXxrPjidMX31146935;     jFviFooEQXxrPjidMX31146935 = jFviFooEQXxrPjidMX28802645;     jFviFooEQXxrPjidMX28802645 = jFviFooEQXxrPjidMX55135751;     jFviFooEQXxrPjidMX55135751 = jFviFooEQXxrPjidMX62350323;     jFviFooEQXxrPjidMX62350323 = jFviFooEQXxrPjidMX73865044;     jFviFooEQXxrPjidMX73865044 = jFviFooEQXxrPjidMX29019305;     jFviFooEQXxrPjidMX29019305 = jFviFooEQXxrPjidMX94116320;     jFviFooEQXxrPjidMX94116320 = jFviFooEQXxrPjidMX59468255;     jFviFooEQXxrPjidMX59468255 = jFviFooEQXxrPjidMX201803;     jFviFooEQXxrPjidMX201803 = jFviFooEQXxrPjidMX12597406;     jFviFooEQXxrPjidMX12597406 = jFviFooEQXxrPjidMX97613555;     jFviFooEQXxrPjidMX97613555 = jFviFooEQXxrPjidMX14376154;     jFviFooEQXxrPjidMX14376154 = jFviFooEQXxrPjidMX93448960;     jFviFooEQXxrPjidMX93448960 = jFviFooEQXxrPjidMX34231650;     jFviFooEQXxrPjidMX34231650 = jFviFooEQXxrPjidMX1471316;     jFviFooEQXxrPjidMX1471316 = jFviFooEQXxrPjidMX82902302;     jFviFooEQXxrPjidMX82902302 = jFviFooEQXxrPjidMX96141465;     jFviFooEQXxrPjidMX96141465 = jFviFooEQXxrPjidMX99787023;     jFviFooEQXxrPjidMX99787023 = jFviFooEQXxrPjidMX29944867;     jFviFooEQXxrPjidMX29944867 = jFviFooEQXxrPjidMX68692443;     jFviFooEQXxrPjidMX68692443 = jFviFooEQXxrPjidMX36663856;     jFviFooEQXxrPjidMX36663856 = jFviFooEQXxrPjidMX81408588;     jFviFooEQXxrPjidMX81408588 = jFviFooEQXxrPjidMX73383474;     jFviFooEQXxrPjidMX73383474 = jFviFooEQXxrPjidMX36282025;     jFviFooEQXxrPjidMX36282025 = jFviFooEQXxrPjidMX42517482;     jFviFooEQXxrPjidMX42517482 = jFviFooEQXxrPjidMX13261258;     jFviFooEQXxrPjidMX13261258 = jFviFooEQXxrPjidMX77115562;     jFviFooEQXxrPjidMX77115562 = jFviFooEQXxrPjidMX16476096;     jFviFooEQXxrPjidMX16476096 = jFviFooEQXxrPjidMX7451966;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void NzAGFhskXniEdLstxKzAaWMpAhkhbiKpWPygTdK75348039() {     long zhCZOAFTxjMYClHGrn59187416 = -86351897;    long zhCZOAFTxjMYClHGrn73030668 = -934118344;    long zhCZOAFTxjMYClHGrn57599019 = -895543163;    long zhCZOAFTxjMYClHGrn56895064 = -729114000;    long zhCZOAFTxjMYClHGrn91882689 = -490848886;    long zhCZOAFTxjMYClHGrn13129722 = -305949347;    long zhCZOAFTxjMYClHGrn65556555 = -435627722;    long zhCZOAFTxjMYClHGrn77731314 = 54391105;    long zhCZOAFTxjMYClHGrn65623315 = -307270415;    long zhCZOAFTxjMYClHGrn44660217 = -833019295;    long zhCZOAFTxjMYClHGrn25638341 = -353101822;    long zhCZOAFTxjMYClHGrn49832788 = -418499574;    long zhCZOAFTxjMYClHGrn50956528 = -486808934;    long zhCZOAFTxjMYClHGrn61925870 = -497112447;    long zhCZOAFTxjMYClHGrn52876006 = -907699174;    long zhCZOAFTxjMYClHGrn49034590 = -735879327;    long zhCZOAFTxjMYClHGrn16073829 = -315551645;    long zhCZOAFTxjMYClHGrn59351932 = -944428224;    long zhCZOAFTxjMYClHGrn72157794 = -453406588;    long zhCZOAFTxjMYClHGrn4446638 = -259070582;    long zhCZOAFTxjMYClHGrn12095700 = -76374811;    long zhCZOAFTxjMYClHGrn80677224 = -353162708;    long zhCZOAFTxjMYClHGrn82733992 = -116296839;    long zhCZOAFTxjMYClHGrn96207923 = -53302938;    long zhCZOAFTxjMYClHGrn81988347 = -252667560;    long zhCZOAFTxjMYClHGrn11750684 = -304113877;    long zhCZOAFTxjMYClHGrn16677176 = -191596106;    long zhCZOAFTxjMYClHGrn96609649 = -836208870;    long zhCZOAFTxjMYClHGrn72209367 = -440288018;    long zhCZOAFTxjMYClHGrn93178853 = -154509814;    long zhCZOAFTxjMYClHGrn37832291 = -14721219;    long zhCZOAFTxjMYClHGrn50410115 = -657132540;    long zhCZOAFTxjMYClHGrn80093026 = 88559287;    long zhCZOAFTxjMYClHGrn16936108 = -906554698;    long zhCZOAFTxjMYClHGrn27186346 = -492561768;    long zhCZOAFTxjMYClHGrn87616684 = -276730414;    long zhCZOAFTxjMYClHGrn23581656 = -307599507;    long zhCZOAFTxjMYClHGrn8744642 = -96918393;    long zhCZOAFTxjMYClHGrn12296918 = -403981470;    long zhCZOAFTxjMYClHGrn8863717 = -343754986;    long zhCZOAFTxjMYClHGrn98265399 = -30194515;    long zhCZOAFTxjMYClHGrn64023424 = 49494192;    long zhCZOAFTxjMYClHGrn60975959 = -472429499;    long zhCZOAFTxjMYClHGrn45300991 = -576459251;    long zhCZOAFTxjMYClHGrn81470561 = -11460480;    long zhCZOAFTxjMYClHGrn52798680 = -510980330;    long zhCZOAFTxjMYClHGrn40009661 = -829094909;    long zhCZOAFTxjMYClHGrn44235600 = -30670387;    long zhCZOAFTxjMYClHGrn89885321 = -738486798;    long zhCZOAFTxjMYClHGrn71739399 = -27597798;    long zhCZOAFTxjMYClHGrn70424701 = -261944925;    long zhCZOAFTxjMYClHGrn98361585 = -412055531;    long zhCZOAFTxjMYClHGrn59147815 = -572746948;    long zhCZOAFTxjMYClHGrn69156655 = -217725697;    long zhCZOAFTxjMYClHGrn63252339 = -754959505;    long zhCZOAFTxjMYClHGrn78510191 = -733189190;    long zhCZOAFTxjMYClHGrn90296676 = -717821506;    long zhCZOAFTxjMYClHGrn61391096 = -742240226;    long zhCZOAFTxjMYClHGrn74906717 = -376446441;    long zhCZOAFTxjMYClHGrn80132006 = -86735010;    long zhCZOAFTxjMYClHGrn96452545 = -14353241;    long zhCZOAFTxjMYClHGrn68946906 = -599418852;    long zhCZOAFTxjMYClHGrn5521948 = -505320877;    long zhCZOAFTxjMYClHGrn72444462 = -52760602;    long zhCZOAFTxjMYClHGrn6827926 = -718298076;    long zhCZOAFTxjMYClHGrn75228226 = -695969282;    long zhCZOAFTxjMYClHGrn69739762 = -407058861;    long zhCZOAFTxjMYClHGrn34020420 = -580254237;    long zhCZOAFTxjMYClHGrn34739524 = 95449321;    long zhCZOAFTxjMYClHGrn65259321 = -530968761;    long zhCZOAFTxjMYClHGrn25452935 = -328279820;    long zhCZOAFTxjMYClHGrn7329188 = -118633253;    long zhCZOAFTxjMYClHGrn47055015 = -440446754;    long zhCZOAFTxjMYClHGrn63294078 = -9651603;    long zhCZOAFTxjMYClHGrn6181238 = -128876068;    long zhCZOAFTxjMYClHGrn48072275 = -25869004;    long zhCZOAFTxjMYClHGrn19701266 = -880733209;    long zhCZOAFTxjMYClHGrn37433001 = -539837589;    long zhCZOAFTxjMYClHGrn14737363 = 58157542;    long zhCZOAFTxjMYClHGrn29189667 = -741687230;    long zhCZOAFTxjMYClHGrn71741022 = -475018969;    long zhCZOAFTxjMYClHGrn72441575 = -60925719;    long zhCZOAFTxjMYClHGrn6724328 = 2277927;    long zhCZOAFTxjMYClHGrn469968 = -312690220;    long zhCZOAFTxjMYClHGrn22754152 = -892564889;    long zhCZOAFTxjMYClHGrn39470706 = -602665689;    long zhCZOAFTxjMYClHGrn91262299 = 15614408;    long zhCZOAFTxjMYClHGrn10936372 = -693715017;    long zhCZOAFTxjMYClHGrn53683769 = -51595193;    long zhCZOAFTxjMYClHGrn48676155 = -759372579;    long zhCZOAFTxjMYClHGrn97320008 = -558908908;    long zhCZOAFTxjMYClHGrn62190560 = -565359282;    long zhCZOAFTxjMYClHGrn33837924 = -720471953;    long zhCZOAFTxjMYClHGrn32164912 = -217246461;    long zhCZOAFTxjMYClHGrn12411171 = -229401745;    long zhCZOAFTxjMYClHGrn29318494 = -430775663;    long zhCZOAFTxjMYClHGrn58501477 = -445184931;    long zhCZOAFTxjMYClHGrn88531496 = -319668898;    long zhCZOAFTxjMYClHGrn38473066 = -858161175;    long zhCZOAFTxjMYClHGrn6242335 = -86351897;     zhCZOAFTxjMYClHGrn59187416 = zhCZOAFTxjMYClHGrn73030668;     zhCZOAFTxjMYClHGrn73030668 = zhCZOAFTxjMYClHGrn57599019;     zhCZOAFTxjMYClHGrn57599019 = zhCZOAFTxjMYClHGrn56895064;     zhCZOAFTxjMYClHGrn56895064 = zhCZOAFTxjMYClHGrn91882689;     zhCZOAFTxjMYClHGrn91882689 = zhCZOAFTxjMYClHGrn13129722;     zhCZOAFTxjMYClHGrn13129722 = zhCZOAFTxjMYClHGrn65556555;     zhCZOAFTxjMYClHGrn65556555 = zhCZOAFTxjMYClHGrn77731314;     zhCZOAFTxjMYClHGrn77731314 = zhCZOAFTxjMYClHGrn65623315;     zhCZOAFTxjMYClHGrn65623315 = zhCZOAFTxjMYClHGrn44660217;     zhCZOAFTxjMYClHGrn44660217 = zhCZOAFTxjMYClHGrn25638341;     zhCZOAFTxjMYClHGrn25638341 = zhCZOAFTxjMYClHGrn49832788;     zhCZOAFTxjMYClHGrn49832788 = zhCZOAFTxjMYClHGrn50956528;     zhCZOAFTxjMYClHGrn50956528 = zhCZOAFTxjMYClHGrn61925870;     zhCZOAFTxjMYClHGrn61925870 = zhCZOAFTxjMYClHGrn52876006;     zhCZOAFTxjMYClHGrn52876006 = zhCZOAFTxjMYClHGrn49034590;     zhCZOAFTxjMYClHGrn49034590 = zhCZOAFTxjMYClHGrn16073829;     zhCZOAFTxjMYClHGrn16073829 = zhCZOAFTxjMYClHGrn59351932;     zhCZOAFTxjMYClHGrn59351932 = zhCZOAFTxjMYClHGrn72157794;     zhCZOAFTxjMYClHGrn72157794 = zhCZOAFTxjMYClHGrn4446638;     zhCZOAFTxjMYClHGrn4446638 = zhCZOAFTxjMYClHGrn12095700;     zhCZOAFTxjMYClHGrn12095700 = zhCZOAFTxjMYClHGrn80677224;     zhCZOAFTxjMYClHGrn80677224 = zhCZOAFTxjMYClHGrn82733992;     zhCZOAFTxjMYClHGrn82733992 = zhCZOAFTxjMYClHGrn96207923;     zhCZOAFTxjMYClHGrn96207923 = zhCZOAFTxjMYClHGrn81988347;     zhCZOAFTxjMYClHGrn81988347 = zhCZOAFTxjMYClHGrn11750684;     zhCZOAFTxjMYClHGrn11750684 = zhCZOAFTxjMYClHGrn16677176;     zhCZOAFTxjMYClHGrn16677176 = zhCZOAFTxjMYClHGrn96609649;     zhCZOAFTxjMYClHGrn96609649 = zhCZOAFTxjMYClHGrn72209367;     zhCZOAFTxjMYClHGrn72209367 = zhCZOAFTxjMYClHGrn93178853;     zhCZOAFTxjMYClHGrn93178853 = zhCZOAFTxjMYClHGrn37832291;     zhCZOAFTxjMYClHGrn37832291 = zhCZOAFTxjMYClHGrn50410115;     zhCZOAFTxjMYClHGrn50410115 = zhCZOAFTxjMYClHGrn80093026;     zhCZOAFTxjMYClHGrn80093026 = zhCZOAFTxjMYClHGrn16936108;     zhCZOAFTxjMYClHGrn16936108 = zhCZOAFTxjMYClHGrn27186346;     zhCZOAFTxjMYClHGrn27186346 = zhCZOAFTxjMYClHGrn87616684;     zhCZOAFTxjMYClHGrn87616684 = zhCZOAFTxjMYClHGrn23581656;     zhCZOAFTxjMYClHGrn23581656 = zhCZOAFTxjMYClHGrn8744642;     zhCZOAFTxjMYClHGrn8744642 = zhCZOAFTxjMYClHGrn12296918;     zhCZOAFTxjMYClHGrn12296918 = zhCZOAFTxjMYClHGrn8863717;     zhCZOAFTxjMYClHGrn8863717 = zhCZOAFTxjMYClHGrn98265399;     zhCZOAFTxjMYClHGrn98265399 = zhCZOAFTxjMYClHGrn64023424;     zhCZOAFTxjMYClHGrn64023424 = zhCZOAFTxjMYClHGrn60975959;     zhCZOAFTxjMYClHGrn60975959 = zhCZOAFTxjMYClHGrn45300991;     zhCZOAFTxjMYClHGrn45300991 = zhCZOAFTxjMYClHGrn81470561;     zhCZOAFTxjMYClHGrn81470561 = zhCZOAFTxjMYClHGrn52798680;     zhCZOAFTxjMYClHGrn52798680 = zhCZOAFTxjMYClHGrn40009661;     zhCZOAFTxjMYClHGrn40009661 = zhCZOAFTxjMYClHGrn44235600;     zhCZOAFTxjMYClHGrn44235600 = zhCZOAFTxjMYClHGrn89885321;     zhCZOAFTxjMYClHGrn89885321 = zhCZOAFTxjMYClHGrn71739399;     zhCZOAFTxjMYClHGrn71739399 = zhCZOAFTxjMYClHGrn70424701;     zhCZOAFTxjMYClHGrn70424701 = zhCZOAFTxjMYClHGrn98361585;     zhCZOAFTxjMYClHGrn98361585 = zhCZOAFTxjMYClHGrn59147815;     zhCZOAFTxjMYClHGrn59147815 = zhCZOAFTxjMYClHGrn69156655;     zhCZOAFTxjMYClHGrn69156655 = zhCZOAFTxjMYClHGrn63252339;     zhCZOAFTxjMYClHGrn63252339 = zhCZOAFTxjMYClHGrn78510191;     zhCZOAFTxjMYClHGrn78510191 = zhCZOAFTxjMYClHGrn90296676;     zhCZOAFTxjMYClHGrn90296676 = zhCZOAFTxjMYClHGrn61391096;     zhCZOAFTxjMYClHGrn61391096 = zhCZOAFTxjMYClHGrn74906717;     zhCZOAFTxjMYClHGrn74906717 = zhCZOAFTxjMYClHGrn80132006;     zhCZOAFTxjMYClHGrn80132006 = zhCZOAFTxjMYClHGrn96452545;     zhCZOAFTxjMYClHGrn96452545 = zhCZOAFTxjMYClHGrn68946906;     zhCZOAFTxjMYClHGrn68946906 = zhCZOAFTxjMYClHGrn5521948;     zhCZOAFTxjMYClHGrn5521948 = zhCZOAFTxjMYClHGrn72444462;     zhCZOAFTxjMYClHGrn72444462 = zhCZOAFTxjMYClHGrn6827926;     zhCZOAFTxjMYClHGrn6827926 = zhCZOAFTxjMYClHGrn75228226;     zhCZOAFTxjMYClHGrn75228226 = zhCZOAFTxjMYClHGrn69739762;     zhCZOAFTxjMYClHGrn69739762 = zhCZOAFTxjMYClHGrn34020420;     zhCZOAFTxjMYClHGrn34020420 = zhCZOAFTxjMYClHGrn34739524;     zhCZOAFTxjMYClHGrn34739524 = zhCZOAFTxjMYClHGrn65259321;     zhCZOAFTxjMYClHGrn65259321 = zhCZOAFTxjMYClHGrn25452935;     zhCZOAFTxjMYClHGrn25452935 = zhCZOAFTxjMYClHGrn7329188;     zhCZOAFTxjMYClHGrn7329188 = zhCZOAFTxjMYClHGrn47055015;     zhCZOAFTxjMYClHGrn47055015 = zhCZOAFTxjMYClHGrn63294078;     zhCZOAFTxjMYClHGrn63294078 = zhCZOAFTxjMYClHGrn6181238;     zhCZOAFTxjMYClHGrn6181238 = zhCZOAFTxjMYClHGrn48072275;     zhCZOAFTxjMYClHGrn48072275 = zhCZOAFTxjMYClHGrn19701266;     zhCZOAFTxjMYClHGrn19701266 = zhCZOAFTxjMYClHGrn37433001;     zhCZOAFTxjMYClHGrn37433001 = zhCZOAFTxjMYClHGrn14737363;     zhCZOAFTxjMYClHGrn14737363 = zhCZOAFTxjMYClHGrn29189667;     zhCZOAFTxjMYClHGrn29189667 = zhCZOAFTxjMYClHGrn71741022;     zhCZOAFTxjMYClHGrn71741022 = zhCZOAFTxjMYClHGrn72441575;     zhCZOAFTxjMYClHGrn72441575 = zhCZOAFTxjMYClHGrn6724328;     zhCZOAFTxjMYClHGrn6724328 = zhCZOAFTxjMYClHGrn469968;     zhCZOAFTxjMYClHGrn469968 = zhCZOAFTxjMYClHGrn22754152;     zhCZOAFTxjMYClHGrn22754152 = zhCZOAFTxjMYClHGrn39470706;     zhCZOAFTxjMYClHGrn39470706 = zhCZOAFTxjMYClHGrn91262299;     zhCZOAFTxjMYClHGrn91262299 = zhCZOAFTxjMYClHGrn10936372;     zhCZOAFTxjMYClHGrn10936372 = zhCZOAFTxjMYClHGrn53683769;     zhCZOAFTxjMYClHGrn53683769 = zhCZOAFTxjMYClHGrn48676155;     zhCZOAFTxjMYClHGrn48676155 = zhCZOAFTxjMYClHGrn97320008;     zhCZOAFTxjMYClHGrn97320008 = zhCZOAFTxjMYClHGrn62190560;     zhCZOAFTxjMYClHGrn62190560 = zhCZOAFTxjMYClHGrn33837924;     zhCZOAFTxjMYClHGrn33837924 = zhCZOAFTxjMYClHGrn32164912;     zhCZOAFTxjMYClHGrn32164912 = zhCZOAFTxjMYClHGrn12411171;     zhCZOAFTxjMYClHGrn12411171 = zhCZOAFTxjMYClHGrn29318494;     zhCZOAFTxjMYClHGrn29318494 = zhCZOAFTxjMYClHGrn58501477;     zhCZOAFTxjMYClHGrn58501477 = zhCZOAFTxjMYClHGrn88531496;     zhCZOAFTxjMYClHGrn88531496 = zhCZOAFTxjMYClHGrn38473066;     zhCZOAFTxjMYClHGrn38473066 = zhCZOAFTxjMYClHGrn6242335;     zhCZOAFTxjMYClHGrn6242335 = zhCZOAFTxjMYClHGrn59187416;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void KKNtfUoUFGRQvOxxfMMgZHBacEFSZaLDmOcrHzE4681703() {     double QTCAeGVJnorDidqlCJ18504300 = -845751888;    double QTCAeGVJnorDidqlCJ93810511 = -940004066;    double QTCAeGVJnorDidqlCJ2422798 = -894901623;    double QTCAeGVJnorDidqlCJ18415121 = -690642785;    double QTCAeGVJnorDidqlCJ29735903 = -900275213;    double QTCAeGVJnorDidqlCJ97971725 = -939960004;    double QTCAeGVJnorDidqlCJ97073792 = -583742483;    double QTCAeGVJnorDidqlCJ99563958 = -766523713;    double QTCAeGVJnorDidqlCJ87746931 = -483919569;    double QTCAeGVJnorDidqlCJ14124796 = 80386755;    double QTCAeGVJnorDidqlCJ57460174 = -4474876;    double QTCAeGVJnorDidqlCJ57497618 = -571999798;    double QTCAeGVJnorDidqlCJ88775015 = -341816450;    double QTCAeGVJnorDidqlCJ5553456 = -939878288;    double QTCAeGVJnorDidqlCJ6859017 = -768551372;    double QTCAeGVJnorDidqlCJ60363978 = -405203892;    double QTCAeGVJnorDidqlCJ45921407 = -938233090;    double QTCAeGVJnorDidqlCJ90794440 = -850217631;    double QTCAeGVJnorDidqlCJ74063659 = -802551850;    double QTCAeGVJnorDidqlCJ99623544 = -734772310;    double QTCAeGVJnorDidqlCJ80857695 = 75541854;    double QTCAeGVJnorDidqlCJ60312070 = -323561070;    double QTCAeGVJnorDidqlCJ9575660 = -991086378;    double QTCAeGVJnorDidqlCJ94502025 = -150233917;    double QTCAeGVJnorDidqlCJ62940217 = -190127148;    double QTCAeGVJnorDidqlCJ48514981 = -976274036;    double QTCAeGVJnorDidqlCJ57880047 = -925285023;    double QTCAeGVJnorDidqlCJ58853244 = -641103856;    double QTCAeGVJnorDidqlCJ86156662 = -668189875;    double QTCAeGVJnorDidqlCJ11937334 = -41736533;    double QTCAeGVJnorDidqlCJ99477500 = -78599728;    double QTCAeGVJnorDidqlCJ31488514 = -440348395;    double QTCAeGVJnorDidqlCJ58589250 = 52954329;    double QTCAeGVJnorDidqlCJ5894347 = -695944151;    double QTCAeGVJnorDidqlCJ43247112 = -604145881;    double QTCAeGVJnorDidqlCJ8734532 = -398014424;    double QTCAeGVJnorDidqlCJ83063921 = -158886025;    double QTCAeGVJnorDidqlCJ97302019 = -950698086;    double QTCAeGVJnorDidqlCJ19694220 = -2026903;    double QTCAeGVJnorDidqlCJ91995390 = -423582577;    double QTCAeGVJnorDidqlCJ25364617 = -420364958;    double QTCAeGVJnorDidqlCJ55250665 = -923329878;    double QTCAeGVJnorDidqlCJ92622124 = -4527317;    double QTCAeGVJnorDidqlCJ64249917 = -77613028;    double QTCAeGVJnorDidqlCJ46416123 = 40078577;    double QTCAeGVJnorDidqlCJ12930924 = -58503721;    double QTCAeGVJnorDidqlCJ88334844 = -831608898;    double QTCAeGVJnorDidqlCJ71860742 = -600023437;    double QTCAeGVJnorDidqlCJ26247868 = -808242349;    double QTCAeGVJnorDidqlCJ86365946 = 76144721;    double QTCAeGVJnorDidqlCJ54077568 = -103182170;    double QTCAeGVJnorDidqlCJ8941813 = -689505311;    double QTCAeGVJnorDidqlCJ3293386 = 87489648;    double QTCAeGVJnorDidqlCJ21175331 = -719598852;    double QTCAeGVJnorDidqlCJ23824008 = -750652770;    double QTCAeGVJnorDidqlCJ58192230 = -422190819;    double QTCAeGVJnorDidqlCJ84234851 = -948917688;    double QTCAeGVJnorDidqlCJ7920772 = -644667706;    double QTCAeGVJnorDidqlCJ55474904 = -400515638;    double QTCAeGVJnorDidqlCJ81220921 = -924001178;    double QTCAeGVJnorDidqlCJ40091678 = 85325018;    double QTCAeGVJnorDidqlCJ38220549 = -942638628;    double QTCAeGVJnorDidqlCJ13407296 = 1666161;    double QTCAeGVJnorDidqlCJ75809597 = -342183037;    double QTCAeGVJnorDidqlCJ14647296 = -841013518;    double QTCAeGVJnorDidqlCJ25971661 = -564126482;    double QTCAeGVJnorDidqlCJ98908367 = -524954127;    double QTCAeGVJnorDidqlCJ82880668 = -645872299;    double QTCAeGVJnorDidqlCJ62306344 = -235732408;    double QTCAeGVJnorDidqlCJ98124484 = -270536948;    double QTCAeGVJnorDidqlCJ77300056 = -146317867;    double QTCAeGVJnorDidqlCJ48619387 = -987535004;    double QTCAeGVJnorDidqlCJ71100220 = -748190728;    double QTCAeGVJnorDidqlCJ82068268 = -278969274;    double QTCAeGVJnorDidqlCJ74258928 = -214407353;    double QTCAeGVJnorDidqlCJ25607030 = -1128268;    double QTCAeGVJnorDidqlCJ67689946 = -219033753;    double QTCAeGVJnorDidqlCJ45325743 = -813473351;    double QTCAeGVJnorDidqlCJ48085903 = -90312494;    double QTCAeGVJnorDidqlCJ50009294 = -31623427;    double QTCAeGVJnorDidqlCJ60180137 = -44665138;    double QTCAeGVJnorDidqlCJ86019304 = -225261586;    double QTCAeGVJnorDidqlCJ32605376 = -832861507;    double QTCAeGVJnorDidqlCJ99790716 = -644334597;    double QTCAeGVJnorDidqlCJ57859765 = -938554364;    double QTCAeGVJnorDidqlCJ90535687 = -389094417;    double QTCAeGVJnorDidqlCJ28195128 = -427838043;    double QTCAeGVJnorDidqlCJ37413920 = -227446820;    double QTCAeGVJnorDidqlCJ82070339 = -945291382;    double QTCAeGVJnorDidqlCJ85054882 = -81955063;    double QTCAeGVJnorDidqlCJ24499680 = -449096737;    double QTCAeGVJnorDidqlCJ75143150 = -514218320;    double QTCAeGVJnorDidqlCJ41827116 = -450182449;    double QTCAeGVJnorDidqlCJ38473298 = -78025726;    double QTCAeGVJnorDidqlCJ51903712 = -408907596;    double QTCAeGVJnorDidqlCJ87144067 = -477726331;    double QTCAeGVJnorDidqlCJ41843369 = -824996040;    double QTCAeGVJnorDidqlCJ16812527 = -662344281;    double QTCAeGVJnorDidqlCJ49602622 = -236599510;    double QTCAeGVJnorDidqlCJ20444463 = -845751888;     QTCAeGVJnorDidqlCJ18504300 = QTCAeGVJnorDidqlCJ93810511;     QTCAeGVJnorDidqlCJ93810511 = QTCAeGVJnorDidqlCJ2422798;     QTCAeGVJnorDidqlCJ2422798 = QTCAeGVJnorDidqlCJ18415121;     QTCAeGVJnorDidqlCJ18415121 = QTCAeGVJnorDidqlCJ29735903;     QTCAeGVJnorDidqlCJ29735903 = QTCAeGVJnorDidqlCJ97971725;     QTCAeGVJnorDidqlCJ97971725 = QTCAeGVJnorDidqlCJ97073792;     QTCAeGVJnorDidqlCJ97073792 = QTCAeGVJnorDidqlCJ99563958;     QTCAeGVJnorDidqlCJ99563958 = QTCAeGVJnorDidqlCJ87746931;     QTCAeGVJnorDidqlCJ87746931 = QTCAeGVJnorDidqlCJ14124796;     QTCAeGVJnorDidqlCJ14124796 = QTCAeGVJnorDidqlCJ57460174;     QTCAeGVJnorDidqlCJ57460174 = QTCAeGVJnorDidqlCJ57497618;     QTCAeGVJnorDidqlCJ57497618 = QTCAeGVJnorDidqlCJ88775015;     QTCAeGVJnorDidqlCJ88775015 = QTCAeGVJnorDidqlCJ5553456;     QTCAeGVJnorDidqlCJ5553456 = QTCAeGVJnorDidqlCJ6859017;     QTCAeGVJnorDidqlCJ6859017 = QTCAeGVJnorDidqlCJ60363978;     QTCAeGVJnorDidqlCJ60363978 = QTCAeGVJnorDidqlCJ45921407;     QTCAeGVJnorDidqlCJ45921407 = QTCAeGVJnorDidqlCJ90794440;     QTCAeGVJnorDidqlCJ90794440 = QTCAeGVJnorDidqlCJ74063659;     QTCAeGVJnorDidqlCJ74063659 = QTCAeGVJnorDidqlCJ99623544;     QTCAeGVJnorDidqlCJ99623544 = QTCAeGVJnorDidqlCJ80857695;     QTCAeGVJnorDidqlCJ80857695 = QTCAeGVJnorDidqlCJ60312070;     QTCAeGVJnorDidqlCJ60312070 = QTCAeGVJnorDidqlCJ9575660;     QTCAeGVJnorDidqlCJ9575660 = QTCAeGVJnorDidqlCJ94502025;     QTCAeGVJnorDidqlCJ94502025 = QTCAeGVJnorDidqlCJ62940217;     QTCAeGVJnorDidqlCJ62940217 = QTCAeGVJnorDidqlCJ48514981;     QTCAeGVJnorDidqlCJ48514981 = QTCAeGVJnorDidqlCJ57880047;     QTCAeGVJnorDidqlCJ57880047 = QTCAeGVJnorDidqlCJ58853244;     QTCAeGVJnorDidqlCJ58853244 = QTCAeGVJnorDidqlCJ86156662;     QTCAeGVJnorDidqlCJ86156662 = QTCAeGVJnorDidqlCJ11937334;     QTCAeGVJnorDidqlCJ11937334 = QTCAeGVJnorDidqlCJ99477500;     QTCAeGVJnorDidqlCJ99477500 = QTCAeGVJnorDidqlCJ31488514;     QTCAeGVJnorDidqlCJ31488514 = QTCAeGVJnorDidqlCJ58589250;     QTCAeGVJnorDidqlCJ58589250 = QTCAeGVJnorDidqlCJ5894347;     QTCAeGVJnorDidqlCJ5894347 = QTCAeGVJnorDidqlCJ43247112;     QTCAeGVJnorDidqlCJ43247112 = QTCAeGVJnorDidqlCJ8734532;     QTCAeGVJnorDidqlCJ8734532 = QTCAeGVJnorDidqlCJ83063921;     QTCAeGVJnorDidqlCJ83063921 = QTCAeGVJnorDidqlCJ97302019;     QTCAeGVJnorDidqlCJ97302019 = QTCAeGVJnorDidqlCJ19694220;     QTCAeGVJnorDidqlCJ19694220 = QTCAeGVJnorDidqlCJ91995390;     QTCAeGVJnorDidqlCJ91995390 = QTCAeGVJnorDidqlCJ25364617;     QTCAeGVJnorDidqlCJ25364617 = QTCAeGVJnorDidqlCJ55250665;     QTCAeGVJnorDidqlCJ55250665 = QTCAeGVJnorDidqlCJ92622124;     QTCAeGVJnorDidqlCJ92622124 = QTCAeGVJnorDidqlCJ64249917;     QTCAeGVJnorDidqlCJ64249917 = QTCAeGVJnorDidqlCJ46416123;     QTCAeGVJnorDidqlCJ46416123 = QTCAeGVJnorDidqlCJ12930924;     QTCAeGVJnorDidqlCJ12930924 = QTCAeGVJnorDidqlCJ88334844;     QTCAeGVJnorDidqlCJ88334844 = QTCAeGVJnorDidqlCJ71860742;     QTCAeGVJnorDidqlCJ71860742 = QTCAeGVJnorDidqlCJ26247868;     QTCAeGVJnorDidqlCJ26247868 = QTCAeGVJnorDidqlCJ86365946;     QTCAeGVJnorDidqlCJ86365946 = QTCAeGVJnorDidqlCJ54077568;     QTCAeGVJnorDidqlCJ54077568 = QTCAeGVJnorDidqlCJ8941813;     QTCAeGVJnorDidqlCJ8941813 = QTCAeGVJnorDidqlCJ3293386;     QTCAeGVJnorDidqlCJ3293386 = QTCAeGVJnorDidqlCJ21175331;     QTCAeGVJnorDidqlCJ21175331 = QTCAeGVJnorDidqlCJ23824008;     QTCAeGVJnorDidqlCJ23824008 = QTCAeGVJnorDidqlCJ58192230;     QTCAeGVJnorDidqlCJ58192230 = QTCAeGVJnorDidqlCJ84234851;     QTCAeGVJnorDidqlCJ84234851 = QTCAeGVJnorDidqlCJ7920772;     QTCAeGVJnorDidqlCJ7920772 = QTCAeGVJnorDidqlCJ55474904;     QTCAeGVJnorDidqlCJ55474904 = QTCAeGVJnorDidqlCJ81220921;     QTCAeGVJnorDidqlCJ81220921 = QTCAeGVJnorDidqlCJ40091678;     QTCAeGVJnorDidqlCJ40091678 = QTCAeGVJnorDidqlCJ38220549;     QTCAeGVJnorDidqlCJ38220549 = QTCAeGVJnorDidqlCJ13407296;     QTCAeGVJnorDidqlCJ13407296 = QTCAeGVJnorDidqlCJ75809597;     QTCAeGVJnorDidqlCJ75809597 = QTCAeGVJnorDidqlCJ14647296;     QTCAeGVJnorDidqlCJ14647296 = QTCAeGVJnorDidqlCJ25971661;     QTCAeGVJnorDidqlCJ25971661 = QTCAeGVJnorDidqlCJ98908367;     QTCAeGVJnorDidqlCJ98908367 = QTCAeGVJnorDidqlCJ82880668;     QTCAeGVJnorDidqlCJ82880668 = QTCAeGVJnorDidqlCJ62306344;     QTCAeGVJnorDidqlCJ62306344 = QTCAeGVJnorDidqlCJ98124484;     QTCAeGVJnorDidqlCJ98124484 = QTCAeGVJnorDidqlCJ77300056;     QTCAeGVJnorDidqlCJ77300056 = QTCAeGVJnorDidqlCJ48619387;     QTCAeGVJnorDidqlCJ48619387 = QTCAeGVJnorDidqlCJ71100220;     QTCAeGVJnorDidqlCJ71100220 = QTCAeGVJnorDidqlCJ82068268;     QTCAeGVJnorDidqlCJ82068268 = QTCAeGVJnorDidqlCJ74258928;     QTCAeGVJnorDidqlCJ74258928 = QTCAeGVJnorDidqlCJ25607030;     QTCAeGVJnorDidqlCJ25607030 = QTCAeGVJnorDidqlCJ67689946;     QTCAeGVJnorDidqlCJ67689946 = QTCAeGVJnorDidqlCJ45325743;     QTCAeGVJnorDidqlCJ45325743 = QTCAeGVJnorDidqlCJ48085903;     QTCAeGVJnorDidqlCJ48085903 = QTCAeGVJnorDidqlCJ50009294;     QTCAeGVJnorDidqlCJ50009294 = QTCAeGVJnorDidqlCJ60180137;     QTCAeGVJnorDidqlCJ60180137 = QTCAeGVJnorDidqlCJ86019304;     QTCAeGVJnorDidqlCJ86019304 = QTCAeGVJnorDidqlCJ32605376;     QTCAeGVJnorDidqlCJ32605376 = QTCAeGVJnorDidqlCJ99790716;     QTCAeGVJnorDidqlCJ99790716 = QTCAeGVJnorDidqlCJ57859765;     QTCAeGVJnorDidqlCJ57859765 = QTCAeGVJnorDidqlCJ90535687;     QTCAeGVJnorDidqlCJ90535687 = QTCAeGVJnorDidqlCJ28195128;     QTCAeGVJnorDidqlCJ28195128 = QTCAeGVJnorDidqlCJ37413920;     QTCAeGVJnorDidqlCJ37413920 = QTCAeGVJnorDidqlCJ82070339;     QTCAeGVJnorDidqlCJ82070339 = QTCAeGVJnorDidqlCJ85054882;     QTCAeGVJnorDidqlCJ85054882 = QTCAeGVJnorDidqlCJ24499680;     QTCAeGVJnorDidqlCJ24499680 = QTCAeGVJnorDidqlCJ75143150;     QTCAeGVJnorDidqlCJ75143150 = QTCAeGVJnorDidqlCJ41827116;     QTCAeGVJnorDidqlCJ41827116 = QTCAeGVJnorDidqlCJ38473298;     QTCAeGVJnorDidqlCJ38473298 = QTCAeGVJnorDidqlCJ51903712;     QTCAeGVJnorDidqlCJ51903712 = QTCAeGVJnorDidqlCJ87144067;     QTCAeGVJnorDidqlCJ87144067 = QTCAeGVJnorDidqlCJ41843369;     QTCAeGVJnorDidqlCJ41843369 = QTCAeGVJnorDidqlCJ16812527;     QTCAeGVJnorDidqlCJ16812527 = QTCAeGVJnorDidqlCJ49602622;     QTCAeGVJnorDidqlCJ49602622 = QTCAeGVJnorDidqlCJ20444463;     QTCAeGVJnorDidqlCJ20444463 = QTCAeGVJnorDidqlCJ18504300;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void DjAwyYFYVMBKRgcAMkAUsMMZMRNjRHxkJpWTvds86910464() {     double FpaxdiHcSaQCqoDhrW70239750 = -962006721;    double FpaxdiHcSaQCqoDhrW9484495 = 83096179;    double FpaxdiHcSaQCqoDhrW51223157 = -692261007;    double FpaxdiHcSaQCqoDhrW93490522 = -506911927;    double FpaxdiHcSaQCqoDhrW6459836 = -607925867;    double FpaxdiHcSaQCqoDhrW22855080 = 1012769;    double FpaxdiHcSaQCqoDhrW70850636 = -406954079;    double FpaxdiHcSaQCqoDhrW18355437 = -890303268;    double FpaxdiHcSaQCqoDhrW39045008 = -274768280;    double FpaxdiHcSaQCqoDhrW82921919 = -461259228;    double FpaxdiHcSaQCqoDhrW52752873 = 33802653;    double FpaxdiHcSaQCqoDhrW67853996 = -506981299;    double FpaxdiHcSaQCqoDhrW75955808 = 49003289;    double FpaxdiHcSaQCqoDhrW64321174 = -566558835;    double FpaxdiHcSaQCqoDhrW60874274 = -246279082;    double FpaxdiHcSaQCqoDhrW72091250 = -116887847;    double FpaxdiHcSaQCqoDhrW1891932 = -206327780;    double FpaxdiHcSaQCqoDhrW76477362 = -212794126;    double FpaxdiHcSaQCqoDhrW33637508 = -230466034;    double FpaxdiHcSaQCqoDhrW19353119 = -445040459;    double FpaxdiHcSaQCqoDhrW26605048 = -7266314;    double FpaxdiHcSaQCqoDhrW62731524 = -497042077;    double FpaxdiHcSaQCqoDhrW10925175 = -599323826;    double FpaxdiHcSaQCqoDhrW87152276 = -21825868;    double FpaxdiHcSaQCqoDhrW34356076 = -135781585;    double FpaxdiHcSaQCqoDhrW6220396 = -221883815;    double FpaxdiHcSaQCqoDhrW96708681 = -287693740;    double FpaxdiHcSaQCqoDhrW56982468 = 75565458;    double FpaxdiHcSaQCqoDhrW60906736 = -718088777;    double FpaxdiHcSaQCqoDhrW81922417 = -503637329;    double FpaxdiHcSaQCqoDhrW36696309 = -411482194;    double FpaxdiHcSaQCqoDhrW44518244 = -764122586;    double FpaxdiHcSaQCqoDhrW56682560 = -529427557;    double FpaxdiHcSaQCqoDhrW99918059 = -356541317;    double FpaxdiHcSaQCqoDhrW41452240 = -820955524;    double FpaxdiHcSaQCqoDhrW90434142 = -634183253;    double FpaxdiHcSaQCqoDhrW32712148 = -803240769;    double FpaxdiHcSaQCqoDhrW98135632 = 65789549;    double FpaxdiHcSaQCqoDhrW89469062 = -447344298;    double FpaxdiHcSaQCqoDhrW17077807 = 57801756;    double FpaxdiHcSaQCqoDhrW94048703 = -539523746;    double FpaxdiHcSaQCqoDhrW15276065 = -911849500;    double FpaxdiHcSaQCqoDhrW49205356 = 94696151;    double FpaxdiHcSaQCqoDhrW57185736 = -3001705;    double FpaxdiHcSaQCqoDhrW18445331 = -560418507;    double FpaxdiHcSaQCqoDhrW14625371 = -482395662;    double FpaxdiHcSaQCqoDhrW74501038 = -193949352;    double FpaxdiHcSaQCqoDhrW50845207 = 95571868;    double FpaxdiHcSaQCqoDhrW15266321 = -772195078;    double FpaxdiHcSaQCqoDhrW75022205 = -882866659;    double FpaxdiHcSaQCqoDhrW94757460 = -911686326;    double FpaxdiHcSaQCqoDhrW40921566 = -51104871;    double FpaxdiHcSaQCqoDhrW26532132 = -756623541;    double FpaxdiHcSaQCqoDhrW91234571 = -334398164;    double FpaxdiHcSaQCqoDhrW60305417 = -780415971;    double FpaxdiHcSaQCqoDhrW7508227 = -364964644;    double FpaxdiHcSaQCqoDhrW98559320 = -317579996;    double FpaxdiHcSaQCqoDhrW64070881 = -570435139;    double FpaxdiHcSaQCqoDhrW59134447 = -271130343;    double FpaxdiHcSaQCqoDhrW239441 = -286042053;    double FpaxdiHcSaQCqoDhrW26146398 = -711293491;    double FpaxdiHcSaQCqoDhrW13868168 = -382519538;    double FpaxdiHcSaQCqoDhrW57448701 = -72214491;    double FpaxdiHcSaQCqoDhrW57122590 = -771130951;    double FpaxdiHcSaQCqoDhrW46225611 = 50222966;    double FpaxdiHcSaQCqoDhrW8234630 = -202074762;    double FpaxdiHcSaQCqoDhrW11171436 = -977553742;    double FpaxdiHcSaQCqoDhrW76037749 = -594455395;    double FpaxdiHcSaQCqoDhrW22868935 = -745603311;    double FpaxdiHcSaQCqoDhrW70440132 = -612095830;    double FpaxdiHcSaQCqoDhrW39379102 = -313647079;    double FpaxdiHcSaQCqoDhrW3756300 = -172117330;    double FpaxdiHcSaQCqoDhrW87008300 = -765449828;    double FpaxdiHcSaQCqoDhrW16559702 = -188267790;    double FpaxdiHcSaQCqoDhrW25304415 = -905516714;    double FpaxdiHcSaQCqoDhrW11328983 = -95416815;    double FpaxdiHcSaQCqoDhrW13526168 = -491738229;    double FpaxdiHcSaQCqoDhrW53739438 = -496322121;    double FpaxdiHcSaQCqoDhrW68706945 = -461407362;    double FpaxdiHcSaQCqoDhrW19730705 = -653385923;    double FpaxdiHcSaQCqoDhrW31719357 = 72065536;    double FpaxdiHcSaQCqoDhrW45863475 = -283265608;    double FpaxdiHcSaQCqoDhrW41716148 = -152239464;    double FpaxdiHcSaQCqoDhrW85884530 = -835222119;    double FpaxdiHcSaQCqoDhrW87164957 = -591951004;    double FpaxdiHcSaQCqoDhrW95774743 = -260377323;    double FpaxdiHcSaQCqoDhrW17986112 = 92500954;    double FpaxdiHcSaQCqoDhrW65447988 = -95029394;    double FpaxdiHcSaQCqoDhrW39612643 = -576125347;    double FpaxdiHcSaQCqoDhrW33944014 = -355990881;    double FpaxdiHcSaQCqoDhrW91874821 = -216603257;    double FpaxdiHcSaQCqoDhrW68641267 = -132805630;    double FpaxdiHcSaQCqoDhrW39001185 = -663080108;    double FpaxdiHcSaQCqoDhrW89229622 = -61302246;    double FpaxdiHcSaQCqoDhrW90931408 = -230904753;    double FpaxdiHcSaQCqoDhrW80180536 = -57004208;    double FpaxdiHcSaQCqoDhrW57827364 = -739635009;    double FpaxdiHcSaQCqoDhrW92082766 = -134172899;    double FpaxdiHcSaQCqoDhrW10960126 = 46775328;    double FpaxdiHcSaQCqoDhrW10210702 = -962006721;     FpaxdiHcSaQCqoDhrW70239750 = FpaxdiHcSaQCqoDhrW9484495;     FpaxdiHcSaQCqoDhrW9484495 = FpaxdiHcSaQCqoDhrW51223157;     FpaxdiHcSaQCqoDhrW51223157 = FpaxdiHcSaQCqoDhrW93490522;     FpaxdiHcSaQCqoDhrW93490522 = FpaxdiHcSaQCqoDhrW6459836;     FpaxdiHcSaQCqoDhrW6459836 = FpaxdiHcSaQCqoDhrW22855080;     FpaxdiHcSaQCqoDhrW22855080 = FpaxdiHcSaQCqoDhrW70850636;     FpaxdiHcSaQCqoDhrW70850636 = FpaxdiHcSaQCqoDhrW18355437;     FpaxdiHcSaQCqoDhrW18355437 = FpaxdiHcSaQCqoDhrW39045008;     FpaxdiHcSaQCqoDhrW39045008 = FpaxdiHcSaQCqoDhrW82921919;     FpaxdiHcSaQCqoDhrW82921919 = FpaxdiHcSaQCqoDhrW52752873;     FpaxdiHcSaQCqoDhrW52752873 = FpaxdiHcSaQCqoDhrW67853996;     FpaxdiHcSaQCqoDhrW67853996 = FpaxdiHcSaQCqoDhrW75955808;     FpaxdiHcSaQCqoDhrW75955808 = FpaxdiHcSaQCqoDhrW64321174;     FpaxdiHcSaQCqoDhrW64321174 = FpaxdiHcSaQCqoDhrW60874274;     FpaxdiHcSaQCqoDhrW60874274 = FpaxdiHcSaQCqoDhrW72091250;     FpaxdiHcSaQCqoDhrW72091250 = FpaxdiHcSaQCqoDhrW1891932;     FpaxdiHcSaQCqoDhrW1891932 = FpaxdiHcSaQCqoDhrW76477362;     FpaxdiHcSaQCqoDhrW76477362 = FpaxdiHcSaQCqoDhrW33637508;     FpaxdiHcSaQCqoDhrW33637508 = FpaxdiHcSaQCqoDhrW19353119;     FpaxdiHcSaQCqoDhrW19353119 = FpaxdiHcSaQCqoDhrW26605048;     FpaxdiHcSaQCqoDhrW26605048 = FpaxdiHcSaQCqoDhrW62731524;     FpaxdiHcSaQCqoDhrW62731524 = FpaxdiHcSaQCqoDhrW10925175;     FpaxdiHcSaQCqoDhrW10925175 = FpaxdiHcSaQCqoDhrW87152276;     FpaxdiHcSaQCqoDhrW87152276 = FpaxdiHcSaQCqoDhrW34356076;     FpaxdiHcSaQCqoDhrW34356076 = FpaxdiHcSaQCqoDhrW6220396;     FpaxdiHcSaQCqoDhrW6220396 = FpaxdiHcSaQCqoDhrW96708681;     FpaxdiHcSaQCqoDhrW96708681 = FpaxdiHcSaQCqoDhrW56982468;     FpaxdiHcSaQCqoDhrW56982468 = FpaxdiHcSaQCqoDhrW60906736;     FpaxdiHcSaQCqoDhrW60906736 = FpaxdiHcSaQCqoDhrW81922417;     FpaxdiHcSaQCqoDhrW81922417 = FpaxdiHcSaQCqoDhrW36696309;     FpaxdiHcSaQCqoDhrW36696309 = FpaxdiHcSaQCqoDhrW44518244;     FpaxdiHcSaQCqoDhrW44518244 = FpaxdiHcSaQCqoDhrW56682560;     FpaxdiHcSaQCqoDhrW56682560 = FpaxdiHcSaQCqoDhrW99918059;     FpaxdiHcSaQCqoDhrW99918059 = FpaxdiHcSaQCqoDhrW41452240;     FpaxdiHcSaQCqoDhrW41452240 = FpaxdiHcSaQCqoDhrW90434142;     FpaxdiHcSaQCqoDhrW90434142 = FpaxdiHcSaQCqoDhrW32712148;     FpaxdiHcSaQCqoDhrW32712148 = FpaxdiHcSaQCqoDhrW98135632;     FpaxdiHcSaQCqoDhrW98135632 = FpaxdiHcSaQCqoDhrW89469062;     FpaxdiHcSaQCqoDhrW89469062 = FpaxdiHcSaQCqoDhrW17077807;     FpaxdiHcSaQCqoDhrW17077807 = FpaxdiHcSaQCqoDhrW94048703;     FpaxdiHcSaQCqoDhrW94048703 = FpaxdiHcSaQCqoDhrW15276065;     FpaxdiHcSaQCqoDhrW15276065 = FpaxdiHcSaQCqoDhrW49205356;     FpaxdiHcSaQCqoDhrW49205356 = FpaxdiHcSaQCqoDhrW57185736;     FpaxdiHcSaQCqoDhrW57185736 = FpaxdiHcSaQCqoDhrW18445331;     FpaxdiHcSaQCqoDhrW18445331 = FpaxdiHcSaQCqoDhrW14625371;     FpaxdiHcSaQCqoDhrW14625371 = FpaxdiHcSaQCqoDhrW74501038;     FpaxdiHcSaQCqoDhrW74501038 = FpaxdiHcSaQCqoDhrW50845207;     FpaxdiHcSaQCqoDhrW50845207 = FpaxdiHcSaQCqoDhrW15266321;     FpaxdiHcSaQCqoDhrW15266321 = FpaxdiHcSaQCqoDhrW75022205;     FpaxdiHcSaQCqoDhrW75022205 = FpaxdiHcSaQCqoDhrW94757460;     FpaxdiHcSaQCqoDhrW94757460 = FpaxdiHcSaQCqoDhrW40921566;     FpaxdiHcSaQCqoDhrW40921566 = FpaxdiHcSaQCqoDhrW26532132;     FpaxdiHcSaQCqoDhrW26532132 = FpaxdiHcSaQCqoDhrW91234571;     FpaxdiHcSaQCqoDhrW91234571 = FpaxdiHcSaQCqoDhrW60305417;     FpaxdiHcSaQCqoDhrW60305417 = FpaxdiHcSaQCqoDhrW7508227;     FpaxdiHcSaQCqoDhrW7508227 = FpaxdiHcSaQCqoDhrW98559320;     FpaxdiHcSaQCqoDhrW98559320 = FpaxdiHcSaQCqoDhrW64070881;     FpaxdiHcSaQCqoDhrW64070881 = FpaxdiHcSaQCqoDhrW59134447;     FpaxdiHcSaQCqoDhrW59134447 = FpaxdiHcSaQCqoDhrW239441;     FpaxdiHcSaQCqoDhrW239441 = FpaxdiHcSaQCqoDhrW26146398;     FpaxdiHcSaQCqoDhrW26146398 = FpaxdiHcSaQCqoDhrW13868168;     FpaxdiHcSaQCqoDhrW13868168 = FpaxdiHcSaQCqoDhrW57448701;     FpaxdiHcSaQCqoDhrW57448701 = FpaxdiHcSaQCqoDhrW57122590;     FpaxdiHcSaQCqoDhrW57122590 = FpaxdiHcSaQCqoDhrW46225611;     FpaxdiHcSaQCqoDhrW46225611 = FpaxdiHcSaQCqoDhrW8234630;     FpaxdiHcSaQCqoDhrW8234630 = FpaxdiHcSaQCqoDhrW11171436;     FpaxdiHcSaQCqoDhrW11171436 = FpaxdiHcSaQCqoDhrW76037749;     FpaxdiHcSaQCqoDhrW76037749 = FpaxdiHcSaQCqoDhrW22868935;     FpaxdiHcSaQCqoDhrW22868935 = FpaxdiHcSaQCqoDhrW70440132;     FpaxdiHcSaQCqoDhrW70440132 = FpaxdiHcSaQCqoDhrW39379102;     FpaxdiHcSaQCqoDhrW39379102 = FpaxdiHcSaQCqoDhrW3756300;     FpaxdiHcSaQCqoDhrW3756300 = FpaxdiHcSaQCqoDhrW87008300;     FpaxdiHcSaQCqoDhrW87008300 = FpaxdiHcSaQCqoDhrW16559702;     FpaxdiHcSaQCqoDhrW16559702 = FpaxdiHcSaQCqoDhrW25304415;     FpaxdiHcSaQCqoDhrW25304415 = FpaxdiHcSaQCqoDhrW11328983;     FpaxdiHcSaQCqoDhrW11328983 = FpaxdiHcSaQCqoDhrW13526168;     FpaxdiHcSaQCqoDhrW13526168 = FpaxdiHcSaQCqoDhrW53739438;     FpaxdiHcSaQCqoDhrW53739438 = FpaxdiHcSaQCqoDhrW68706945;     FpaxdiHcSaQCqoDhrW68706945 = FpaxdiHcSaQCqoDhrW19730705;     FpaxdiHcSaQCqoDhrW19730705 = FpaxdiHcSaQCqoDhrW31719357;     FpaxdiHcSaQCqoDhrW31719357 = FpaxdiHcSaQCqoDhrW45863475;     FpaxdiHcSaQCqoDhrW45863475 = FpaxdiHcSaQCqoDhrW41716148;     FpaxdiHcSaQCqoDhrW41716148 = FpaxdiHcSaQCqoDhrW85884530;     FpaxdiHcSaQCqoDhrW85884530 = FpaxdiHcSaQCqoDhrW87164957;     FpaxdiHcSaQCqoDhrW87164957 = FpaxdiHcSaQCqoDhrW95774743;     FpaxdiHcSaQCqoDhrW95774743 = FpaxdiHcSaQCqoDhrW17986112;     FpaxdiHcSaQCqoDhrW17986112 = FpaxdiHcSaQCqoDhrW65447988;     FpaxdiHcSaQCqoDhrW65447988 = FpaxdiHcSaQCqoDhrW39612643;     FpaxdiHcSaQCqoDhrW39612643 = FpaxdiHcSaQCqoDhrW33944014;     FpaxdiHcSaQCqoDhrW33944014 = FpaxdiHcSaQCqoDhrW91874821;     FpaxdiHcSaQCqoDhrW91874821 = FpaxdiHcSaQCqoDhrW68641267;     FpaxdiHcSaQCqoDhrW68641267 = FpaxdiHcSaQCqoDhrW39001185;     FpaxdiHcSaQCqoDhrW39001185 = FpaxdiHcSaQCqoDhrW89229622;     FpaxdiHcSaQCqoDhrW89229622 = FpaxdiHcSaQCqoDhrW90931408;     FpaxdiHcSaQCqoDhrW90931408 = FpaxdiHcSaQCqoDhrW80180536;     FpaxdiHcSaQCqoDhrW80180536 = FpaxdiHcSaQCqoDhrW57827364;     FpaxdiHcSaQCqoDhrW57827364 = FpaxdiHcSaQCqoDhrW92082766;     FpaxdiHcSaQCqoDhrW92082766 = FpaxdiHcSaQCqoDhrW10960126;     FpaxdiHcSaQCqoDhrW10960126 = FpaxdiHcSaQCqoDhrW10210702;     FpaxdiHcSaQCqoDhrW10210702 = FpaxdiHcSaQCqoDhrW70239750;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void OYHXDGbiwpwPMFFDBePwZdSqodjlWESmncgzZFM16896695() {     double PYYTYUBDmcRhhVYXkG92633339 = -723886542;    double PYYTYUBDmcRhhVYXkG55259678 = -922851751;    double PYYTYUBDmcRhhVYXkG78679223 = -974786238;    double PYYTYUBDmcRhhVYXkG23417351 = -692778629;    double PYYTYUBDmcRhhVYXkG95793987 = -730627547;    double PYYTYUBDmcRhhVYXkG2932765 = -160162797;    double PYYTYUBDmcRhhVYXkG94459039 = -524404918;    double PYYTYUBDmcRhhVYXkG24775245 = -556722595;    double PYYTYUBDmcRhhVYXkG53467975 = -445318249;    double PYYTYUBDmcRhhVYXkG78045990 = -567193689;    double PYYTYUBDmcRhhVYXkG69974127 = -3349676;    double PYYTYUBDmcRhhVYXkG9465268 = 77751770;    double PYYTYUBDmcRhhVYXkG11111076 = -548055556;    double PYYTYUBDmcRhhVYXkG53091707 = -749114541;    double PYYTYUBDmcRhhVYXkG52437442 = 88956057;    double PYYTYUBDmcRhhVYXkG41782615 = -165759739;    double PYYTYUBDmcRhhVYXkG95862523 = -663993030;    double PYYTYUBDmcRhhVYXkG59453246 = -267465195;    double PYYTYUBDmcRhhVYXkG54490869 = -847585892;    double PYYTYUBDmcRhhVYXkG25795639 = -85650462;    double PYYTYUBDmcRhhVYXkG47818731 = -288287249;    double PYYTYUBDmcRhhVYXkG48250476 = -491816507;    double PYYTYUBDmcRhhVYXkG77340101 = -316446576;    double PYYTYUBDmcRhhVYXkG70001955 = -704898203;    double PYYTYUBDmcRhhVYXkG41453633 = -430646856;    double PYYTYUBDmcRhhVYXkG77949313 = -757572110;    double PYYTYUBDmcRhhVYXkG73576520 = -844480520;    double PYYTYUBDmcRhhVYXkG27490394 = -203922007;    double PYYTYUBDmcRhhVYXkG55120850 = -416275581;    double PYYTYUBDmcRhhVYXkG14989727 = -748501822;    double PYYTYUBDmcRhhVYXkG47574435 = -105705112;    double PYYTYUBDmcRhhVYXkG17335578 = 75627821;    double PYYTYUBDmcRhhVYXkG52268807 = -856826836;    double PYYTYUBDmcRhhVYXkG59023909 = -803986435;    double PYYTYUBDmcRhhVYXkG35323567 = -625398022;    double PYYTYUBDmcRhhVYXkG89298821 = -869812883;    double PYYTYUBDmcRhhVYXkG14210493 = -436535342;    double PYYTYUBDmcRhhVYXkG81844053 = -906573243;    double PYYTYUBDmcRhhVYXkG2463597 = -135708914;    double PYYTYUBDmcRhhVYXkG65390628 = -468990587;    double PYYTYUBDmcRhhVYXkG34950407 = -954757513;    double PYYTYUBDmcRhhVYXkG18086796 = -475966109;    double PYYTYUBDmcRhhVYXkG94472188 = -333704179;    double PYYTYUBDmcRhhVYXkG97397956 = -443400911;    double PYYTYUBDmcRhhVYXkG2410545 = -996302583;    double PYYTYUBDmcRhhVYXkG82297684 = -852580086;    double PYYTYUBDmcRhhVYXkG59100643 = -291078983;    double PYYTYUBDmcRhhVYXkG20060301 = -152201767;    double PYYTYUBDmcRhhVYXkG91067836 = -58147915;    double PYYTYUBDmcRhhVYXkG52060528 = -337862031;    double PYYTYUBDmcRhhVYXkG90367307 = -588207595;    double PYYTYUBDmcRhhVYXkG225566 = -99778405;    double PYYTYUBDmcRhhVYXkG29398187 = -536480763;    double PYYTYUBDmcRhhVYXkG41270846 = -78159121;    double PYYTYUBDmcRhhVYXkG69077964 = -64220808;    double PYYTYUBDmcRhhVYXkG44382863 = -132070035;    double PYYTYUBDmcRhhVYXkG77919577 = -506405176;    double PYYTYUBDmcRhhVYXkG8677269 = -169888035;    double PYYTYUBDmcRhhVYXkG81963718 = -162131773;    double PYYTYUBDmcRhhVYXkG17844675 = -973055437;    double PYYTYUBDmcRhhVYXkG29356244 = -315682277;    double PYYTYUBDmcRhhVYXkG66968645 = -220482912;    double PYYTYUBDmcRhhVYXkG69654395 = -40447014;    double PYYTYUBDmcRhhVYXkG38478248 = -696816427;    double PYYTYUBDmcRhhVYXkG30471555 = -361488578;    double PYYTYUBDmcRhhVYXkG52638550 = 21022503;    double PYYTYUBDmcRhhVYXkG57196461 = -65421394;    double PYYTYUBDmcRhhVYXkG52087166 = -744069122;    double PYYTYUBDmcRhhVYXkG17768140 = -23716519;    double PYYTYUBDmcRhhVYXkG63138621 = -41231060;    double PYYTYUBDmcRhhVYXkG27572123 = -729224397;    double PYYTYUBDmcRhhVYXkG14018471 = -757419787;    double PYYTYUBDmcRhhVYXkG56989649 = -31756281;    double PYYTYUBDmcRhhVYXkG89100240 = -278595306;    double PYYTYUBDmcRhhVYXkG90845232 = -130892949;    double PYYTYUBDmcRhhVYXkG29731936 = -812321141;    double PYYTYUBDmcRhhVYXkG53778288 = -58112329;    double PYYTYUBDmcRhhVYXkG79942144 = -873045665;    double PYYTYUBDmcRhhVYXkG67591410 = -708595621;    double PYYTYUBDmcRhhVYXkG59155949 = -578066770;    double PYYTYUBDmcRhhVYXkG18848670 = -366493128;    double PYYTYUBDmcRhhVYXkG53516220 = -592278754;    double PYYTYUBDmcRhhVYXkG36422557 = -45774092;    double PYYTYUBDmcRhhVYXkG3060322 = 21586450;    double PYYTYUBDmcRhhVYXkG24622420 = -60294227;    double PYYTYUBDmcRhhVYXkG47348870 = 94073293;    double PYYTYUBDmcRhhVYXkG87937390 = -387891417;    double PYYTYUBDmcRhhVYXkG10997962 = -678667716;    double PYYTYUBDmcRhhVYXkG89945945 = -639765627;    double PYYTYUBDmcRhhVYXkG90940703 = -393327987;    double PYYTYUBDmcRhhVYXkG11379244 = -263407708;    double PYYTYUBDmcRhhVYXkG5533224 = -166647308;    double PYYTYUBDmcRhhVYXkG99880335 = -644441471;    double PYYTYUBDmcRhhVYXkG84618922 = -162653477;    double PYYTYUBDmcRhhVYXkG36034385 = -53308310;    double PYYTYUBDmcRhhVYXkG67981761 = -634274602;    double PYYTYUBDmcRhhVYXkG48432400 = -335519095;    double PYYTYUBDmcRhhVYXkG55993941 = -636887752;    double PYYTYUBDmcRhhVYXkG66926401 = 18087667;    double PYYTYUBDmcRhhVYXkG49771995 = -723886542;     PYYTYUBDmcRhhVYXkG92633339 = PYYTYUBDmcRhhVYXkG55259678;     PYYTYUBDmcRhhVYXkG55259678 = PYYTYUBDmcRhhVYXkG78679223;     PYYTYUBDmcRhhVYXkG78679223 = PYYTYUBDmcRhhVYXkG23417351;     PYYTYUBDmcRhhVYXkG23417351 = PYYTYUBDmcRhhVYXkG95793987;     PYYTYUBDmcRhhVYXkG95793987 = PYYTYUBDmcRhhVYXkG2932765;     PYYTYUBDmcRhhVYXkG2932765 = PYYTYUBDmcRhhVYXkG94459039;     PYYTYUBDmcRhhVYXkG94459039 = PYYTYUBDmcRhhVYXkG24775245;     PYYTYUBDmcRhhVYXkG24775245 = PYYTYUBDmcRhhVYXkG53467975;     PYYTYUBDmcRhhVYXkG53467975 = PYYTYUBDmcRhhVYXkG78045990;     PYYTYUBDmcRhhVYXkG78045990 = PYYTYUBDmcRhhVYXkG69974127;     PYYTYUBDmcRhhVYXkG69974127 = PYYTYUBDmcRhhVYXkG9465268;     PYYTYUBDmcRhhVYXkG9465268 = PYYTYUBDmcRhhVYXkG11111076;     PYYTYUBDmcRhhVYXkG11111076 = PYYTYUBDmcRhhVYXkG53091707;     PYYTYUBDmcRhhVYXkG53091707 = PYYTYUBDmcRhhVYXkG52437442;     PYYTYUBDmcRhhVYXkG52437442 = PYYTYUBDmcRhhVYXkG41782615;     PYYTYUBDmcRhhVYXkG41782615 = PYYTYUBDmcRhhVYXkG95862523;     PYYTYUBDmcRhhVYXkG95862523 = PYYTYUBDmcRhhVYXkG59453246;     PYYTYUBDmcRhhVYXkG59453246 = PYYTYUBDmcRhhVYXkG54490869;     PYYTYUBDmcRhhVYXkG54490869 = PYYTYUBDmcRhhVYXkG25795639;     PYYTYUBDmcRhhVYXkG25795639 = PYYTYUBDmcRhhVYXkG47818731;     PYYTYUBDmcRhhVYXkG47818731 = PYYTYUBDmcRhhVYXkG48250476;     PYYTYUBDmcRhhVYXkG48250476 = PYYTYUBDmcRhhVYXkG77340101;     PYYTYUBDmcRhhVYXkG77340101 = PYYTYUBDmcRhhVYXkG70001955;     PYYTYUBDmcRhhVYXkG70001955 = PYYTYUBDmcRhhVYXkG41453633;     PYYTYUBDmcRhhVYXkG41453633 = PYYTYUBDmcRhhVYXkG77949313;     PYYTYUBDmcRhhVYXkG77949313 = PYYTYUBDmcRhhVYXkG73576520;     PYYTYUBDmcRhhVYXkG73576520 = PYYTYUBDmcRhhVYXkG27490394;     PYYTYUBDmcRhhVYXkG27490394 = PYYTYUBDmcRhhVYXkG55120850;     PYYTYUBDmcRhhVYXkG55120850 = PYYTYUBDmcRhhVYXkG14989727;     PYYTYUBDmcRhhVYXkG14989727 = PYYTYUBDmcRhhVYXkG47574435;     PYYTYUBDmcRhhVYXkG47574435 = PYYTYUBDmcRhhVYXkG17335578;     PYYTYUBDmcRhhVYXkG17335578 = PYYTYUBDmcRhhVYXkG52268807;     PYYTYUBDmcRhhVYXkG52268807 = PYYTYUBDmcRhhVYXkG59023909;     PYYTYUBDmcRhhVYXkG59023909 = PYYTYUBDmcRhhVYXkG35323567;     PYYTYUBDmcRhhVYXkG35323567 = PYYTYUBDmcRhhVYXkG89298821;     PYYTYUBDmcRhhVYXkG89298821 = PYYTYUBDmcRhhVYXkG14210493;     PYYTYUBDmcRhhVYXkG14210493 = PYYTYUBDmcRhhVYXkG81844053;     PYYTYUBDmcRhhVYXkG81844053 = PYYTYUBDmcRhhVYXkG2463597;     PYYTYUBDmcRhhVYXkG2463597 = PYYTYUBDmcRhhVYXkG65390628;     PYYTYUBDmcRhhVYXkG65390628 = PYYTYUBDmcRhhVYXkG34950407;     PYYTYUBDmcRhhVYXkG34950407 = PYYTYUBDmcRhhVYXkG18086796;     PYYTYUBDmcRhhVYXkG18086796 = PYYTYUBDmcRhhVYXkG94472188;     PYYTYUBDmcRhhVYXkG94472188 = PYYTYUBDmcRhhVYXkG97397956;     PYYTYUBDmcRhhVYXkG97397956 = PYYTYUBDmcRhhVYXkG2410545;     PYYTYUBDmcRhhVYXkG2410545 = PYYTYUBDmcRhhVYXkG82297684;     PYYTYUBDmcRhhVYXkG82297684 = PYYTYUBDmcRhhVYXkG59100643;     PYYTYUBDmcRhhVYXkG59100643 = PYYTYUBDmcRhhVYXkG20060301;     PYYTYUBDmcRhhVYXkG20060301 = PYYTYUBDmcRhhVYXkG91067836;     PYYTYUBDmcRhhVYXkG91067836 = PYYTYUBDmcRhhVYXkG52060528;     PYYTYUBDmcRhhVYXkG52060528 = PYYTYUBDmcRhhVYXkG90367307;     PYYTYUBDmcRhhVYXkG90367307 = PYYTYUBDmcRhhVYXkG225566;     PYYTYUBDmcRhhVYXkG225566 = PYYTYUBDmcRhhVYXkG29398187;     PYYTYUBDmcRhhVYXkG29398187 = PYYTYUBDmcRhhVYXkG41270846;     PYYTYUBDmcRhhVYXkG41270846 = PYYTYUBDmcRhhVYXkG69077964;     PYYTYUBDmcRhhVYXkG69077964 = PYYTYUBDmcRhhVYXkG44382863;     PYYTYUBDmcRhhVYXkG44382863 = PYYTYUBDmcRhhVYXkG77919577;     PYYTYUBDmcRhhVYXkG77919577 = PYYTYUBDmcRhhVYXkG8677269;     PYYTYUBDmcRhhVYXkG8677269 = PYYTYUBDmcRhhVYXkG81963718;     PYYTYUBDmcRhhVYXkG81963718 = PYYTYUBDmcRhhVYXkG17844675;     PYYTYUBDmcRhhVYXkG17844675 = PYYTYUBDmcRhhVYXkG29356244;     PYYTYUBDmcRhhVYXkG29356244 = PYYTYUBDmcRhhVYXkG66968645;     PYYTYUBDmcRhhVYXkG66968645 = PYYTYUBDmcRhhVYXkG69654395;     PYYTYUBDmcRhhVYXkG69654395 = PYYTYUBDmcRhhVYXkG38478248;     PYYTYUBDmcRhhVYXkG38478248 = PYYTYUBDmcRhhVYXkG30471555;     PYYTYUBDmcRhhVYXkG30471555 = PYYTYUBDmcRhhVYXkG52638550;     PYYTYUBDmcRhhVYXkG52638550 = PYYTYUBDmcRhhVYXkG57196461;     PYYTYUBDmcRhhVYXkG57196461 = PYYTYUBDmcRhhVYXkG52087166;     PYYTYUBDmcRhhVYXkG52087166 = PYYTYUBDmcRhhVYXkG17768140;     PYYTYUBDmcRhhVYXkG17768140 = PYYTYUBDmcRhhVYXkG63138621;     PYYTYUBDmcRhhVYXkG63138621 = PYYTYUBDmcRhhVYXkG27572123;     PYYTYUBDmcRhhVYXkG27572123 = PYYTYUBDmcRhhVYXkG14018471;     PYYTYUBDmcRhhVYXkG14018471 = PYYTYUBDmcRhhVYXkG56989649;     PYYTYUBDmcRhhVYXkG56989649 = PYYTYUBDmcRhhVYXkG89100240;     PYYTYUBDmcRhhVYXkG89100240 = PYYTYUBDmcRhhVYXkG90845232;     PYYTYUBDmcRhhVYXkG90845232 = PYYTYUBDmcRhhVYXkG29731936;     PYYTYUBDmcRhhVYXkG29731936 = PYYTYUBDmcRhhVYXkG53778288;     PYYTYUBDmcRhhVYXkG53778288 = PYYTYUBDmcRhhVYXkG79942144;     PYYTYUBDmcRhhVYXkG79942144 = PYYTYUBDmcRhhVYXkG67591410;     PYYTYUBDmcRhhVYXkG67591410 = PYYTYUBDmcRhhVYXkG59155949;     PYYTYUBDmcRhhVYXkG59155949 = PYYTYUBDmcRhhVYXkG18848670;     PYYTYUBDmcRhhVYXkG18848670 = PYYTYUBDmcRhhVYXkG53516220;     PYYTYUBDmcRhhVYXkG53516220 = PYYTYUBDmcRhhVYXkG36422557;     PYYTYUBDmcRhhVYXkG36422557 = PYYTYUBDmcRhhVYXkG3060322;     PYYTYUBDmcRhhVYXkG3060322 = PYYTYUBDmcRhhVYXkG24622420;     PYYTYUBDmcRhhVYXkG24622420 = PYYTYUBDmcRhhVYXkG47348870;     PYYTYUBDmcRhhVYXkG47348870 = PYYTYUBDmcRhhVYXkG87937390;     PYYTYUBDmcRhhVYXkG87937390 = PYYTYUBDmcRhhVYXkG10997962;     PYYTYUBDmcRhhVYXkG10997962 = PYYTYUBDmcRhhVYXkG89945945;     PYYTYUBDmcRhhVYXkG89945945 = PYYTYUBDmcRhhVYXkG90940703;     PYYTYUBDmcRhhVYXkG90940703 = PYYTYUBDmcRhhVYXkG11379244;     PYYTYUBDmcRhhVYXkG11379244 = PYYTYUBDmcRhhVYXkG5533224;     PYYTYUBDmcRhhVYXkG5533224 = PYYTYUBDmcRhhVYXkG99880335;     PYYTYUBDmcRhhVYXkG99880335 = PYYTYUBDmcRhhVYXkG84618922;     PYYTYUBDmcRhhVYXkG84618922 = PYYTYUBDmcRhhVYXkG36034385;     PYYTYUBDmcRhhVYXkG36034385 = PYYTYUBDmcRhhVYXkG67981761;     PYYTYUBDmcRhhVYXkG67981761 = PYYTYUBDmcRhhVYXkG48432400;     PYYTYUBDmcRhhVYXkG48432400 = PYYTYUBDmcRhhVYXkG55993941;     PYYTYUBDmcRhhVYXkG55993941 = PYYTYUBDmcRhhVYXkG66926401;     PYYTYUBDmcRhhVYXkG66926401 = PYYTYUBDmcRhhVYXkG49771995;     PYYTYUBDmcRhhVYXkG49771995 = PYYTYUBDmcRhhVYXkG92633339;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void YITZsfIYsnTSpUiOwAnGXRvefVlLuVNvycidEBM99125455() {     double GhMJXXZyGVOXvMyWHM44368790 = -840141375;    double GhMJXXZyGVOXvMyWHM70933661 = -999751506;    double GhMJXXZyGVOXvMyWHM27479583 = -772145622;    double GhMJXXZyGVOXvMyWHM98492752 = -509047771;    double GhMJXXZyGVOXvMyWHM72517920 = -438278201;    double GhMJXXZyGVOXvMyWHM27816119 = -319190023;    double GhMJXXZyGVOXvMyWHM68235882 = -347616514;    double GhMJXXZyGVOXvMyWHM43566723 = -680502149;    double GhMJXXZyGVOXvMyWHM4766052 = -236166959;    double GhMJXXZyGVOXvMyWHM46843114 = -8839672;    double GhMJXXZyGVOXvMyWHM65266826 = 34927852;    double GhMJXXZyGVOXvMyWHM19821646 = -957229730;    double GhMJXXZyGVOXvMyWHM98291868 = -157235818;    double GhMJXXZyGVOXvMyWHM11859426 = -375795088;    double GhMJXXZyGVOXvMyWHM6452701 = -488771653;    double GhMJXXZyGVOXvMyWHM53509888 = -977443695;    double GhMJXXZyGVOXvMyWHM51833049 = 67912280;    double GhMJXXZyGVOXvMyWHM45136168 = -730041689;    double GhMJXXZyGVOXvMyWHM14064719 = -275500075;    double GhMJXXZyGVOXvMyWHM45525213 = -895918610;    double GhMJXXZyGVOXvMyWHM93566083 = -371095417;    double GhMJXXZyGVOXvMyWHM50669930 = -665297515;    double GhMJXXZyGVOXvMyWHM78689615 = 75315977;    double GhMJXXZyGVOXvMyWHM62652205 = -576490154;    double GhMJXXZyGVOXvMyWHM12869492 = -376301293;    double GhMJXXZyGVOXvMyWHM35654727 = -3181890;    double GhMJXXZyGVOXvMyWHM12405155 = -206889238;    double GhMJXXZyGVOXvMyWHM25619619 = -587252693;    double GhMJXXZyGVOXvMyWHM29870923 = -466174483;    double GhMJXXZyGVOXvMyWHM84974810 = -110402618;    double GhMJXXZyGVOXvMyWHM84793244 = -438587578;    double GhMJXXZyGVOXvMyWHM30365308 = -248146371;    double GhMJXXZyGVOXvMyWHM50362117 = -339208722;    double GhMJXXZyGVOXvMyWHM53047622 = -464583600;    double GhMJXXZyGVOXvMyWHM33528695 = -842207665;    double GhMJXXZyGVOXvMyWHM70998432 = -5981712;    double GhMJXXZyGVOXvMyWHM63858719 = 19109914;    double GhMJXXZyGVOXvMyWHM82677666 = -990085608;    double GhMJXXZyGVOXvMyWHM72238439 = -581026309;    double GhMJXXZyGVOXvMyWHM90473044 = 12393747;    double GhMJXXZyGVOXvMyWHM3634494 = 26083699;    double GhMJXXZyGVOXvMyWHM78112195 = -464485730;    double GhMJXXZyGVOXvMyWHM51055420 = -234480710;    double GhMJXXZyGVOXvMyWHM90333775 = -368789588;    double GhMJXXZyGVOXvMyWHM74439752 = -496799666;    double GhMJXXZyGVOXvMyWHM83992131 = -176472027;    double GhMJXXZyGVOXvMyWHM45266838 = -753419436;    double GhMJXXZyGVOXvMyWHM99044764 = -556606463;    double GhMJXXZyGVOXvMyWHM80086289 = -22100644;    double GhMJXXZyGVOXvMyWHM40716787 = -196873412;    double GhMJXXZyGVOXvMyWHM31047199 = -296711751;    double GhMJXXZyGVOXvMyWHM32205318 = -561377965;    double GhMJXXZyGVOXvMyWHM52636933 = -280593951;    double GhMJXXZyGVOXvMyWHM11330087 = -792958433;    double GhMJXXZyGVOXvMyWHM5559373 = -93984009;    double GhMJXXZyGVOXvMyWHM93698859 = -74843860;    double GhMJXXZyGVOXvMyWHM92244046 = -975067484;    double GhMJXXZyGVOXvMyWHM64827378 = -95655468;    double GhMJXXZyGVOXvMyWHM85623261 = -32746479;    double GhMJXXZyGVOXvMyWHM36863194 = -335096312;    double GhMJXXZyGVOXvMyWHM15410964 = -12300786;    double GhMJXXZyGVOXvMyWHM42616264 = -760363822;    double GhMJXXZyGVOXvMyWHM13695801 = -114327666;    double GhMJXXZyGVOXvMyWHM19791241 = -25764342;    double GhMJXXZyGVOXvMyWHM62049870 = -570252094;    double GhMJXXZyGVOXvMyWHM34901519 = -716925777;    double GhMJXXZyGVOXvMyWHM69459529 = -518021008;    double GhMJXXZyGVOXvMyWHM45244247 = -692652218;    double GhMJXXZyGVOXvMyWHM78330730 = -533587423;    double GhMJXXZyGVOXvMyWHM35454268 = -382789942;    double GhMJXXZyGVOXvMyWHM89651169 = -896553609;    double GhMJXXZyGVOXvMyWHM69155383 = 57997888;    double GhMJXXZyGVOXvMyWHM72897728 = -49015381;    double GhMJXXZyGVOXvMyWHM23591674 = -187893822;    double GhMJXXZyGVOXvMyWHM41890719 = -822002310;    double GhMJXXZyGVOXvMyWHM15453888 = -906609687;    double GhMJXXZyGVOXvMyWHM99614509 = -330816805;    double GhMJXXZyGVOXvMyWHM88355839 = -555894435;    double GhMJXXZyGVOXvMyWHM88212452 = 20309511;    double GhMJXXZyGVOXvMyWHM28877360 = -99829266;    double GhMJXXZyGVOXvMyWHM90387889 = -249762454;    double GhMJXXZyGVOXvMyWHM13360391 = -650282776;    double GhMJXXZyGVOXvMyWHM45533329 = -465152049;    double GhMJXXZyGVOXvMyWHM89154135 = -169301072;    double GhMJXXZyGVOXvMyWHM53927611 = -813690867;    double GhMJXXZyGVOXvMyWHM52587926 = -877209613;    double GhMJXXZyGVOXvMyWHM77728374 = -967552421;    double GhMJXXZyGVOXvMyWHM39032030 = -546250290;    double GhMJXXZyGVOXvMyWHM47488249 = -270599592;    double GhMJXXZyGVOXvMyWHM39829835 = -667363805;    double GhMJXXZyGVOXvMyWHM78754386 = -30914229;    double GhMJXXZyGVOXvMyWHM99031340 = -885234619;    double GhMJXXZyGVOXvMyWHM97054404 = -857339129;    double GhMJXXZyGVOXvMyWHM35375246 = -145929998;    double GhMJXXZyGVOXvMyWHM75062081 = -975305468;    double GhMJXXZyGVOXvMyWHM61018230 = -213552480;    double GhMJXXZyGVOXvMyWHM64416395 = -250158064;    double GhMJXXZyGVOXvMyWHM31264180 = -108716369;    double GhMJXXZyGVOXvMyWHM28283905 = -798537495;    double GhMJXXZyGVOXvMyWHM39538234 = -840141375;     GhMJXXZyGVOXvMyWHM44368790 = GhMJXXZyGVOXvMyWHM70933661;     GhMJXXZyGVOXvMyWHM70933661 = GhMJXXZyGVOXvMyWHM27479583;     GhMJXXZyGVOXvMyWHM27479583 = GhMJXXZyGVOXvMyWHM98492752;     GhMJXXZyGVOXvMyWHM98492752 = GhMJXXZyGVOXvMyWHM72517920;     GhMJXXZyGVOXvMyWHM72517920 = GhMJXXZyGVOXvMyWHM27816119;     GhMJXXZyGVOXvMyWHM27816119 = GhMJXXZyGVOXvMyWHM68235882;     GhMJXXZyGVOXvMyWHM68235882 = GhMJXXZyGVOXvMyWHM43566723;     GhMJXXZyGVOXvMyWHM43566723 = GhMJXXZyGVOXvMyWHM4766052;     GhMJXXZyGVOXvMyWHM4766052 = GhMJXXZyGVOXvMyWHM46843114;     GhMJXXZyGVOXvMyWHM46843114 = GhMJXXZyGVOXvMyWHM65266826;     GhMJXXZyGVOXvMyWHM65266826 = GhMJXXZyGVOXvMyWHM19821646;     GhMJXXZyGVOXvMyWHM19821646 = GhMJXXZyGVOXvMyWHM98291868;     GhMJXXZyGVOXvMyWHM98291868 = GhMJXXZyGVOXvMyWHM11859426;     GhMJXXZyGVOXvMyWHM11859426 = GhMJXXZyGVOXvMyWHM6452701;     GhMJXXZyGVOXvMyWHM6452701 = GhMJXXZyGVOXvMyWHM53509888;     GhMJXXZyGVOXvMyWHM53509888 = GhMJXXZyGVOXvMyWHM51833049;     GhMJXXZyGVOXvMyWHM51833049 = GhMJXXZyGVOXvMyWHM45136168;     GhMJXXZyGVOXvMyWHM45136168 = GhMJXXZyGVOXvMyWHM14064719;     GhMJXXZyGVOXvMyWHM14064719 = GhMJXXZyGVOXvMyWHM45525213;     GhMJXXZyGVOXvMyWHM45525213 = GhMJXXZyGVOXvMyWHM93566083;     GhMJXXZyGVOXvMyWHM93566083 = GhMJXXZyGVOXvMyWHM50669930;     GhMJXXZyGVOXvMyWHM50669930 = GhMJXXZyGVOXvMyWHM78689615;     GhMJXXZyGVOXvMyWHM78689615 = GhMJXXZyGVOXvMyWHM62652205;     GhMJXXZyGVOXvMyWHM62652205 = GhMJXXZyGVOXvMyWHM12869492;     GhMJXXZyGVOXvMyWHM12869492 = GhMJXXZyGVOXvMyWHM35654727;     GhMJXXZyGVOXvMyWHM35654727 = GhMJXXZyGVOXvMyWHM12405155;     GhMJXXZyGVOXvMyWHM12405155 = GhMJXXZyGVOXvMyWHM25619619;     GhMJXXZyGVOXvMyWHM25619619 = GhMJXXZyGVOXvMyWHM29870923;     GhMJXXZyGVOXvMyWHM29870923 = GhMJXXZyGVOXvMyWHM84974810;     GhMJXXZyGVOXvMyWHM84974810 = GhMJXXZyGVOXvMyWHM84793244;     GhMJXXZyGVOXvMyWHM84793244 = GhMJXXZyGVOXvMyWHM30365308;     GhMJXXZyGVOXvMyWHM30365308 = GhMJXXZyGVOXvMyWHM50362117;     GhMJXXZyGVOXvMyWHM50362117 = GhMJXXZyGVOXvMyWHM53047622;     GhMJXXZyGVOXvMyWHM53047622 = GhMJXXZyGVOXvMyWHM33528695;     GhMJXXZyGVOXvMyWHM33528695 = GhMJXXZyGVOXvMyWHM70998432;     GhMJXXZyGVOXvMyWHM70998432 = GhMJXXZyGVOXvMyWHM63858719;     GhMJXXZyGVOXvMyWHM63858719 = GhMJXXZyGVOXvMyWHM82677666;     GhMJXXZyGVOXvMyWHM82677666 = GhMJXXZyGVOXvMyWHM72238439;     GhMJXXZyGVOXvMyWHM72238439 = GhMJXXZyGVOXvMyWHM90473044;     GhMJXXZyGVOXvMyWHM90473044 = GhMJXXZyGVOXvMyWHM3634494;     GhMJXXZyGVOXvMyWHM3634494 = GhMJXXZyGVOXvMyWHM78112195;     GhMJXXZyGVOXvMyWHM78112195 = GhMJXXZyGVOXvMyWHM51055420;     GhMJXXZyGVOXvMyWHM51055420 = GhMJXXZyGVOXvMyWHM90333775;     GhMJXXZyGVOXvMyWHM90333775 = GhMJXXZyGVOXvMyWHM74439752;     GhMJXXZyGVOXvMyWHM74439752 = GhMJXXZyGVOXvMyWHM83992131;     GhMJXXZyGVOXvMyWHM83992131 = GhMJXXZyGVOXvMyWHM45266838;     GhMJXXZyGVOXvMyWHM45266838 = GhMJXXZyGVOXvMyWHM99044764;     GhMJXXZyGVOXvMyWHM99044764 = GhMJXXZyGVOXvMyWHM80086289;     GhMJXXZyGVOXvMyWHM80086289 = GhMJXXZyGVOXvMyWHM40716787;     GhMJXXZyGVOXvMyWHM40716787 = GhMJXXZyGVOXvMyWHM31047199;     GhMJXXZyGVOXvMyWHM31047199 = GhMJXXZyGVOXvMyWHM32205318;     GhMJXXZyGVOXvMyWHM32205318 = GhMJXXZyGVOXvMyWHM52636933;     GhMJXXZyGVOXvMyWHM52636933 = GhMJXXZyGVOXvMyWHM11330087;     GhMJXXZyGVOXvMyWHM11330087 = GhMJXXZyGVOXvMyWHM5559373;     GhMJXXZyGVOXvMyWHM5559373 = GhMJXXZyGVOXvMyWHM93698859;     GhMJXXZyGVOXvMyWHM93698859 = GhMJXXZyGVOXvMyWHM92244046;     GhMJXXZyGVOXvMyWHM92244046 = GhMJXXZyGVOXvMyWHM64827378;     GhMJXXZyGVOXvMyWHM64827378 = GhMJXXZyGVOXvMyWHM85623261;     GhMJXXZyGVOXvMyWHM85623261 = GhMJXXZyGVOXvMyWHM36863194;     GhMJXXZyGVOXvMyWHM36863194 = GhMJXXZyGVOXvMyWHM15410964;     GhMJXXZyGVOXvMyWHM15410964 = GhMJXXZyGVOXvMyWHM42616264;     GhMJXXZyGVOXvMyWHM42616264 = GhMJXXZyGVOXvMyWHM13695801;     GhMJXXZyGVOXvMyWHM13695801 = GhMJXXZyGVOXvMyWHM19791241;     GhMJXXZyGVOXvMyWHM19791241 = GhMJXXZyGVOXvMyWHM62049870;     GhMJXXZyGVOXvMyWHM62049870 = GhMJXXZyGVOXvMyWHM34901519;     GhMJXXZyGVOXvMyWHM34901519 = GhMJXXZyGVOXvMyWHM69459529;     GhMJXXZyGVOXvMyWHM69459529 = GhMJXXZyGVOXvMyWHM45244247;     GhMJXXZyGVOXvMyWHM45244247 = GhMJXXZyGVOXvMyWHM78330730;     GhMJXXZyGVOXvMyWHM78330730 = GhMJXXZyGVOXvMyWHM35454268;     GhMJXXZyGVOXvMyWHM35454268 = GhMJXXZyGVOXvMyWHM89651169;     GhMJXXZyGVOXvMyWHM89651169 = GhMJXXZyGVOXvMyWHM69155383;     GhMJXXZyGVOXvMyWHM69155383 = GhMJXXZyGVOXvMyWHM72897728;     GhMJXXZyGVOXvMyWHM72897728 = GhMJXXZyGVOXvMyWHM23591674;     GhMJXXZyGVOXvMyWHM23591674 = GhMJXXZyGVOXvMyWHM41890719;     GhMJXXZyGVOXvMyWHM41890719 = GhMJXXZyGVOXvMyWHM15453888;     GhMJXXZyGVOXvMyWHM15453888 = GhMJXXZyGVOXvMyWHM99614509;     GhMJXXZyGVOXvMyWHM99614509 = GhMJXXZyGVOXvMyWHM88355839;     GhMJXXZyGVOXvMyWHM88355839 = GhMJXXZyGVOXvMyWHM88212452;     GhMJXXZyGVOXvMyWHM88212452 = GhMJXXZyGVOXvMyWHM28877360;     GhMJXXZyGVOXvMyWHM28877360 = GhMJXXZyGVOXvMyWHM90387889;     GhMJXXZyGVOXvMyWHM90387889 = GhMJXXZyGVOXvMyWHM13360391;     GhMJXXZyGVOXvMyWHM13360391 = GhMJXXZyGVOXvMyWHM45533329;     GhMJXXZyGVOXvMyWHM45533329 = GhMJXXZyGVOXvMyWHM89154135;     GhMJXXZyGVOXvMyWHM89154135 = GhMJXXZyGVOXvMyWHM53927611;     GhMJXXZyGVOXvMyWHM53927611 = GhMJXXZyGVOXvMyWHM52587926;     GhMJXXZyGVOXvMyWHM52587926 = GhMJXXZyGVOXvMyWHM77728374;     GhMJXXZyGVOXvMyWHM77728374 = GhMJXXZyGVOXvMyWHM39032030;     GhMJXXZyGVOXvMyWHM39032030 = GhMJXXZyGVOXvMyWHM47488249;     GhMJXXZyGVOXvMyWHM47488249 = GhMJXXZyGVOXvMyWHM39829835;     GhMJXXZyGVOXvMyWHM39829835 = GhMJXXZyGVOXvMyWHM78754386;     GhMJXXZyGVOXvMyWHM78754386 = GhMJXXZyGVOXvMyWHM99031340;     GhMJXXZyGVOXvMyWHM99031340 = GhMJXXZyGVOXvMyWHM97054404;     GhMJXXZyGVOXvMyWHM97054404 = GhMJXXZyGVOXvMyWHM35375246;     GhMJXXZyGVOXvMyWHM35375246 = GhMJXXZyGVOXvMyWHM75062081;     GhMJXXZyGVOXvMyWHM75062081 = GhMJXXZyGVOXvMyWHM61018230;     GhMJXXZyGVOXvMyWHM61018230 = GhMJXXZyGVOXvMyWHM64416395;     GhMJXXZyGVOXvMyWHM64416395 = GhMJXXZyGVOXvMyWHM31264180;     GhMJXXZyGVOXvMyWHM31264180 = GhMJXXZyGVOXvMyWHM28283905;     GhMJXXZyGVOXvMyWHM28283905 = GhMJXXZyGVOXvMyWHM39538234;     GhMJXXZyGVOXvMyWHM39538234 = GhMJXXZyGVOXvMyWHM44368790;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void dSmYjEyBeNNvktzipzTgxAOunmSszuUXuRENjaE29111686() {     double FNGYRHdftFUASAQldD66762378 = -602021197;    double FNGYRHdftFUASAQldD16708845 = -905699436;    double FNGYRHdftFUASAQldD54935650 = 45329148;    double FNGYRHdftFUASAQldD28419580 = -694914473;    double FNGYRHdftFUASAQldD61852072 = -560979881;    double FNGYRHdftFUASAQldD7893804 = -480365589;    double FNGYRHdftFUASAQldD91844285 = -465067354;    double FNGYRHdftFUASAQldD49986531 = -346921476;    double FNGYRHdftFUASAQldD19189019 = -406716929;    double FNGYRHdftFUASAQldD41967186 = -114774134;    double FNGYRHdftFUASAQldD82488080 = -2224477;    double FNGYRHdftFUASAQldD61432917 = -372496661;    double FNGYRHdftFUASAQldD33447136 = -754294663;    double FNGYRHdftFUASAQldD629958 = -558350793;    double FNGYRHdftFUASAQldD98015868 = -153536514;    double FNGYRHdftFUASAQldD23201253 = 73684413;    double FNGYRHdftFUASAQldD45803641 = -389752970;    double FNGYRHdftFUASAQldD28112051 = -784712758;    double FNGYRHdftFUASAQldD34918080 = -892619934;    double FNGYRHdftFUASAQldD51967733 = -536528613;    double FNGYRHdftFUASAQldD14779767 = -652116352;    double FNGYRHdftFUASAQldD36188883 = -660071945;    double FNGYRHdftFUASAQldD45104542 = -741806773;    double FNGYRHdftFUASAQldD45501884 = -159562489;    double FNGYRHdftFUASAQldD19967049 = -671166564;    double FNGYRHdftFUASAQldD7383645 = -538870185;    double FNGYRHdftFUASAQldD89272993 = -763676018;    double FNGYRHdftFUASAQldD96127543 = -866740158;    double FNGYRHdftFUASAQldD24085037 = -164361288;    double FNGYRHdftFUASAQldD18042120 = -355267111;    double FNGYRHdftFUASAQldD95671370 = -132810496;    double FNGYRHdftFUASAQldD3182642 = -508395964;    double FNGYRHdftFUASAQldD45948364 = -666608001;    double FNGYRHdftFUASAQldD12153472 = -912028718;    double FNGYRHdftFUASAQldD27400022 = -646650163;    double FNGYRHdftFUASAQldD69863111 = -241611342;    double FNGYRHdftFUASAQldD45357063 = -714184660;    double FNGYRHdftFUASAQldD66386087 = -862448401;    double FNGYRHdftFUASAQldD85232974 = -269390924;    double FNGYRHdftFUASAQldD38785867 = -514398597;    double FNGYRHdftFUASAQldD44536197 = -389150069;    double FNGYRHdftFUASAQldD80922925 = -28602339;    double FNGYRHdftFUASAQldD96322252 = -662881040;    double FNGYRHdftFUASAQldD30545997 = -809188794;    double FNGYRHdftFUASAQldD58404967 = -932683742;    double FNGYRHdftFUASAQldD51664445 = -546656452;    double FNGYRHdftFUASAQldD29866443 = -850549067;    double FNGYRHdftFUASAQldD68259858 = -804380097;    double FNGYRHdftFUASAQldD55887805 = -408053481;    double FNGYRHdftFUASAQldD17755110 = -751868784;    double FNGYRHdftFUASAQldD26657046 = 26766979;    double FNGYRHdftFUASAQldD91509317 = -610051499;    double FNGYRHdftFUASAQldD55502988 = -60451173;    double FNGYRHdftFUASAQldD61366361 = -536719391;    double FNGYRHdftFUASAQldD14331920 = -477788847;    double FNGYRHdftFUASAQldD30573496 = -941949252;    double FNGYRHdftFUASAQldD71604303 = -63892663;    double FNGYRHdftFUASAQldD9433766 = -795108364;    double FNGYRHdftFUASAQldD8452532 = 76252091;    double FNGYRHdftFUASAQldD54468428 = 77890304;    double FNGYRHdftFUASAQldD18620810 = -716689572;    double FNGYRHdftFUASAQldD95716741 = -598327196;    double FNGYRHdftFUASAQldD25901495 = -82560189;    double FNGYRHdftFUASAQldD1146899 = 48550182;    double FNGYRHdftFUASAQldD46295815 = -981963639;    double FNGYRHdftFUASAQldD79305439 = -493828513;    double FNGYRHdftFUASAQldD15484554 = -705888660;    double FNGYRHdftFUASAQldD21293664 = -842265945;    double FNGYRHdftFUASAQldD73229936 = -911700631;    double FNGYRHdftFUASAQldD28152757 = -911925173;    double FNGYRHdftFUASAQldD77844189 = -212130928;    double FNGYRHdftFUASAQldD79417554 = -527304569;    double FNGYRHdftFUASAQldD42879077 = -415321834;    double FNGYRHdftFUASAQldD96132213 = -278221338;    double FNGYRHdftFUASAQldD7431537 = -47378544;    double FNGYRHdftFUASAQldD33856841 = -523514013;    double FNGYRHdftFUASAQldD39866630 = -997190906;    double FNGYRHdftFUASAQldD14558545 = -932617980;    double FNGYRHdftFUASAQldD87096916 = -226878747;    double FNGYRHdftFUASAQldD68302604 = -24510113;    double FNGYRHdftFUASAQldD77517202 = -688321119;    double FNGYRHdftFUASAQldD21013136 = -959295921;    double FNGYRHdftFUASAQldD40239739 = -358686678;    double FNGYRHdftFUASAQldD6329927 = -412492504;    double FNGYRHdftFUASAQldD91385074 = -282034090;    double FNGYRHdftFUASAQldD4162053 = -522758997;    double FNGYRHdftFUASAQldD47679653 = -347944792;    double FNGYRHdftFUASAQldD84582003 = -29888611;    double FNGYRHdftFUASAQldD97821552 = -334239872;    double FNGYRHdftFUASAQldD96826525 = -704700911;    double FNGYRHdftFUASAQldD98258808 = -77718679;    double FNGYRHdftFUASAQldD35923298 = -919076296;    double FNGYRHdftFUASAQldD57933555 = -838700492;    double FNGYRHdftFUASAQldD30764546 = -247281229;    double FNGYRHdftFUASAQldD20165058 = -797709025;    double FNGYRHdftFUASAQldD48819455 = -790822873;    double FNGYRHdftFUASAQldD55021431 = -946042150;    double FNGYRHdftFUASAQldD95175354 = -611431222;    double FNGYRHdftFUASAQldD84250181 = -827225156;    double FNGYRHdftFUASAQldD79099527 = -602021197;     FNGYRHdftFUASAQldD66762378 = FNGYRHdftFUASAQldD16708845;     FNGYRHdftFUASAQldD16708845 = FNGYRHdftFUASAQldD54935650;     FNGYRHdftFUASAQldD54935650 = FNGYRHdftFUASAQldD28419580;     FNGYRHdftFUASAQldD28419580 = FNGYRHdftFUASAQldD61852072;     FNGYRHdftFUASAQldD61852072 = FNGYRHdftFUASAQldD7893804;     FNGYRHdftFUASAQldD7893804 = FNGYRHdftFUASAQldD91844285;     FNGYRHdftFUASAQldD91844285 = FNGYRHdftFUASAQldD49986531;     FNGYRHdftFUASAQldD49986531 = FNGYRHdftFUASAQldD19189019;     FNGYRHdftFUASAQldD19189019 = FNGYRHdftFUASAQldD41967186;     FNGYRHdftFUASAQldD41967186 = FNGYRHdftFUASAQldD82488080;     FNGYRHdftFUASAQldD82488080 = FNGYRHdftFUASAQldD61432917;     FNGYRHdftFUASAQldD61432917 = FNGYRHdftFUASAQldD33447136;     FNGYRHdftFUASAQldD33447136 = FNGYRHdftFUASAQldD629958;     FNGYRHdftFUASAQldD629958 = FNGYRHdftFUASAQldD98015868;     FNGYRHdftFUASAQldD98015868 = FNGYRHdftFUASAQldD23201253;     FNGYRHdftFUASAQldD23201253 = FNGYRHdftFUASAQldD45803641;     FNGYRHdftFUASAQldD45803641 = FNGYRHdftFUASAQldD28112051;     FNGYRHdftFUASAQldD28112051 = FNGYRHdftFUASAQldD34918080;     FNGYRHdftFUASAQldD34918080 = FNGYRHdftFUASAQldD51967733;     FNGYRHdftFUASAQldD51967733 = FNGYRHdftFUASAQldD14779767;     FNGYRHdftFUASAQldD14779767 = FNGYRHdftFUASAQldD36188883;     FNGYRHdftFUASAQldD36188883 = FNGYRHdftFUASAQldD45104542;     FNGYRHdftFUASAQldD45104542 = FNGYRHdftFUASAQldD45501884;     FNGYRHdftFUASAQldD45501884 = FNGYRHdftFUASAQldD19967049;     FNGYRHdftFUASAQldD19967049 = FNGYRHdftFUASAQldD7383645;     FNGYRHdftFUASAQldD7383645 = FNGYRHdftFUASAQldD89272993;     FNGYRHdftFUASAQldD89272993 = FNGYRHdftFUASAQldD96127543;     FNGYRHdftFUASAQldD96127543 = FNGYRHdftFUASAQldD24085037;     FNGYRHdftFUASAQldD24085037 = FNGYRHdftFUASAQldD18042120;     FNGYRHdftFUASAQldD18042120 = FNGYRHdftFUASAQldD95671370;     FNGYRHdftFUASAQldD95671370 = FNGYRHdftFUASAQldD3182642;     FNGYRHdftFUASAQldD3182642 = FNGYRHdftFUASAQldD45948364;     FNGYRHdftFUASAQldD45948364 = FNGYRHdftFUASAQldD12153472;     FNGYRHdftFUASAQldD12153472 = FNGYRHdftFUASAQldD27400022;     FNGYRHdftFUASAQldD27400022 = FNGYRHdftFUASAQldD69863111;     FNGYRHdftFUASAQldD69863111 = FNGYRHdftFUASAQldD45357063;     FNGYRHdftFUASAQldD45357063 = FNGYRHdftFUASAQldD66386087;     FNGYRHdftFUASAQldD66386087 = FNGYRHdftFUASAQldD85232974;     FNGYRHdftFUASAQldD85232974 = FNGYRHdftFUASAQldD38785867;     FNGYRHdftFUASAQldD38785867 = FNGYRHdftFUASAQldD44536197;     FNGYRHdftFUASAQldD44536197 = FNGYRHdftFUASAQldD80922925;     FNGYRHdftFUASAQldD80922925 = FNGYRHdftFUASAQldD96322252;     FNGYRHdftFUASAQldD96322252 = FNGYRHdftFUASAQldD30545997;     FNGYRHdftFUASAQldD30545997 = FNGYRHdftFUASAQldD58404967;     FNGYRHdftFUASAQldD58404967 = FNGYRHdftFUASAQldD51664445;     FNGYRHdftFUASAQldD51664445 = FNGYRHdftFUASAQldD29866443;     FNGYRHdftFUASAQldD29866443 = FNGYRHdftFUASAQldD68259858;     FNGYRHdftFUASAQldD68259858 = FNGYRHdftFUASAQldD55887805;     FNGYRHdftFUASAQldD55887805 = FNGYRHdftFUASAQldD17755110;     FNGYRHdftFUASAQldD17755110 = FNGYRHdftFUASAQldD26657046;     FNGYRHdftFUASAQldD26657046 = FNGYRHdftFUASAQldD91509317;     FNGYRHdftFUASAQldD91509317 = FNGYRHdftFUASAQldD55502988;     FNGYRHdftFUASAQldD55502988 = FNGYRHdftFUASAQldD61366361;     FNGYRHdftFUASAQldD61366361 = FNGYRHdftFUASAQldD14331920;     FNGYRHdftFUASAQldD14331920 = FNGYRHdftFUASAQldD30573496;     FNGYRHdftFUASAQldD30573496 = FNGYRHdftFUASAQldD71604303;     FNGYRHdftFUASAQldD71604303 = FNGYRHdftFUASAQldD9433766;     FNGYRHdftFUASAQldD9433766 = FNGYRHdftFUASAQldD8452532;     FNGYRHdftFUASAQldD8452532 = FNGYRHdftFUASAQldD54468428;     FNGYRHdftFUASAQldD54468428 = FNGYRHdftFUASAQldD18620810;     FNGYRHdftFUASAQldD18620810 = FNGYRHdftFUASAQldD95716741;     FNGYRHdftFUASAQldD95716741 = FNGYRHdftFUASAQldD25901495;     FNGYRHdftFUASAQldD25901495 = FNGYRHdftFUASAQldD1146899;     FNGYRHdftFUASAQldD1146899 = FNGYRHdftFUASAQldD46295815;     FNGYRHdftFUASAQldD46295815 = FNGYRHdftFUASAQldD79305439;     FNGYRHdftFUASAQldD79305439 = FNGYRHdftFUASAQldD15484554;     FNGYRHdftFUASAQldD15484554 = FNGYRHdftFUASAQldD21293664;     FNGYRHdftFUASAQldD21293664 = FNGYRHdftFUASAQldD73229936;     FNGYRHdftFUASAQldD73229936 = FNGYRHdftFUASAQldD28152757;     FNGYRHdftFUASAQldD28152757 = FNGYRHdftFUASAQldD77844189;     FNGYRHdftFUASAQldD77844189 = FNGYRHdftFUASAQldD79417554;     FNGYRHdftFUASAQldD79417554 = FNGYRHdftFUASAQldD42879077;     FNGYRHdftFUASAQldD42879077 = FNGYRHdftFUASAQldD96132213;     FNGYRHdftFUASAQldD96132213 = FNGYRHdftFUASAQldD7431537;     FNGYRHdftFUASAQldD7431537 = FNGYRHdftFUASAQldD33856841;     FNGYRHdftFUASAQldD33856841 = FNGYRHdftFUASAQldD39866630;     FNGYRHdftFUASAQldD39866630 = FNGYRHdftFUASAQldD14558545;     FNGYRHdftFUASAQldD14558545 = FNGYRHdftFUASAQldD87096916;     FNGYRHdftFUASAQldD87096916 = FNGYRHdftFUASAQldD68302604;     FNGYRHdftFUASAQldD68302604 = FNGYRHdftFUASAQldD77517202;     FNGYRHdftFUASAQldD77517202 = FNGYRHdftFUASAQldD21013136;     FNGYRHdftFUASAQldD21013136 = FNGYRHdftFUASAQldD40239739;     FNGYRHdftFUASAQldD40239739 = FNGYRHdftFUASAQldD6329927;     FNGYRHdftFUASAQldD6329927 = FNGYRHdftFUASAQldD91385074;     FNGYRHdftFUASAQldD91385074 = FNGYRHdftFUASAQldD4162053;     FNGYRHdftFUASAQldD4162053 = FNGYRHdftFUASAQldD47679653;     FNGYRHdftFUASAQldD47679653 = FNGYRHdftFUASAQldD84582003;     FNGYRHdftFUASAQldD84582003 = FNGYRHdftFUASAQldD97821552;     FNGYRHdftFUASAQldD97821552 = FNGYRHdftFUASAQldD96826525;     FNGYRHdftFUASAQldD96826525 = FNGYRHdftFUASAQldD98258808;     FNGYRHdftFUASAQldD98258808 = FNGYRHdftFUASAQldD35923298;     FNGYRHdftFUASAQldD35923298 = FNGYRHdftFUASAQldD57933555;     FNGYRHdftFUASAQldD57933555 = FNGYRHdftFUASAQldD30764546;     FNGYRHdftFUASAQldD30764546 = FNGYRHdftFUASAQldD20165058;     FNGYRHdftFUASAQldD20165058 = FNGYRHdftFUASAQldD48819455;     FNGYRHdftFUASAQldD48819455 = FNGYRHdftFUASAQldD55021431;     FNGYRHdftFUASAQldD55021431 = FNGYRHdftFUASAQldD95175354;     FNGYRHdftFUASAQldD95175354 = FNGYRHdftFUASAQldD84250181;     FNGYRHdftFUASAQldD84250181 = FNGYRHdftFUASAQldD79099527;     FNGYRHdftFUASAQldD79099527 = FNGYRHdftFUASAQldD66762378;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void nUtwZdHSmAUeiYYJQAeQGrfheZlcrIvFWHczVRw39587270() {     int XGYQNolUASCyZhDHvo7159811 = -245788961;    int XGYQNolUASCyZhDHvo53775312 = -38139176;    int XGYQNolUASCyZhDHvo19247474 = -937658543;    int XGYQNolUASCyZhDHvo17623683 = -742844425;    int XGYQNolUASCyZhDHvo59398948 = -28828175;    int XGYQNolUASCyZhDHvo45022115 = -321538728;    int XGYQNolUASCyZhDHvo63033138 = -839886235;    int XGYQNolUASCyZhDHvo68375297 = -796887418;    int XGYQNolUASCyZhDHvo88115738 = -687690499;    int XGYQNolUASCyZhDHvo55582184 = -910322151;    int XGYQNolUASCyZhDHvo77513754 = -660154109;    int XGYQNolUASCyZhDHvo41053393 = -12953774;    int XGYQNolUASCyZhDHvo94545486 = -869774619;    int XGYQNolUASCyZhDHvo96100338 = -999345497;    int XGYQNolUASCyZhDHvo45880171 = -423722845;    int XGYQNolUASCyZhDHvo1011546 = -453738346;    int XGYQNolUASCyZhDHvo65695297 = -281151259;    int XGYQNolUASCyZhDHvo86444253 = -812448275;    int XGYQNolUASCyZhDHvo74904146 = -271482571;    int XGYQNolUASCyZhDHvo44124387 = -486144411;    int XGYQNolUASCyZhDHvo13988072 = -529561901;    int XGYQNolUASCyZhDHvo45995550 = -177661951;    int XGYQNolUASCyZhDHvo89791113 = -336469536;    int XGYQNolUASCyZhDHvo24421754 = -476144774;    int XGYQNolUASCyZhDHvo72431733 = -541722827;    int XGYQNolUASCyZhDHvo29542815 = -312458642;    int XGYQNolUASCyZhDHvo46154505 = -614995733;    int XGYQNolUASCyZhDHvo66419900 = -854325556;    int XGYQNolUASCyZhDHvo86979140 = 79161013;    int XGYQNolUASCyZhDHvo55658523 = 16284758;    int XGYQNolUASCyZhDHvo4169731 = -974684402;    int XGYQNolUASCyZhDHvo45141238 = -482999729;    int XGYQNolUASCyZhDHvo82318748 = -888605345;    int XGYQNolUASCyZhDHvo29911867 = -186826519;    int XGYQNolUASCyZhDHvo4820699 = -157754102;    int XGYQNolUASCyZhDHvo34101405 = -9720506;    int XGYQNolUASCyZhDHvo66666753 = -521059403;    int XGYQNolUASCyZhDHvo37943429 = -913258690;    int XGYQNolUASCyZhDHvo1528628 = -163365824;    int XGYQNolUASCyZhDHvo37833105 = -949949335;    int XGYQNolUASCyZhDHvo74174051 = -8432371;    int XGYQNolUASCyZhDHvo96541405 = -217453003;    int XGYQNolUASCyZhDHvo15726370 = -388566465;    int XGYQNolUASCyZhDHvo15538390 = 57761501;    int XGYQNolUASCyZhDHvo41434704 = -859625075;    int XGYQNolUASCyZhDHvo27299284 = -115756963;    int XGYQNolUASCyZhDHvo52075513 = -339974022;    int XGYQNolUASCyZhDHvo96947045 = 19611775;    int XGYQNolUASCyZhDHvo35156547 = -787879723;    int XGYQNolUASCyZhDHvo22633141 = -17641210;    int XGYQNolUASCyZhDHvo89430165 = -865679804;    int XGYQNolUASCyZhDHvo99471422 = 79046008;    int XGYQNolUASCyZhDHvo55535822 = -812556727;    int XGYQNolUASCyZhDHvo98342108 = -808470287;    int XGYQNolUASCyZhDHvo25599199 = -270754037;    int XGYQNolUASCyZhDHvo61164260 = 31872989;    int XGYQNolUASCyZhDHvo63984199 = -701669640;    int XGYQNolUASCyZhDHvo94825720 = -361513769;    int XGYQNolUASCyZhDHvo45191949 = -101121599;    int XGYQNolUASCyZhDHvo29856134 = -716369533;    int XGYQNolUASCyZhDHvo98867609 = -706542995;    int XGYQNolUASCyZhDHvo96613238 = -985560679;    int XGYQNolUASCyZhDHvo81396157 = -776048431;    int XGYQNolUASCyZhDHvo32457215 = -603975257;    int XGYQNolUASCyZhDHvo51412453 = -935637750;    int XGYQNolUASCyZhDHvo32372517 = -77154381;    int XGYQNolUASCyZhDHvo58734644 = -124348429;    int XGYQNolUASCyZhDHvo64633619 = -582948100;    int XGYQNolUASCyZhDHvo91279640 = -741591396;    int XGYQNolUASCyZhDHvo11778767 = -314002339;    int XGYQNolUASCyZhDHvo34344793 = -932678943;    int XGYQNolUASCyZhDHvo27751868 = -367892570;    int XGYQNolUASCyZhDHvo84915625 = -549082452;    int XGYQNolUASCyZhDHvo37071042 = -321533237;    int XGYQNolUASCyZhDHvo69950336 = -377712041;    int XGYQNolUASCyZhDHvo17446667 = -212108899;    int XGYQNolUASCyZhDHvo30269180 = -789095487;    int XGYQNolUASCyZhDHvo74252723 = -294231038;    int XGYQNolUASCyZhDHvo82987049 = -616519700;    int XGYQNolUASCyZhDHvo45132449 = -325965864;    int XGYQNolUASCyZhDHvo77467301 = -972484621;    int XGYQNolUASCyZhDHvo49207460 = -534607509;    int XGYQNolUASCyZhDHvo31263353 = 33554166;    int XGYQNolUASCyZhDHvo64346000 = -903197778;    int XGYQNolUASCyZhDHvo66228358 = -118035439;    int XGYQNolUASCyZhDHvo4698309 = -953730410;    int XGYQNolUASCyZhDHvo89605416 = -670443002;    int XGYQNolUASCyZhDHvo83976639 = 19864941;    int XGYQNolUASCyZhDHvo4312669 = -916072482;    int XGYQNolUASCyZhDHvo43656438 = -89627092;    int XGYQNolUASCyZhDHvo70117206 = -308050867;    int XGYQNolUASCyZhDHvo71841033 = -59545634;    int XGYQNolUASCyZhDHvo92751479 = -712137092;    int XGYQNolUASCyZhDHvo71672494 = -446996292;    int XGYQNolUASCyZhDHvo38965495 = -143406340;    int XGYQNolUASCyZhDHvo77560812 = -22871692;    int XGYQNolUASCyZhDHvo15145249 = -441404572;    int XGYQNolUASCyZhDHvo83269154 = -784591208;    int XGYQNolUASCyZhDHvo64125937 = -6600749;    int XGYQNolUASCyZhDHvo9062188 = -245788961;     XGYQNolUASCyZhDHvo7159811 = XGYQNolUASCyZhDHvo53775312;     XGYQNolUASCyZhDHvo53775312 = XGYQNolUASCyZhDHvo19247474;     XGYQNolUASCyZhDHvo19247474 = XGYQNolUASCyZhDHvo17623683;     XGYQNolUASCyZhDHvo17623683 = XGYQNolUASCyZhDHvo59398948;     XGYQNolUASCyZhDHvo59398948 = XGYQNolUASCyZhDHvo45022115;     XGYQNolUASCyZhDHvo45022115 = XGYQNolUASCyZhDHvo63033138;     XGYQNolUASCyZhDHvo63033138 = XGYQNolUASCyZhDHvo68375297;     XGYQNolUASCyZhDHvo68375297 = XGYQNolUASCyZhDHvo88115738;     XGYQNolUASCyZhDHvo88115738 = XGYQNolUASCyZhDHvo55582184;     XGYQNolUASCyZhDHvo55582184 = XGYQNolUASCyZhDHvo77513754;     XGYQNolUASCyZhDHvo77513754 = XGYQNolUASCyZhDHvo41053393;     XGYQNolUASCyZhDHvo41053393 = XGYQNolUASCyZhDHvo94545486;     XGYQNolUASCyZhDHvo94545486 = XGYQNolUASCyZhDHvo96100338;     XGYQNolUASCyZhDHvo96100338 = XGYQNolUASCyZhDHvo45880171;     XGYQNolUASCyZhDHvo45880171 = XGYQNolUASCyZhDHvo1011546;     XGYQNolUASCyZhDHvo1011546 = XGYQNolUASCyZhDHvo65695297;     XGYQNolUASCyZhDHvo65695297 = XGYQNolUASCyZhDHvo86444253;     XGYQNolUASCyZhDHvo86444253 = XGYQNolUASCyZhDHvo74904146;     XGYQNolUASCyZhDHvo74904146 = XGYQNolUASCyZhDHvo44124387;     XGYQNolUASCyZhDHvo44124387 = XGYQNolUASCyZhDHvo13988072;     XGYQNolUASCyZhDHvo13988072 = XGYQNolUASCyZhDHvo45995550;     XGYQNolUASCyZhDHvo45995550 = XGYQNolUASCyZhDHvo89791113;     XGYQNolUASCyZhDHvo89791113 = XGYQNolUASCyZhDHvo24421754;     XGYQNolUASCyZhDHvo24421754 = XGYQNolUASCyZhDHvo72431733;     XGYQNolUASCyZhDHvo72431733 = XGYQNolUASCyZhDHvo29542815;     XGYQNolUASCyZhDHvo29542815 = XGYQNolUASCyZhDHvo46154505;     XGYQNolUASCyZhDHvo46154505 = XGYQNolUASCyZhDHvo66419900;     XGYQNolUASCyZhDHvo66419900 = XGYQNolUASCyZhDHvo86979140;     XGYQNolUASCyZhDHvo86979140 = XGYQNolUASCyZhDHvo55658523;     XGYQNolUASCyZhDHvo55658523 = XGYQNolUASCyZhDHvo4169731;     XGYQNolUASCyZhDHvo4169731 = XGYQNolUASCyZhDHvo45141238;     XGYQNolUASCyZhDHvo45141238 = XGYQNolUASCyZhDHvo82318748;     XGYQNolUASCyZhDHvo82318748 = XGYQNolUASCyZhDHvo29911867;     XGYQNolUASCyZhDHvo29911867 = XGYQNolUASCyZhDHvo4820699;     XGYQNolUASCyZhDHvo4820699 = XGYQNolUASCyZhDHvo34101405;     XGYQNolUASCyZhDHvo34101405 = XGYQNolUASCyZhDHvo66666753;     XGYQNolUASCyZhDHvo66666753 = XGYQNolUASCyZhDHvo37943429;     XGYQNolUASCyZhDHvo37943429 = XGYQNolUASCyZhDHvo1528628;     XGYQNolUASCyZhDHvo1528628 = XGYQNolUASCyZhDHvo37833105;     XGYQNolUASCyZhDHvo37833105 = XGYQNolUASCyZhDHvo74174051;     XGYQNolUASCyZhDHvo74174051 = XGYQNolUASCyZhDHvo96541405;     XGYQNolUASCyZhDHvo96541405 = XGYQNolUASCyZhDHvo15726370;     XGYQNolUASCyZhDHvo15726370 = XGYQNolUASCyZhDHvo15538390;     XGYQNolUASCyZhDHvo15538390 = XGYQNolUASCyZhDHvo41434704;     XGYQNolUASCyZhDHvo41434704 = XGYQNolUASCyZhDHvo27299284;     XGYQNolUASCyZhDHvo27299284 = XGYQNolUASCyZhDHvo52075513;     XGYQNolUASCyZhDHvo52075513 = XGYQNolUASCyZhDHvo96947045;     XGYQNolUASCyZhDHvo96947045 = XGYQNolUASCyZhDHvo35156547;     XGYQNolUASCyZhDHvo35156547 = XGYQNolUASCyZhDHvo22633141;     XGYQNolUASCyZhDHvo22633141 = XGYQNolUASCyZhDHvo89430165;     XGYQNolUASCyZhDHvo89430165 = XGYQNolUASCyZhDHvo99471422;     XGYQNolUASCyZhDHvo99471422 = XGYQNolUASCyZhDHvo55535822;     XGYQNolUASCyZhDHvo55535822 = XGYQNolUASCyZhDHvo98342108;     XGYQNolUASCyZhDHvo98342108 = XGYQNolUASCyZhDHvo25599199;     XGYQNolUASCyZhDHvo25599199 = XGYQNolUASCyZhDHvo61164260;     XGYQNolUASCyZhDHvo61164260 = XGYQNolUASCyZhDHvo63984199;     XGYQNolUASCyZhDHvo63984199 = XGYQNolUASCyZhDHvo94825720;     XGYQNolUASCyZhDHvo94825720 = XGYQNolUASCyZhDHvo45191949;     XGYQNolUASCyZhDHvo45191949 = XGYQNolUASCyZhDHvo29856134;     XGYQNolUASCyZhDHvo29856134 = XGYQNolUASCyZhDHvo98867609;     XGYQNolUASCyZhDHvo98867609 = XGYQNolUASCyZhDHvo96613238;     XGYQNolUASCyZhDHvo96613238 = XGYQNolUASCyZhDHvo81396157;     XGYQNolUASCyZhDHvo81396157 = XGYQNolUASCyZhDHvo32457215;     XGYQNolUASCyZhDHvo32457215 = XGYQNolUASCyZhDHvo51412453;     XGYQNolUASCyZhDHvo51412453 = XGYQNolUASCyZhDHvo32372517;     XGYQNolUASCyZhDHvo32372517 = XGYQNolUASCyZhDHvo58734644;     XGYQNolUASCyZhDHvo58734644 = XGYQNolUASCyZhDHvo64633619;     XGYQNolUASCyZhDHvo64633619 = XGYQNolUASCyZhDHvo91279640;     XGYQNolUASCyZhDHvo91279640 = XGYQNolUASCyZhDHvo11778767;     XGYQNolUASCyZhDHvo11778767 = XGYQNolUASCyZhDHvo34344793;     XGYQNolUASCyZhDHvo34344793 = XGYQNolUASCyZhDHvo27751868;     XGYQNolUASCyZhDHvo27751868 = XGYQNolUASCyZhDHvo84915625;     XGYQNolUASCyZhDHvo84915625 = XGYQNolUASCyZhDHvo37071042;     XGYQNolUASCyZhDHvo37071042 = XGYQNolUASCyZhDHvo69950336;     XGYQNolUASCyZhDHvo69950336 = XGYQNolUASCyZhDHvo17446667;     XGYQNolUASCyZhDHvo17446667 = XGYQNolUASCyZhDHvo30269180;     XGYQNolUASCyZhDHvo30269180 = XGYQNolUASCyZhDHvo74252723;     XGYQNolUASCyZhDHvo74252723 = XGYQNolUASCyZhDHvo82987049;     XGYQNolUASCyZhDHvo82987049 = XGYQNolUASCyZhDHvo45132449;     XGYQNolUASCyZhDHvo45132449 = XGYQNolUASCyZhDHvo77467301;     XGYQNolUASCyZhDHvo77467301 = XGYQNolUASCyZhDHvo49207460;     XGYQNolUASCyZhDHvo49207460 = XGYQNolUASCyZhDHvo31263353;     XGYQNolUASCyZhDHvo31263353 = XGYQNolUASCyZhDHvo64346000;     XGYQNolUASCyZhDHvo64346000 = XGYQNolUASCyZhDHvo66228358;     XGYQNolUASCyZhDHvo66228358 = XGYQNolUASCyZhDHvo4698309;     XGYQNolUASCyZhDHvo4698309 = XGYQNolUASCyZhDHvo89605416;     XGYQNolUASCyZhDHvo89605416 = XGYQNolUASCyZhDHvo83976639;     XGYQNolUASCyZhDHvo83976639 = XGYQNolUASCyZhDHvo4312669;     XGYQNolUASCyZhDHvo4312669 = XGYQNolUASCyZhDHvo43656438;     XGYQNolUASCyZhDHvo43656438 = XGYQNolUASCyZhDHvo70117206;     XGYQNolUASCyZhDHvo70117206 = XGYQNolUASCyZhDHvo71841033;     XGYQNolUASCyZhDHvo71841033 = XGYQNolUASCyZhDHvo92751479;     XGYQNolUASCyZhDHvo92751479 = XGYQNolUASCyZhDHvo71672494;     XGYQNolUASCyZhDHvo71672494 = XGYQNolUASCyZhDHvo38965495;     XGYQNolUASCyZhDHvo38965495 = XGYQNolUASCyZhDHvo77560812;     XGYQNolUASCyZhDHvo77560812 = XGYQNolUASCyZhDHvo15145249;     XGYQNolUASCyZhDHvo15145249 = XGYQNolUASCyZhDHvo83269154;     XGYQNolUASCyZhDHvo83269154 = XGYQNolUASCyZhDHvo64125937;     XGYQNolUASCyZhDHvo64125937 = XGYQNolUASCyZhDHvo9062188;     XGYQNolUASCyZhDHvo9062188 = XGYQNolUASCyZhDHvo7159811;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void pfOGfjiOlGUNbCsqzRcAVnXJXYgsTJMhEyCuFeY69573500() {     int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil29553399 = -7668782;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil99550495 = 55912895;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil46703540 = -120183774;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil47550510 = -928711127;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil48733101 = -151529855;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil25099800 = -482714294;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil86641541 = -957337074;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil74795105 = -463306745;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil2538706 = -858240468;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil50706255 = 83743387;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil94735009 = -697306438;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil82664664 = -528220705;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil29700753 = -366833464;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil84870871 = -81901203;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil37443340 = -88487706;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil70702911 = -502610238;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil59665889 = -738816509;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil69420136 = -867119344;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil95757507 = -888602429;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil50566908 = -126754413;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil35201755 = -810582836;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil31514502 = -172436381;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil56206040 = -53592286;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil7271433 = -59217109;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil79529290 = -836588099;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil1271732 = -848146938;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil23022344 = -71782513;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil36927825 = -33813021;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil81193254 = -719025792;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil88725833 = -228579735;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil15047858 = -668907320;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil17958572 = -743249322;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil77904996 = -116004624;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil89017716 = -634271637;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil98692025 = 37803400;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil32966084 = -245350137;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil48165098 = -154353976;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil21651851 = -785621483;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil14523163 = -951730439;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil86145926 = -376741678;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil15075755 = -423666138;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil99352135 = -881569611;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil60993202 = -816966794;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil55750611 = -382637704;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil25399918 = -195509151;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil94971597 = -485941388;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil36675118 = -437103653;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil66162139 = -228161860;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil10958063 = -73832560;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil99671462 = -572636583;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil85040012 = -542201074;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil58775422 = 30372474;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil58401877 = -592413949;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil48378383 = -552231244;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil34371746 = -654558875;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil98038896 = -835232402;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil43344456 = -890494820;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil39432108 = 39033335;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil68021219 = 7876971;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil47461369 = -303382917;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil2077456 = -310931781;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil49713717 = -823524053;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil93601851 = -744280954;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil13812873 = -529660734;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil35658398 = -247349294;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil76776437 = -954057117;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil4759669 = -312216081;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil40683036 = -732561828;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil86178845 = -19704603;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil4477256 = -843137570;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil22537814 = -248256262;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil38014039 = -953195027;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil54896974 = -915388905;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil9611581 = -411860752;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil35491153 = -703088276;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil35849619 = -929013225;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil70521300 = -355469587;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil455430 = -670954582;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil81871514 = -863707959;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil84557692 = -250646711;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil64596614 = -311043286;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil56860205 = -843620654;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil25969763 = -959980462;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil81521791 = -46389209;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil3685821 = -686378662;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil56272435 = -599279794;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil59556695 = -50835373;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil29526613 = -563773380;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil54645971 = -979712762;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil653129 = -126964198;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil89621628 = -354855317;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil8732990 = -93387312;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil53630631 = -693498455;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil67061794 = -548347523;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil84068471 = 34190103;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil65362038 = -600142086;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil5750285 = -37288658;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil47180329 = -187306061;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil20092213 = -35288411;    int uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil48623481 = -7668782;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil29553399 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil99550495;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil99550495 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil46703540;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil46703540 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil47550510;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil47550510 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil48733101;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil48733101 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil25099800;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil25099800 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil86641541;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil86641541 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil74795105;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil74795105 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil2538706;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil2538706 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil50706255;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil50706255 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil94735009;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil94735009 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil82664664;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil82664664 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil29700753;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil29700753 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil84870871;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil84870871 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil37443340;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil37443340 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil70702911;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil70702911 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil59665889;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil59665889 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil69420136;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil69420136 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil95757507;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil95757507 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil50566908;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil50566908 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil35201755;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil35201755 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil31514502;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil31514502 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil56206040;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil56206040 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil7271433;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil7271433 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil79529290;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil79529290 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil1271732;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil1271732 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil23022344;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil23022344 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil36927825;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil36927825 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil81193254;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil81193254 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil88725833;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil88725833 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil15047858;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil15047858 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil17958572;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil17958572 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil77904996;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil77904996 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil89017716;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil89017716 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil98692025;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil98692025 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil32966084;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil32966084 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil48165098;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil48165098 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil21651851;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil21651851 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil14523163;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil14523163 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil86145926;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil86145926 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil15075755;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil15075755 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil99352135;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil99352135 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil60993202;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil60993202 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil55750611;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil55750611 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil25399918;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil25399918 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil94971597;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil94971597 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil36675118;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil36675118 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil66162139;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil66162139 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil10958063;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil10958063 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil99671462;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil99671462 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil85040012;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil85040012 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil58775422;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil58775422 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil58401877;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil58401877 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil48378383;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil48378383 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil34371746;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil34371746 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil98038896;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil98038896 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil43344456;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil43344456 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil39432108;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil39432108 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil68021219;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil68021219 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil47461369;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil47461369 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil2077456;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil2077456 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil49713717;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil49713717 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil93601851;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil93601851 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil13812873;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil13812873 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil35658398;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil35658398 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil76776437;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil76776437 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil4759669;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil4759669 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil40683036;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil40683036 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil86178845;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil86178845 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil4477256;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil4477256 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil22537814;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil22537814 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil38014039;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil38014039 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil54896974;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil54896974 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil9611581;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil9611581 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil35491153;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil35491153 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil35849619;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil35849619 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil70521300;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil70521300 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil455430;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil455430 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil81871514;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil81871514 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil84557692;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil84557692 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil64596614;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil64596614 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil56860205;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil56860205 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil25969763;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil25969763 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil81521791;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil81521791 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil3685821;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil3685821 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil56272435;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil56272435 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil59556695;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil59556695 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil29526613;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil29526613 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil54645971;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil54645971 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil653129;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil653129 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil89621628;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil89621628 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil8732990;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil8732990 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil53630631;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil53630631 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil67061794;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil67061794 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil84068471;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil84068471 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil65362038;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil65362038 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil5750285;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil5750285 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil47180329;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil47180329 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil20092213;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil20092213 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil48623481;     uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil48623481 = uKRHpYHCHtBwaPqPCIFiHCpvctmIczykVshpEfil29553399;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void OnLPhjJxdfjQxZUJXSjrRZpSKpBqkjluSZgEql51802262() {     int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ81288849 = -123923615;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ15224479 = -20986861;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ95503900 = 82456842;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ22625912 = -744980269;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ25457033 = -959180509;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ49983154 = -641741520;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ60418385 = -780548670;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ93586583 = -587086299;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ53836782 = -649089179;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ19503379 = -457902596;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ90027707 = -659028909;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ93021042 = -463202205;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ16881547 = 23986275;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ43638590 = -808581750;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ91458597 = -666215416;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ82430183 = -214294194;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ15636415 = -6911199;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ55103059 = -229695839;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ55331357 = -316516613;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ70296482 = -937022562;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ80949108 = -893391004;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ33933956 = -345917388;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ57555554 = -761829733;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ99921682 = 69190940;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ50945149 = -782242535;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ58977146 = -93756717;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ61850978 = -534191231;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ35057050 = -417143707;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ55943327 = -768924694;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ58710916 = -690480531;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ52266666 = 98210214;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ30988302 = 32976487;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ75998305 = -698386510;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ83041429 = -294868803;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ96897153 = -179006243;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ14665695 = -481518965;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ97813323 = -798708720;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ22485463 = -869133847;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ84298005 = -297047834;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ11228343 = -995357344;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ83759841 = -542824926;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ59377536 = -870089233;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ17576434 = -717743326;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ48686430 = -308026382;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ97429126 = -796006234;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ96666044 = -909833329;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ22841312 = -899444106;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ45146604 = -632566555;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ99976514 = -37785289;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ88327722 = -431647963;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ25719904 = -250705230;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ90755174 = -431227086;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ81640623 = -336527137;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ18437624 = -167030556;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ70853154 = -684322076;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ47354894 = -778006227;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ57668924 = -259157128;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ95582217 = -986734098;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ71680763 = -962737734;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ66479887 = -765423792;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ88132175 = -7550290;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ25361335 = -263404963;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ37643256 = -818161606;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ95125865 = -958608648;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ67236713 = -456112810;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ59039406 = -592005396;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ17022737 = -764815696;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ33840118 = -681144923;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ46741436 = -529575507;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ76792903 = -84696451;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ84616859 = -415585474;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ93150951 = -137777352;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ70805053 = -932648005;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ44103014 = -321159269;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ86536640 = -294197637;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ21571572 = 76698229;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ16357522 = -628174063;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ8869125 = -353803352;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ2492557 = -134802827;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ54279104 = -872409207;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ36135834 = -194312611;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ16704375 = -901624676;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ35080535 = -279358419;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ67615605 = -237276731;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ32991013 = -339775302;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ61511491 = -470562700;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ49347679 = -630496377;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ57560681 = -431355954;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ12188275 = -610546727;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ49542260 = -401000016;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ56996770 = -122361838;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ2231107 = -811974623;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ50804700 = -906396114;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ17818118 = -531624043;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ23096168 = -887807055;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ58398506 = -179419963;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ21734280 = 48072373;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ22450569 = -759134678;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ81449716 = -851913572;    int dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ38389720 = -123923615;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ81288849 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ15224479;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ15224479 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ95503900;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ95503900 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ22625912;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ22625912 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ25457033;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ25457033 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ49983154;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ49983154 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ60418385;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ60418385 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ93586583;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ93586583 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ53836782;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ53836782 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ19503379;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ19503379 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ90027707;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ90027707 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ93021042;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ93021042 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ16881547;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ16881547 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ43638590;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ43638590 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ91458597;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ91458597 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ82430183;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ82430183 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ15636415;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ15636415 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ55103059;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ55103059 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ55331357;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ55331357 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ70296482;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ70296482 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ80949108;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ80949108 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ33933956;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ33933956 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ57555554;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ57555554 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ99921682;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ99921682 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ50945149;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ50945149 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ58977146;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ58977146 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ61850978;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ61850978 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ35057050;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ35057050 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ55943327;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ55943327 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ58710916;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ58710916 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ52266666;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ52266666 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ30988302;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ30988302 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ75998305;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ75998305 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ83041429;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ83041429 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ96897153;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ96897153 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ14665695;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ14665695 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ97813323;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ97813323 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ22485463;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ22485463 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ84298005;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ84298005 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ11228343;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ11228343 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ83759841;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ83759841 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ59377536;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ59377536 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ17576434;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ17576434 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ48686430;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ48686430 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ97429126;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ97429126 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ96666044;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ96666044 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ22841312;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ22841312 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ45146604;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ45146604 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ99976514;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ99976514 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ88327722;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ88327722 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ25719904;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ25719904 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ90755174;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ90755174 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ81640623;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ81640623 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ18437624;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ18437624 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ70853154;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ70853154 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ47354894;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ47354894 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ57668924;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ57668924 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ95582217;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ95582217 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ71680763;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ71680763 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ66479887;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ66479887 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ88132175;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ88132175 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ25361335;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ25361335 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ37643256;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ37643256 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ95125865;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ95125865 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ67236713;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ67236713 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ59039406;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ59039406 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ17022737;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ17022737 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ33840118;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ33840118 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ46741436;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ46741436 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ76792903;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ76792903 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ84616859;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ84616859 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ93150951;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ93150951 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ70805053;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ70805053 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ44103014;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ44103014 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ86536640;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ86536640 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ21571572;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ21571572 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ16357522;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ16357522 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ8869125;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ8869125 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ2492557;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ2492557 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ54279104;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ54279104 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ36135834;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ36135834 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ16704375;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ16704375 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ35080535;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ35080535 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ67615605;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ67615605 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ32991013;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ32991013 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ61511491;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ61511491 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ49347679;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ49347679 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ57560681;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ57560681 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ12188275;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ12188275 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ49542260;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ49542260 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ56996770;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ56996770 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ2231107;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ2231107 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ50804700;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ50804700 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ17818118;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ17818118 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ23096168;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ23096168 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ58398506;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ58398506 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ21734280;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ21734280 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ22450569;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ22450569 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ81449716;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ81449716 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ38389720;     dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ38389720 = dBKjiYSkhSpOOySMKpytFrhTMttoxYtPTloihiqQ81288849;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void UBaKPCKEhkjpzacJcmua81788492() {     int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI3682439 = -985803437;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI60999663 = 73065210;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI22959967 = -200068388;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI52552740 = -930846971;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI14791186 = 18117812;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI30060839 = -802917087;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI84026788 = -897999509;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI6392 = -253505626;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI68259749 = -819639148;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI14627450 = -563837058;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI7248963 = -696181238;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI34632315 = -978469136;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI52036813 = -573072571;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI32409122 = -991137455;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI83021765 = -330980277;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI52121549 = -263166085;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI9607007 = -464576449;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI38078942 = -284366908;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI76184718 = -933636471;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI76739002 = -577632565;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI2162791 = -74411939;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI19452909 = -340691819;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI23970481 = -478952483;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI82771361 = -613881395;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI58042706 = 22892193;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI30706064 = -629445013;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI38718817 = 9021989;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI5564975 = -696631173;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI50157441 = -467111498;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI91778226 = -935345024;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI63144792 = -696012704;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI3805636 = -227273107;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI71584552 = 74214211;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI42147279 = -742313920;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI90768480 = 16551259;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI13530374 = -717148595;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI79311668 = -432003294;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI6193885 = -741496640;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI97292539 = 14587550;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI59541165 = -422149687;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI24661545 = -958058694;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI62188266 = -434205842;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI62843266 = -46143655;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI88898650 = -748425587;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI81394340 = -131890310;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI64338358 = -180017753;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI7440917 = -996573737;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI14361698 = -880340190;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI75778030 = -423738126;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI65366045 = -986643336;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI21329751 = 72773500;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI50059174 = -479900620;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI84506678 = -116384359;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI68473898 = 89208486;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI79625701 = 31873087;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI84229529 = -545111619;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI37029182 = -447982307;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI40188606 = -586186994;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI94510033 = -853739164;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI84085121 = -352437176;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI91342021 = -711939076;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI78461813 = -101368337;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI49848950 = -786394129;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI76481523 = -884294124;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI51482658 = -867824354;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI3443327 = -368908132;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI63047762 = -952683347;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI9889534 = -830758651;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI41640642 = -907688715;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI69491391 = -613831682;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI72809880 = -831162792;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI3413123 = -723079809;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI40786402 = -198954458;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI16643553 = -411486784;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI52077457 = -619573871;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI39974525 = -640206097;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI56609642 = -194548164;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI35071831 = -730526897;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI1377021 = -381991085;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI93704347 = -797090054;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI23265147 = -632871276;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI24357120 = -110637822;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI29786945 = -172893047;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI84791396 = -480468163;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI70448475 = -908118525;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI13085618 = -116112084;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI19298958 = -10888748;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI3110655 = 85005725;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI62521578 = -674187007;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI6538951 = -438337122;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI76501192 = -169166289;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI39123063 = -845816300;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI11683851 = -887757476;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI13207418 = -632975274;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI68199143 = -710210612;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI46199732 = -756690357;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI12339316 = -647811713;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI86361742 = -161849531;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI37415993 = -880601233;    int BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI77951013 = -985803437;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI3682439 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI60999663;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI60999663 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI22959967;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI22959967 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI52552740;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI52552740 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI14791186;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI14791186 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI30060839;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI30060839 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI84026788;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI84026788 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI6392;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI6392 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI68259749;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI68259749 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI14627450;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI14627450 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI7248963;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI7248963 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI34632315;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI34632315 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI52036813;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI52036813 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI32409122;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI32409122 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI83021765;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI83021765 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI52121549;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI52121549 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI9607007;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI9607007 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI38078942;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI38078942 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI76184718;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI76184718 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI76739002;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI76739002 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI2162791;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI2162791 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI19452909;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI19452909 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI23970481;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI23970481 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI82771361;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI82771361 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI58042706;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI58042706 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI30706064;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI30706064 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI38718817;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI38718817 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI5564975;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI5564975 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI50157441;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI50157441 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI91778226;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI91778226 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI63144792;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI63144792 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI3805636;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI3805636 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI71584552;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI71584552 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI42147279;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI42147279 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI90768480;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI90768480 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI13530374;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI13530374 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI79311668;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI79311668 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI6193885;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI6193885 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI97292539;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI97292539 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI59541165;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI59541165 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI24661545;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI24661545 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI62188266;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI62188266 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI62843266;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI62843266 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI88898650;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI88898650 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI81394340;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI81394340 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI64338358;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI64338358 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI7440917;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI7440917 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI14361698;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI14361698 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI75778030;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI75778030 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI65366045;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI65366045 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI21329751;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI21329751 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI50059174;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI50059174 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI84506678;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI84506678 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI68473898;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI68473898 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI79625701;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI79625701 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI84229529;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI84229529 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI37029182;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI37029182 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI40188606;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI40188606 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI94510033;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI94510033 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI84085121;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI84085121 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI91342021;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI91342021 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI78461813;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI78461813 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI49848950;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI49848950 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI76481523;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI76481523 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI51482658;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI51482658 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI3443327;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI3443327 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI63047762;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI63047762 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI9889534;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI9889534 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI41640642;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI41640642 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI69491391;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI69491391 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI72809880;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI72809880 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI3413123;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI3413123 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI40786402;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI40786402 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI16643553;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI16643553 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI52077457;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI52077457 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI39974525;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI39974525 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI56609642;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI56609642 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI35071831;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI35071831 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI1377021;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI1377021 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI93704347;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI93704347 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI23265147;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI23265147 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI24357120;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI24357120 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI29786945;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI29786945 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI84791396;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI84791396 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI70448475;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI70448475 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI13085618;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI13085618 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI19298958;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI19298958 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI3110655;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI3110655 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI62521578;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI62521578 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI6538951;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI6538951 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI76501192;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI76501192 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI39123063;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI39123063 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI11683851;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI11683851 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI13207418;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI13207418 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI68199143;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI68199143 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI46199732;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI46199732 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI12339316;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI12339316 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI86361742;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI86361742 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI37415993;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI37415993 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI77951013;     BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI77951013 = BAEUuGxuYSrcqfwpDSVnApAmSqLAIMWVuFBUwGPI3682439;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void SJGmHrJFBpryhxLfDsbs64017253() {     int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG55417888 = -2058270;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG76673645 = -3834546;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG71760326 = 2572227;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG27628142 = -747116113;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG91515118 = -789532842;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG54944193 = -961944313;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG57803631 = -721211105;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG18797870 = -377285181;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG19557826 = -610487859;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG83424573 = -5483040;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG2541662 = -657903710;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG44988692 = -913450636;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG39217607 = -182252832;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG91176840 = -617818002;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG37037023 = -908707987;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG63848821 = 25149959;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG65577531 = -832671139;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG23761864 = -746943402;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG35758567 = -361550654;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG96468576 = -287900713;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG47910144 = -157220107;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG21872362 = -514172826;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG25319996 = -87189931;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG75421611 = -485473346;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG29458565 = 77237756;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG88411477 = -975054792;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG77547452 = -453386729;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG3694200 = 20038141;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG24907515 = -517010400;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG61763310 = -297245820;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG363601 = 71104830;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG16835366 = -551047298;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG69677862 = -508167675;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG36170992 = -402911086;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG88973608 = -200258384;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG95229983 = -953317424;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG28959895 = 23641962;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG7027497 = -825009005;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG67067382 = -430729845;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG84623581 = 59234646;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG93345631 = 22782519;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG22213667 = -422725463;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG19426498 = 53079813;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG81834469 = -673814265;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG53423548 = -732387393;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG66032805 = -603909694;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG93607111 = -358914191;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG93346161 = -184744885;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG64796483 = -387690855;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG54022304 = -845654716;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG62009643 = -735730656;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG82038927 = -941500180;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG7745424 = -960497547;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG38533139 = -625590826;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG16107110 = 2109886;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG33545527 = -487885444;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG51353650 = -916644615;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG96338714 = -511954427;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG98169576 = -724353870;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG3103641 = -814478051;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG77396741 = -408557585;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG54109431 = -641249247;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG93890355 = -860274781;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG57794516 = -213242039;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG83060973 = 23412130;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG85706295 = -6856412;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG75310830 = -305282962;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG3046616 = -779341746;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG2203233 = -317559619;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG41807039 = -955390564;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG34888926 = -998492004;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG58550035 = 92337865;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG56694482 = -216213558;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG51134986 = -320785301;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG3122945 = -210683233;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG25696477 = -734494644;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG2445864 = -467252640;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG43485526 = -413375667;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG21998063 = -753085953;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG63425759 = -318852550;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG94804366 = -516140602;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG84201290 = -168641844;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG38897717 = -592271004;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG70885210 = -671355685;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG99753666 = -561515165;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG18324674 = 12605010;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG9089942 = -590549752;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG31144723 = -882576849;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG20063882 = -305020972;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG55428082 = -712372940;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG43876334 = 63327191;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG32621180 = -464403611;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG8857920 = -655135;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG63963742 = -616251794;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG7226841 = -532207770;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG39236201 = -335968235;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG28323311 = -562450683;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG61631982 = -733678149;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG98773496 = -597226395;    int sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG67717253 = -2058270;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG55417888 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG76673645;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG76673645 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG71760326;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG71760326 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG27628142;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG27628142 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG91515118;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG91515118 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG54944193;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG54944193 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG57803631;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG57803631 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG18797870;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG18797870 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG19557826;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG19557826 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG83424573;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG83424573 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG2541662;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG2541662 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG44988692;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG44988692 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG39217607;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG39217607 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG91176840;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG91176840 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG37037023;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG37037023 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG63848821;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG63848821 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG65577531;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG65577531 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG23761864;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG23761864 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG35758567;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG35758567 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG96468576;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG96468576 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG47910144;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG47910144 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG21872362;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG21872362 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG25319996;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG25319996 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG75421611;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG75421611 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG29458565;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG29458565 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG88411477;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG88411477 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG77547452;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG77547452 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG3694200;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG3694200 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG24907515;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG24907515 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG61763310;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG61763310 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG363601;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG363601 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG16835366;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG16835366 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG69677862;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG69677862 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG36170992;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG36170992 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG88973608;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG88973608 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG95229983;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG95229983 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG28959895;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG28959895 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG7027497;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG7027497 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG67067382;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG67067382 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG84623581;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG84623581 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG93345631;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG93345631 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG22213667;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG22213667 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG19426498;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG19426498 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG81834469;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG81834469 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG53423548;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG53423548 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG66032805;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG66032805 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG93607111;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG93607111 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG93346161;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG93346161 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG64796483;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG64796483 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG54022304;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG54022304 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG62009643;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG62009643 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG82038927;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG82038927 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG7745424;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG7745424 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG38533139;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG38533139 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG16107110;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG16107110 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG33545527;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG33545527 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG51353650;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG51353650 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG96338714;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG96338714 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG98169576;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG98169576 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG3103641;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG3103641 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG77396741;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG77396741 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG54109431;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG54109431 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG93890355;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG93890355 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG57794516;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG57794516 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG83060973;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG83060973 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG85706295;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG85706295 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG75310830;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG75310830 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG3046616;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG3046616 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG2203233;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG2203233 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG41807039;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG41807039 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG34888926;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG34888926 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG58550035;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG58550035 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG56694482;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG56694482 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG51134986;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG51134986 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG3122945;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG3122945 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG25696477;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG25696477 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG2445864;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG2445864 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG43485526;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG43485526 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG21998063;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG21998063 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG63425759;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG63425759 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG94804366;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG94804366 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG84201290;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG84201290 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG38897717;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG38897717 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG70885210;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG70885210 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG99753666;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG99753666 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG18324674;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG18324674 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG9089942;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG9089942 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG31144723;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG31144723 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG20063882;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG20063882 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG55428082;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG55428082 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG43876334;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG43876334 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG32621180;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG32621180 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG8857920;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG8857920 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG63963742;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG63963742 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG7226841;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG7226841 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG39236201;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG39236201 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG28323311;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG28323311 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG61631982;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG61631982 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG98773496;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG98773496 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG67717253;     sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG67717253 = sahFbAdULnXcFqepqWkkjokMqNOXbwvYwzgsbAKG55417888;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void pHAnLCjBBpkmrdmGdkHu94003483() {     int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE77811477 = -863938091;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE22448830 = 90217525;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE99216392 = -279953003;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE57554969 = -932982815;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE80849270 = -912234522;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE35021878 = -23119879;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE81412034 = -838661945;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE25217678 = -43704508;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE33980793 = -781037828;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE78548645 = -111417502;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE19762916 = -695056038;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE86599964 = -328717567;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE74372873 = -779311677;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE79947372 = -800373707;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE28600191 = -573472848;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE33540186 = -23721933;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE59548124 = -190336389;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE6737748 = -801614471;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE56611928 = -978670513;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE2911097 = 71489284;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE69123826 = -438241041;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE7391315 = -508947256;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE91734922 = -904312681;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE58271290 = -68545681;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE36556122 = -217627515;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE60140395 = -410743087;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE54415291 = 89826491;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE74202125 = -259449324;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE19121629 = -215197204;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE94830619 = -542110313;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE11241728 = -723118088;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE89652699 = -811296891;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE65264109 = -835566954;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE95276841 = -850356204;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE82844935 = -4700882;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE94094663 = -88947054;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE10458240 = -709652611;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE90735917 = -697371798;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE80061917 = -119094461;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE32936403 = -467557697;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE34247335 = -392451249;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE25024397 = 13157928;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE64693330 = -375320517;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE22046691 = -14213470;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE37388763 = -68271469;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE33705119 = -974094118;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE78206716 = -456043821;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE62561255 = -432518520;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE40597999 = -773643692;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE31060627 = -300650089;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE57619490 = -412251925;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE41342927 = -990173714;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE10611479 = -740354769;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE88569413 = -369351784;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE24879657 = -381694952;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE70420163 = -254990835;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE30713908 = -5469795;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE40945103 = -111407323;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE20998848 = -615355300;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE20708875 = -401491435;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE80606586 = -12946371;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE7209910 = -479212621;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE6096050 = -828507304;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE39150174 = -138927515;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE67306917 = -388299415;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE30110217 = -883759148;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE21335855 = -493150614;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE79096031 = -928955474;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE97102437 = -695672826;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE34505528 = -384525794;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE23081947 = -314069323;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE68812206 = -492964592;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE26675831 = -582520011;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE23675525 = -411112816;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE68663761 = -536059467;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE44099430 = -351398970;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE42697984 = -33626740;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE69688231 = -790099211;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE20882528 = 99725788;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE2851003 = -243533397;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE81933679 = -954699267;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE91854035 = -477654989;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE33604126 = -485805632;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE88061001 = -914547116;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE37211130 = -29858388;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE69898800 = -732944374;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE79041220 = 29057877;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE76694696 = -366215171;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE70397184 = -368661252;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE12424772 = -749710047;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE63380756 = 16522740;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE69513136 = -498245288;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE69737070 = 17983502;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE59353042 = -717603026;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE52329816 = -354611327;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE27037426 = -913238628;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE18928347 = -158334769;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE25543157 = -136393002;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE54739773 = -625914056;    int rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE7278547 = -863938091;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE77811477 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE22448830;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE22448830 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE99216392;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE99216392 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE57554969;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE57554969 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE80849270;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE80849270 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE35021878;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE35021878 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE81412034;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE81412034 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE25217678;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE25217678 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE33980793;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE33980793 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE78548645;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE78548645 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE19762916;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE19762916 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE86599964;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE86599964 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE74372873;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE74372873 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE79947372;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE79947372 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE28600191;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE28600191 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE33540186;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE33540186 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE59548124;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE59548124 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE6737748;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE6737748 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE56611928;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE56611928 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE2911097;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE2911097 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE69123826;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE69123826 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE7391315;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE7391315 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE91734922;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE91734922 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE58271290;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE58271290 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE36556122;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE36556122 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE60140395;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE60140395 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE54415291;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE54415291 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE74202125;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE74202125 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE19121629;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE19121629 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE94830619;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE94830619 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE11241728;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE11241728 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE89652699;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE89652699 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE65264109;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE65264109 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE95276841;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE95276841 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE82844935;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE82844935 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE94094663;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE94094663 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE10458240;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE10458240 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE90735917;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE90735917 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE80061917;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE80061917 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE32936403;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE32936403 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE34247335;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE34247335 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE25024397;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE25024397 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE64693330;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE64693330 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE22046691;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE22046691 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE37388763;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE37388763 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE33705119;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE33705119 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE78206716;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE78206716 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE62561255;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE62561255 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE40597999;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE40597999 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE31060627;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE31060627 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE57619490;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE57619490 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE41342927;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE41342927 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE10611479;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE10611479 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE88569413;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE88569413 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE24879657;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE24879657 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE70420163;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE70420163 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE30713908;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE30713908 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE40945103;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE40945103 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE20998848;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE20998848 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE20708875;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE20708875 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE80606586;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE80606586 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE7209910;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE7209910 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE6096050;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE6096050 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE39150174;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE39150174 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE67306917;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE67306917 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE30110217;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE30110217 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE21335855;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE21335855 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE79096031;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE79096031 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE97102437;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE97102437 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE34505528;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE34505528 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE23081947;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE23081947 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE68812206;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE68812206 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE26675831;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE26675831 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE23675525;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE23675525 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE68663761;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE68663761 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE44099430;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE44099430 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE42697984;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE42697984 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE69688231;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE69688231 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE20882528;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE20882528 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE2851003;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE2851003 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE81933679;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE81933679 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE91854035;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE91854035 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE33604126;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE33604126 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE88061001;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE88061001 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE37211130;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE37211130 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE69898800;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE69898800 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE79041220;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE79041220 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE76694696;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE76694696 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE70397184;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE70397184 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE12424772;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE12424772 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE63380756;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE63380756 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE69513136;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE69513136 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE69737070;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE69737070 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE59353042;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE59353042 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE52329816;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE52329816 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE27037426;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE27037426 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE18928347;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE18928347 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE25543157;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE25543157 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE54739773;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE54739773 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE7278547;     rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE7278547 = rZNJPHCFPBsUeqcUOqtSVLWTxdjkwxrnBLPQurXE77811477;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void fltkMzzpshgoreUQPdOO95750719() {     int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg39144642 = -965818266;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg4985583 = -886188834;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg9689838 = -437171157;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg32236164 = -291727627;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg66656403 = -953303373;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg48880994 = -115548576;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg10410527 = -340457010;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg27530928 = -45651108;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg28407273 = -901147520;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg31210405 = -960120620;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg35270395 = -518452931;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg28054624 = -974850726;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg74345001 = -564255838;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg8627875 = -794924339;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg18630227 = -853048866;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg48380576 = -282579867;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg37516563 = 18256283;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg76338867 = -709259165;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg16520913 = -941208759;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg34539339 = -698181405;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg75414941 = -976453440;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg33726300 = -722332171;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg76056662 = -437105747;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg54739252 = -84245738;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg1839313 = -337746079;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg83117196 = -363918855;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg14028601 = -746862295;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg28591638 = -561919853;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg90486432 = -168171143;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg9266702 = -32136508;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg65021684 = 45553427;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg49266725 = -904333640;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg41076352 = -522409658;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg71754287 = -318666867;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg15397915 = -904892029;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg43677123 = -341831028;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg72752801 = -796872645;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg22450448 = -726520882;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg10026303 = -929948018;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg37876251 = -632696390;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg64185319 = -133285659;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg58704562 = 68144908;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg72084964 = -419759314;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg49414040 = -474275775;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg39401773 = -271771771;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg90085702 = -862919050;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg12937185 = -139919786;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg44396219 = -192486105;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg39341502 = -855593075;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg79872922 = -584157708;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg95470789 = -12225553;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg26271018 = 47519908;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg65403652 = -476402909;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg79340609 = -386340088;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg20335778 = -436167420;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg5418342 = -143486096;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg28928921 = -349083088;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg54950585 = -252925419;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg30396852 = -953981549;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg83539206 = -489384518;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg34852394 = -368686281;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg81818888 = -778537158;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg37044495 = -877479966;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg19140571 = -769011013;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg66188721 = -905674047;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg86003669 = -614119292;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg86978272 = -352441068;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg2590715 = -145588971;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg93229960 = -890032310;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg74953104 = -411217839;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg75627774 = -485707223;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg15066115 = -255222835;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg66312564 = -779311148;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg78644662 = -208512369;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg70354020 = -464895747;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg16710379 = -944598349;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg61641336 = -202572857;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg26642623 = -962829972;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg15337480 = -812473968;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg11753610 = -474827029;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg70180012 = -123999069;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg69632382 = -454376191;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg89250135 = -706326778;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg10613510 = -584013435;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg13795913 = 80089045;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg38750667 = 98033518;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg83863072 = -327930732;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg61735742 = -36069571;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg51418510 = -882499448;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg9979573 = -661405934;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg14748203 = -992747941;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg17802216 = -443947226;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg92053596 = -772539334;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg26487097 = -340563500;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg3023857 = -164010110;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg82366430 = -354748502;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg21660068 = -54375126;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg52944394 = -650748302;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg83225319 = -568601729;    int woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg53398104 = -965818266;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg39144642 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg4985583;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg4985583 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg9689838;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg9689838 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg32236164;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg32236164 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg66656403;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg66656403 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg48880994;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg48880994 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg10410527;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg10410527 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg27530928;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg27530928 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg28407273;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg28407273 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg31210405;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg31210405 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg35270395;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg35270395 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg28054624;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg28054624 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg74345001;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg74345001 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg8627875;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg8627875 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg18630227;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg18630227 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg48380576;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg48380576 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg37516563;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg37516563 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg76338867;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg76338867 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg16520913;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg16520913 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg34539339;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg34539339 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg75414941;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg75414941 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg33726300;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg33726300 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg76056662;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg76056662 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg54739252;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg54739252 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg1839313;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg1839313 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg83117196;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg83117196 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg14028601;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg14028601 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg28591638;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg28591638 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg90486432;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg90486432 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg9266702;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg9266702 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg65021684;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg65021684 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg49266725;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg49266725 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg41076352;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg41076352 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg71754287;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg71754287 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg15397915;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg15397915 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg43677123;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg43677123 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg72752801;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg72752801 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg22450448;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg22450448 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg10026303;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg10026303 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg37876251;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg37876251 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg64185319;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg64185319 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg58704562;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg58704562 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg72084964;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg72084964 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg49414040;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg49414040 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg39401773;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg39401773 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg90085702;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg90085702 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg12937185;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg12937185 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg44396219;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg44396219 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg39341502;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg39341502 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg79872922;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg79872922 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg95470789;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg95470789 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg26271018;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg26271018 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg65403652;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg65403652 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg79340609;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg79340609 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg20335778;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg20335778 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg5418342;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg5418342 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg28928921;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg28928921 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg54950585;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg54950585 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg30396852;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg30396852 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg83539206;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg83539206 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg34852394;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg34852394 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg81818888;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg81818888 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg37044495;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg37044495 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg19140571;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg19140571 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg66188721;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg66188721 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg86003669;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg86003669 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg86978272;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg86978272 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg2590715;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg2590715 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg93229960;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg93229960 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg74953104;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg74953104 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg75627774;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg75627774 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg15066115;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg15066115 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg66312564;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg66312564 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg78644662;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg78644662 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg70354020;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg70354020 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg16710379;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg16710379 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg61641336;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg61641336 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg26642623;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg26642623 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg15337480;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg15337480 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg11753610;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg11753610 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg70180012;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg70180012 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg69632382;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg69632382 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg89250135;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg89250135 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg10613510;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg10613510 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg13795913;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg13795913 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg38750667;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg38750667 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg83863072;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg83863072 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg61735742;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg61735742 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg51418510;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg51418510 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg9979573;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg9979573 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg14748203;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg14748203 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg17802216;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg17802216 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg92053596;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg92053596 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg26487097;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg26487097 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg3023857;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg3023857 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg82366430;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg82366430 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg21660068;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg21660068 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg52944394;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg52944394 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg83225319;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg83225319 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg53398104;     woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg53398104 = woLRpfAvAuaZDVEzzGrdjnJoKIzbPPbcUcUqabvg39144642;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void dRVXbSpfImueGdgSOyFr25736949() {     int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ61538231 = -727698088;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ50760767 = -792136764;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ37145904 = -719696387;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ62162992 = -477594328;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ55990555 = 23994947;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ28958679 = -276724142;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ34018929 = -457907849;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ33950736 = -812070435;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ42830240 = 28302511;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ26334477 = 33944918;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ52491649 = -555605260;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ69665896 = -390117657;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ9500268 = -61314684;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ97398406 = -977480044;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ10193395 = -517813727;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ18071941 = -331451759;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ31487155 = -439408967;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ59314751 = -763930234;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ37374274 = -458328618;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ40981859 = -338791407;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ96628624 = -157474375;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ19245253 = -717106601;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ42471589 = -154228497;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ37588931 = -767318073;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ8936870 = -632611350;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ54846114 = -899607151;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ90896439 = -203649075;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ99099562 = -841407318;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ84700546 = -966357947;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ42334012 = -277001001;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ75899811 = -748669491;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ22084059 = -64583233;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ36662599 = -849808937;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ30860137 = -766111985;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ9269242 = -709334527;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ42541802 = -577460658;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ54251146 = -430167218;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ6158870 = -598883675;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ23020838 = -618312634;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ86189072 = -59488734;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ5087022 = -548519426;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ61515293 = -595971700;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ17351797 = -848159644;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ89626260 = -914674981;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ23366987 = -707655847;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ57758016 = -133103475;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ97536788 = -237049417;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ13611313 = -440259740;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ15143018 = -141545912;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ56911245 = -39153081;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ91080636 = -788746823;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ85575017 = -1153626;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ68269707 = -256260131;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ29376884 = -130101046;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ29108325 = -819972258;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ42292978 = 89408513;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ8289178 = -537908268;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ99556972 = -952378315;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ53226122 = -844982979;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ1144442 = -76397903;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ38062240 = 26924932;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ34919367 = -616500532;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ49250189 = -845712489;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ496228 = -694696489;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ50434665 = -217385592;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ30407590 = -391022027;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ33003297 = -540308720;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ78640131 = -295202699;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ88129165 = -168145518;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ67651593 = -940353069;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ63820795 = -901284541;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ25328286 = -840525293;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ36293913 = -45617601;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ51185201 = -298839885;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ35894837 = -790271981;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ35113332 = -561502675;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ1893457 = -868946958;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ52845328 = -239553516;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ14221944 = 40337774;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ51178853 = -399507876;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ57309325 = -562557734;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ77285127 = -763389336;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ83956545 = -599861406;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ27789302 = -827204867;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ51253375 = -488254178;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ90324793 = -647515865;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ53814351 = -808323103;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ7285716 = -619707892;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ1751813 = -946139728;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ66976263 = -698743040;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ34252625 = 60447609;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ54694173 = -477788904;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ52932747 = -753900696;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ21876397 = -441914732;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ48126833 = 13586333;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ70167655 = -932018895;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ12265104 = -750259212;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ16855569 = -53463155;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ39191595 = -597289390;    int WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ92959397 = -727698088;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ61538231 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ50760767;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ50760767 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ37145904;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ37145904 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ62162992;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ62162992 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ55990555;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ55990555 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ28958679;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ28958679 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ34018929;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ34018929 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ33950736;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ33950736 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ42830240;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ42830240 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ26334477;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ26334477 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ52491649;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ52491649 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ69665896;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ69665896 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ9500268;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ9500268 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ97398406;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ97398406 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ10193395;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ10193395 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ18071941;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ18071941 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ31487155;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ31487155 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ59314751;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ59314751 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ37374274;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ37374274 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ40981859;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ40981859 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ96628624;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ96628624 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ19245253;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ19245253 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ42471589;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ42471589 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ37588931;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ37588931 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ8936870;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ8936870 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ54846114;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ54846114 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ90896439;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ90896439 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ99099562;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ99099562 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ84700546;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ84700546 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ42334012;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ42334012 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ75899811;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ75899811 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ22084059;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ22084059 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ36662599;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ36662599 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ30860137;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ30860137 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ9269242;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ9269242 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ42541802;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ42541802 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ54251146;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ54251146 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ6158870;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ6158870 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ23020838;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ23020838 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ86189072;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ86189072 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ5087022;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ5087022 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ61515293;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ61515293 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ17351797;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ17351797 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ89626260;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ89626260 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ23366987;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ23366987 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ57758016;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ57758016 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ97536788;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ97536788 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ13611313;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ13611313 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ15143018;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ15143018 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ56911245;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ56911245 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ91080636;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ91080636 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ85575017;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ85575017 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ68269707;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ68269707 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ29376884;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ29376884 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ29108325;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ29108325 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ42292978;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ42292978 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ8289178;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ8289178 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ99556972;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ99556972 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ53226122;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ53226122 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ1144442;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ1144442 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ38062240;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ38062240 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ34919367;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ34919367 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ49250189;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ49250189 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ496228;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ496228 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ50434665;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ50434665 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ30407590;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ30407590 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ33003297;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ33003297 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ78640131;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ78640131 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ88129165;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ88129165 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ67651593;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ67651593 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ63820795;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ63820795 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ25328286;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ25328286 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ36293913;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ36293913 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ51185201;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ51185201 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ35894837;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ35894837 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ35113332;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ35113332 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ1893457;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ1893457 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ52845328;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ52845328 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ14221944;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ14221944 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ51178853;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ51178853 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ57309325;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ57309325 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ77285127;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ77285127 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ83956545;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ83956545 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ27789302;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ27789302 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ51253375;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ51253375 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ90324793;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ90324793 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ53814351;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ53814351 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ7285716;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ7285716 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ1751813;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ1751813 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ66976263;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ66976263 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ34252625;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ34252625 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ54694173;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ54694173 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ52932747;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ52932747 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ21876397;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ21876397 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ48126833;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ48126833 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ70167655;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ70167655 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ12265104;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ12265104 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ16855569;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ16855569 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ39191595;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ39191595 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ92959397;     WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ92959397 = WZcPuCzWEhfKTyrSsFzFDjiEuPrArFmFpTBDpGdZ61538231;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void sleabHsTscNNNodqnJKk7965711() {     long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS13273682 = -843952920;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS66434750 = -869036519;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS85946263 = -517055771;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS37238394 = -293863471;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS32714488 = -783655707;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS53842033 = -435751369;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS7795773 = -281119445;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS52742214 = -935849990;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS94128316 = -862546200;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS95131600 = -507701064;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS47784348 = -517327732;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS80022274 = -325099157;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS96681061 = -770494945;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS56166125 = -604160591;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS64208653 = 4458563;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS29799213 = -43135715;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS87457679 = -807503657;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS44997673 = -126506729;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS96948123 = -986242801;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS60711433 = -49059556;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS42375977 = -240282543;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS21664707 = -890587609;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS43821104 = -862465944;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS30239182 = -638910024;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS80352728 = -578265787;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS12551529 = -145216930;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS29725074 = -666057793;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS97228787 = -124738004;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS59450619 = 83743151;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS12319095 = -738901797;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS13118620 = 18448043;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS35113789 = -388357425;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS34755909 = -332190823;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS24883850 = -426709151;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS7474370 = -926144170;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS24241413 = -813629487;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS3899372 = 25478038;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS6992482 = -682396039;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS92795680 = 36369971;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS11271489 = -678104400;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS73771109 = -667678214;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS21540693 = -584491322;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS73935028 = -748936175;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS82562079 = -840063658;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS95396195 = -208152930;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS59452463 = -556995415;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS83702983 = -699389871;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS92595776 = -844664435;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS4161471 = -105498641;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS45567505 = -998164461;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS31760529 = -497250979;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS17554771 = -462753186;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS91508453 = -373319;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS99436124 = -844900358;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS65589733 = -849735459;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS91608975 = -953365312;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS22613646 = 93429424;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS55707082 = -878145748;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS56885665 = -715597685;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS20162960 = -538438777;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS24116960 = -769693576;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS10566985 = -56381442;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS93291594 = -919593141;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS81809221 = -23644404;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS82012980 = -426149107;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS12670559 = -28970307;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS45266365 = -992908334;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS71797212 = -243785795;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS48691756 = -678016422;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS39967240 = -181911951;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS25899842 = 31386247;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS80465198 = -25107618;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS52201993 = -62876701;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS85676634 = -208138401;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS86940324 = -381381342;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS20835285 = -655791222;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS47729678 = -41651434;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS61259024 = 77597714;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS34842986 = -330757094;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS20900265 = 78729628;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS28848545 = -445827060;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS37129297 = -821393358;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS93067317 = 80760637;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS13883115 = 81907611;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS80558566 = -141650818;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS95563849 = -518798771;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS43605335 = -287984107;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS35319784 = -487290466;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS59294116 = -576973693;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS15865395 = -972778858;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS1627767 = -807058912;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS48192290 = -96376214;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS50106816 = -966798355;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS72632720 = -425191252;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS87154529 = -908410824;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS63204124 = -511296773;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS28249099 = -664898182;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS92125807 = -625291772;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS549099 = -313914552;    long qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS82725636 = -843952920;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS13273682 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS66434750;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS66434750 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS85946263;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS85946263 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS37238394;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS37238394 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS32714488;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS32714488 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS53842033;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS53842033 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS7795773;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS7795773 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS52742214;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS52742214 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS94128316;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS94128316 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS95131600;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS95131600 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS47784348;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS47784348 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS80022274;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS80022274 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS96681061;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS96681061 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS56166125;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS56166125 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS64208653;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS64208653 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS29799213;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS29799213 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS87457679;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS87457679 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS44997673;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS44997673 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS96948123;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS96948123 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS60711433;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS60711433 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS42375977;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS42375977 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS21664707;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS21664707 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS43821104;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS43821104 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS30239182;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS30239182 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS80352728;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS80352728 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS12551529;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS12551529 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS29725074;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS29725074 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS97228787;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS97228787 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS59450619;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS59450619 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS12319095;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS12319095 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS13118620;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS13118620 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS35113789;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS35113789 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS34755909;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS34755909 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS24883850;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS24883850 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS7474370;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS7474370 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS24241413;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS24241413 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS3899372;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS3899372 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS6992482;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS6992482 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS92795680;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS92795680 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS11271489;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS11271489 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS73771109;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS73771109 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS21540693;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS21540693 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS73935028;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS73935028 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS82562079;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS82562079 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS95396195;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS95396195 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS59452463;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS59452463 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS83702983;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS83702983 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS92595776;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS92595776 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS4161471;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS4161471 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS45567505;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS45567505 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS31760529;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS31760529 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS17554771;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS17554771 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS91508453;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS91508453 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS99436124;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS99436124 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS65589733;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS65589733 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS91608975;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS91608975 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS22613646;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS22613646 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS55707082;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS55707082 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS56885665;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS56885665 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS20162960;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS20162960 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS24116960;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS24116960 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS10566985;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS10566985 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS93291594;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS93291594 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS81809221;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS81809221 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS82012980;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS82012980 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS12670559;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS12670559 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS45266365;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS45266365 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS71797212;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS71797212 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS48691756;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS48691756 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS39967240;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS39967240 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS25899842;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS25899842 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS80465198;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS80465198 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS52201993;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS52201993 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS85676634;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS85676634 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS86940324;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS86940324 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS20835285;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS20835285 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS47729678;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS47729678 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS61259024;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS61259024 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS34842986;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS34842986 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS20900265;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS20900265 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS28848545;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS28848545 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS37129297;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS37129297 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS93067317;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS93067317 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS13883115;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS13883115 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS80558566;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS80558566 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS95563849;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS95563849 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS43605335;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS43605335 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS35319784;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS35319784 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS59294116;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS59294116 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS15865395;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS15865395 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS1627767;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS1627767 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS48192290;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS48192290 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS50106816;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS50106816 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS72632720;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS72632720 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS87154529;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS87154529 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS63204124;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS63204124 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS28249099;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS28249099 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS92125807;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS92125807 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS549099;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS549099 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS82725636;     qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS82725636 = qKrrfIySkKbVsamPFWyrOHkzKNQRGJcIvBWhtnuS13273682;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void MKguGfKuXdttVolqoPjP25414580() {     long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn43800658 = -60214814;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn17340123 = -355104867;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn95094180 = -8273617;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn7401141 = -67694830;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn38898049 = 41350218;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn54354033 = -319841209;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn89374396 = -991215566;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn89402518 = -70175012;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn45496642 = -744589373;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn14682513 = -504720172;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn8801538 = -603941486;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn87246418 = -677405224;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn80199087 = -637381524;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn13133251 = -870739654;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn87561273 = -769492285;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn44506975 = -654540519;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn23385136 = 49560097;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn63185321 = -948555727;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn37634446 = -522524740;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn84155453 = -340541438;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn89671973 = 33080002;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn40404823 = 63721692;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn3306895 = -84109707;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn95255093 = -363056424;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn15481256 = -328986067;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn95214624 = -940576158;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn23463130 = -126506646;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn72989756 = -967729966;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn77214498 = -661898440;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn9679644 = -404036632;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn8374044 = -956545791;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn84077371 = -667874728;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn37369123 = -203441218;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn66339470 = -304617244;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn79312562 = 42073193;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn20296618 = -294885188;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn69471947 = -897385921;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn67948267 = -601634233;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn1967553 = -858726266;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn68894422 = -663647068;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn23180803 = -498849842;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn98954805 = -490939158;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn73014307 = -670482069;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn18600465 = -58714330;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn28381323 = -560974518;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn35312313 = -153697497;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn72486448 = -596657015;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn23977633 = -292948138;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn52019671 = -589382299;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn69703229 = -927420781;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn17269487 = -874802304;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn62016353 = -97009638;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn53269568 = 31695136;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn84193799 = -424246610;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn35742607 = -892851282;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn3395835 = -23936507;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn14033229 = -170995160;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn99839086 = -645217193;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn91919884 = -738708764;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn43683424 = -18073625;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn30890904 = -93334564;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn16384640 = 76514400;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn12188021 = -408276572;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn35816999 = -240552741;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn6308469 = -548174382;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn24724167 = -936066758;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn49877296 = -373964006;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn13859618 = -232764281;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn33820689 = -812812847;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn67264656 = -374607097;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn75035027 = -757154599;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn55436869 = -348805670;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn61217768 = 10170538;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn68740024 = -858877673;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn60974651 = -841691597;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn90717167 = -475980841;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn67390515 = -265796240;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn84706430 = 74604623;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn66873771 = -802081906;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn80168943 = -75288571;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn22728177 = -243919144;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn99485496 = -833558508;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn20970086 = -278347668;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn7511269 = -734477659;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn92410156 = -529234329;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn46357690 = -759536153;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn30807803 = -599569864;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn53175324 = -779194609;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn30596864 = -411765962;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn75916727 = -933990301;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn6263390 = -23890028;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn69632860 = -152168728;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn76028382 = -862925470;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn58284129 = -740652642;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn38003518 = -470312505;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn6796164 = -475364243;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn86766785 = 17337414;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn37197309 = -329929328;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn12291996 = -510539949;    long nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn3657157 = -60214814;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn43800658 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn17340123;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn17340123 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn95094180;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn95094180 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn7401141;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn7401141 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn38898049;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn38898049 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn54354033;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn54354033 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn89374396;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn89374396 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn89402518;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn89402518 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn45496642;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn45496642 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn14682513;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn14682513 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn8801538;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn8801538 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn87246418;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn87246418 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn80199087;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn80199087 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn13133251;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn13133251 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn87561273;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn87561273 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn44506975;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn44506975 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn23385136;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn23385136 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn63185321;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn63185321 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn37634446;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn37634446 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn84155453;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn84155453 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn89671973;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn89671973 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn40404823;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn40404823 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn3306895;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn3306895 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn95255093;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn95255093 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn15481256;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn15481256 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn95214624;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn95214624 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn23463130;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn23463130 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn72989756;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn72989756 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn77214498;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn77214498 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn9679644;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn9679644 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn8374044;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn8374044 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn84077371;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn84077371 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn37369123;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn37369123 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn66339470;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn66339470 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn79312562;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn79312562 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn20296618;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn20296618 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn69471947;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn69471947 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn67948267;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn67948267 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn1967553;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn1967553 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn68894422;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn68894422 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn23180803;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn23180803 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn98954805;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn98954805 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn73014307;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn73014307 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn18600465;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn18600465 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn28381323;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn28381323 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn35312313;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn35312313 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn72486448;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn72486448 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn23977633;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn23977633 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn52019671;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn52019671 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn69703229;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn69703229 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn17269487;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn17269487 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn62016353;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn62016353 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn53269568;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn53269568 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn84193799;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn84193799 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn35742607;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn35742607 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn3395835;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn3395835 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn14033229;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn14033229 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn99839086;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn99839086 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn91919884;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn91919884 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn43683424;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn43683424 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn30890904;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn30890904 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn16384640;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn16384640 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn12188021;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn12188021 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn35816999;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn35816999 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn6308469;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn6308469 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn24724167;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn24724167 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn49877296;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn49877296 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn13859618;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn13859618 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn33820689;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn33820689 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn67264656;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn67264656 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn75035027;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn75035027 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn55436869;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn55436869 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn61217768;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn61217768 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn68740024;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn68740024 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn60974651;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn60974651 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn90717167;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn90717167 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn67390515;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn67390515 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn84706430;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn84706430 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn66873771;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn66873771 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn80168943;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn80168943 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn22728177;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn22728177 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn99485496;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn99485496 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn20970086;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn20970086 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn7511269;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn7511269 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn92410156;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn92410156 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn46357690;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn46357690 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn30807803;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn30807803 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn53175324;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn53175324 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn30596864;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn30596864 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn75916727;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn75916727 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn6263390;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn6263390 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn69632860;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn69632860 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn76028382;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn76028382 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn58284129;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn58284129 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn38003518;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn38003518 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn6796164;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn6796164 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn86766785;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn86766785 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn37197309;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn37197309 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn12291996;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn12291996 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn3657157;     nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn3657157 = nFPSkTaYjcmMgOrhfpxCsaHrJPwpSoXdfSmHuNKn43800658;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void BQoQYFWYRETKEvsIrehw67945999() {     double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm85662416 = -235225848;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm16139171 = -806930793;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm39387239 = 57572538;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm55975117 = -70135795;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm28678717 = -707623878;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm60023792 = -371501544;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm57814677 = -451972635;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm61072560 = -930402305;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm20606407 = -543330721;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm87735306 = -616240680;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm80246056 = 25915885;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm32352304 = -91974860;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm5726014 = -558797646;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm10319823 = -495581085;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm39650903 = -732340937;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm80413989 = -66604344;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm23317842 = -579879834;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm70223956 = -753981514;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm58122687 = -416849359;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm71209276 = -698687897;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm23341729 = -854153258;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm40905858 = -442855951;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm37894828 = -98807076;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm95826441 = -682672750;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm33782303 = -918151448;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm71711003 = -62059672;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm84259099 = -348444357;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm94289356 = -310950710;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm13173569 = -373996390;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm27453807 = -740339820;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm49056255 = -516094801;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm96474015 = -392473339;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm44431473 = 13951736;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm84201827 = 43334432;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm13114225 = -925072111;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm55227234 = -834083427;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm19353742 = 42443431;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm93139162 = -551205841;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm82275412 = 88494293;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm38488981 = -86970508;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm5564563 = -323869905;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm13624669 = -293951992;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm89414380 = 53315804;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm42198224 = -948186197;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm92374948 = -173981557;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm57445753 = 38786657;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm39075933 = -607479968;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm93348556 = -724009087;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm68956778 = -989274374;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm87639894 = -143428499;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm87314902 = -957688504;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm37769213 = -523036031;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm25960770 = -524271047;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm7160102 = -162601204;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm44604271 = 48785246;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm44756558 = -792369897;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm78244343 = -608123717;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm43560798 = -259754712;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm22192815 = -151984347;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm56967713 = -545564207;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm75764693 = 76942813;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm63525321 = -41021925;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm47898991 = -456405915;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm93152599 = -802990902;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm38679051 = -145879;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm83772040 = -581610776;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm87920830 = -5926596;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm21524187 = -502132079;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm97205598 = -570508974;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm84423668 = -898257511;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm61060247 = -9047776;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm30178679 = 71326007;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm87948543 = -742475808;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm19633707 = -229878852;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm65644713 = -274817992;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm9717060 = -460201266;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm51491478 = -396171756;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm95696603 = -150620879;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm3451493 = -408691193;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm76336549 = -856938106;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm32635071 = -454579704;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm90910542 = -624435271;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm25332579 = -321676337;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm25533674 = -130567892;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm40138905 = -782651316;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm11287042 = -993058770;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm70513246 = -868202293;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm37271371 = -823447061;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm39597557 = 94549186;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm68357666 = -32702214;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm76982890 = -125959710;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm75792944 = -697801857;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm70946348 = -299221495;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm25307699 = -365941500;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm62724287 = -63913322;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm42039242 = -182847981;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm65725678 = -837546078;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm96261781 = -143693294;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm3519173 = -848040318;    double hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm8602908 = -235225848;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm85662416 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm16139171;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm16139171 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm39387239;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm39387239 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm55975117;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm55975117 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm28678717;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm28678717 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm60023792;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm60023792 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm57814677;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm57814677 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm61072560;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm61072560 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm20606407;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm20606407 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm87735306;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm87735306 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm80246056;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm80246056 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm32352304;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm32352304 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm5726014;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm5726014 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm10319823;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm10319823 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm39650903;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm39650903 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm80413989;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm80413989 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm23317842;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm23317842 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm70223956;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm70223956 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm58122687;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm58122687 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm71209276;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm71209276 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm23341729;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm23341729 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm40905858;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm40905858 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm37894828;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm37894828 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm95826441;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm95826441 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm33782303;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm33782303 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm71711003;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm71711003 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm84259099;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm84259099 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm94289356;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm94289356 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm13173569;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm13173569 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm27453807;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm27453807 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm49056255;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm49056255 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm96474015;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm96474015 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm44431473;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm44431473 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm84201827;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm84201827 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm13114225;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm13114225 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm55227234;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm55227234 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm19353742;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm19353742 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm93139162;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm93139162 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm82275412;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm82275412 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm38488981;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm38488981 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm5564563;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm5564563 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm13624669;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm13624669 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm89414380;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm89414380 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm42198224;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm42198224 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm92374948;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm92374948 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm57445753;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm57445753 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm39075933;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm39075933 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm93348556;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm93348556 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm68956778;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm68956778 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm87639894;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm87639894 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm87314902;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm87314902 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm37769213;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm37769213 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm25960770;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm25960770 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm7160102;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm7160102 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm44604271;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm44604271 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm44756558;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm44756558 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm78244343;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm78244343 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm43560798;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm43560798 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm22192815;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm22192815 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm56967713;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm56967713 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm75764693;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm75764693 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm63525321;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm63525321 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm47898991;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm47898991 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm93152599;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm93152599 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm38679051;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm38679051 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm83772040;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm83772040 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm87920830;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm87920830 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm21524187;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm21524187 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm97205598;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm97205598 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm84423668;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm84423668 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm61060247;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm61060247 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm30178679;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm30178679 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm87948543;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm87948543 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm19633707;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm19633707 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm65644713;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm65644713 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm9717060;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm9717060 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm51491478;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm51491478 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm95696603;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm95696603 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm3451493;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm3451493 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm76336549;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm76336549 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm32635071;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm32635071 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm90910542;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm90910542 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm25332579;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm25332579 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm25533674;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm25533674 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm40138905;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm40138905 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm11287042;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm11287042 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm70513246;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm70513246 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm37271371;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm37271371 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm39597557;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm39597557 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm68357666;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm68357666 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm76982890;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm76982890 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm75792944;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm75792944 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm70946348;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm70946348 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm25307699;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm25307699 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm62724287;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm62724287 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm42039242;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm42039242 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm65725678;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm65725678 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm96261781;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm96261781 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm3519173;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm3519173 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm8602908;     hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm8602908 = hllZXlUzdztAkiKyWACKmPUeLAJcowPnOCfPfPsm85662416;}
// Junk Finished

// Junk Code By Peatreat & Thaisen's Gen
void RFxhNqGgGLHCTrmZwoei40793845() {     double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH95256895 = -707113261;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH52288100 = -627734959;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH51716930 = -830850538;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH48120840 = -72881880;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH42181969 = -175219735;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH66402271 = -154619420;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH97309994 = -532824337;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH79201356 = -660658009;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH5104891 = -179414738;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH69919700 = -191701251;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH10621139 = -915494572;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH70596424 = -670865700;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH34443806 = -195390783;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH57154717 = 63972305;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH98251735 = -415545672;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH70809380 = -230176148;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH73242135 = 87000243;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH15642420 = -947585524;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH18671957 = -160464556;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH19144826 = -964102663;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH23720203 = -64790676;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH53969523 = -187755800;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH39306252 = -802841615;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH21469208 = -767241118;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH91870979 = -755962501;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH95269429 = -723728625;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH90154564 = -873124283;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH68251406 = -534574048;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH16127524 = -50106584;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH59949741 = -706180905;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH82323743 = -708087437;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH35420240 = -357646777;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH64876618 = -841481190;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH66796979 = -252719932;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH88641095 = -638110578;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH44524178 = -340681445;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH87970761 = -248548;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH58978920 = -494473901;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH60121754 = -83382577;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH4282859 = 11790622;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH60746293 = -539517477;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH80128265 = -347341431;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH20364463 = -369911589;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH56245704 = -161342046;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH64367777 = -563614476;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH32345874 = -982168670;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH1489103 = -69655791;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH83890845 = -933952655;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH38011023 = -339152959;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH57818642 = -361437181;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH91115995 = -638435480;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH97991180 = -864815724;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH45238371 = 87766997;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH32997193 = -280750122;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH17073643 = -954373661;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH41287372 = -419357462;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH12981848 = -824893344;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH30247723 = 36390579;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH56249861 = -316919379;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH46912539 = -451491111;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH76247706 = -281495137;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH29058588 = -998250290;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH63073833 = -510551426;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH45155150 = -473233833;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH87595956 = -483613814;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH75200898 = -457847796;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH5719807 = -829384510;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH67646826 = -942670851;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH68513621 = -297917118;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH53727557 = 25135773;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH82838618 = -129927601;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH14263216 = -418525857;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH55520666 = -764202948;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH14389099 = -72255179;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH58398533 = -324585187;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH43591938 = -717449245;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH33605061 = -817844211;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH83060548 = -541499569;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH57101430 = -103626642;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH59525106 = -773793832;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH93780327 = -554072835;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH6263720 = -939171629;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH30240384 = -95421089;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH58308881 = -688669403;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH68833746 = 32254574;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH84332562 = -843271714;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH90181869 = -345413775;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH31879425 = -460731069;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH49723337 = -298346272;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH47353723 = -118753117;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH31542330 = -515788102;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH57723039 = 63360872;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH2729060 = -77554522;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH13209216 = -631891467;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH28035152 = -706714241;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH31687706 = -541267187;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH17054432 = -836790006;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH75209313 = -896677756;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH68649747 = -677728233;    double gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH89166878 = -707113261;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH95256895 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH52288100;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH52288100 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH51716930;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH51716930 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH48120840;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH48120840 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH42181969;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH42181969 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH66402271;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH66402271 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH97309994;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH97309994 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH79201356;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH79201356 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH5104891;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH5104891 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH69919700;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH69919700 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH10621139;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH10621139 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH70596424;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH70596424 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH34443806;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH34443806 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH57154717;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH57154717 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH98251735;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH98251735 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH70809380;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH70809380 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH73242135;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH73242135 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH15642420;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH15642420 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH18671957;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH18671957 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH19144826;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH19144826 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH23720203;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH23720203 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH53969523;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH53969523 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH39306252;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH39306252 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH21469208;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH21469208 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH91870979;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH91870979 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH95269429;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH95269429 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH90154564;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH90154564 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH68251406;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH68251406 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH16127524;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH16127524 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH59949741;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH59949741 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH82323743;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH82323743 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH35420240;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH35420240 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH64876618;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH64876618 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH66796979;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH66796979 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH88641095;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH88641095 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH44524178;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH44524178 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH87970761;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH87970761 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH58978920;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH58978920 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH60121754;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH60121754 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH4282859;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH4282859 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH60746293;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH60746293 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH80128265;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH80128265 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH20364463;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH20364463 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH56245704;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH56245704 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH64367777;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH64367777 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH32345874;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH32345874 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH1489103;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH1489103 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH83890845;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH83890845 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH38011023;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH38011023 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH57818642;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH57818642 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH91115995;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH91115995 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH97991180;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH97991180 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH45238371;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH45238371 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH32997193;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH32997193 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH17073643;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH17073643 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH41287372;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH41287372 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH12981848;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH12981848 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH30247723;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH30247723 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH56249861;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH56249861 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH46912539;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH46912539 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH76247706;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH76247706 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH29058588;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH29058588 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH63073833;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH63073833 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH45155150;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH45155150 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH87595956;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH87595956 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH75200898;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH75200898 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH5719807;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH5719807 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH67646826;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH67646826 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH68513621;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH68513621 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH53727557;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH53727557 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH82838618;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH82838618 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH14263216;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH14263216 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH55520666;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH55520666 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH14389099;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH14389099 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH58398533;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH58398533 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH43591938;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH43591938 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH33605061;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH33605061 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH83060548;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH83060548 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH57101430;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH57101430 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH59525106;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH59525106 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH93780327;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH93780327 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH6263720;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH6263720 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH30240384;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH30240384 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH58308881;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH58308881 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH68833746;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH68833746 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH84332562;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH84332562 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH90181869;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH90181869 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH31879425;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH31879425 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH49723337;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH49723337 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH47353723;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH47353723 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH31542330;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH31542330 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH57723039;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH57723039 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH2729060;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH2729060 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH13209216;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH13209216 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH28035152;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH28035152 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH31687706;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH31687706 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH17054432;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH17054432 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH75209313;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH75209313 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH68649747;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH68649747 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH89166878;     gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH89166878 = gleWcGnuqChIgEyPTVSfTcGbzOaIxPNFaHdfabFH95256895;}
// Junk Finished
